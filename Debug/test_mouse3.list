
test_mouse3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014700  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080148a0  080148a0  000248a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d68  08014d68  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014d68  08014d68  00024d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d70  08014d70  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d70  08014d70  00024d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d74  08014d74  00024d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08014d78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001249c  200001e0  08014f58  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001267c  08014f58  0003267c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027690  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045bb  00000000  00000000  000578a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  0005be60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  0005d470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bb43  00000000  00000000  0005e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016089  00000000  00000000  0007a3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000969fa  00000000  00000000  00090434  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006850  00000000  00000000  00126eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014888 	.word	0x08014888

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08014888 	.word	0x08014888

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b40      	ldr	r3, [pc, #256]	; (800106c <MX_ADC1_Init+0x114>)
 8000f6c:	4a40      	ldr	r2, [pc, #256]	; (8001070 <MX_ADC1_Init+0x118>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <MX_ADC1_Init+0x114>)
 8000f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f78:	4b3c      	ldr	r3, [pc, #240]	; (800106c <MX_ADC1_Init+0x114>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <MX_ADC1_Init+0x114>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b39      	ldr	r3, [pc, #228]	; (800106c <MX_ADC1_Init+0x114>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <MX_ADC1_Init+0x114>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <MX_ADC1_Init+0x114>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <MX_ADC1_Init+0x114>)
 8000f9a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC1;
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <MX_ADC1_Init+0x114>)
 8000fa2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_ADC1_Init+0x114>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <MX_ADC1_Init+0x114>)
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_ADC1_Init+0x114>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_ADC1_Init+0x114>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc2:	482a      	ldr	r0, [pc, #168]	; (800106c <MX_ADC1_Init+0x114>)
 8000fc4:	f00c fdc4 	bl	800db50 <HAL_ADC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000fce:	f001 fce7 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_ADC1_Init+0x114>)
 8000fe4:	f00c feea 	bl	800ddbc <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000fee:	f001 fcd7 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481b      	ldr	r0, [pc, #108]	; (800106c <MX_ADC1_Init+0x114>)
 8001000:	f00c fedc 	bl	800ddbc <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800100a:	f001 fcc9 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800100e:	2302      	movs	r3, #2
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001012:	2303      	movs	r3, #3
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_ADC1_Init+0x114>)
 800101c:	f00c fece 	bl	800ddbc <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001026:	f001 fcbb 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800102a:	2303      	movs	r3, #3
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800102e:	2304      	movs	r3, #4
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_ADC1_Init+0x114>)
 8001038:	f00c fec0 	bl	800ddbc <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001042:	f001 fcad 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001046:	2304      	movs	r3, #4
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800104a:	2305      	movs	r3, #5
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_ADC1_Init+0x114>)
 8001054:	f00c feb2 	bl	800ddbc <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800105e:	f001 fc9f 	bl	80029a0 <Error_Handler>
  }

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000234 	.word	0x20000234
 8001070:	40012000 	.word	0x40012000

08001074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <HAL_ADC_MspInit+0xdc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d158      	bne.n	8001148 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_ADC_MspInit+0xe0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = sens_fr_Pin|sens_dl_Pin|sens_dr_Pin|sens_fl_Pin 
 80010ce:	231f      	movs	r3, #31
 80010d0:	617b      	str	r3, [r7, #20]
                          |sens_batt_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	481d      	ldr	r0, [pc, #116]	; (8001158 <HAL_ADC_MspInit+0xe4>)
 80010e2:	f00e f881 	bl	800f1e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_ADC_MspInit+0xe8>)
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_ADC_MspInit+0xec>)
 80010ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_ADC_MspInit+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_ADC_MspInit+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_ADC_MspInit+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001114:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001120:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001124:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <HAL_ADC_MspInit+0xe8>)
 800112e:	f00d fa07 	bl	800e540 <HAL_DMA_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001138:	f001 fc32 	bl	80029a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
 8001142:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_ADC_MspInit+0xe8>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40012000 	.word	0x40012000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	2000027c 	.word	0x2000027c
 8001160:	40026410 	.word	0x40026410

08001164 <adjustment_slalom_R2>:
	diagonal(SEARCH_ACCEL,0.5,0.5);
	v_L90();
	diagonal(SEARCH_ACCEL,0.5,0.0);
	run_mode = NON_CON_MODE;log_flag = false;
}
void adjustment_slalom_R2(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	len_mouse = 0.0; degree = 0.0;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <adjustment_slalom_R2+0x5c>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <adjustment_slalom_R2+0x60>)
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
	log_flag = true;log_count = 0;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <adjustment_slalom_R2+0x64>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <adjustment_slalom_R2+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
	straight(HALF_SECTION,SEARCH_ACCEL,0.5,0.5);
 8001184:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001188:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800118c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001190:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80011d0 <adjustment_slalom_R2+0x6c>
 8001194:	f003 f978 	bl	8004488 <straight>
	long_turn_R90();
 8001198:	f004 fd1a 	bl	8005bd0 <long_turn_R90>
	straight(HALF_SECTION,SEARCH_ACCEL,0.5,0.0);
 800119c:	eddf 1a0d 	vldr	s3, [pc, #52]	; 80011d4 <adjustment_slalom_R2+0x70>
 80011a0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80011a4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80011a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80011d0 <adjustment_slalom_R2+0x6c>
 80011ac:	f003 f96c 	bl	8004488 <straight>
	run_mode = NON_CON_MODE;log_flag = false;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <adjustment_slalom_R2+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <adjustment_slalom_R2+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200123b8 	.word	0x200123b8
 80011c4:	2000f4a8 	.word	0x2000f4a8
 80011c8:	2000f498 	.word	0x2000f498
 80011cc:	2000d238 	.word	0x2000d238
 80011d0:	42340000 	.word	0x42340000
 80011d4:	00000000 	.word	0x00000000
 80011d8:	2000a170 	.word	0x2000a170

080011dc <adjustment_slalom_L2>:
void adjustment_slalom_L2(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	len_mouse = 0.0; degree = 0.0;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <adjustment_slalom_L2+0x5c>)
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <adjustment_slalom_L2+0x60>)
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
	log_flag = true;log_count = 0;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <adjustment_slalom_L2+0x64>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <adjustment_slalom_L2+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
	straight(HALF_SECTION,SEARCH_ACCEL,0.5,0.5);
 80011fc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001200:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001204:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001208:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001248 <adjustment_slalom_L2+0x6c>
 800120c:	f003 f93c 	bl	8004488 <straight>
	long_turn_L90();
 8001210:	f004 fe82 	bl	8005f18 <long_turn_L90>
	straight(HALF_SECTION,SEARCH_ACCEL,0.5,0.0);
 8001214:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800124c <adjustment_slalom_L2+0x70>
 8001218:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800121c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001220:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001248 <adjustment_slalom_L2+0x6c>
 8001224:	f003 f930 	bl	8004488 <straight>
	run_mode = NON_CON_MODE;log_flag = false;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <adjustment_slalom_L2+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <adjustment_slalom_L2+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200123b8 	.word	0x200123b8
 800123c:	2000f4a8 	.word	0x2000f4a8
 8001240:	2000f498 	.word	0x2000f498
 8001244:	2000d238 	.word	0x2000d238
 8001248:	42340000 	.word	0x42340000
 800124c:	00000000 	.word	0x00000000
 8001250:	2000a170 	.word	0x2000a170

08001254 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_DMA_Init+0x5c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_DMA_Init+0x5c>)
 8001264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_DMA_Init+0x5c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2101      	movs	r1, #1
 800127a:	2038      	movs	r0, #56	; 0x38
 800127c:	f00d f929 	bl	800e4d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001280:	2038      	movs	r0, #56	; 0x38
 8001282:	f00d f942 	bl	800e50a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	203a      	movs	r0, #58	; 0x3a
 800128c:	f00d f921 	bl	800e4d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001290:	203a      	movs	r0, #58	; 0x3a
 8001292:	f00d f93a 	bl	800e50a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2101      	movs	r1, #1
 800129a:	203b      	movs	r0, #59	; 0x3b
 800129c:	f00d f919 	bl	800e4d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012a0:	203b      	movs	r0, #59	; 0x3b
 80012a2:	f00d f932 	bl	800e50a <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <save_data>:
	HAL_FLASH_Unlock();
	eraseFlash();
	HAL_FLASH_Lock();
}

void save_data(){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e028      	b.n	8001312 <save_data+0x5e>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	e01f      	b.n	8001306 <save_data+0x52>
			save_map [x][y] = map[x][y];
 80012c6:	4917      	ldr	r1, [pc, #92]	; (8001324 <save_data+0x70>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	011a      	lsls	r2, r3, #4
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80012d4:	4914      	ldr	r1, [pc, #80]	; (8001328 <save_data+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	011a      	lsls	r2, r3, #4
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4602      	mov	r2, r0
 80012e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			save_wall[x][y] = wall[x][y];
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <save_data+0x78>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	441a      	add	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	490f      	ldr	r1, [pc, #60]	; (8001330 <save_data+0x7c>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	4411      	add	r1, r2
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	440a      	add	r2, r1
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	701a      	strb	r2, [r3, #0]
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d9dc      	bls.n	80012c6 <save_data+0x12>
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3301      	adds	r3, #1
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d9d3      	bls.n	80012c0 <save_data+0xc>
		}
	}
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200002e4 	.word	0x200002e4
 8001328:	2000d23c 	.word	0x2000d23c
 800132c:	2000d08c 	.word	0x2000d08c
 8001330:	2000d440 	.word	0x2000d440

08001334 <write_save_data>:

void write_save_data(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001338:	f00d fcc4 	bl	800ecc4 <HAL_FLASH_Unlock>
	eraseFlash();
 800133c:	f000 f93c 	bl	80015b8 <eraseFlash>
	write_map_flash();
 8001340:	f000 f840 	bl	80013c4 <write_map_flash>
	write_wall_flash();
 8001344:	f000 f8d8 	bl	80014f8 <write_wall_flash>
	HAL_FLASH_Lock();
 8001348:	f00d fcde 	bl	800ed08 <HAL_FLASH_Lock>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <read_save_data>:

void read_save_data(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	read_map_flash();
 8001354:	f000 f806 	bl	8001364 <read_map_flash>
	read_wall_flash();
 8001358:	f000 f864 	bl	8001424 <read_wall_flash>
	save_data();
 800135c:	f7ff ffaa 	bl	80012b4 <save_data>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <read_map_flash>:

void read_map_flash(){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e020      	b.n	80013b2 <read_map_flash+0x4e>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	e017      	b.n	80013a6 <read_map_flash+0x42>
			uint32_t address = MAP_START_ADDRESS + (x << 4) + y;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	011a      	lsls	r2, r3, #4
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001382:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8001386:	607b      	str	r3, [r7, #4]
			loadFlash(address,&map[x][y],1);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	011a      	lsls	r2, r3, #4
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <read_map_flash+0x5c>)
 8001394:	4413      	add	r3, r2
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f937 	bl	800160e <loadFlash>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d9e4      	bls.n	8001376 <read_map_flash+0x12>
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d9db      	bls.n	8001370 <read_map_flash+0xc>
		}
	}
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002e4 	.word	0x200002e4

080013c4 <write_map_flash>:

void write_map_flash(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e01f      	b.n	8001410 <write_map_flash+0x4c>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	e016      	b.n	8001404 <write_map_flash+0x40>
			uint32_t address = MAP_START_ADDRESS + (x << 4) + y;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	011a      	lsls	r2, r3, #4
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013e2:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 80013e6:	607b      	str	r3, [r7, #4]
			writeFlash(address,&save_map[x][y]);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	011a      	lsls	r2, r3, #4
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <write_map_flash+0x5c>)
 80013f4:	4413      	add	r3, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8f4 	bl	80015e6 <writeFlash>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d9e5      	bls.n	80013d6 <write_map_flash+0x12>
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d9dc      	bls.n	80013d0 <write_map_flash+0xc>
		}
	}

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000d23c 	.word	0x2000d23c

08001424 <read_wall_flash>:

void read_wall_flash(){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e05a      	b.n	80014e6 <read_wall_flash+0xc2>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	e051      	b.n	80014da <read_wall_flash+0xb6>
			uint32_t address = WALL_START_ADDRESS + (x << 4) + y;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	011a      	lsls	r2, r3, #4
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001442:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8001446:	607b      	str	r3, [r7, #4]
			uint16_t data = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	807b      	strh	r3, [r7, #2]
			loadFlash(address,&data,2);
 800144c:	1cbb      	adds	r3, r7, #2
 800144e:	2202      	movs	r2, #2
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8db 	bl	800160e <loadFlash>
			wall[x][y].north = (data >> 6) & 0x03;
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	b29b      	uxth	r3, r3
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <read_wall_flash+0xd0>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	441a      	add	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	441a      	add	r2, r3
 8001470:	7813      	ldrb	r3, [r2, #0]
 8001472:	f361 0301 	bfi	r3, r1, #0, #2
 8001476:	7013      	strb	r3, [r2, #0]
			wall[x][y].east  = (data >> 4) & 0x03;
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	b29b      	uxth	r3, r3
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	b2d9      	uxtb	r1, r3
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <read_wall_flash+0xd0>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	441a      	add	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	441a      	add	r2, r3
 8001490:	7813      	ldrb	r3, [r2, #0]
 8001492:	f361 0383 	bfi	r3, r1, #2, #2
 8001496:	7013      	strb	r3, [r2, #0]
			wall[x][y].south = (data >> 2) & 0x03;
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2d9      	uxtb	r1, r3
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <read_wall_flash+0xd0>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	441a      	add	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	441a      	add	r2, r3
 80014b0:	7813      	ldrb	r3, [r2, #0]
 80014b2:	f361 1305 	bfi	r3, r1, #4, #2
 80014b6:	7013      	strb	r3, [r2, #0]
			wall[x][y].west  = (data >> 0) & 0x03;
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <read_wall_flash+0xd0>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	441a      	add	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	441a      	add	r2, r3
 80014cc:	7813      	ldrb	r3, [r2, #0]
 80014ce:	f361 1387 	bfi	r3, r1, #6, #2
 80014d2:	7013      	strb	r3, [r2, #0]
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d9aa      	bls.n	8001436 <read_wall_flash+0x12>
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d9a1      	bls.n	8001430 <read_wall_flash+0xc>
		}
	}
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000d440 	.word	0x2000d440

080014f8 <write_wall_flash>:

void write_wall_flash(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e050      	b.n	80015a6 <write_wall_flash+0xae>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	e047      	b.n	800159a <write_wall_flash+0xa2>
			uint32_t address = WALL_START_ADDRESS + (x << 4) + y;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	011a      	lsls	r2, r3, #4
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001516:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800151a:	607b      	str	r3, [r7, #4]
			uint16_t data =((uint8_t)(save_wall[x][y].north) << 6) | ((uint8_t)(save_wall[x][y].east) << 4) | ((uint8_t)(save_wall[x][y].south) << 2) | ((uint8_t)(save_wall[x][y].west) << 0);
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <write_wall_flash+0xbc>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	441a      	add	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	b21a      	sxth	r2, r3
 8001534:	491f      	ldr	r1, [pc, #124]	; (80015b4 <write_wall_flash+0xbc>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4419      	add	r1, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	440b      	add	r3, r1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21a      	sxth	r2, r3
 8001550:	4918      	ldr	r1, [pc, #96]	; (80015b4 <write_wall_flash+0xbc>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4419      	add	r1, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	440b      	add	r3, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21a      	sxth	r2, r3
 800156c:	4911      	ldr	r1, [pc, #68]	; (80015b4 <write_wall_flash+0xbc>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4419      	add	r1, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	440b      	add	r3, r1
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21b      	sxth	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	807b      	strh	r3, [r7, #2]
			writeFlash(address,&data);
 800158a:	1cbb      	adds	r3, r7, #2
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f829 	bl	80015e6 <writeFlash>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d9b4      	bls.n	800150a <write_wall_flash+0x12>
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d9ab      	bls.n	8001504 <write_wall_flash+0xc>
		}
	}
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000d08c 	.word	0x2000d08c

080015b8 <eraseFlash>:

void eraseFlash( void )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;	// select sector
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_7;		       // set selector7
 80015c2:	2307      	movs	r3, #7
 80015c4:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;		// set to erase one sector
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;	// set voltage range (2.7 to 3.6V)
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]

	uint32_t pageError = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 80015d2:	463a      	mov	r2, r7
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f00d fce3 	bl	800efa4 <HAL_FLASHEx_Erase>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <writeFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data write data
 * @param uint32_t size write data size
*/
void writeFlash(uint32_t address, uint16_t *data )
{
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();		// unlock flash

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *data); // write byte
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f04f 0400 	mov.w	r4, #0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	2000      	movs	r0, #0
 8001602:	f00d fb0b 	bl	800ec1c <HAL_FLASH_Program>

	//HAL_FLASH_Lock();		// lock flash
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <loadFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data read data
 * @param uint32_t size read data size
*/
void loadFlash(uint32_t address,uint16_t *data, uint32_t size )
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint16_t*) address, size); // copy data
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4619      	mov	r1, r3
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f010 fce5 	bl	8011ff0 <memcpy>
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_GPIO_Init+0xc4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <MX_GPIO_Init+0xc4>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_GPIO_Init+0xc4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <MX_GPIO_Init+0xc4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <MX_GPIO_Init+0xc4>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MX_GPIO_Init+0xc4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|LENC_CS_Pin|photo_dl_Pin|RENC_CS_Pin 
 800167e:	2200      	movs	r2, #0
 8001680:	f24c 61c8 	movw	r1, #50888	; 0xc6c8
 8001684:	481c      	ldr	r0, [pc, #112]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001686:	f00d ff49 	bl	800f51c <HAL_GPIO_WritePin>
                          |photo_fr_Pin|photo_dr_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, photo_fl_Pin|LED5_Pin|LED4_Pin|LED3_Pin 
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 4179 	mov.w	r1, #63744	; 0xf900
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_GPIO_Init+0xcc>)
 8001692:	f00d ff43 	bl	800f51c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|LENC_CS_Pin|photo_dl_Pin|RENC_CS_Pin 
 8001696:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
 800169a:	60fb      	str	r3, [r7, #12]
                          |photo_fr_Pin|photo_dr_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_GPIO_Init+0xc8>)
 80016b0:	f00d fd9a 	bl	800f1e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = photo_fl_Pin|LED5_Pin|LED4_Pin|LED3_Pin 
 80016b4:	f44f 4379 	mov.w	r3, #63744	; 0xf900
 80016b8:	60fb      	str	r3, [r7, #12]
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_GPIO_Init+0xcc>)
 80016ce:	f00d fd8b 	bl	800f1e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0xc8>)
 80016e8:	f00d fd7e 	bl	800f1e8 <HAL_GPIO_Init>

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020000 	.word	0x40020000

08001700 <MY_LED>:

#include "index.h"
#include "glob_var.h"
#include "mymacro.h"

void MY_LED(uint8_t led_num){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (led_num >> 5) & 0x01);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <MY_LED+0xa0>)
 800171e:	f00d fefd 	bl	800f51c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (led_num >> 4) & 0x01);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	481b      	ldr	r0, [pc, #108]	; (80017a4 <MY_LED+0xa4>)
 8001736:	f00d fef1 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (led_num >> 3) & 0x01);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174c:	4815      	ldr	r0, [pc, #84]	; (80017a4 <MY_LED+0xa4>)
 800174e:	f00d fee5 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (led_num >> 2) & 0x01);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MY_LED+0xa4>)
 8001766:	f00d fed9 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (led_num >> 1) & 0x01);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MY_LED+0xa4>)
 800177e:	f00d fecd 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (led_num >> 0) & 0x01);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MY_LED+0xa4>)
 8001792:	f00d fec3 	bl	800f51c <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020000 	.word	0x40020000

080017a8 <check_LED>:

void check_LED(_Bool is_enable){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	switch(is_enable){
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <check_LED+0x1e>
		case true	:
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, true);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <check_LED+0x34>)
 80017c0:	f00d feac 	bl	800f51c <HAL_GPIO_WritePin>
			break;
 80017c4:	e006      	b.n	80017d4 <check_LED+0x2c>
		case false	:
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, false);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <check_LED+0x34>)
 80017ce:	f00d fea5 	bl	800f51c <HAL_GPIO_WritePin>
			break;
 80017d2:	bf00      	nop
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020400 	.word	0x40020400

080017e0 <check_LED_toggle>:

void check_LED_toggle(int count){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	for(int i = 0 ;i < count*2 ; i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e00a      	b.n	8001804 <check_LED_toggle+0x24>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80017ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <check_LED_toggle+0x38>)
 80017f4:	f00d feab 	bl	800f54e <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80017f8:	2032      	movs	r0, #50	; 0x32
 80017fa:	f00c f987 	bl	800db0c <HAL_Delay>
	for(int i = 0 ;i < count*2 ; i++){
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbef      	blt.n	80017ee <check_LED_toggle+0xe>
	}
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40020400 	.word	0x40020400

0800181c <read_button>:

void read_button(){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	int is_button = (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 8001822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001826:	4829      	ldr	r0, [pc, #164]	; (80018cc <read_button+0xb0>)
 8001828:	f00d fe60 	bl	800f4ec <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	603b      	str	r3, [r7, #0]

	if( is_button == true ){
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d138      	bne.n	80018a8 <read_button+0x8c>
		int push_time = 0; 	check_LED(false);
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ffb4 	bl	80017a8 <check_LED>
		while( HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) ){
 8001840:	e00f      	b.n	8001862 <read_button+0x46>
			push_time++;	HAL_Delay(10);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	200a      	movs	r0, #10
 800184a:	f00c f95f 	bl	800db0c <HAL_Delay>
			if(push_time > 100 && is_mode_enable == false)	check_LED(true);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	dd06      	ble.n	8001862 <read_button+0x46>
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <read_button+0xb4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <read_button+0x46>
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff ffa3 	bl	80017a8 <check_LED>
		while( HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) ){
 8001862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001866:	4819      	ldr	r0, [pc, #100]	; (80018cc <read_button+0xb0>)
 8001868:	f00d fe40 	bl	800f4ec <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1e7      	bne.n	8001842 <read_button+0x26>
		}
		if(is_mode_enable){
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <read_button+0xb4>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <read_button+0x66>
			is_mode_enable = false;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <read_button+0xb4>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	e012      	b.n	80018a8 <read_button+0x8c>
		}else{
			if(push_time <= 100)	mouse_mode = (mouse_mode == 31) ? 0 : mouse_mode + 1 ;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	dc0c      	bgt.n	80018a2 <read_button+0x86>
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <read_button+0xb8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b1f      	cmp	r3, #31
 800188e:	d004      	beq.n	800189a <read_button+0x7e>
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <read_button+0xb8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	e000      	b.n	800189c <read_button+0x80>
 800189a:	2300      	movs	r3, #0
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <read_button+0xb8>)
 800189e:	7013      	strb	r3, [r2, #0]
 80018a0:	e002      	b.n	80018a8 <read_button+0x8c>
			else	is_mode_enable = true;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <read_button+0xb4>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		}
	}
	MY_LED(((uint8_t)is_mode_enable) << 5 |mouse_mode);
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <read_button+0xb4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	015b      	lsls	r3, r3, #5
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <read_button+0xb8>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff1f 	bl	8001700 <MY_LED>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020400 	.word	0x40020400
 80018d0:	200002e0 	.word	0x200002e0
 80018d4:	200004e8 	.word	0x200004e8

080018d8 <print_log>:

void print_log(){
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af06      	add	r7, sp, #24
	printf("Spd_Kp,%2.4lf,Spd_Ki,%2.4lf,Spd_Kd,%2.4lf\n",SPEED_P_GAIN,SPEED_I_GAIN,SPEED_D_GAIN);	HAL_Delay(10);
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80018ec:	a460      	add	r4, pc, #384	; (adr r4, 8001a70 <print_log+0x198>)
 80018ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018f2:	e9cd 3400 	strd	r3, r4, [sp]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <print_log+0x170>)
 80018fc:	4853      	ldr	r0, [pc, #332]	; (8001a4c <print_log+0x174>)
 80018fe:	f010 ffe7 	bl	80128d0 <iprintf>
 8001902:	200a      	movs	r0, #10
 8001904:	f00c f902 	bl	800db0c <HAL_Delay>
	printf("Omg_Kp,%2.4lf,Omg_Ki,%2.4lf,Omg_Kd,%2.4lf\n\n\n",OMEGA_P_GAIN,OMEGA_I_GAIN,OMEGA_D_GAIN);	HAL_Delay(10);
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001914:	a448      	add	r4, pc, #288	; (adr r4, 8001a38 <print_log+0x160>)
 8001916:	e9d4 3400 	ldrd	r3, r4, [r4]
 800191a:	e9cd 3400 	strd	r3, r4, [sp]
 800191e:	a348      	add	r3, pc, #288	; (adr r3, 8001a40 <print_log+0x168>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	484a      	ldr	r0, [pc, #296]	; (8001a50 <print_log+0x178>)
 8001926:	f010 ffd3 	bl	80128d0 <iprintf>
 800192a:	200a      	movs	r0, #10
 800192c:	f00c f8ee 	bl	800db0c <HAL_Delay>
	printf("time,tar_speed,speed,tar_omega,omega,");	HAL_Delay(10);
 8001930:	4848      	ldr	r0, [pc, #288]	; (8001a54 <print_log+0x17c>)
 8001932:	f010 ffcd 	bl	80128d0 <iprintf>
 8001936:	200a      	movs	r0, #10
 8001938:	f00c f8e8 	bl	800db0c <HAL_Delay>
	printf("x_acc,y_acc,z_acc\n");	HAL_Delay(10);
 800193c:	4846      	ldr	r0, [pc, #280]	; (8001a58 <print_log+0x180>)
 800193e:	f011 f83b 	bl	80129b8 <puts>
 8001942:	200a      	movs	r0, #10
 8001944:	f00c f8e2 	bl	800db0c <HAL_Delay>
	//printf("sens_fr,sens_fl,sens_r,sens_l\n"); 			HAL_Delay(10);
	for(int i = 0;i < LOG_COUNT;i++){
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	e06b      	b.n	8001a26 <print_log+0x14e>
		printf("%4d,%.3lf,%.3lf,%.3lf,%.3lf,",i,speed_log[0][i],speed_log[1][i],omega_log[0][i],omega_log[1][i]);	HAL_Delay(10);
 800194e:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <print_log+0x184>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	4682      	mov	sl, r0
 8001960:	468b      	mov	fp, r1
 8001962:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <print_log+0x184>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdf1 	bl	8000558 <__aeabi_f2d>
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <print_log+0x188>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fde7 	bl	8000558 <__aeabi_f2d>
 800198a:	4680      	mov	r8, r0
 800198c:	4689      	mov	r9, r1
 800198e:	4a34      	ldr	r2, [pc, #208]	; (8001a60 <print_log+0x188>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fddb 	bl	8000558 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019ae:	e9cd 4500 	strd	r4, r5, [sp]
 80019b2:	4652      	mov	r2, sl
 80019b4:	465b      	mov	r3, fp
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	482a      	ldr	r0, [pc, #168]	; (8001a64 <print_log+0x18c>)
 80019ba:	f010 ff89 	bl	80128d0 <iprintf>
 80019be:	200a      	movs	r0, #10
 80019c0:	f00c f8a4 	bl	800db0c <HAL_Delay>
		printf("%.3lf,%.3lf,%.3lf\n",accel_log[0][i],accel_log[1][i],accel_log[2][i]);								HAL_Delay(10);
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <print_log+0x190>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdc2 	bl	8000558 <__aeabi_f2d>
 80019d4:	4680      	mov	r8, r0
 80019d6:	4689      	mov	r9, r1
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <print_log+0x190>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdb6 	bl	8000558 <__aeabi_f2d>
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <print_log+0x190>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdaa 	bl	8000558 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a0c:	e9cd 4500 	strd	r4, r5, [sp]
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	4815      	ldr	r0, [pc, #84]	; (8001a6c <print_log+0x194>)
 8001a16:	f010 ff5b 	bl	80128d0 <iprintf>
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f00c f876 	bl	800db0c <HAL_Delay>
	for(int i = 0;i < LOG_COUNT;i++){
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a2c:	db8f      	blt.n	800194e <print_log+0x76>
		//printf("%4d,%4d,%4d,%4d\n",sens_log[0][i],sens_log[1][i],sens_log[2][i],sens_log[3][i]); 					HAL_Delay(10);
	}
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a38:	47ae147b 	.word	0x47ae147b
 8001a3c:	3f847ae1 	.word	0x3f847ae1
 8001a40:	33333333 	.word	0x33333333
 8001a44:	3fe33333 	.word	0x3fe33333
 8001a48:	402e0000 	.word	0x402e0000
 8001a4c:	080148a0 	.word	0x080148a0
 8001a50:	080148cc 	.word	0x080148cc
 8001a54:	080148fc 	.word	0x080148fc
 8001a58:	08014924 	.word	0x08014924
 8001a5c:	20004388 	.word	0x20004388
 8001a60:	200004f8 	.word	0x200004f8
 8001a64:	08014938 	.word	0x08014938
 8001a68:	2000a17c 	.word	0x2000a17c
 8001a6c:	08014958 	.word	0x08014958
 8001a70:	9999999a 	.word	0x9999999a
 8001a74:	3fc99999 	.word	0x3fc99999

08001a78 <print_irsens_log>:
	for(int i = 0;i < LOG_COUNT;i++){
		printf("%4d,%4d,%4d,%d,%d\n",i,position_log[0][i],position_log[1][i],duty_log[0][i],duty_log[1][i]);	HAL_Delay(10);
	}
}

void print_irsens_log() {
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af04      	add	r7, sp, #16
	printf("sen_fr.value,sen_fl.value,sen_r.value,sen_l.value\n");
 8001a7e:	4820      	ldr	r0, [pc, #128]	; (8001b00 <print_irsens_log+0x88>)
 8001a80:	f010 ff9a 	bl	80129b8 <puts>
	for(int i = 0;i < LOG_COUNT;i++){
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e032      	b.n	8001af0 <print_irsens_log+0x78>
		printf("%4d,%f,%4d,%4d,%d,%d\n",i,length_log[i],sens_log[0][i],sens_log[1][i],sens_log[2][i],sens_log[3][i]);	HAL_Delay(10);
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <print_irsens_log+0x8c>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_f2d>
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	460e      	mov	r6, r1
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <print_irsens_log+0x90>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <print_irsens_log+0x90>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <print_irsens_log+0x90>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <print_irsens_log+0x90>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9402      	str	r4, [sp, #8]
 8001ad4:	9001      	str	r0, [sp, #4]
 8001ad6:	9100      	str	r1, [sp, #0]
 8001ad8:	462a      	mov	r2, r5
 8001ada:	4633      	mov	r3, r6
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <print_irsens_log+0x94>)
 8001ae0:	f010 fef6 	bl	80128d0 <iprintf>
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f00c f811 	bl	800db0c <HAL_Delay>
	for(int i = 0;i < LOG_COUNT;i++){
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af6:	dbc8      	blt.n	8001a8a <print_irsens_log+0x12>
	}
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	080149ac 	.word	0x080149ac
 8001b04:	2000f4ac 	.word	0x2000f4ac
 8001b08:	2000d540 	.word	0x2000d540
 8001b0c:	080149e0 	.word	0x080149e0

08001b10 <disp_map>:

void disp_map(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
	for( int y = MAZE_SIZE_Y - 1 ; y >= 0 ; y-- ){
 8001b16:	230f      	movs	r3, #15
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e062      	b.n	8001be2 <disp_map+0xd2>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	e01b      	b.n	8001b5a <disp_map+0x4a>
			if(wall[x][y].north == WALL)	{	printf("+---");	HAL_Delay(10);	}
 8001b22:	4a3c      	ldr	r2, [pc, #240]	; (8001c14 <disp_map+0x104>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	441a      	add	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d106      	bne.n	8001b48 <disp_map+0x38>
 8001b3a:	4837      	ldr	r0, [pc, #220]	; (8001c18 <disp_map+0x108>)
 8001b3c:	f010 fec8 	bl	80128d0 <iprintf>
 8001b40:	200a      	movs	r0, #10
 8001b42:	f00b ffe3 	bl	800db0c <HAL_Delay>
 8001b46:	e005      	b.n	8001b54 <disp_map+0x44>
			else							{	printf("+   "); HAL_Delay(10);	}
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <disp_map+0x10c>)
 8001b4a:	f010 fec1 	bl	80128d0 <iprintf>
 8001b4e:	200a      	movs	r0, #10
 8001b50:	f00b ffdc 	bl	800db0c <HAL_Delay>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	dde0      	ble.n	8001b22 <disp_map+0x12>
			//if(x == MAZE_SIZE_X - 1)		{	printf("+\n");	HAL_Delay(5);	}
		}
		printf("+\n");	HAL_Delay(10);
 8001b60:	482f      	ldr	r0, [pc, #188]	; (8001c20 <disp_map+0x110>)
 8001b62:	f010 ff29 	bl	80129b8 <puts>
 8001b66:	200a      	movs	r0, #10
 8001b68:	f00b ffd0 	bl	800db0c <HAL_Delay>

		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	e02b      	b.n	8001bca <disp_map+0xba>
			if(wall[x][y].west == WALL)		{	printf("|%3d",map[x][y]);	HAL_Delay(10);	}
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <disp_map+0x104>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	441a      	add	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10e      	bne.n	8001ba8 <disp_map+0x98>
 8001b8a:	4926      	ldr	r1, [pc, #152]	; (8001c24 <disp_map+0x114>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	011a      	lsls	r2, r3, #4
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4823      	ldr	r0, [pc, #140]	; (8001c28 <disp_map+0x118>)
 8001b9c:	f010 fe98 	bl	80128d0 <iprintf>
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f00b ffb3 	bl	800db0c <HAL_Delay>
 8001ba6:	e00d      	b.n	8001bc4 <disp_map+0xb4>
			else							{	printf(" %3d",map[x][y]);	HAL_Delay(10);	}
 8001ba8:	491e      	ldr	r1, [pc, #120]	; (8001c24 <disp_map+0x114>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	011a      	lsls	r2, r3, #4
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <disp_map+0x11c>)
 8001bba:	f010 fe89 	bl	80128d0 <iprintf>
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f00b ffa4 	bl	800db0c <HAL_Delay>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	ddd0      	ble.n	8001b72 <disp_map+0x62>
			//if(x == MAZE_SIZE_X - 1)		{	printf("|\n");				HAL_Delay(5);	}
		}
		printf("|\n");				HAL_Delay(5);
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <disp_map+0x120>)
 8001bd2:	f010 fef1 	bl	80129b8 <puts>
 8001bd6:	2005      	movs	r0, #5
 8001bd8:	f00b ff98 	bl	800db0c <HAL_Delay>
	for( int y = MAZE_SIZE_Y - 1 ; y >= 0 ; y-- ){
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da99      	bge.n	8001b1c <disp_map+0xc>
	}
	for(int x = 0; x < MAZE_SIZE_X ; x++)	{	printf("+---"); HAL_Delay(5);	}	printf("+\n");
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	e008      	b.n	8001c00 <disp_map+0xf0>
 8001bee:	480a      	ldr	r0, [pc, #40]	; (8001c18 <disp_map+0x108>)
 8001bf0:	f010 fe6e 	bl	80128d0 <iprintf>
 8001bf4:	2005      	movs	r0, #5
 8001bf6:	f00b ff89 	bl	800db0c <HAL_Delay>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	ddf3      	ble.n	8001bee <disp_map+0xde>
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <disp_map+0x110>)
 8001c08:	f010 fed6 	bl	80129b8 <puts>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000d440 	.word	0x2000d440
 8001c18:	080149f8 	.word	0x080149f8
 8001c1c:	08014a00 	.word	0x08014a00
 8001c20:	08014a08 	.word	0x08014a08
 8001c24:	200002e4 	.word	0x200002e4
 8001c28:	08014a0c 	.word	0x08014a0c
 8001c2c:	08014a14 	.word	0x08014a14
 8001c30:	08014a1c 	.word	0x08014a1c

08001c34 <ir_sensor_Initialize>:
#include "glob_var.h"
#include "mymacro.h"
#include <stdio.h>
#include "math.h"

void ir_sensor_Initialize(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(photo_fr_GPIO_Port, photo_fr_Pin, 1);
	//HAL_GPIO_WritePin(photo_dl_GPIO_Port, photo_dl_Pin, 1);
	//HAL_GPIO_WritePin(photo_dr_GPIO_Port, photo_dr_Pin, 1);
	//HAL_GPIO_WritePin(photo_fl_GPIO_Port, photo_fl_Pin, 1);

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_value, 5);
 8001c38:	2205      	movs	r2, #5
 8001c3a:	4909      	ldr	r1, [pc, #36]	; (8001c60 <ir_sensor_Initialize+0x2c>)
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <ir_sensor_Initialize+0x30>)
 8001c3e:	f00b ffcb 	bl	800dbd8 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <ir_sensor_Initialize+0x34>)
 8001c46:	f00e fe79 	bl	801093c <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <ir_sensor_Initialize+0x34>)
 8001c4e:	f00e fdd1 	bl	80107f4 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_3);
 8001c52:	2108      	movs	r1, #8
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <ir_sensor_Initialize+0x34>)
 8001c56:	f00e fdcd 	bl	80107f4 <HAL_TIM_OC_Start_IT>

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000d080 	.word	0x2000d080
 8001c64:	20000234 	.word	0x20000234
 8001c68:	20012554 	.word	0x20012554

08001c6c <ir_sensor_interrupt>:

void ir_sensor_interrupt(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(photo_dl_GPIO_Port, photo_dl_Pin, i == 1);
	HAL_GPIO_WritePin(photo_dr_GPIO_Port, photo_dr_Pin, i == 3);
	HAL_GPIO_WritePin(photo_fl_GPIO_Port, photo_fl_Pin, i == 5);
*/
///*
	HAL_GPIO_WritePin(photo_fr_GPIO_Port, photo_fr_Pin, i == 0);
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2140      	movs	r1, #64	; 0x40
 8001c82:	481c      	ldr	r0, [pc, #112]	; (8001cf4 <ir_sensor_interrupt+0x88>)
 8001c84:	f00d fc4a 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(photo_dl_GPIO_Port, photo_dl_Pin, i == 2);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9c:	4815      	ldr	r0, [pc, #84]	; (8001cf4 <ir_sensor_interrupt+0x88>)
 8001c9e:	f00d fc3d 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(photo_dr_GPIO_Port, photo_dr_Pin, i == 4);
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <ir_sensor_interrupt+0x88>)
 8001cb6:	f00d fc31 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(photo_fl_GPIO_Port, photo_fl_Pin, i == 6);
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cce:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <ir_sensor_interrupt+0x8c>)
 8001cd0:	f00d fc24 	bl	800f51c <HAL_GPIO_WritePin>

	//if(i == 9){
	//	  get_speed();
	//	  interrupt_main();
	//}
	i = i + 1;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001cdc:	6013      	str	r3, [r2, #0]
	if(i == 10) i = 0;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d102      	bne.n	8001cec <ir_sensor_interrupt+0x80>
 8001ce6:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <ir_sensor_interrupt+0x84>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200001fc 	.word	0x200001fc
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020000 	.word	0x40020000

08001cfc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d00:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <__NVIC_SystemReset+0x20>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <__NVIC_SystemReset+0x20>)
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_SystemReset+0x24>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <__NVIC_SystemReset+0x1c>
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	05fa0004 	.word	0x05fa0004
 8001d24:	00000000 	.word	0x00000000

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b08e      	sub	sp, #56	; 0x38
 8001d2e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001d30:	4bc5      	ldr	r3, [pc, #788]	; (8002048 <main+0x320>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f010 fe45 	bl	80129c8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3e:	f00b fe73 	bl	800da28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d42:	f000 fdb1 	bl	80028a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d46:	f7ff fc73 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d4a:	f7ff fa83 	bl	8001254 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d4e:	f7ff f903 	bl	8000f58 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001d52:	f00b f871 	bl	800ce38 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d56:	f00b fb11 	bl	800d37c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d5a:	f00b fac3 	bl	800d2e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001d5e:	f00b fdc7 	bl	800d8f0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001d62:	f00b fc17 	bl	800d594 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001d66:	f00b fba1 	bl	800d4ac <MX_TIM4_Init>
  MX_TIM10_Init();
 8001d6a:	f00b fc85 	bl	800d678 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  myspi_init();
 8001d6e:	f002 f915 	bl	8003f9c <myspi_init>
  gyro_init();
 8001d72:	f002 f92b 	bl	8003fcc <gyro_init>
  myspi_start();
 8001d76:	f002 f985 	bl	8004084 <myspi_start>
  ir_sensor_Initialize();
 8001d7a:	f7ff ff5b 	bl	8001c34 <ir_sensor_Initialize>
  Motor_Start();
 8001d7e:	f000 fe17 	bl	80029b0 <Motor_Start>
  interrupt_start();
 8001d82:	f000 ff55 	bl	8002c30 <interrupt_start>
  init_maze();
 8001d86:	f006 fe61 	bl	8008a4c <init_maze>
  int sx[1] = {0};		int sy[1] = {0};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  int gx[MAZE_GOAL_SIZE];	int gy[MAZE_GOAL_SIZE];
  for(int i = 0;i < MAZE_GOAL_SIZE;i++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e014      	b.n	8001dc2 <main+0x9a>
	  gx[i] = MAZE_GOAL_X + i;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	1dda      	adds	r2, r3, #7
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	f107 0120 	add.w	r1, r7, #32
 8001da4:	440b      	add	r3, r1
 8001da6:	f843 2c14 	str.w	r2, [r3, #-20]
	  gy[i] = MAZE_GOAL_Y + i;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	1dda      	adds	r2, r3, #7
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f107 0120 	add.w	r1, r7, #32
 8001db6:	440b      	add	r3, r1
 8001db8:	f843 2c1c 	str.w	r2, [r3, #-28]
  for(int i = 0;i < MAZE_GOAL_SIZE;i++){
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	dde7      	ble.n	8001d98 <main+0x70>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_button();
 8001dc8:	f7ff fd28 	bl	800181c <read_button>
	  switch( ((uint8_t)is_mode_enable) << 5 | mouse_mode ){
 8001dcc:	4b9f      	ldr	r3, [pc, #636]	; (800204c <main+0x324>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	4a9f      	ldr	r2, [pc, #636]	; (8002050 <main+0x328>)
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	3b20      	subs	r3, #32
 8001dda:	2b1f      	cmp	r3, #31
 8001ddc:	d8f4      	bhi.n	8001dc8 <main+0xa0>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <main+0xbc>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e65 	.word	0x08001e65
 8001de8:	08001e8b 	.word	0x08001e8b
 8001dec:	08001ebf 	.word	0x08001ebf
 8001df0:	08001f27 	.word	0x08001f27
 8001df4:	08001f6d 	.word	0x08001f6d
 8001df8:	080020a9 	.word	0x080020a9
 8001dfc:	0800215d 	.word	0x0800215d
 8001e00:	08002211 	.word	0x08002211
 8001e04:	0800225d 	.word	0x0800225d
 8001e08:	0800236d 	.word	0x0800236d
 8001e0c:	08002435 	.word	0x08002435
 8001e10:	0800246d 	.word	0x0800246d
 8001e14:	08002535 	.word	0x08002535
 8001e18:	0800259d 	.word	0x0800259d
 8001e1c:	080025d9 	.word	0x080025d9
 8001e20:	08002611 	.word	0x08002611
 8001e24:	08002689 	.word	0x08002689
 8001e28:	08002719 	.word	0x08002719
 8001e2c:	08002755 	.word	0x08002755
 8001e30:	0800278f 	.word	0x0800278f
 8001e34:	08001dc9 	.word	0x08001dc9
 8001e38:	08001dc9 	.word	0x08001dc9
 8001e3c:	08001dc9 	.word	0x08001dc9
 8001e40:	08001dc9 	.word	0x08001dc9
 8001e44:	08001dc9 	.word	0x08001dc9
 8001e48:	08001dc9 	.word	0x08001dc9
 8001e4c:	08001dc9 	.word	0x08001dc9
 8001e50:	08001dc9 	.word	0x08001dc9
 8001e54:	08001dc9 	.word	0x08001dc9
 8001e58:	08001dc9 	.word	0x08001dc9
 8001e5c:	08001dc9 	.word	0x08001dc9
 8001e60:	08001dc9 	.word	0x08001dc9
	  	  case ( 0x00 | MODE_ENABLE ):
				  //Motor_Set_Duty_Right(300);Motor_Set_Duty_Left(-300);
	  			 printf("%d,%d,%d,%d\n",enc_R.diff_pulse,enc_L.diff_pulse,enc_R.count,enc_L.count);
 8001e64:	4b7b      	ldr	r3, [pc, #492]	; (8002054 <main+0x32c>)
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <main+0x330>)
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4b79      	ldr	r3, [pc, #484]	; (8002054 <main+0x32c>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	4b79      	ldr	r3, [pc, #484]	; (8002058 <main+0x330>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4878      	ldr	r0, [pc, #480]	; (800205c <main+0x334>)
 8001e7c:	f010 fd28 	bl	80128d0 <iprintf>
	  	  	  	 HAL_Delay(10);
 8001e80:	200a      	movs	r0, #10
 8001e82:	f00b fe43 	bl	800db0c <HAL_Delay>
	  		  break;
 8001e86:	f000 bce2 	b.w	800284e <main+0xb26>
	  	  case ( 0x01 | MODE_ENABLE ):
	  			 printf("%d,%d,%d,%d,%d\n",adc_value[0],adc_value[1],adc_value[2],adc_value[3],adc_value[4]);
 8001e8a:	4b75      	ldr	r3, [pc, #468]	; (8002060 <main+0x338>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4b73      	ldr	r3, [pc, #460]	; (8002060 <main+0x338>)
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	4618      	mov	r0, r3
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <main+0x338>)
 8001e98:	889b      	ldrh	r3, [r3, #4]
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	4b70      	ldr	r3, [pc, #448]	; (8002060 <main+0x338>)
 8001e9e:	88db      	ldrh	r3, [r3, #6]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <main+0x338>)
 8001ea4:	891b      	ldrh	r3, [r3, #8]
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	4623      	mov	r3, r4
 8001eac:	4602      	mov	r2, r0
 8001eae:	486d      	ldr	r0, [pc, #436]	; (8002064 <main+0x33c>)
 8001eb0:	f010 fd0e 	bl	80128d0 <iprintf>
	  	  	  	 HAL_Delay(10);
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f00b fe29 	bl	800db0c <HAL_Delay>
	  	  	  break;
 8001eba:	f000 bcc8 	b.w	800284e <main+0xb26>
	  	  case ( 0x02 | MODE_ENABLE ):
	  			 printf("%f,%f,%f,%f\n",read_gyro_yaw(),read_gyro_x_axis(),read_gyro_y_axis(),read_accel_z_axis());
 8001ebe:	f002 f9d7 	bl	8004270 <read_gyro_yaw>
 8001ec2:	ee10 3a10 	vmov	r3, s0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb46 	bl	8000558 <__aeabi_f2d>
 8001ecc:	4682      	mov	sl, r0
 8001ece:	468b      	mov	fp, r1
 8001ed0:	f002 f9fa 	bl	80042c8 <read_gyro_x_axis>
 8001ed4:	ee10 3a10 	vmov	r3, s0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb3d 	bl	8000558 <__aeabi_f2d>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	460d      	mov	r5, r1
 8001ee2:	f002 fa19 	bl	8004318 <read_gyro_y_axis>
 8001ee6:	ee10 3a10 	vmov	r3, s0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb34 	bl	8000558 <__aeabi_f2d>
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	f002 fa98 	bl	8004428 <read_accel_z_axis>
 8001ef8:	ee10 3a10 	vmov	r3, s0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb2b 	bl	8000558 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f0e:	e9cd 4500 	strd	r4, r5, [sp]
 8001f12:	4652      	mov	r2, sl
 8001f14:	465b      	mov	r3, fp
 8001f16:	4854      	ldr	r0, [pc, #336]	; (8002068 <main+0x340>)
 8001f18:	f010 fcda 	bl	80128d0 <iprintf>
	  	  	  	 HAL_Delay(10);
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f00b fdf5 	bl	800db0c <HAL_Delay>
	  		  break;
 8001f22:	f000 bc94 	b.w	800284e <main+0xb26>
	  	  case ( 0x03 | MODE_ENABLE ):
				 printf("%f,%f,%f\n",speed,omega,len_mouse);
 8001f26:	4b51      	ldr	r3, [pc, #324]	; (800206c <main+0x344>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb14 	bl	8000558 <__aeabi_f2d>
 8001f30:	4680      	mov	r8, r0
 8001f32:	4689      	mov	r9, r1
 8001f34:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <main+0x348>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <main+0x34c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb06 	bl	8000558 <__aeabi_f2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f54:	e9cd 4500 	strd	r4, r5, [sp]
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	4846      	ldr	r0, [pc, #280]	; (8002078 <main+0x350>)
 8001f5e:	f010 fcb7 	bl	80128d0 <iprintf>
				 HAL_Delay(10);
 8001f62:	200a      	movs	r0, #10
 8001f64:	f00b fdd2 	bl	800db0c <HAL_Delay>
	  		  break;
 8001f68:	f000 bc71 	b.w	800284e <main+0xb26>
	  	  case ( 0x04 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <main+0x354>)
 8001f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b42      	ldr	r3, [pc, #264]	; (8002080 <main+0x358>)
 8001f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a41      	ldr	r2, [pc, #260]	; (8002084 <main+0x35c>)
 8001f7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a40      	ldr	r2, [pc, #256]	; (8002088 <main+0x360>)
 8001f86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f241 7270 	movw	r2, #6000	; 0x1770
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f340 8431 	ble.w	80027f8 <main+0xad0>
					check_LED_toggle(5);
 8001f96:	2005      	movs	r0, #5
 8001f98:	f7ff fc22 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <main+0x364>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <main+0x364>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a32      	ldr	r2, [pc, #200]	; (8002074 <main+0x34c>)
 8001faa:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <main+0x368>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	805a      	strh	r2, [r3, #2]
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <main+0x368>)
 8001fb4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <main+0x368>)
 8001fba:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 8001fbc:	4b34      	ldr	r3, [pc, #208]	; (8002090 <main+0x368>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	711a      	strb	r2, [r3, #4]
					straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 8001fc2:	eddf 1a34 	vldr	s3, [pc, #208]	; 8002094 <main+0x36c>
 8001fc6:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8002094 <main+0x36c>
 8001fca:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001fce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001fd2:	f002 fa59 	bl	8004488 <straight>
					search_adachi(gx, gy,MAZE_GOAL_SIZE);
 8001fd6:	1d39      	adds	r1, r7, #4
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	2202      	movs	r2, #2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f007 fb38 	bl	8009654 <search_adachi>
					HAL_Delay(100);save_data();
 8001fe4:	2064      	movs	r0, #100	; 0x64
 8001fe6:	f00b fd91 	bl	800db0c <HAL_Delay>
 8001fea:	f7ff f963 	bl	80012b4 <save_data>
					search_adachi_zenmen2(sx, sy,1);
 8001fee:	f107 0114 	add.w	r1, r7, #20
 8001ff2:	f107 0318 	add.w	r3, r7, #24
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f008 f8cd 	bl	800a198 <search_adachi_zenmen2>
					HAL_Delay(100);save_data();
 8001ffe:	2064      	movs	r0, #100	; 0x64
 8002000:	f00b fd84 	bl	800db0c <HAL_Delay>
 8002004:	f7ff f956 	bl	80012b4 <save_data>
					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 8002008:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002098 <main+0x370>
 800200c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800209c <main+0x374>
 8002010:	f003 f8fa 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <main+0x368>)
 8002016:	791b      	ldrb	r3, [r3, #4]
 8002018:	3306      	adds	r3, #6
 800201a:	425a      	negs	r2, r3
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	bf58      	it	pl
 8002026:	4253      	negpl	r3, r2
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <main+0x368>)
 800202c:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 800202e:	2064      	movs	r0, #100	; 0x64
 8002030:	f00b fd6c 	bl	800db0c <HAL_Delay>
					run_mode = NON_CON_MODE;log_flag = false;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <main+0x378>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <main+0x37c>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <main+0x324>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
				}

		      break;
 8002046:	e3d7      	b.n	80027f8 <main+0xad0>
 8002048:	20000010 	.word	0x20000010
 800204c:	200002e0 	.word	0x200002e0
 8002050:	200004e8 	.word	0x200004e8
 8002054:	2000d1e8 	.word	0x2000d1e8
 8002058:	2000d218 	.word	0x2000d218
 800205c:	08014a20 	.word	0x08014a20
 8002060:	2000d080 	.word	0x2000d080
 8002064:	08014a30 	.word	0x08014a30
 8002068:	08014a40 	.word	0x08014a40
 800206c:	2000d230 	.word	0x2000d230
 8002070:	2000f494 	.word	0x2000f494
 8002074:	200123b8 	.word	0x200123b8
 8002078:	08014a50 	.word	0x08014a50
 800207c:	2000d1c8 	.word	0x2000d1c8
 8002080:	2000d1b8 	.word	0x2000d1b8
 8002084:	2000d064 	.word	0x2000d064
 8002088:	2000f480 	.word	0x2000f480
 800208c:	2000f4a8 	.word	0x2000f4a8
 8002090:	20004380 	.word	0x20004380
 8002094:	3e99999a 	.word	0x3e99999a
 8002098:	41490fd8 	.word	0x41490fd8
 800209c:	437b53ce 	.word	0x437b53ce
 80020a0:	2000a170 	.word	0x2000a170
 80020a4:	2000f498 	.word	0x2000f498
	  	  case ( 0x05 | MODE_ENABLE ):
				if(	sen_fr.value + sen_l.value + sen_r.value + sen_fr.value	> 1500*4){
 80020a8:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <main+0x610>)
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4ba2      	ldr	r3, [pc, #648]	; (800233c <main+0x614>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b6:	4413      	add	r3, r2
 80020b8:	4aa1      	ldr	r2, [pc, #644]	; (8002340 <main+0x618>)
 80020ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020be:	4413      	add	r3, r2
 80020c0:	4a9d      	ldr	r2, [pc, #628]	; (8002338 <main+0x610>)
 80020c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020c6:	4413      	add	r3, r2
 80020c8:	f241 7270 	movw	r2, #6000	; 0x1770
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f340 8396 	ble.w	80027fe <main+0xad6>
					check_LED_toggle(5);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7ff fb84 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 80020d8:	4b9a      	ldr	r3, [pc, #616]	; (8002344 <main+0x61c>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	4b98      	ldr	r3, [pc, #608]	; (8002344 <main+0x61c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <main+0x620>)
 80020e6:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 80020e8:	4b98      	ldr	r3, [pc, #608]	; (800234c <main+0x624>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	805a      	strh	r2, [r3, #2]
 80020ee:	4b97      	ldr	r3, [pc, #604]	; (800234c <main+0x624>)
 80020f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80020f4:	4b95      	ldr	r3, [pc, #596]	; (800234c <main+0x624>)
 80020f6:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80020f8:	4b94      	ldr	r3, [pc, #592]	; (800234c <main+0x624>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	711a      	strb	r2, [r3, #4]

					//straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
					saitan4(gx, gy,MAZE_GOAL_SIZE);
 80020fe:	1d39      	adds	r1, r7, #4
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2202      	movs	r2, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f009 f984 	bl	800b414 <saitan4>
					HAL_Delay(100);	//save_data();
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	f00b fcfd 	bl	800db0c <HAL_Delay>
					saitan4(sx, sy,1);
 8002112:	f107 0114 	add.w	r1, r7, #20
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	2201      	movs	r2, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f009 f979 	bl	800b414 <saitan4>
					HAL_Delay(100); //save_data();
 8002122:	2064      	movs	r0, #100	; 0x64
 8002124:	f00b fcf2 	bl	800db0c <HAL_Delay>

					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 8002128:	eddf 0a89 	vldr	s1, [pc, #548]	; 8002350 <main+0x628>
 800212c:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8002354 <main+0x62c>
 8002130:	f003 f86a 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 8002134:	4b85      	ldr	r3, [pc, #532]	; (800234c <main+0x624>)
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	3306      	adds	r3, #6
 800213a:	425a      	negs	r2, r3
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	bf58      	it	pl
 8002146:	4253      	negpl	r3, r2
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b80      	ldr	r3, [pc, #512]	; (800234c <main+0x624>)
 800214c:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 800214e:	2064      	movs	r0, #100	; 0x64
 8002150:	f00b fcdc 	bl	800db0c <HAL_Delay>

					is_mode_enable = false;
 8002154:	4b80      	ldr	r3, [pc, #512]	; (8002358 <main+0x630>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
	  		  	}
		  	  break;
 800215a:	e350      	b.n	80027fe <main+0xad6>
	  	  case ( 0x06 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <main+0x634>)
 800215e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002162:	461a      	mov	r2, r3
 8002164:	4b74      	ldr	r3, [pc, #464]	; (8002338 <main+0x610>)
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	4413      	add	r3, r2
 800216c:	4a73      	ldr	r2, [pc, #460]	; (800233c <main+0x614>)
 800216e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002172:	4413      	add	r3, r2
 8002174:	4a72      	ldr	r2, [pc, #456]	; (8002340 <main+0x618>)
 8002176:	f9b2 2000 	ldrsh.w	r2, [r2]
 800217a:	4413      	add	r3, r2
 800217c:	f641 7243 	movw	r2, #8003	; 0x1f43
 8002180:	4293      	cmp	r3, r2
 8002182:	f340 833f 	ble.w	8002804 <main+0xadc>
					check_LED_toggle(5);
 8002186:	2005      	movs	r0, #5
 8002188:	f7ff fb2a 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <main+0x61c>)
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <main+0x61c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <main+0x620>)
 800219a:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 800219c:	4b6b      	ldr	r3, [pc, #428]	; (800234c <main+0x624>)
 800219e:	2200      	movs	r2, #0
 80021a0:	805a      	strh	r2, [r3, #2]
 80021a2:	4b6a      	ldr	r3, [pc, #424]	; (800234c <main+0x624>)
 80021a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <main+0x624>)
 80021aa:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80021ac:	4b67      	ldr	r3, [pc, #412]	; (800234c <main+0x624>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	711a      	strb	r2, [r3, #4]

					//straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
					saitan5(gx, gy,MAZE_GOAL_SIZE);
 80021b2:	1d39      	adds	r1, r7, #4
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2202      	movs	r2, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f009 fcb4 	bl	800bb28 <saitan5>
					HAL_Delay(100);	//save_data();
 80021c0:	2064      	movs	r0, #100	; 0x64
 80021c2:	f00b fca3 	bl	800db0c <HAL_Delay>

					saitan3(sx, sy,1);
 80021c6:	f107 0114 	add.w	r1, r7, #20
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	2201      	movs	r2, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f008 fafb 	bl	800a7cc <saitan3>
					HAL_Delay(100); //save_data();
 80021d6:	2064      	movs	r0, #100	; 0x64
 80021d8:	f00b fc98 	bl	800db0c <HAL_Delay>

					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80021dc:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8002350 <main+0x628>
 80021e0:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002354 <main+0x62c>
 80021e4:	f003 f810 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 80021e8:	4b58      	ldr	r3, [pc, #352]	; (800234c <main+0x624>)
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	3306      	adds	r3, #6
 80021ee:	425a      	negs	r2, r3
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	f002 0203 	and.w	r2, r2, #3
 80021f8:	bf58      	it	pl
 80021fa:	4253      	negpl	r3, r2
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <main+0x624>)
 8002200:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f00b fc82 	bl	800db0c <HAL_Delay>

					is_mode_enable = false;
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <main+0x630>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 800220e:	e2f9      	b.n	8002804 <main+0xadc>
	  	  case ( 0x07 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4 ){
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <main+0x634>)
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	461a      	mov	r2, r3
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <main+0x610>)
 800221a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221e:	4413      	add	r3, r2
 8002220:	4a46      	ldr	r2, [pc, #280]	; (800233c <main+0x614>)
 8002222:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002226:	4413      	add	r3, r2
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <main+0x618>)
 800222a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800222e:	4413      	add	r3, r2
 8002230:	f241 7270 	movw	r2, #6000	; 0x1770
 8002234:	4293      	cmp	r3, r2
 8002236:	f340 82e8 	ble.w	800280a <main+0xae2>
					check_LED_toggle(5);
 800223a:	2005      	movs	r0, #5
 800223c:	f7ff fad0 	bl	80017e0 <check_LED_toggle>
								  //disp_map();
					print_log();		HAL_Delay(10);
 8002240:	f7ff fb4a 	bl	80018d8 <print_log>
 8002244:	200a      	movs	r0, #10
 8002246:	f00b fc61 	bl	800db0c <HAL_Delay>
					print_irsens_log();	HAL_Delay(10);
 800224a:	f7ff fc15 	bl	8001a78 <print_irsens_log>
 800224e:	200a      	movs	r0, #10
 8002250:	f00b fc5c 	bl	800db0c <HAL_Delay>
					is_mode_enable = false;
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <main+0x630>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 800225a:	e2d6      	b.n	800280a <main+0xae2>
	  	  case ( 0x08 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4   ){
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <main+0x634>)
 800225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002262:	461a      	mov	r2, r3
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <main+0x610>)
 8002266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226a:	4413      	add	r3, r2
 800226c:	4a33      	ldr	r2, [pc, #204]	; (800233c <main+0x614>)
 800226e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002272:	4413      	add	r3, r2
 8002274:	4a32      	ldr	r2, [pc, #200]	; (8002340 <main+0x618>)
 8002276:	f9b2 2000 	ldrsh.w	r2, [r2]
 800227a:	4413      	add	r3, r2
 800227c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002280:	4293      	cmp	r3, r2
 8002282:	f340 82c5 	ble.w	8002810 <main+0xae8>
					check_LED_toggle(5);
 8002286:	2005      	movs	r0, #5
 8002288:	f7ff faaa 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <main+0x61c>)
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <main+0x61c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <main+0x620>)
 800229a:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <main+0x624>)
 800229e:	2200      	movs	r2, #0
 80022a0:	805a      	strh	r2, [r3, #2]
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <main+0x624>)
 80022a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <main+0x624>)
 80022aa:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <main+0x624>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	711a      	strb	r2, [r3, #4]
					straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 80022b2:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8002360 <main+0x638>
 80022b6:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002360 <main+0x638>
 80022ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80022be:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80022c2:	f002 f8e1 	bl	8004488 <straight>
					search_adachi(gx, gy,MAZE_GOAL_SIZE);
 80022c6:	1d39      	adds	r1, r7, #4
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	2202      	movs	r2, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f007 f9c0 	bl	8009654 <search_adachi>
					HAL_Delay(100);save_data();
 80022d4:	2064      	movs	r0, #100	; 0x64
 80022d6:	f00b fc19 	bl	800db0c <HAL_Delay>
 80022da:	f7fe ffeb 	bl	80012b4 <save_data>
					search_adachi(sx, sy,1);
 80022de:	f107 0114 	add.w	r1, r7, #20
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	2201      	movs	r2, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f007 f9b3 	bl	8009654 <search_adachi>
					HAL_Delay(100);save_data();
 80022ee:	2064      	movs	r0, #100	; 0x64
 80022f0:	f00b fc0c 	bl	800db0c <HAL_Delay>
 80022f4:	f7fe ffde 	bl	80012b4 <save_data>
					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80022f8:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002350 <main+0x628>
 80022fc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002354 <main+0x62c>
 8002300:	f002 ff82 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <main+0x624>)
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	3306      	adds	r3, #6
 800230a:	425a      	negs	r2, r3
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	f002 0203 	and.w	r2, r2, #3
 8002314:	bf58      	it	pl
 8002316:	4253      	negpl	r3, r2
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <main+0x624>)
 800231c:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 800231e:	2064      	movs	r0, #100	; 0x64
 8002320:	f00b fbf4 	bl	800db0c <HAL_Delay>
					run_mode = NON_CON_MODE;log_flag = false;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <main+0x63c>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <main+0x640>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <main+0x630>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 8002336:	e26b      	b.n	8002810 <main+0xae8>
 8002338:	2000d1b8 	.word	0x2000d1b8
 800233c:	2000d064 	.word	0x2000d064
 8002340:	2000f480 	.word	0x2000f480
 8002344:	2000f4a8 	.word	0x2000f4a8
 8002348:	200123b8 	.word	0x200123b8
 800234c:	20004380 	.word	0x20004380
 8002350:	41490fd8 	.word	0x41490fd8
 8002354:	437b53ce 	.word	0x437b53ce
 8002358:	200002e0 	.word	0x200002e0
 800235c:	2000d1c8 	.word	0x2000d1c8
 8002360:	3e99999a 	.word	0x3e99999a
 8002364:	2000a170 	.word	0x2000a170
 8002368:	2000f498 	.word	0x2000f498
	  	  case ( 0x09 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 800236c:	4bb9      	ldr	r3, [pc, #740]	; (8002654 <main+0x92c>)
 800236e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002372:	461a      	mov	r2, r3
 8002374:	4bb8      	ldr	r3, [pc, #736]	; (8002658 <main+0x930>)
 8002376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237a:	4413      	add	r3, r2
 800237c:	4ab7      	ldr	r2, [pc, #732]	; (800265c <main+0x934>)
 800237e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002382:	4413      	add	r3, r2
 8002384:	4ab6      	ldr	r2, [pc, #728]	; (8002660 <main+0x938>)
 8002386:	f9b2 2000 	ldrsh.w	r2, [r2]
 800238a:	4413      	add	r3, r2
 800238c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002390:	4293      	cmp	r3, r2
 8002392:	f340 8240 	ble.w	8002816 <main+0xaee>
					check_LED_toggle(5);
 8002396:	2005      	movs	r0, #5
 8002398:	f7ff fa22 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 800239c:	4bb1      	ldr	r3, [pc, #708]	; (8002664 <main+0x93c>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	4baf      	ldr	r3, [pc, #700]	; (8002664 <main+0x93c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4aaf      	ldr	r2, [pc, #700]	; (8002668 <main+0x940>)
 80023aa:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 80023ac:	4baf      	ldr	r3, [pc, #700]	; (800266c <main+0x944>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	805a      	strh	r2, [r3, #2]
 80023b2:	4bae      	ldr	r3, [pc, #696]	; (800266c <main+0x944>)
 80023b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80023b8:	4bac      	ldr	r3, [pc, #688]	; (800266c <main+0x944>)
 80023ba:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80023bc:	4bab      	ldr	r3, [pc, #684]	; (800266c <main+0x944>)
 80023be:	2200      	movs	r2, #0
 80023c0:	711a      	strb	r2, [r3, #4]
					saitan4(gx, gy,MAZE_GOAL_SIZE);
 80023c2:	1d39      	adds	r1, r7, #4
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2202      	movs	r2, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f009 f822 	bl	800b414 <saitan4>
					HAL_Delay(100);save_data();
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	f00b fb9b 	bl	800db0c <HAL_Delay>
 80023d6:	f7fe ff6d 	bl	80012b4 <save_data>
					search_adachi(sx, sy,1);
 80023da:	f107 0114 	add.w	r1, r7, #20
 80023de:	f107 0318 	add.w	r3, r7, #24
 80023e2:	2201      	movs	r2, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f007 f935 	bl	8009654 <search_adachi>
					HAL_Delay(100);save_data();
 80023ea:	2064      	movs	r0, #100	; 0x64
 80023ec:	f00b fb8e 	bl	800db0c <HAL_Delay>
 80023f0:	f7fe ff60 	bl	80012b4 <save_data>
					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80023f4:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8002670 <main+0x948>
 80023f8:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8002674 <main+0x94c>
 80023fc:	f002 ff04 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 8002400:	4b9a      	ldr	r3, [pc, #616]	; (800266c <main+0x944>)
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	3306      	adds	r3, #6
 8002406:	425a      	negs	r2, r3
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	bf58      	it	pl
 8002412:	4253      	negpl	r3, r2
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b95      	ldr	r3, [pc, #596]	; (800266c <main+0x944>)
 8002418:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 800241a:	2064      	movs	r0, #100	; 0x64
 800241c:	f00b fb76 	bl	800db0c <HAL_Delay>
					run_mode = NON_CON_MODE;log_flag = false;
 8002420:	4b95      	ldr	r3, [pc, #596]	; (8002678 <main+0x950>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	4b95      	ldr	r3, [pc, #596]	; (800267c <main+0x954>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 800242c:	4b94      	ldr	r3, [pc, #592]	; (8002680 <main+0x958>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 8002432:	e1f0      	b.n	8002816 <main+0xaee>
	  	  case ( 0x0A | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 8002434:	4b87      	ldr	r3, [pc, #540]	; (8002654 <main+0x92c>)
 8002436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243a:	461a      	mov	r2, r3
 800243c:	4b86      	ldr	r3, [pc, #536]	; (8002658 <main+0x930>)
 800243e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002442:	4413      	add	r3, r2
 8002444:	4a85      	ldr	r2, [pc, #532]	; (800265c <main+0x934>)
 8002446:	f9b2 2000 	ldrsh.w	r2, [r2]
 800244a:	4413      	add	r3, r2
 800244c:	4a84      	ldr	r2, [pc, #528]	; (8002660 <main+0x938>)
 800244e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002452:	4413      	add	r3, r2
 8002454:	f241 7270 	movw	r2, #6000	; 0x1770
 8002458:	4293      	cmp	r3, r2
 800245a:	f340 81df 	ble.w	800281c <main+0xaf4>
					check_LED_toggle(5);
 800245e:	2005      	movs	r0, #5
 8002460:	f7ff f9be 	bl	80017e0 <check_LED_toggle>
					is_mode_enable = false;
 8002464:	4b86      	ldr	r3, [pc, #536]	; (8002680 <main+0x958>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 800246a:	e1d7      	b.n	800281c <main+0xaf4>
	  	  case ( 0x0B | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 800246c:	4b79      	ldr	r3, [pc, #484]	; (8002654 <main+0x92c>)
 800246e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002472:	461a      	mov	r2, r3
 8002474:	4b78      	ldr	r3, [pc, #480]	; (8002658 <main+0x930>)
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	4413      	add	r3, r2
 800247c:	4a77      	ldr	r2, [pc, #476]	; (800265c <main+0x934>)
 800247e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002482:	4413      	add	r3, r2
 8002484:	4a76      	ldr	r2, [pc, #472]	; (8002660 <main+0x938>)
 8002486:	f9b2 2000 	ldrsh.w	r2, [r2]
 800248a:	4413      	add	r3, r2
 800248c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002490:	4293      	cmp	r3, r2
 8002492:	f340 81c6 	ble.w	8002822 <main+0xafa>
					check_LED_toggle(5);
 8002496:	2005      	movs	r0, #5
 8002498:	f7ff f9a2 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 800249c:	4b71      	ldr	r3, [pc, #452]	; (8002664 <main+0x93c>)
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <main+0x93c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6f      	ldr	r2, [pc, #444]	; (8002668 <main+0x940>)
 80024aa:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 80024ac:	4b6f      	ldr	r3, [pc, #444]	; (800266c <main+0x944>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	805a      	strh	r2, [r3, #2]
 80024b2:	4b6e      	ldr	r3, [pc, #440]	; (800266c <main+0x944>)
 80024b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80024b8:	4b6c      	ldr	r3, [pc, #432]	; (800266c <main+0x944>)
 80024ba:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <main+0x944>)
 80024be:	2200      	movs	r2, #0
 80024c0:	711a      	strb	r2, [r3, #4]
					saitan4(gx, gy,MAZE_GOAL_SIZE);
 80024c2:	1d39      	adds	r1, r7, #4
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2202      	movs	r2, #2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f008 ffa2 	bl	800b414 <saitan4>
					HAL_Delay(100);save_data();
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f00b fb1b 	bl	800db0c <HAL_Delay>
 80024d6:	f7fe feed 	bl	80012b4 <save_data>
					search_adachi(sx, sy,1);
 80024da:	f107 0114 	add.w	r1, r7, #20
 80024de:	f107 0318 	add.w	r3, r7, #24
 80024e2:	2201      	movs	r2, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f007 f8b5 	bl	8009654 <search_adachi>
					HAL_Delay(100);save_data();
 80024ea:	2064      	movs	r0, #100	; 0x64
 80024ec:	f00b fb0e 	bl	800db0c <HAL_Delay>
 80024f0:	f7fe fee0 	bl	80012b4 <save_data>
					turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80024f4:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002670 <main+0x948>
 80024f8:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8002674 <main+0x94c>
 80024fc:	f002 fe84 	bl	8005208 <turn_L180>
					mypos.dir =(mypos.dir + 6) % 4;
 8002500:	4b5a      	ldr	r3, [pc, #360]	; (800266c <main+0x944>)
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	3306      	adds	r3, #6
 8002506:	425a      	negs	r2, r3
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	bf58      	it	pl
 8002512:	4253      	negpl	r3, r2
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b55      	ldr	r3, [pc, #340]	; (800266c <main+0x944>)
 8002518:	711a      	strb	r2, [r3, #4]
					HAL_Delay(100);
 800251a:	2064      	movs	r0, #100	; 0x64
 800251c:	f00b faf6 	bl	800db0c <HAL_Delay>
					run_mode = NON_CON_MODE;log_flag = false;
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <main+0x950>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	4b55      	ldr	r3, [pc, #340]	; (800267c <main+0x954>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <main+0x958>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 8002532:	e176      	b.n	8002822 <main+0xafa>
	  	  case ( 0x0C | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <main+0x92c>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	461a      	mov	r2, r3
 800253c:	4b46      	ldr	r3, [pc, #280]	; (8002658 <main+0x930>)
 800253e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002542:	4413      	add	r3, r2
 8002544:	4a45      	ldr	r2, [pc, #276]	; (800265c <main+0x934>)
 8002546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800254a:	4413      	add	r3, r2
 800254c:	4a44      	ldr	r2, [pc, #272]	; (8002660 <main+0x938>)
 800254e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002552:	4413      	add	r3, r2
 8002554:	f241 7270 	movw	r2, #6000	; 0x1770
 8002558:	4293      	cmp	r3, r2
 800255a:	f340 8165 	ble.w	8002828 <main+0xb00>
					check_LED_toggle(5);
 800255e:	2005      	movs	r0, #5
 8002560:	f7ff f93e 	bl	80017e0 <check_LED_toggle>
					len_mouse = 0.0; degree = 0.0;
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <main+0x940>)
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <main+0x93c>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
					log_flag = true;log_count = 0;
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <main+0x954>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <main+0x95c>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
					STOP_WALL2(10000);
 8002580:	f242 7010 	movw	r0, #10000	; 0x2710
 8002584:	f002 fa58 	bl	8004a38 <STOP_WALL2>
					run_mode = NON_CON_MODE;log_flag = false;
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <main+0x950>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <main+0x954>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <main+0x958>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 800259a:	e145      	b.n	8002828 <main+0xb00>
	  	  case ( 0x0D | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value) > 1500*4  ){
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <main+0x92c>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <main+0x930>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a2b      	ldr	r2, [pc, #172]	; (800265c <main+0x934>)
 80025ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <main+0x938>)
 80025b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025ba:	4413      	add	r3, r2
 80025bc:	f241 7270 	movw	r2, #6000	; 0x1770
 80025c0:	4293      	cmp	r3, r2
 80025c2:	f340 8134 	ble.w	800282e <main+0xb06>
					check_LED_toggle(5);
 80025c6:	2005      	movs	r0, #5
 80025c8:	f7ff f90a 	bl	80017e0 <check_LED_toggle>
					disp_map();
 80025cc:	f7ff faa0 	bl	8001b10 <disp_map>
					is_mode_enable = false;
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <main+0x958>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]

				}
		  	  break;
 80025d6:	e12a      	b.n	800282e <main+0xb06>
	  	  case ( 0x0E | MODE_ENABLE ):
				  if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <main+0x92c>)
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <main+0x930>)
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <main+0x934>)
 80025ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <main+0x938>)
 80025f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025f6:	4413      	add	r3, r2
 80025f8:	f641 7243 	movw	r2, #8003	; 0x1f43
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f340 8119 	ble.w	8002834 <main+0xb0c>
					check_LED_toggle(5);
 8002602:	2005      	movs	r0, #5
 8002604:	f7ff f8ec 	bl	80017e0 <check_LED_toggle>
					write_save_data();
 8002608:	f7fe fe94 	bl	8001334 <write_save_data>
					NVIC_SystemReset();
 800260c:	f7ff fb76 	bl	8001cfc <__NVIC_SystemReset>
					HAL_Delay(10);
					is_mode_enable = false;
				  }
		  	  break;
	  	  case ( 0x0F | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <main+0x92c>)
 8002612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002616:	461a      	mov	r2, r3
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <main+0x930>)
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	4413      	add	r3, r2
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <main+0x934>)
 8002622:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002626:	4413      	add	r3, r2
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <main+0x938>)
 800262a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800262e:	4413      	add	r3, r2
 8002630:	f641 7243 	movw	r2, #8003	; 0x1f43
 8002634:	4293      	cmp	r3, r2
 8002636:	f340 8100 	ble.w	800283a <main+0xb12>
	 				check_LED_toggle(5);
 800263a:	2005      	movs	r0, #5
 800263c:	f7ff f8d0 	bl	80017e0 <check_LED_toggle>
	  				read_save_data();
 8002640:	f7fe fe86 	bl	8001350 <read_save_data>
	  				HAL_Delay(10);
 8002644:	200a      	movs	r0, #10
 8002646:	f00b fa61 	bl	800db0c <HAL_Delay>
	  				is_mode_enable = false;
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <main+0x958>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 8002650:	e0f3      	b.n	800283a <main+0xb12>
 8002652:	bf00      	nop
 8002654:	2000d1c8 	.word	0x2000d1c8
 8002658:	2000d1b8 	.word	0x2000d1b8
 800265c:	2000d064 	.word	0x2000d064
 8002660:	2000f480 	.word	0x2000f480
 8002664:	2000f4a8 	.word	0x2000f4a8
 8002668:	200123b8 	.word	0x200123b8
 800266c:	20004380 	.word	0x20004380
 8002670:	41490fd8 	.word	0x41490fd8
 8002674:	437b53ce 	.word	0x437b53ce
 8002678:	2000a170 	.word	0x2000a170
 800267c:	2000f498 	.word	0x2000f498
 8002680:	200002e0 	.word	0x200002e0
 8002684:	2000d238 	.word	0x2000d238

	  	  case ( 0x10 | MODE_ENABLE ):
				if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <main+0xb38>)
 800268a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268e:	461a      	mov	r2, r3
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <main+0xb3c>)
 8002692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002696:	4413      	add	r3, r2
 8002698:	4a73      	ldr	r2, [pc, #460]	; (8002868 <main+0xb40>)
 800269a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800269e:	4413      	add	r3, r2
 80026a0:	4a72      	ldr	r2, [pc, #456]	; (800286c <main+0xb44>)
 80026a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026a6:	4413      	add	r3, r2
 80026a8:	f641 7243 	movw	r2, #8003	; 0x1f43
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f340 80c7 	ble.w	8002840 <main+0xb18>
					check_LED_toggle(5);
 80026b2:	2005      	movs	r0, #5
 80026b4:	f7ff f894 	bl	80017e0 <check_LED_toggle>
					len_mouse = degree =	0.0;
 80026b8:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <main+0xb48>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <main+0xb48>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6b      	ldr	r2, [pc, #428]	; (8002874 <main+0xb4c>)
 80026c6:	6013      	str	r3, [r2, #0]
					mypos.x = mypos.y = 0;
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <main+0xb50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	805a      	strh	r2, [r3, #2]
 80026ce:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <main+0xb50>)
 80026d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <main+0xb50>)
 80026d6:	801a      	strh	r2, [r3, #0]
					mypos.dir = north;
 80026d8:	4b67      	ldr	r3, [pc, #412]	; (8002878 <main+0xb50>)
 80026da:	2200      	movs	r2, #0
 80026dc:	711a      	strb	r2, [r3, #4]
					log_flag = true;log_count = 0;
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <main+0xb54>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <main+0xb58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
					straight(15.0+SECTION,SEARCH_ACCEL,SEARCH_SPEED,0);
 80026ea:	eddf 1a66 	vldr	s3, [pc, #408]	; 8002884 <main+0xb5c>
 80026ee:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8002888 <main+0xb60>
 80026f2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80026f6:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800288c <main+0xb64>
 80026fa:	f001 fec5 	bl	8004488 <straight>
					HAL_Delay(100);
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f00b fa04 	bl	800db0c <HAL_Delay>

					run_mode = NON_CON_MODE;
 8002704:	4b62      	ldr	r3, [pc, #392]	; (8002890 <main+0xb68>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
					log_flag = false;
 800270a:	4b5c      	ldr	r3, [pc, #368]	; (800287c <main+0xb54>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
					is_mode_enable = false;
 8002710:	4b60      	ldr	r3, [pc, #384]	; (8002894 <main+0xb6c>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
				}
		  	  break;
 8002716:	e093      	b.n	8002840 <main+0xb18>
	  	  case ( 0x11 | MODE_ENABLE ):
	  			if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <main+0xb38>)
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	461a      	mov	r2, r3
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <main+0xb3c>)
 8002722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002726:	4413      	add	r3, r2
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <main+0xb40>)
 800272a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800272e:	4413      	add	r3, r2
 8002730:	4a4e      	ldr	r2, [pc, #312]	; (800286c <main+0xb44>)
 8002732:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002736:	4413      	add	r3, r2
 8002738:	f641 7243 	movw	r2, #8003	; 0x1f43
 800273c:	4293      	cmp	r3, r2
 800273e:	f340 8082 	ble.w	8002846 <main+0xb1e>
	  		  		check_LED_toggle(5);
 8002742:	2005      	movs	r0, #5
 8002744:	f7ff f84c 	bl	80017e0 <check_LED_toggle>
	  		  		adjustment_slalom_L2();
 8002748:	f7fe fd48 	bl	80011dc <adjustment_slalom_L2>
	  		  		is_mode_enable = false;
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <main+0xb6c>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
	  		  	}
		  	  break;
 8002752:	e078      	b.n	8002846 <main+0xb1e>
	  	  case ( 0x12 | MODE_ENABLE ):
	  			if( (sen_fl.value + sen_fr.value + sen_l.value + sen_r.value)/4 > 2000 ){
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <main+0xb38>)
 8002756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275a:	461a      	mov	r2, r3
 800275c:	4b41      	ldr	r3, [pc, #260]	; (8002864 <main+0xb3c>)
 800275e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002762:	4413      	add	r3, r2
 8002764:	4a40      	ldr	r2, [pc, #256]	; (8002868 <main+0xb40>)
 8002766:	f9b2 2000 	ldrsh.w	r2, [r2]
 800276a:	4413      	add	r3, r2
 800276c:	4a3f      	ldr	r2, [pc, #252]	; (800286c <main+0xb44>)
 800276e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002772:	4413      	add	r3, r2
 8002774:	f641 7243 	movw	r2, #8003	; 0x1f43
 8002778:	4293      	cmp	r3, r2
 800277a:	dd67      	ble.n	800284c <main+0xb24>
	  				check_LED_toggle(5);
 800277c:	2005      	movs	r0, #5
 800277e:	f7ff f82f 	bl	80017e0 <check_LED_toggle>
	  				adjustment_slalom_R2();
 8002782:	f7fe fcef 	bl	8001164 <adjustment_slalom_R2>
	  		  		is_mode_enable = false;
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <main+0xb6c>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
	  		   	}
		  	  break;
 800278c:	e05e      	b.n	800284c <main+0xb24>
	  	  case ( 0x13 | MODE_ENABLE ):
	  			  	//printf("****************************\n");
	  	  	  	  	//printf("gyro_roll->%4.2f,gyro_pitch->%4.2f,gyro_yaw->%4.2f\n",gyro_2_theta_roll,gyro_2_theta_pitch,gyro_2_theta_yaw);
					//printf("q0->%0.4f,q1->%0.4f,q2->%0.4f,q3->%0.4f\n",q0,q1,q2,q3);
	  		  		printf("roll->,%4.2f,pitch->,%4.2f,yaw->,%4.2f\n",theta_roll* 57.3,theta_pitch* 57.3,theta_yaw* 57.3);
 800278e:	4b42      	ldr	r3, [pc, #264]	; (8002898 <main+0xb70>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fee0 	bl	8000558 <__aeabi_f2d>
 8002798:	a32f      	add	r3, pc, #188	; (adr r3, 8002858 <main+0xb30>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd ff33 	bl	8000608 <__aeabi_dmul>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	4698      	mov	r8, r3
 80027a8:	46a1      	mov	r9, r4
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <main+0xb74>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fed2 	bl	8000558 <__aeabi_f2d>
 80027b4:	a328      	add	r3, pc, #160	; (adr r3, 8002858 <main+0xb30>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff25 	bl	8000608 <__aeabi_dmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	4625      	mov	r5, r4
 80027c4:	461c      	mov	r4, r3
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <main+0xb78>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fec4 	bl	8000558 <__aeabi_f2d>
 80027d0:	a321      	add	r3, pc, #132	; (adr r3, 8002858 <main+0xb30>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff17 	bl	8000608 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027e2:	e9cd 4500 	strd	r4, r5, [sp]
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	482e      	ldr	r0, [pc, #184]	; (80028a4 <main+0xb7c>)
 80027ec:	f010 f870 	bl	80128d0 <iprintf>
	  		  	  	HAL_Delay(10);
 80027f0:	200a      	movs	r0, #10
 80027f2:	f00b f98b 	bl	800db0c <HAL_Delay>
		  	  break;
 80027f6:	e02a      	b.n	800284e <main+0xb26>
		      break;
 80027f8:	bf00      	nop
 80027fa:	f7ff bae5 	b.w	8001dc8 <main+0xa0>
		  	  break;
 80027fe:	bf00      	nop
 8002800:	f7ff bae2 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002804:	bf00      	nop
 8002806:	f7ff badf 	b.w	8001dc8 <main+0xa0>
		  	  break;
 800280a:	bf00      	nop
 800280c:	f7ff badc 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002810:	bf00      	nop
 8002812:	f7ff bad9 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002816:	bf00      	nop
 8002818:	f7ff bad6 	b.w	8001dc8 <main+0xa0>
		  	  break;
 800281c:	bf00      	nop
 800281e:	f7ff bad3 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002822:	bf00      	nop
 8002824:	f7ff bad0 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002828:	bf00      	nop
 800282a:	f7ff bacd 	b.w	8001dc8 <main+0xa0>
		  	  break;
 800282e:	bf00      	nop
 8002830:	f7ff baca 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002834:	bf00      	nop
 8002836:	f7ff bac7 	b.w	8001dc8 <main+0xa0>
		  	  break;
 800283a:	bf00      	nop
 800283c:	f7ff bac4 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002840:	bf00      	nop
 8002842:	f7ff bac1 	b.w	8001dc8 <main+0xa0>
		  	  break;
 8002846:	bf00      	nop
 8002848:	f7ff babe 	b.w	8001dc8 <main+0xa0>
		  	  break;
 800284c:	bf00      	nop
	  read_button();
 800284e:	f7ff babb 	b.w	8001dc8 <main+0xa0>
 8002852:	bf00      	nop
 8002854:	f3af 8000 	nop.w
 8002858:	66666666 	.word	0x66666666
 800285c:	404ca666 	.word	0x404ca666
 8002860:	2000d1c8 	.word	0x2000d1c8
 8002864:	2000d1b8 	.word	0x2000d1b8
 8002868:	2000d064 	.word	0x2000d064
 800286c:	2000f480 	.word	0x2000f480
 8002870:	2000f4a8 	.word	0x2000f4a8
 8002874:	200123b8 	.word	0x200123b8
 8002878:	20004380 	.word	0x20004380
 800287c:	2000f498 	.word	0x2000f498
 8002880:	2000d238 	.word	0x2000d238
 8002884:	00000000 	.word	0x00000000
 8002888:	3e99999a 	.word	0x3e99999a
 800288c:	42d20000 	.word	0x42d20000
 8002890:	2000a170 	.word	0x2000a170
 8002894:	200002e0 	.word	0x200002e0
 8002898:	2000d190 	.word	0x2000d190
 800289c:	2000a174 	.word	0x2000a174
 80028a0:	2000d18c 	.word	0x2000d18c
 80028a4:	08014a5c 	.word	0x08014a5c

080028a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b094      	sub	sp, #80	; 0x50
 80028ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ae:	f107 0320 	add.w	r3, r7, #32
 80028b2:	2230      	movs	r2, #48	; 0x30
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f00f fba5 	bl	8012006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <SystemClock_Config+0xc8>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a26      	ldr	r2, [pc, #152]	; (8002970 <SystemClock_Config+0xc8>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <SystemClock_Config+0xc8>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <SystemClock_Config+0xcc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <SystemClock_Config+0xcc>)
 80028f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <SystemClock_Config+0xcc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002908:	2301      	movs	r3, #1
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290c:	2310      	movs	r3, #16
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002910:	2302      	movs	r3, #2
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002914:	2300      	movs	r3, #0
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002918:	2308      	movs	r3, #8
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800291c:	2350      	movs	r3, #80	; 0x50
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002920:	2302      	movs	r3, #2
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002924:	2304      	movs	r3, #4
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	4618      	mov	r0, r3
 800292e:	f00c fe29 	bl	800f584 <HAL_RCC_OscConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002938:	f000 f832 	bl	80029a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800293c:	230f      	movs	r3, #15
 800293e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2101      	movs	r1, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f00d f884 	bl	800fa64 <HAL_RCC_ClockConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002962:	f000 f81d 	bl	80029a0 <Error_Handler>
  }
}
 8002966:	bf00      	nop
 8002968:	3750      	adds	r7, #80	; 0x50
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000

08002978 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	b29a      	uxth	r2, r3
 8002988:	230a      	movs	r3, #10
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4803      	ldr	r0, [pc, #12]	; (800299c <_write+0x24>)
 800298e:	f00e fea6 	bl	80116de <HAL_UART_Transmit>
  return len;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20012614 	.word	0x20012614

080029a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <Motor_Start>:
#define MOT_SET_COMPARE_AIN1(x)	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,x)
#define MOT_SET_COMPARE_AIN2(x)	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,x)
#define MOT_SET_COMPARE_BIN1(x)	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,x)
#define MOT_SET_COMPARE_BIN2(x)	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,x)

void Motor_Start(){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);
 80029b4:	2100      	movs	r1, #0
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <Motor_Start+0x28>)
 80029b8:	f00d ffc0 	bl	801093c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2);
 80029bc:	2104      	movs	r1, #4
 80029be:	4806      	ldr	r0, [pc, #24]	; (80029d8 <Motor_Start+0x28>)
 80029c0:	f00d ffbc 	bl	801093c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_3);
 80029c4:	2108      	movs	r1, #8
 80029c6:	4804      	ldr	r0, [pc, #16]	; (80029d8 <Motor_Start+0x28>)
 80029c8:	f00d ffb8 	bl	801093c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_4);
 80029cc:	210c      	movs	r1, #12
 80029ce:	4802      	ldr	r0, [pc, #8]	; (80029d8 <Motor_Start+0x28>)
 80029d0:	f00d ffb4 	bl	801093c <HAL_TIM_PWM_Start>
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20012594 	.word	0x20012594

080029dc <Motor_Set_Duty_Right>:

void Motor_Set_Duty_Right(int16_t duty_r){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse_r;
	if(ABS(duty_r) > DUTY_MAX){
 80029e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bfb8      	it	lt
 80029ee:	425b      	neglt	r3, r3
 80029f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80029f4:	4293      	cmp	r3, r2
 80029f6:	dd11      	ble.n	8002a1c <Motor_Set_Duty_Right+0x40>
		pulse_r = (uint32_t)(PCLK/PWMFREQ*DUTY_MAX/1000)-1;
 80029f8:	f00d f9d8 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <Motor_Set_Duty_Right+0xf4>)
 8002a00:	fba3 2302 	umull	r2, r3, r3, r2
 8002a04:	0bdb      	lsrs	r3, r3, #15
 8002a06:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <Motor_Set_Duty_Right+0xf8>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e033      	b.n	8002a84 <Motor_Set_Duty_Right+0xa8>
	}else if(ABS(duty_r) < DUTY_MIN){
 8002a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a20:	f113 0f09 	cmn.w	r3, #9
 8002a24:	db16      	blt.n	8002a54 <Motor_Set_Duty_Right+0x78>
 8002a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	dc12      	bgt.n	8002a54 <Motor_Set_Duty_Right+0x78>
		pulse_r = (uint32_t)(PCLK/PWMFREQ*DUTY_MIN/1000)-1;
 8002a2e:	f00d f9bd 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <Motor_Set_Duty_Right+0xf4>)
 8002a36:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3a:	0bda      	lsrs	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <Motor_Set_Duty_Right+0xf8>)
 8002a48:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e017      	b.n	8002a84 <Motor_Set_Duty_Right+0xa8>
	}else{
		pulse_r = (uint32_t)(PCLK/PWMFREQ*ABS(duty_r)/1000);
 8002a54:	f00d f9aa 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <Motor_Set_Duty_Right+0xf4>)
 8002a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a60:	0bda      	lsrs	r2, r3, #15
 8002a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da03      	bge.n	8002a72 <Motor_Set_Duty_Right+0x96>
 8002a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6e:	425b      	negs	r3, r3
 8002a70:	e001      	b.n	8002a76 <Motor_Set_Duty_Right+0x9a>
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <Motor_Set_Duty_Right+0xf8>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	60fb      	str	r3, [r7, #12]
	}

	if(duty_r > 0){
 8002a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	dd08      	ble.n	8002a9e <Motor_Set_Duty_Right+0xc2>
		MOT_SET_COMPARE_BIN1(0);
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_BIN2(pulse_r);
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_BIN2(0);
	}else{
		MOT_SET_COMPARE_BIN1(0);
		MOT_SET_COMPARE_BIN2(0);
	}
}
 8002a9c:	e014      	b.n	8002ac8 <Motor_Set_Duty_Right+0xec>
	}else if(duty_r < 0){
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da08      	bge.n	8002ab8 <Motor_Set_Duty_Right+0xdc>
		MOT_SET_COMPARE_BIN1(pulse_r);
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_BIN2(0);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ab6:	e007      	b.n	8002ac8 <Motor_Set_Duty_Right+0xec>
		MOT_SET_COMPARE_BIN1(0);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_BIN2(0);
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <Motor_Set_Duty_Right+0xfc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	d1b71759 	.word	0xd1b71759
 8002ad4:	10624dd3 	.word	0x10624dd3
 8002ad8:	20012594 	.word	0x20012594

08002adc <Motor_Set_Duty_Left>:

void Motor_Set_Duty_Left(int16_t duty_l){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse_l;
	if(ABS(duty_l) > DUTY_MAX){
 8002ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfb8      	it	lt
 8002aee:	425b      	neglt	r3, r3
 8002af0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002af4:	4293      	cmp	r3, r2
 8002af6:	dd11      	ble.n	8002b1c <Motor_Set_Duty_Left+0x40>
		pulse_l = (uint32_t)(PCLK/PWMFREQ*DUTY_MAX/1000)-1;
 8002af8:	f00d f958 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <Motor_Set_Duty_Left+0xf4>)
 8002b00:	fba3 2302 	umull	r2, r3, r3, r2
 8002b04:	0bdb      	lsrs	r3, r3, #15
 8002b06:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <Motor_Set_Duty_Left+0xf8>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e033      	b.n	8002b84 <Motor_Set_Duty_Left+0xa8>
	}else if(ABS(duty_l) < DUTY_MIN){
 8002b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b20:	f113 0f09 	cmn.w	r3, #9
 8002b24:	db16      	blt.n	8002b54 <Motor_Set_Duty_Left+0x78>
 8002b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	dc12      	bgt.n	8002b54 <Motor_Set_Duty_Left+0x78>
		pulse_l = (uint32_t)(PCLK/PWMFREQ*DUTY_MIN/1000)-1;
 8002b2e:	f00d f93d 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <Motor_Set_Duty_Left+0xf4>)
 8002b36:	fba3 2302 	umull	r2, r3, r3, r2
 8002b3a:	0bda      	lsrs	r2, r3, #15
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <Motor_Set_Duty_Left+0xf8>)
 8002b48:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e017      	b.n	8002b84 <Motor_Set_Duty_Left+0xa8>
	}else{
		pulse_l = (uint32_t)(PCLK/PWMFREQ*ABS(duty_l)/1000);
 8002b54:	f00d f92a 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <Motor_Set_Duty_Left+0xf4>)
 8002b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b60:	0bda      	lsrs	r2, r3, #15
 8002b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	da03      	bge.n	8002b72 <Motor_Set_Duty_Left+0x96>
 8002b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6e:	425b      	negs	r3, r3
 8002b70:	e001      	b.n	8002b76 <Motor_Set_Duty_Left+0x9a>
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <Motor_Set_Duty_Left+0xf8>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	60fb      	str	r3, [r7, #12]
	}

	if(duty_l > 0){
 8002b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dd08      	ble.n	8002b9e <Motor_Set_Duty_Left+0xc2>
		MOT_SET_COMPARE_AIN1(0);
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_AIN2(pulse_l);
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
	}else{
		MOT_SET_COMPARE_AIN1(0);
		MOT_SET_COMPARE_AIN2(0);
	}

}
 8002b9c:	e014      	b.n	8002bc8 <Motor_Set_Duty_Left+0xec>
	}else if(duty_l < 0){
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da08      	bge.n	8002bb8 <Motor_Set_Duty_Left+0xdc>
		MOT_SET_COMPARE_AIN1(pulse_l);
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_AIN2(0);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bb6:	e007      	b.n	8002bc8 <Motor_Set_Duty_Left+0xec>
		MOT_SET_COMPARE_AIN1(0);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_AIN2(0);
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <Motor_Set_Duty_Left+0xfc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	d1b71759 	.word	0xd1b71759
 8002bd4:	10624dd3 	.word	0x10624dd3
 8002bd8:	20012594 	.word	0x20012594

08002bdc <Motor_Stop>:
void Motor_Stop(){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002be0:	2100      	movs	r1, #0
 8002be2:	4808      	ldr	r0, [pc, #32]	; (8002c04 <Motor_Stop+0x28>)
 8002be4:	f00d fedc 	bl	80109a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002be8:	2104      	movs	r1, #4
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <Motor_Stop+0x28>)
 8002bec:	f00d fed8 	bl	80109a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002bf0:	2108      	movs	r1, #8
 8002bf2:	4804      	ldr	r0, [pc, #16]	; (8002c04 <Motor_Stop+0x28>)
 8002bf4:	f00d fed4 	bl	80109a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002bf8:	210c      	movs	r1, #12
 8002bfa:	4802      	ldr	r0, [pc, #8]	; (8002c04 <Motor_Stop+0x28>)
 8002bfc:	f00d fed0 	bl	80109a0 <HAL_TIM_PWM_Stop>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20012594 	.word	0x20012594

08002c08 <__NVIC_SystemReset>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <__NVIC_SystemReset+0x20>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c18:	4903      	ldr	r1, [pc, #12]	; (8002c28 <__NVIC_SystemReset+0x20>)
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__NVIC_SystemReset+0x24>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <__NVIC_SystemReset+0x1c>
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	05fa0004 	.word	0x05fa0004

08002c30 <interrupt_start>:
#include "mymacro.h"
#include "math.h"

const float delta_t = 0.0010;

void interrupt_start(){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <interrupt_start+0x10>)
 8002c36:	f00d fdb8 	bl	80107aa <HAL_TIM_Base_Start_IT>
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20012514 	.word	0x20012514
 8002c44:	00000000 	.word	0x00000000

08002c48 <interrupt_main>:

void interrupt_main(){
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	if(run_mode == STRAIGHT_MODE){
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <interrupt_main+0x230>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d143      	bne.n	8002cdc <interrupt_main+0x94>
		tar_speed += accel * delta_t;
 8002c54:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <interrupt_main+0x234>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002e80 <interrupt_main+0x238>
 8002c5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <interrupt_main+0x23c>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <interrupt_main+0x23c>)
 8002c6e:	edc3 7a00 	vstr	s15, [r3]
		tar_omega = 0.0; tar_angle = 0.0;
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <interrupt_main+0x240>)
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	4b84      	ldr	r3, [pc, #528]	; (8002e8c <interrupt_main+0x244>)
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
		tar_degree = tar_angle * 180.0/PI;
 8002c82:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <interrupt_main+0x244>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc66 	bl	8000558 <__aeabi_f2d>
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <interrupt_main+0x248>)
 8002c92:	f7fd fcb9 	bl	8000608 <__aeabi_dmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	460c      	mov	r4, r1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	a374      	add	r3, pc, #464	; (adr r3, 8002e70 <interrupt_main+0x228>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fdda 	bl	800085c <__aeabi_ddiv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4618      	mov	r0, r3
 8002cae:	4621      	mov	r1, r4
 8002cb0:	f7fd ff82 	bl	8000bb8 <__aeabi_d2f>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <interrupt_main+0x24c>)
 8002cb8:	601a      	str	r2, [r3, #0]
		if(tar_speed > max_speed)		tar_speed = max_speed;
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <interrupt_main+0x23c>)
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <interrupt_main+0x250>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	f340 8091 	ble.w	8002df4 <interrupt_main+0x1ac>
 8002cd2:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <interrupt_main+0x250>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6b      	ldr	r2, [pc, #428]	; (8002e84 <interrupt_main+0x23c>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e08b      	b.n	8002df4 <interrupt_main+0x1ac>
	}
	else if(run_mode == TURN_MODE){
 8002cdc:	4b66      	ldr	r3, [pc, #408]	; (8002e78 <interrupt_main+0x230>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 8087 	bne.w	8002df4 <interrupt_main+0x1ac>

		tar_speed += accel * delta_t;
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <interrupt_main+0x234>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002e80 <interrupt_main+0x238>
 8002cf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf4:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <interrupt_main+0x23c>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <interrupt_main+0x23c>)
 8002d00:	edc3 7a00 	vstr	s15, [r3]
		if(tar_speed > max_speed)	tar_speed = max_speed;
 8002d04:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <interrupt_main+0x23c>)
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <interrupt_main+0x250>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	dd03      	ble.n	8002d22 <interrupt_main+0xda>
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <interrupt_main+0x250>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a59      	ldr	r2, [pc, #356]	; (8002e84 <interrupt_main+0x23c>)
 8002d20:	6013      	str	r3, [r2, #0]

		tar_omega += omega_accel * delta_t;
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <interrupt_main+0x254>)
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002e80 <interrupt_main+0x238>
 8002d2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d30:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <interrupt_main+0x240>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <interrupt_main+0x240>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		tar_angle += tar_omega * delta_t;
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <interrupt_main+0x240>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002e80 <interrupt_main+0x238>
 8002d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d4e:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <interrupt_main+0x244>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <interrupt_main+0x244>)
 8002d5a:	edc3 7a00 	vstr	s15, [r3]
		tar_degree = tar_angle * 180.0/PI;
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <interrupt_main+0x244>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fbf8 	bl	8000558 <__aeabi_f2d>
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <interrupt_main+0x248>)
 8002d6e:	f7fd fc4b 	bl	8000608 <__aeabi_dmul>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	4618      	mov	r0, r3
 8002d78:	4621      	mov	r1, r4
 8002d7a:	a33d      	add	r3, pc, #244	; (adr r3, 8002e70 <interrupt_main+0x228>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fd6c 	bl	800085c <__aeabi_ddiv>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	f7fd ff14 	bl	8000bb8 <__aeabi_d2f>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <interrupt_main+0x24c>)
 8002d94:	601a      	str	r2, [r3, #0]

		if(turn_dir == LEFT){
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <interrupt_main+0x258>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d113      	bne.n	8002dc6 <interrupt_main+0x17e>
			if(tar_omega >= max_omega) {tar_omega = max_omega; omega_accel = 0.0; }
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <interrupt_main+0x240>)
 8002da0:	ed93 7a00 	vldr	s14, [r3]
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <interrupt_main+0x25c>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	db1f      	blt.n	8002df4 <interrupt_main+0x1ac>
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <interrupt_main+0x25c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <interrupt_main+0x240>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <interrupt_main+0x254>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e016      	b.n	8002df4 <interrupt_main+0x1ac>
		}
		else if(turn_dir == RIGHT){
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <interrupt_main+0x258>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d112      	bne.n	8002df4 <interrupt_main+0x1ac>
			if(tar_omega <= max_omega){ tar_omega = max_omega; omega_accel = 0.0; }
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <interrupt_main+0x240>)
 8002dd0:	ed93 7a00 	vldr	s14, [r3]
 8002dd4:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <interrupt_main+0x25c>)
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de2:	d807      	bhi.n	8002df4 <interrupt_main+0x1ac>
 8002de4:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <interrupt_main+0x25c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <interrupt_main+0x240>)
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <interrupt_main+0x254>)
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
		}
	}

	if(run_mode == STRAIGHT_MODE || run_mode == DIALOG_MODE){
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <interrupt_main+0x230>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d004      	beq.n	8002e06 <interrupt_main+0x1be>
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <interrupt_main+0x230>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	f040 80cd 	bne.w	8002fa0 <interrupt_main+0x358>
		if(con_wall.enable == true){
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <interrupt_main+0x260>)
 8002e08:	7f1b      	ldrb	r3, [r3, #28]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 80c8 	bne.w	8002fa0 <interrupt_main+0x358>
		con_wall.p_error = con_wall.error;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <interrupt_main+0x260>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <interrupt_main+0x260>)
 8002e16:	6113      	str	r3, [r2, #16]

		if(run_mode == DIALOG_MODE){
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <interrupt_main+0x230>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d10f      	bne.n	8002e40 <interrupt_main+0x1f8>
			if(sen_r.error < 0) sen_r.error = 0;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <interrupt_main+0x264>)
 8002e22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da02      	bge.n	8002e30 <interrupt_main+0x1e8>
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <interrupt_main+0x264>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	80da      	strh	r2, [r3, #6]
			if(sen_l.error < 0) sen_l.error = 0;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <interrupt_main+0x268>)
 8002e32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da02      	bge.n	8002e40 <interrupt_main+0x1f8>
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <interrupt_main+0x268>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	80da      	strh	r2, [r3, #6]
		}

		if((sen_r.is_controll == true)&&(sen_l.is_controll == true)){
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <interrupt_main+0x264>)
 8002e42:	7bdb      	ldrb	r3, [r3, #15]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d135      	bne.n	8002eb4 <interrupt_main+0x26c>
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <interrupt_main+0x268>)
 8002e4a:	7bdb      	ldrb	r3, [r3, #15]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d131      	bne.n	8002eb4 <interrupt_main+0x26c>
			con_wall.error = (float)(sen_r.error - sen_l.error);
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <interrupt_main+0x264>)
 8002e52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <interrupt_main+0x268>)
 8002e5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <interrupt_main+0x260>)
 8002e6a:	edc3 7a03 	vstr	s15, [r3, #12]
 8002e6e:	e032      	b.n	8002ed6 <interrupt_main+0x28e>
 8002e70:	fc8b007a 	.word	0xfc8b007a
 8002e74:	400921fa 	.word	0x400921fa
 8002e78:	2000a170 	.word	0x2000a170
 8002e7c:	2000a16c 	.word	0x2000a16c
 8002e80:	3a83126f 	.word	0x3a83126f
 8002e84:	2000d198 	.word	0x2000d198
 8002e88:	2000d43c 	.word	0x2000d43c
 8002e8c:	2000d204 	.word	0x2000d204
 8002e90:	40668000 	.word	0x40668000
 8002e94:	2001044c 	.word	0x2001044c
 8002e98:	2000d05c 	.word	0x2000d05c
 8002e9c:	200002dc 	.word	0x200002dc
 8002ea0:	20008218 	.word	0x20008218
 8002ea4:	20008208 	.word	0x20008208
 8002ea8:	20012398 	.word	0x20012398
 8002eac:	2000f480 	.word	0x2000f480
 8002eb0:	2000d064 	.word	0x2000d064

		}
		else {
			con_wall.error = 2.0*(float)(sen_r.error - sen_l.error);
 8002eb4:	4bc6      	ldr	r3, [pc, #792]	; (80031d0 <interrupt_main+0x588>)
 8002eb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4bc5      	ldr	r3, [pc, #788]	; (80031d4 <interrupt_main+0x58c>)
 8002ebe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ecc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ed0:	4bc1      	ldr	r3, [pc, #772]	; (80031d8 <interrupt_main+0x590>)
 8002ed2:	edc3 7a03 	vstr	s15, [r3, #12]
		}

		con_wall.diff = con_wall.error-con_wall.p_error;
 8002ed6:	4bc0      	ldr	r3, [pc, #768]	; (80031d8 <interrupt_main+0x590>)
 8002ed8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002edc:	4bbe      	ldr	r3, [pc, #760]	; (80031d8 <interrupt_main+0x590>)
 8002ede:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	4bbc      	ldr	r3, [pc, #752]	; (80031d8 <interrupt_main+0x590>)
 8002ee8:	edc3 7a05 	vstr	s15, [r3, #20]
		con_wall.sum += con_wall.error;
 8002eec:	4bba      	ldr	r3, [pc, #744]	; (80031d8 <interrupt_main+0x590>)
 8002eee:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ef2:	4bb9      	ldr	r3, [pc, #740]	; (80031d8 <interrupt_main+0x590>)
 8002ef4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efc:	4bb6      	ldr	r3, [pc, #728]	; (80031d8 <interrupt_main+0x590>)
 8002efe:	edc3 7a06 	vstr	s15, [r3, #24]

		con_wall.p_omg = con_wall.omg;
 8002f02:	4bb5      	ldr	r3, [pc, #724]	; (80031d8 <interrupt_main+0x590>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4ab4      	ldr	r2, [pc, #720]	; (80031d8 <interrupt_main+0x590>)
 8002f08:	6013      	str	r3, [r2, #0]
		con_wall.control =(CON_WALL_P_GAIN*con_wall.error + 0.0*CON_WALL_I_GAIN*con_wall.sum + 0.0*CON_WALL_D_GAIN*con_wall.diff);
 8002f0a:	4bb3      	ldr	r3, [pc, #716]	; (80031d8 <interrupt_main+0x590>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fb22 	bl	8000558 <__aeabi_f2d>
 8002f14:	a3aa      	add	r3, pc, #680	; (adr r3, 80031c0 <interrupt_main+0x578>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd fb75 	bl	8000608 <__aeabi_dmul>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	4625      	mov	r5, r4
 8002f24:	461c      	mov	r4, r3
 8002f26:	4bac      	ldr	r3, [pc, #688]	; (80031d8 <interrupt_main+0x590>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fb14 	bl	8000558 <__aeabi_f2d>
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	f7fd fb66 	bl	8000608 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4620      	mov	r0, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	f7fd f9aa 	bl	800029c <__adddf3>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	4625      	mov	r5, r4
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4ba1      	ldr	r3, [pc, #644]	; (80031d8 <interrupt_main+0x590>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd faff 	bl	8000558 <__aeabi_f2d>
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f7fd fb51 	bl	8000608 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd f995 	bl	800029c <__adddf3>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	4618      	mov	r0, r3
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f7fd fe1d 	bl	8000bb8 <__aeabi_d2f>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b95      	ldr	r3, [pc, #596]	; (80031d8 <interrupt_main+0x590>)
 8002f82:	609a      	str	r2, [r3, #8]
		con_wall.omg = con_wall.control/10.0; //+ 0.9*con_wall.omg;
 8002f84:	4b94      	ldr	r3, [pc, #592]	; (80031d8 <interrupt_main+0x590>)
 8002f86:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f8a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f92:	4b91      	ldr	r3, [pc, #580]	; (80031d8 <interrupt_main+0x590>)
 8002f94:	edc3 7a01 	vstr	s15, [r3, #4]

		tar_omega = con_wall.omg;//con_wall.p_omg;
 8002f98:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <interrupt_main+0x590>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a8f      	ldr	r2, [pc, #572]	; (80031dc <interrupt_main+0x594>)
 8002f9e:	6013      	str	r3, [r2, #0]

		}
	}

	I_speed += speed;	I_tar_speed += tar_speed;
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <interrupt_main+0x598>)
 8002fa2:	ed93 7a00 	vldr	s14, [r3]
 8002fa6:	4b8f      	ldr	r3, [pc, #572]	; (80031e4 <interrupt_main+0x59c>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <interrupt_main+0x598>)
 8002fb2:	edc3 7a00 	vstr	s15, [r3]
 8002fb6:	4b8c      	ldr	r3, [pc, #560]	; (80031e8 <interrupt_main+0x5a0>)
 8002fb8:	ed93 7a00 	vldr	s14, [r3]
 8002fbc:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <interrupt_main+0x5a4>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc6:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <interrupt_main+0x5a0>)
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
	I_omega += omega;	I_tar_omega += tar_omega;
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <interrupt_main+0x5a8>)
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <interrupt_main+0x5ac>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fdc:	4b84      	ldr	r3, [pc, #528]	; (80031f0 <interrupt_main+0x5a8>)
 8002fde:	edc3 7a00 	vstr	s15, [r3]
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <interrupt_main+0x5b0>)
 8002fe4:	ed93 7a00 	vldr	s14, [r3]
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <interrupt_main+0x594>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <interrupt_main+0x5b0>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]

	//PID制御
	V_r = V_l = 0;
 8002ff8:	4b80      	ldr	r3, [pc, #512]	; (80031fc <interrupt_main+0x5b4>)
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <interrupt_main+0x5b4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <interrupt_main+0x5b8>)
 8003006:	6013      	str	r3, [r2, #0]
	if(run_mode == STRAIGHT_MODE || run_mode == TURN_MODE  || run_mode == DIALOG_MODE){
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <interrupt_main+0x5bc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d008      	beq.n	8003022 <interrupt_main+0x3da>
 8003010:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <interrupt_main+0x5bc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d004      	beq.n	8003022 <interrupt_main+0x3da>
 8003018:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <interrupt_main+0x5bc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b03      	cmp	r3, #3
 800301e:	f040 8200 	bne.w	8003422 <interrupt_main+0x7da>
	//speed control
		//V_r += 0.001*accel*3.8/Battery_check();//0.45
		//V_l -= 0.001*accel*3.8/Battery_check();//0.45

		V_r += (tar_speed - speed) * SPEED_P_GAIN;
 8003022:	4b77      	ldr	r3, [pc, #476]	; (8003200 <interrupt_main+0x5b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa96 	bl	8000558 <__aeabi_f2d>
 800302c:	4604      	mov	r4, r0
 800302e:	460d      	mov	r5, r1
 8003030:	4b6e      	ldr	r3, [pc, #440]	; (80031ec <interrupt_main+0x5a4>)
 8003032:	ed93 7a00 	vldr	s14, [r3]
 8003036:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <interrupt_main+0x59c>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f7fd fa88 	bl	8000558 <__aeabi_f2d>
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	4b6e      	ldr	r3, [pc, #440]	; (8003208 <interrupt_main+0x5c0>)
 800304e:	f7fd fadb 	bl	8000608 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f7fd f91f 	bl	800029c <__adddf3>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	4618      	mov	r0, r3
 8003064:	4621      	mov	r1, r4
 8003066:	f7fd fda7 	bl	8000bb8 <__aeabi_d2f>
 800306a:	4602      	mov	r2, r0
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <interrupt_main+0x5b8>)
 800306e:	601a      	str	r2, [r3, #0]
		V_l -= (tar_speed - speed) * SPEED_P_GAIN;
 8003070:	4b62      	ldr	r3, [pc, #392]	; (80031fc <interrupt_main+0x5b4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa6f 	bl	8000558 <__aeabi_f2d>
 800307a:	4604      	mov	r4, r0
 800307c:	460d      	mov	r5, r1
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <interrupt_main+0x5a4>)
 8003080:	ed93 7a00 	vldr	s14, [r3]
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <interrupt_main+0x59c>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308e:	ee17 0a90 	vmov	r0, s15
 8003092:	f7fd fa61 	bl	8000558 <__aeabi_f2d>
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <interrupt_main+0x5c0>)
 800309c:	f7fd fab4 	bl	8000608 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f8f6 	bl	8000298 <__aeabi_dsub>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4618      	mov	r0, r3
 80030b2:	4621      	mov	r1, r4
 80030b4:	f7fd fd80 	bl	8000bb8 <__aeabi_d2f>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b50      	ldr	r3, [pc, #320]	; (80031fc <interrupt_main+0x5b4>)
 80030bc:	601a      	str	r2, [r3, #0]

		V_r += (I_tar_speed - I_speed) * SPEED_I_GAIN;
 80030be:	4b50      	ldr	r3, [pc, #320]	; (8003200 <interrupt_main+0x5b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa48 	bl	8000558 <__aeabi_f2d>
 80030c8:	4604      	mov	r4, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <interrupt_main+0x5a0>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <interrupt_main+0x598>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030dc:	ee17 0a90 	vmov	r0, s15
 80030e0:	f7fd fa3a 	bl	8000558 <__aeabi_f2d>
 80030e4:	a338      	add	r3, pc, #224	; (adr r3, 80031c8 <interrupt_main+0x580>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd fa8d 	bl	8000608 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4620      	mov	r0, r4
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7fd f8d1 	bl	800029c <__adddf3>
 80030fa:	4603      	mov	r3, r0
 80030fc:	460c      	mov	r4, r1
 80030fe:	4618      	mov	r0, r3
 8003100:	4621      	mov	r1, r4
 8003102:	f7fd fd59 	bl	8000bb8 <__aeabi_d2f>
 8003106:	4602      	mov	r2, r0
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <interrupt_main+0x5b8>)
 800310a:	601a      	str	r2, [r3, #0]
		V_l -= (I_tar_speed - I_speed) * SPEED_I_GAIN;
 800310c:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <interrupt_main+0x5b4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa21 	bl	8000558 <__aeabi_f2d>
 8003116:	4604      	mov	r4, r0
 8003118:	460d      	mov	r5, r1
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <interrupt_main+0x5a0>)
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <interrupt_main+0x598>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	ee17 0a90 	vmov	r0, s15
 800312e:	f7fd fa13 	bl	8000558 <__aeabi_f2d>
 8003132:	a325      	add	r3, pc, #148	; (adr r3, 80031c8 <interrupt_main+0x580>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd fa66 	bl	8000608 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f8a8 	bl	8000298 <__aeabi_dsub>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	4618      	mov	r0, r3
 800314e:	4621      	mov	r1, r4
 8003150:	f7fd fd32 	bl	8000bb8 <__aeabi_d2f>
 8003154:	4602      	mov	r2, r0
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <interrupt_main+0x5b4>)
 8003158:	601a      	str	r2, [r3, #0]

		V_r -= (p_speed - speed) * SPEED_I_GAIN;
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <interrupt_main+0x5b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9fa 	bl	8000558 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <interrupt_main+0x5c4>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <interrupt_main+0x59c>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	ee17 0a90 	vmov	r0, s15
 800317c:	f7fd f9ec 	bl	8000558 <__aeabi_f2d>
 8003180:	a311      	add	r3, pc, #68	; (adr r3, 80031c8 <interrupt_main+0x580>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd fa3f 	bl	8000608 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f881 	bl	8000298 <__aeabi_dsub>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	4618      	mov	r0, r3
 800319c:	4621      	mov	r1, r4
 800319e:	f7fd fd0b 	bl	8000bb8 <__aeabi_d2f>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <interrupt_main+0x5b8>)
 80031a6:	601a      	str	r2, [r3, #0]
		V_l += (p_speed - speed) * SPEED_I_GAIN;
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <interrupt_main+0x5b4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9d3 	bl	8000558 <__aeabi_f2d>
 80031b2:	4604      	mov	r4, r0
 80031b4:	460d      	mov	r5, r1
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <interrupt_main+0x5c4>)
 80031b8:	ed93 7a00 	vldr	s14, [r3]
 80031bc:	e028      	b.n	8003210 <interrupt_main+0x5c8>
 80031be:	bf00      	nop
 80031c0:	47ae147b 	.word	0x47ae147b
 80031c4:	3f847ae1 	.word	0x3f847ae1
 80031c8:	9999999a 	.word	0x9999999a
 80031cc:	3fc99999 	.word	0x3fc99999
 80031d0:	2000f480 	.word	0x2000f480
 80031d4:	2000d064 	.word	0x2000d064
 80031d8:	20012398 	.word	0x20012398
 80031dc:	2000d43c 	.word	0x2000d43c
 80031e0:	2000d1d8 	.word	0x2000d1d8
 80031e4:	2000d230 	.word	0x2000d230
 80031e8:	200004ec 	.word	0x200004ec
 80031ec:	2000d198 	.word	0x2000d198
 80031f0:	2000821c 	.word	0x2000821c
 80031f4:	2000f494 	.word	0x2000f494
 80031f8:	2000d210 	.word	0x2000d210
 80031fc:	20008214 	.word	0x20008214
 8003200:	2000d060 	.word	0x2000d060
 8003204:	2000a170 	.word	0x2000a170
 8003208:	402e0000 	.word	0x402e0000
 800320c:	2000d1b4 	.word	0x2000d1b4
 8003210:	4bc3      	ldr	r3, [pc, #780]	; (8003520 <interrupt_main+0x8d8>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	ee17 0a90 	vmov	r0, s15
 800321e:	f7fd f99b 	bl	8000558 <__aeabi_f2d>
 8003222:	a3b9      	add	r3, pc, #740	; (adr r3, 8003508 <interrupt_main+0x8c0>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd f9ee 	bl	8000608 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd f832 	bl	800029c <__adddf3>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	4618      	mov	r0, r3
 800323e:	4621      	mov	r1, r4
 8003240:	f7fd fcba 	bl	8000bb8 <__aeabi_d2f>
 8003244:	4602      	mov	r2, r0
 8003246:	4bb7      	ldr	r3, [pc, #732]	; (8003524 <interrupt_main+0x8dc>)
 8003248:	601a      	str	r2, [r3, #0]

	//omega control
		//V_r += (0.01*omega_accel*3.8/Battery_check())/1000.0;
		//V_l += (0.01*omega_accel*3.8/Battery_check())/1000.0;

		V_r += (tar_omega - omega) * OMEGA_P_GAIN;
 800324a:	4bb7      	ldr	r3, [pc, #732]	; (8003528 <interrupt_main+0x8e0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f982 	bl	8000558 <__aeabi_f2d>
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
 8003258:	4bb4      	ldr	r3, [pc, #720]	; (800352c <interrupt_main+0x8e4>)
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	4bb4      	ldr	r3, [pc, #720]	; (8003530 <interrupt_main+0x8e8>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	ee17 0a90 	vmov	r0, s15
 800326c:	f7fd f974 	bl	8000558 <__aeabi_f2d>
 8003270:	a3a7      	add	r3, pc, #668	; (adr r3, 8003510 <interrupt_main+0x8c8>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f9c7 	bl	8000608 <__aeabi_dmul>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f7fd f80b 	bl	800029c <__adddf3>
 8003286:	4603      	mov	r3, r0
 8003288:	460c      	mov	r4, r1
 800328a:	4618      	mov	r0, r3
 800328c:	4621      	mov	r1, r4
 800328e:	f7fd fc93 	bl	8000bb8 <__aeabi_d2f>
 8003292:	4602      	mov	r2, r0
 8003294:	4ba4      	ldr	r3, [pc, #656]	; (8003528 <interrupt_main+0x8e0>)
 8003296:	601a      	str	r2, [r3, #0]
		V_l += (tar_omega - omega) * OMEGA_P_GAIN;
 8003298:	4ba2      	ldr	r3, [pc, #648]	; (8003524 <interrupt_main+0x8dc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f95b 	bl	8000558 <__aeabi_f2d>
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1
 80032a6:	4ba1      	ldr	r3, [pc, #644]	; (800352c <interrupt_main+0x8e4>)
 80032a8:	ed93 7a00 	vldr	s14, [r3]
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <interrupt_main+0x8e8>)
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	ee17 0a90 	vmov	r0, s15
 80032ba:	f7fd f94d 	bl	8000558 <__aeabi_f2d>
 80032be:	a394      	add	r3, pc, #592	; (adr r3, 8003510 <interrupt_main+0x8c8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f9a0 	bl	8000608 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4620      	mov	r0, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	f7fc ffe4 	bl	800029c <__adddf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	460c      	mov	r4, r1
 80032d8:	4618      	mov	r0, r3
 80032da:	4621      	mov	r1, r4
 80032dc:	f7fd fc6c 	bl	8000bb8 <__aeabi_d2f>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b90      	ldr	r3, [pc, #576]	; (8003524 <interrupt_main+0x8dc>)
 80032e4:	601a      	str	r2, [r3, #0]

		V_r += (I_tar_omega - I_omega) * OMEGA_I_GAIN;
 80032e6:	4b90      	ldr	r3, [pc, #576]	; (8003528 <interrupt_main+0x8e0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f934 	bl	8000558 <__aeabi_f2d>
 80032f0:	4604      	mov	r4, r0
 80032f2:	460d      	mov	r5, r1
 80032f4:	4b8f      	ldr	r3, [pc, #572]	; (8003534 <interrupt_main+0x8ec>)
 80032f6:	ed93 7a00 	vldr	s14, [r3]
 80032fa:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <interrupt_main+0x8f0>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003304:	ee17 0a90 	vmov	r0, s15
 8003308:	f7fd f926 	bl	8000558 <__aeabi_f2d>
 800330c:	a382      	add	r3, pc, #520	; (adr r3, 8003518 <interrupt_main+0x8d0>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f979 	bl	8000608 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fc ffbd 	bl	800029c <__adddf3>
 8003322:	4603      	mov	r3, r0
 8003324:	460c      	mov	r4, r1
 8003326:	4618      	mov	r0, r3
 8003328:	4621      	mov	r1, r4
 800332a:	f7fd fc45 	bl	8000bb8 <__aeabi_d2f>
 800332e:	4602      	mov	r2, r0
 8003330:	4b7d      	ldr	r3, [pc, #500]	; (8003528 <interrupt_main+0x8e0>)
 8003332:	601a      	str	r2, [r3, #0]
		V_l += (I_tar_omega - I_omega) * OMEGA_I_GAIN;
 8003334:	4b7b      	ldr	r3, [pc, #492]	; (8003524 <interrupt_main+0x8dc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f90d 	bl	8000558 <__aeabi_f2d>
 800333e:	4604      	mov	r4, r0
 8003340:	460d      	mov	r5, r1
 8003342:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <interrupt_main+0x8ec>)
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	4b7b      	ldr	r3, [pc, #492]	; (8003538 <interrupt_main+0x8f0>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003352:	ee17 0a90 	vmov	r0, s15
 8003356:	f7fd f8ff 	bl	8000558 <__aeabi_f2d>
 800335a:	a36f      	add	r3, pc, #444	; (adr r3, 8003518 <interrupt_main+0x8d0>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fd f952 	bl	8000608 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4620      	mov	r0, r4
 800336a:	4629      	mov	r1, r5
 800336c:	f7fc ff96 	bl	800029c <__adddf3>
 8003370:	4603      	mov	r3, r0
 8003372:	460c      	mov	r4, r1
 8003374:	4618      	mov	r0, r3
 8003376:	4621      	mov	r1, r4
 8003378:	f7fd fc1e 	bl	8000bb8 <__aeabi_d2f>
 800337c:	4602      	mov	r2, r0
 800337e:	4b69      	ldr	r3, [pc, #420]	; (8003524 <interrupt_main+0x8dc>)
 8003380:	601a      	str	r2, [r3, #0]

		V_r -= (p_omega - omega) * OMEGA_D_GAIN;
 8003382:	4b69      	ldr	r3, [pc, #420]	; (8003528 <interrupt_main+0x8e0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8e6 	bl	8000558 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <interrupt_main+0x8f4>)
 8003392:	ed93 7a00 	vldr	s14, [r3]
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <interrupt_main+0x8e8>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a0:	ee17 0a90 	vmov	r0, s15
 80033a4:	f7fd f8d8 	bl	8000558 <__aeabi_f2d>
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f7fd f92a 	bl	8000608 <__aeabi_dmul>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fc ff6c 	bl	8000298 <__aeabi_dsub>
 80033c0:	4603      	mov	r3, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	4618      	mov	r0, r3
 80033c6:	4621      	mov	r1, r4
 80033c8:	f7fd fbf6 	bl	8000bb8 <__aeabi_d2f>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b56      	ldr	r3, [pc, #344]	; (8003528 <interrupt_main+0x8e0>)
 80033d0:	601a      	str	r2, [r3, #0]
		V_l -= (p_omega - omega) * OMEGA_D_GAIN;
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <interrupt_main+0x8dc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f8be 	bl	8000558 <__aeabi_f2d>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
 80033e0:	4b56      	ldr	r3, [pc, #344]	; (800353c <interrupt_main+0x8f4>)
 80033e2:	ed93 7a00 	vldr	s14, [r3]
 80033e6:	4b52      	ldr	r3, [pc, #328]	; (8003530 <interrupt_main+0x8e8>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	f7fd f8b0 	bl	8000558 <__aeabi_f2d>
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	f7fd f902 	bl	8000608 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4620      	mov	r0, r4
 800340a:	4629      	mov	r1, r5
 800340c:	f7fc ff44 	bl	8000298 <__aeabi_dsub>
 8003410:	4603      	mov	r3, r0
 8003412:	460c      	mov	r4, r1
 8003414:	4618      	mov	r0, r3
 8003416:	4621      	mov	r1, r4
 8003418:	f7fd fbce 	bl	8000bb8 <__aeabi_d2f>
 800341c:	4602      	mov	r2, r0
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <interrupt_main+0x8dc>)
 8003420:	601a      	str	r2, [r3, #0]

	}

	if(run_mode == STRAIGHT_MODE || run_mode == TURN_MODE  || run_mode == DIALOG_MODE){
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <interrupt_main+0x8f8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d008      	beq.n	800343c <interrupt_main+0x7f4>
 800342a:	4b45      	ldr	r3, [pc, #276]	; (8003540 <interrupt_main+0x8f8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d004      	beq.n	800343c <interrupt_main+0x7f4>
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <interrupt_main+0x8f8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b03      	cmp	r3, #3
 8003438:	f040 80c2 	bne.w	80035c0 <interrupt_main+0x978>
		if(ABS(V_r) > 5.0){
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <interrupt_main+0x8e0>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	d50d      	bpl.n	8003468 <interrupt_main+0x820>
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <interrupt_main+0x8e0>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	bf4c      	ite	mi
 8003460:	2301      	movmi	r3, #1
 8003462:	2300      	movpl	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e00c      	b.n	8003482 <interrupt_main+0x83a>
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <interrupt_main+0x8e0>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	bfcc      	ite	gt
 800347c:	2301      	movgt	r3, #1
 800347e:	2300      	movle	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <interrupt_main+0x85c>
			motor_out_r = (int)(SIGN(V_r) * 5.0 * 180.0);
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <interrupt_main+0x8e0>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	d501      	bpl.n	800349a <interrupt_main+0x852>
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <interrupt_main+0x8fc>)
 8003498:	e001      	b.n	800349e <interrupt_main+0x856>
 800349a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800349e:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <interrupt_main+0x900>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e012      	b.n	80034ca <interrupt_main+0x882>
		}else{
			motor_out_r = (int)(V_r * 180.0);
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <interrupt_main+0x8e0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f855 	bl	8000558 <__aeabi_f2d>
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <interrupt_main+0x904>)
 80034b4:	f7fd f8a8 	bl	8000608 <__aeabi_dmul>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	4618      	mov	r0, r3
 80034be:	4621      	mov	r1, r4
 80034c0:	f7fd fb52 	bl	8000b68 <__aeabi_d2iz>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <interrupt_main+0x900>)
 80034c8:	601a      	str	r2, [r3, #0]
		}
		Motor_Set_Duty_Right(motor_out_r);
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <interrupt_main+0x900>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fa83 	bl	80029dc <Motor_Set_Duty_Right>

		if(ABS(V_l) > 5.0){
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <interrupt_main+0x8dc>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	d534      	bpl.n	8003550 <interrupt_main+0x908>
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <interrupt_main+0x8dc>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80034f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	bf4c      	ite	mi
 80034fa:	2301      	movmi	r3, #1
 80034fc:	2300      	movpl	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e033      	b.n	800356a <interrupt_main+0x922>
 8003502:	bf00      	nop
 8003504:	f3af 8000 	nop.w
 8003508:	9999999a 	.word	0x9999999a
 800350c:	3fc99999 	.word	0x3fc99999
 8003510:	33333333 	.word	0x33333333
 8003514:	3fe33333 	.word	0x3fe33333
 8003518:	47ae147b 	.word	0x47ae147b
 800351c:	3f847ae1 	.word	0x3f847ae1
 8003520:	2000d230 	.word	0x2000d230
 8003524:	20008214 	.word	0x20008214
 8003528:	2000d060 	.word	0x2000d060
 800352c:	2000d43c 	.word	0x2000d43c
 8003530:	2000f494 	.word	0x2000f494
 8003534:	2000d210 	.word	0x2000d210
 8003538:	2000821c 	.word	0x2000821c
 800353c:	20008224 	.word	0x20008224
 8003540:	2000a170 	.word	0x2000a170
 8003544:	fffffc7c 	.word	0xfffffc7c
 8003548:	20010450 	.word	0x20010450
 800354c:	40668000 	.word	0x40668000
 8003550:	4b9b      	ldr	r3, [pc, #620]	; (80037c0 <interrupt_main+0xb78>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	bfcc      	ite	gt
 8003564:	2301      	movgt	r3, #1
 8003566:	2300      	movle	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <interrupt_main+0x944>
			motor_out_l = (int)(SIGN(V_l) * 5.0 * 180.0);
 800356e:	4b94      	ldr	r3, [pc, #592]	; (80037c0 <interrupt_main+0xb78>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	d501      	bpl.n	8003582 <interrupt_main+0x93a>
 800357e:	4b91      	ldr	r3, [pc, #580]	; (80037c4 <interrupt_main+0xb7c>)
 8003580:	e001      	b.n	8003586 <interrupt_main+0x93e>
 8003582:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003586:	4a90      	ldr	r2, [pc, #576]	; (80037c8 <interrupt_main+0xb80>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e012      	b.n	80035b2 <interrupt_main+0x96a>
		}else{
			motor_out_l = (int)(V_l * 180.0);
 800358c:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <interrupt_main+0xb78>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffe1 	bl	8000558 <__aeabi_f2d>
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <interrupt_main+0xb84>)
 800359c:	f7fd f834 	bl	8000608 <__aeabi_dmul>
 80035a0:	4603      	mov	r3, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	4618      	mov	r0, r3
 80035a6:	4621      	mov	r1, r4
 80035a8:	f7fd fade 	bl	8000b68 <__aeabi_d2iz>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b86      	ldr	r3, [pc, #536]	; (80037c8 <interrupt_main+0xb80>)
 80035b0:	601a      	str	r2, [r3, #0]
		}
		Motor_Set_Duty_Left(motor_out_l);
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <interrupt_main+0xb80>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fa8f 	bl	8002adc <Motor_Set_Duty_Left>
 80035be:	e014      	b.n	80035ea <interrupt_main+0x9a2>

	}else if(run_mode == NON_CON_MODE){
 80035c0:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <interrupt_main+0xb88>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <interrupt_main+0x98e>
		Motor_Set_Duty_Right(0);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff fa07 	bl	80029dc <Motor_Set_Duty_Right>
		Motor_Set_Duty_Left(0);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7ff fa84 	bl	8002adc <Motor_Set_Duty_Left>
 80035d4:	e009      	b.n	80035ea <interrupt_main+0x9a2>
	}else if(run_mode == ADJUST_MODE){
 80035d6:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <interrupt_main+0xb88>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d105      	bne.n	80035ea <interrupt_main+0x9a2>
		Motor_Set_Duty_Right(200);
 80035de:	20c8      	movs	r0, #200	; 0xc8
 80035e0:	f7ff f9fc 	bl	80029dc <Motor_Set_Duty_Right>
		Motor_Set_Duty_Left(200);
 80035e4:	20c8      	movs	r0, #200	; 0xc8
 80035e6:	f7ff fa79 	bl	8002adc <Motor_Set_Duty_Left>
	}



	if(log_flag == 1 && log_count < LOG_COUNT){
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <interrupt_main+0xb8c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	f040 80e2 	bne.w	80037b8 <interrupt_main+0xb70>
 80035f4:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <interrupt_main+0xb90>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fc:	f280 80dc 	bge.w	80037b8 <interrupt_main+0xb70>
		position_log[0][log_count] = enc_R.count;
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <interrupt_main+0xb94>)
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <interrupt_main+0xb90>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4611      	mov	r1, r2
 800360a:	4a75      	ldr	r2, [pc, #468]	; (80037e0 <interrupt_main+0xb98>)
 800360c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		position_log[1][log_count] = enc_L.count;
 8003610:	4b74      	ldr	r3, [pc, #464]	; (80037e4 <interrupt_main+0xb9c>)
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <interrupt_main+0xb90>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4611      	mov	r1, r2
 800361a:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <interrupt_main+0xb98>)
 800361c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		speed_log[0][log_count] = tar_speed;		speed_log[1][log_count] = speed;
 8003624:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <interrupt_main+0xb90>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6f      	ldr	r2, [pc, #444]	; (80037e8 <interrupt_main+0xba0>)
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	496f      	ldr	r1, [pc, #444]	; (80037ec <interrupt_main+0xba4>)
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <interrupt_main+0xb90>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6d      	ldr	r2, [pc, #436]	; (80037f0 <interrupt_main+0xba8>)
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	496b      	ldr	r1, [pc, #428]	; (80037ec <interrupt_main+0xba4>)
 800363e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	601a      	str	r2, [r3, #0]
		speed_log[2][log_count] = enc_R.speed;		speed_log[3][log_count] = enc_L.speed;
 8003648:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <interrupt_main+0xb90>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a63      	ldr	r2, [pc, #396]	; (80037dc <interrupt_main+0xb94>)
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	4966      	ldr	r1, [pc, #408]	; (80037ec <interrupt_main+0xba4>)
 8003652:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <interrupt_main+0xb90>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a60      	ldr	r2, [pc, #384]	; (80037e4 <interrupt_main+0xb9c>)
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	4961      	ldr	r1, [pc, #388]	; (80037ec <interrupt_main+0xba4>)
 8003666:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	601a      	str	r2, [r3, #0]

		omega_log[0][log_count] = tar_omega;		omega_log[1][log_count] = omega;
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <interrupt_main+0xb90>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5f      	ldr	r2, [pc, #380]	; (80037f4 <interrupt_main+0xbac>)
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	495f      	ldr	r1, [pc, #380]	; (80037f8 <interrupt_main+0xbb0>)
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <interrupt_main+0xb90>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5d      	ldr	r2, [pc, #372]	; (80037fc <interrupt_main+0xbb4>)
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	495b      	ldr	r1, [pc, #364]	; (80037f8 <interrupt_main+0xbb0>)
 800368a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	601a      	str	r2, [r3, #0]

		sens_log[0][log_count] = sen_fr.value;		sens_log[1][log_count] = sen_fl.value;
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <interrupt_main+0xbb8>)
 8003696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <interrupt_main+0xb90>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b291      	uxth	r1, r2
 80036a0:	4a58      	ldr	r2, [pc, #352]	; (8003804 <interrupt_main+0xbbc>)
 80036a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80036a6:	4b58      	ldr	r3, [pc, #352]	; (8003808 <interrupt_main+0xbc0>)
 80036a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <interrupt_main+0xb90>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b291      	uxth	r1, r2
 80036b2:	4a54      	ldr	r2, [pc, #336]	; (8003804 <interrupt_main+0xbbc>)
 80036b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80036b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sens_log[2][log_count] = sen_r.value;		sens_log[3][log_count] = sen_l.value;
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <interrupt_main+0xbc4>)
 80036be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <interrupt_main+0xb90>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b291      	uxth	r1, r2
 80036c8:	4a4e      	ldr	r2, [pc, #312]	; (8003804 <interrupt_main+0xbbc>)
 80036ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80036ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80036d2:	4b4f      	ldr	r3, [pc, #316]	; (8003810 <interrupt_main+0xbc8>)
 80036d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <interrupt_main+0xb90>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b291      	uxth	r1, r2
 80036de:	4a49      	ldr	r2, [pc, #292]	; (8003804 <interrupt_main+0xbbc>)
 80036e0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80036e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		sens_log2[0][log_count] = sen_r.c_value; 	sens_log2[1][log_count] = sen_l.c_value;
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <interrupt_main+0xb90>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a47      	ldr	r2, [pc, #284]	; (800380c <interrupt_main+0xbc4>)
 80036ee:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80036f2:	4a48      	ldr	r2, [pc, #288]	; (8003814 <interrupt_main+0xbcc>)
 80036f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <interrupt_main+0xb90>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a44      	ldr	r2, [pc, #272]	; (8003810 <interrupt_main+0xbc8>)
 80036fe:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8003702:	4a44      	ldr	r2, [pc, #272]	; (8003814 <interrupt_main+0xbcc>)
 8003704:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003708:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sens_log2[2][log_count] = sen_r.cnt;		sens_log2[3][log_count] = sen_l.cnt;
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <interrupt_main+0xb90>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3e      	ldr	r2, [pc, #248]	; (800380c <interrupt_main+0xbc4>)
 8003712:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <interrupt_main+0xbcc>)
 8003718:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800371c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <interrupt_main+0xb90>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3a      	ldr	r2, [pc, #232]	; (8003810 <interrupt_main+0xbc8>)
 8003726:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <interrupt_main+0xbcc>)
 800372c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8003730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		accel_log[x_axis][log_count] = read_accel_x_axis();
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <interrupt_main+0xb90>)
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	f000 fe16 	bl	8004368 <read_accel_x_axis>
 800373c:	eef0 7a40 	vmov.f32	s15, s0
 8003740:	4a35      	ldr	r2, [pc, #212]	; (8003818 <interrupt_main+0xbd0>)
 8003742:	00a3      	lsls	r3, r4, #2
 8003744:	4413      	add	r3, r2
 8003746:	edc3 7a00 	vstr	s15, [r3]
		accel_log[y_axis][log_count] = read_accel_y_axis();
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <interrupt_main+0xb90>)
 800374c:	681c      	ldr	r4, [r3, #0]
 800374e:	f000 fe3b 	bl	80043c8 <read_accel_y_axis>
 8003752:	eef0 7a40 	vmov.f32	s15, s0
 8003756:	4a30      	ldr	r2, [pc, #192]	; (8003818 <interrupt_main+0xbd0>)
 8003758:	f504 737a 	add.w	r3, r4, #1000	; 0x3e8
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	edc3 7a00 	vstr	s15, [r3]
		accel_log[z_axis][log_count] = read_accel_z_axis();
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <interrupt_main+0xb90>)
 8003766:	681c      	ldr	r4, [r3, #0]
 8003768:	f000 fe5e 	bl	8004428 <read_accel_z_axis>
 800376c:	eef0 7a40 	vmov.f32	s15, s0
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <interrupt_main+0xbd0>)
 8003772:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	edc3 7a00 	vstr	s15, [r3]

		duty_log[0][log_count] = motor_out_r;
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <interrupt_main+0xb90>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <interrupt_main+0xbd4>)
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	4926      	ldr	r1, [pc, #152]	; (8003820 <interrupt_main+0xbd8>)
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		duty_log[1][log_count] = motor_out_l;
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <interrupt_main+0xb90>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <interrupt_main+0xb80>)
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4922      	ldr	r1, [pc, #136]	; (8003820 <interrupt_main+0xbd8>)
 8003796:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		length_log[log_count]  = len_mouse;
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <interrupt_main+0xb90>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <interrupt_main+0xbdc>)
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4920      	ldr	r1, [pc, #128]	; (8003828 <interrupt_main+0xbe0>)
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	601a      	str	r2, [r3, #0]

		log_count++;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <interrupt_main+0xb90>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <interrupt_main+0xb90>)
 80037b6:	6013      	str	r3, [r2, #0]
	}
	check_error();
 80037b8:	f000 faa2 	bl	8003d00 <check_error>
}
 80037bc:	bf00      	nop
 80037be:	bdb0      	pop	{r4, r5, r7, pc}
 80037c0:	20008214 	.word	0x20008214
 80037c4:	fffffc7c 	.word	0xfffffc7c
 80037c8:	2000243c 	.word	0x2000243c
 80037cc:	40668000 	.word	0x40668000
 80037d0:	2000a170 	.word	0x2000a170
 80037d4:	2000f498 	.word	0x2000f498
 80037d8:	2000d238 	.word	0x2000d238
 80037dc:	2000d1e8 	.word	0x2000d1e8
 80037e0:	20002440 	.word	0x20002440
 80037e4:	2000d218 	.word	0x2000d218
 80037e8:	2000d198 	.word	0x2000d198
 80037ec:	20004388 	.word	0x20004388
 80037f0:	2000d230 	.word	0x2000d230
 80037f4:	2000d43c 	.word	0x2000d43c
 80037f8:	200004f8 	.word	0x200004f8
 80037fc:	2000f494 	.word	0x2000f494
 8003800:	2000d1b8 	.word	0x2000d1b8
 8003804:	2000d540 	.word	0x2000d540
 8003808:	2000d1c8 	.word	0x2000d1c8
 800380c:	2000f480 	.word	0x2000f480
 8003810:	2000d064 	.word	0x2000d064
 8003814:	20008228 	.word	0x20008228
 8003818:	2000a17c 	.word	0x2000a17c
 800381c:	20010450 	.word	0x20010450
 8003820:	20010458 	.word	0x20010458
 8003824:	200123b8 	.word	0x200123b8
 8003828:	2000f4ac 	.word	0x2000f4ac
 800382c:	00000000 	.word	0x00000000

08003830 <get_speed>:

void get_speed(){
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0

	enc_R.p_count = enc_R.count;	enc_R.count	= read_enc_R_count();
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <get_speed+0x120>)
 8003838:	881a      	ldrh	r2, [r3, #0]
 800383a:	4b45      	ldr	r3, [pc, #276]	; (8003950 <get_speed+0x120>)
 800383c:	805a      	strh	r2, [r3, #2]
 800383e:	f000 fcf3 	bl	8004228 <read_enc_R_count>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	4b42      	ldr	r3, [pc, #264]	; (8003950 <get_speed+0x120>)
 8003848:	801a      	strh	r2, [r3, #0]
	enc_L.p_count = enc_L.count;	enc_L.count	= read_enc_L_count();
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <get_speed+0x124>)
 800384c:	881a      	ldrh	r2, [r3, #0]
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <get_speed+0x124>)
 8003850:	805a      	strh	r2, [r3, #2]
 8003852:	f000 fcfb 	bl	800424c <read_enc_L_count>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <get_speed+0x124>)
 800385c:	801a      	strh	r2, [r3, #0]

	enc_R.diff_pulse = (int32_t)enc_R.count - (int32_t)enc_R.p_count;
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <get_speed+0x120>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <get_speed+0x120>)
 8003866:	885b      	ldrh	r3, [r3, #2]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	4a39      	ldr	r2, [pc, #228]	; (8003950 <get_speed+0x120>)
 800386c:	6053      	str	r3, [r2, #4]
	if((enc_R.diff_pulse > ENC_CNT_HALF || enc_R.diff_pulse < (-1)*(ENC_CNT_HALF) ) && enc_R.p_count > ENC_CNT_HALF ){
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <get_speed+0x120>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	dc04      	bgt.n	8003882 <get_speed+0x52>
 8003878:	4b35      	ldr	r3, [pc, #212]	; (8003950 <get_speed+0x120>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8003880:	da0e      	bge.n	80038a0 <get_speed+0x70>
 8003882:	4b33      	ldr	r3, [pc, #204]	; (8003950 <get_speed+0x120>)
 8003884:	885b      	ldrh	r3, [r3, #2]
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d909      	bls.n	80038a0 <get_speed+0x70>
		enc_R.diff_pulse = ((ENC_CNT_MAX) - enc_R.p_count) + enc_R.count;
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <get_speed+0x120>)
 800388e:	885b      	ldrh	r3, [r3, #2]
 8003890:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003894:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <get_speed+0x120>)
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	4413      	add	r3, r2
 800389a:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <get_speed+0x120>)
 800389c:	6053      	str	r3, [r2, #4]
 800389e:	e017      	b.n	80038d0 <get_speed+0xa0>
	}
	else if((enc_R.diff_pulse > ENC_CNT_HALF || enc_R.diff_pulse < (-1)*(ENC_CNT_HALF) ) && enc_R.p_count <= ENC_CNT_HALF){
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <get_speed+0x120>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	dc04      	bgt.n	80038b4 <get_speed+0x84>
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <get_speed+0x120>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80038b2:	da0d      	bge.n	80038d0 <get_speed+0xa0>
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <get_speed+0x120>)
 80038b6:	885b      	ldrh	r3, [r3, #2]
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d808      	bhi.n	80038d0 <get_speed+0xa0>
		enc_R.diff_pulse = (enc_R.count - ENC_CNT_MAX) - enc_R.p_count;
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <get_speed+0x120>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <get_speed+0x120>)
 80038c8:	8852      	ldrh	r2, [r2, #2]
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <get_speed+0x120>)
 80038ce:	6053      	str	r3, [r2, #4]
	}
	//enc_R.speed = 0.1*(float)enc_R.diff_pulse*MMPP+0.9*enc_R.speed;
	enc_R.speed = (float)enc_R.diff_pulse*MMPP;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <get_speed+0x120>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038dc:	ee17 0a90 	vmov	r0, s15
 80038e0:	f7fc fe3a 	bl	8000558 <__aeabi_f2d>
 80038e4:	a318      	add	r3, pc, #96	; (adr r3, 8003948 <get_speed+0x118>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f7fc fe8d 	bl	8000608 <__aeabi_dmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	4618      	mov	r0, r3
 80038f4:	4621      	mov	r1, r4
 80038f6:	f7fd f95f 	bl	8000bb8 <__aeabi_d2f>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <get_speed+0x120>)
 80038fe:	609a      	str	r2, [r3, #8]

	enc_L.diff_pulse = (int32_t)enc_L.count - (int32_t)enc_L.p_count;
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <get_speed+0x124>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <get_speed+0x124>)
 8003908:	885b      	ldrh	r3, [r3, #2]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <get_speed+0x124>)
 800390e:	6053      	str	r3, [r2, #4]
	if((enc_L.diff_pulse > ENC_CNT_HALF || enc_L.diff_pulse < (-1)*(ENC_CNT_HALF) ) && enc_L.p_count > ENC_CNT_HALF ){
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <get_speed+0x124>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003918:	dc04      	bgt.n	8003924 <get_speed+0xf4>
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <get_speed+0x124>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8003922:	da19      	bge.n	8003958 <get_speed+0x128>
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <get_speed+0x124>)
 8003926:	885b      	ldrh	r3, [r3, #2]
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d914      	bls.n	8003958 <get_speed+0x128>
		enc_L.diff_pulse = ((ENC_CNT_MAX) - enc_L.p_count) + enc_L.count;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <get_speed+0x124>)
 8003930:	885b      	ldrh	r3, [r3, #2]
 8003932:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <get_speed+0x124>)
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a05      	ldr	r2, [pc, #20]	; (8003954 <get_speed+0x124>)
 800393e:	6053      	str	r3, [r2, #4]
 8003940:	e022      	b.n	8003988 <get_speed+0x158>
 8003942:	bf00      	nop
 8003944:	f3af 8000 	nop.w
 8003948:	9cf9a06b 	.word	0x9cf9a06b
 800394c:	3f85fdbb 	.word	0x3f85fdbb
 8003950:	2000d1e8 	.word	0x2000d1e8
 8003954:	2000d218 	.word	0x2000d218
	}
	else if((enc_L.diff_pulse > ENC_CNT_HALF || enc_L.diff_pulse < (-1)*(ENC_CNT_HALF) ) && enc_L.p_count <= ENC_CNT_HALF){
 8003958:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <get_speed+0x390>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003960:	dc04      	bgt.n	800396c <get_speed+0x13c>
 8003962:	4b97      	ldr	r3, [pc, #604]	; (8003bc0 <get_speed+0x390>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 800396a:	da0d      	bge.n	8003988 <get_speed+0x158>
 800396c:	4b94      	ldr	r3, [pc, #592]	; (8003bc0 <get_speed+0x390>)
 800396e:	885b      	ldrh	r3, [r3, #2]
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003974:	d808      	bhi.n	8003988 <get_speed+0x158>
		enc_L.diff_pulse = (enc_L.count - ENC_CNT_MAX) - enc_L.p_count;
 8003976:	4b92      	ldr	r3, [pc, #584]	; (8003bc0 <get_speed+0x390>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800397e:	4a90      	ldr	r2, [pc, #576]	; (8003bc0 <get_speed+0x390>)
 8003980:	8852      	ldrh	r2, [r2, #2]
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	4a8e      	ldr	r2, [pc, #568]	; (8003bc0 <get_speed+0x390>)
 8003986:	6053      	str	r3, [r2, #4]
	}
	//enc_L.speed = 0.1*(float)enc_L.diff_pulse*MMPP+0.9*enc_L.speed;
	enc_L.speed = (float)enc_L.diff_pulse*MMPP;
 8003988:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <get_speed+0x390>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ee17 0a90 	vmov	r0, s15
 8003998:	f7fc fdde 	bl	8000558 <__aeabi_f2d>
 800399c:	a384      	add	r3, pc, #528	; (adr r3, 8003bb0 <get_speed+0x380>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fe31 	bl	8000608 <__aeabi_dmul>
 80039a6:	4603      	mov	r3, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	4618      	mov	r0, r3
 80039ac:	4621      	mov	r1, r4
 80039ae:	f7fd f903 	bl	8000bb8 <__aeabi_d2f>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <get_speed+0x390>)
 80039b6:	609a      	str	r2, [r3, #8]
	p_speed = speed;p_omega = omega;
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <get_speed+0x394>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a82      	ldr	r2, [pc, #520]	; (8003bc8 <get_speed+0x398>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b82      	ldr	r3, [pc, #520]	; (8003bcc <get_speed+0x39c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a82      	ldr	r2, [pc, #520]	; (8003bd0 <get_speed+0x3a0>)
 80039c6:	6013      	str	r3, [r2, #0]
	speed =(enc_R.speed - enc_L.speed)/2.0; //(m/s) = (mm/ms)
 80039c8:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <get_speed+0x3a4>)
 80039ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80039ce:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <get_speed+0x390>)
 80039d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80039d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80039dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e0:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <get_speed+0x394>)
 80039e2:	edc3 7a00 	vstr	s15, [r3]


	float degree_per_second = read_gyro_yaw();//(read_gyro_yaw()-gyro_ref)*k;
 80039e6:	f000 fc43 	bl	8004270 <read_gyro_yaw>
 80039ea:	ed87 0a01 	vstr	s0, [r7, #4]
	omega = degree_per_second * PI / 180.0;	//(rad/s)
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fc fdb2 	bl	8000558 <__aeabi_f2d>
 80039f4:	a370      	add	r3, pc, #448	; (adr r3, 8003bb8 <get_speed+0x388>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fc fe05 	bl	8000608 <__aeabi_dmul>
 80039fe:	4603      	mov	r3, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	4618      	mov	r0, r3
 8003a04:	4621      	mov	r1, r4
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <get_speed+0x3a8>)
 8003a0c:	f7fc ff26 	bl	800085c <__aeabi_ddiv>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4618      	mov	r0, r3
 8003a16:	4621      	mov	r1, r4
 8003a18:	f7fd f8ce 	bl	8000bb8 <__aeabi_d2f>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <get_speed+0x39c>)
 8003a20:	601a      	str	r2, [r3, #0]

	degree += degree_per_second/1000.0;
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <get_speed+0x3ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd96 	bl	8000558 <__aeabi_f2d>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	460d      	mov	r5, r1
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fc fd91 	bl	8000558 <__aeabi_f2d>
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <get_speed+0x3b0>)
 8003a3c:	f7fc ff0e 	bl	800085c <__aeabi_ddiv>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	f7fc fc28 	bl	800029c <__adddf3>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4618      	mov	r0, r3
 8003a52:	4621      	mov	r1, r4
 8003a54:	f7fd f8b0 	bl	8000bb8 <__aeabi_d2f>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b60      	ldr	r3, [pc, #384]	; (8003bdc <get_speed+0x3ac>)
 8003a5c:	601a      	str	r2, [r3, #0]
	len_mouse += speed;
 8003a5e:	4b61      	ldr	r3, [pc, #388]	; (8003be4 <get_speed+0x3b4>)
 8003a60:	ed93 7a00 	vldr	s14, [r3]
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <get_speed+0x394>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <get_speed+0x3b4>)
 8003a70:	edc3 7a00 	vstr	s15, [r3]
	//calc_eular_from_gyro(delta_t);
	//calc_eular_from_accel_and_gyro(delta_t);
	//imu_ahrs_update();
	//photo sensor

	sen_fr.value 	= (int16_t)adc_value[0];
 8003a74:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <get_speed+0x3b8>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <get_speed+0x3bc>)
 8003a7c:	801a      	strh	r2, [r3, #0]
	sen_l.value 	= (int16_t)adc_value[1];
 8003a7e:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <get_speed+0x3b8>)
 8003a80:	885b      	ldrh	r3, [r3, #2]
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <get_speed+0x3c0>)
 8003a86:	801a      	strh	r2, [r3, #0]
	sen_r.value 	= (int16_t)adc_value[2];
 8003a88:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <get_speed+0x3b8>)
 8003a8a:	889b      	ldrh	r3, [r3, #4]
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <get_speed+0x3c4>)
 8003a90:	801a      	strh	r2, [r3, #0]
	sen_fl.value 	= (int16_t)adc_value[3];
 8003a92:	4b55      	ldr	r3, [pc, #340]	; (8003be8 <get_speed+0x3b8>)
 8003a94:	88db      	ldrh	r3, [r3, #6]
 8003a96:	b21a      	sxth	r2, r3
 8003a98:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <get_speed+0x3c8>)
 8003a9a:	801a      	strh	r2, [r3, #0]

	sen_r.ref = 1650;
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <get_speed+0x3c4>)
 8003a9e:	f240 6272 	movw	r2, #1650	; 0x672
 8003aa2:	811a      	strh	r2, [r3, #8]
	sen_l.ref = 1500;
 8003aa4:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <get_speed+0x3c0>)
 8003aa6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003aaa:	811a      	strh	r2, [r3, #8]

	sen_r.th_control = sen_r.ref-400;
 8003aac:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <get_speed+0x3c4>)
 8003aae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b21a      	sxth	r2, r3
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <get_speed+0x3c4>)
 8003abe:	815a      	strh	r2, [r3, #10]
	sen_l.th_control = sen_r.ref-400;
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <get_speed+0x3c4>)
 8003ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <get_speed+0x3c0>)
 8003ad2:	815a      	strh	r2, [r3, #10]

	sen_fr.is_wall = (sen_fr.value >= TH_SEN_FR ) ? true : false;
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <get_speed+0x3bc>)
 8003ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ada:	f240 12c1 	movw	r2, #449	; 0x1c1
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bfcc      	ite	gt
 8003ae2:	2301      	movgt	r3, #1
 8003ae4:	2300      	movle	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <get_speed+0x3bc>)
 8003aec:	739a      	strb	r2, [r3, #14]
	sen_fl.is_wall = (sen_fl.value >= TH_SEN_FL ) ? true : false;
 8003aee:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <get_speed+0x3c8>)
 8003af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af4:	f240 128f 	movw	r2, #399	; 0x18f
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bfcc      	ite	gt
 8003afc:	2301      	movgt	r3, #1
 8003afe:	2300      	movle	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <get_speed+0x3c8>)
 8003b06:	739a      	strb	r2, [r3, #14]
	sen_r.is_wall  = (sen_r.value >= TH_SEN_R ) ? true : false;
 8003b08:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <get_speed+0x3c4>)
 8003b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b0e:	f240 22bb 	movw	r2, #699	; 0x2bb
 8003b12:	4293      	cmp	r3, r2
 8003b14:	bfcc      	ite	gt
 8003b16:	2301      	movgt	r3, #1
 8003b18:	2300      	movle	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <get_speed+0x3c4>)
 8003b20:	739a      	strb	r2, [r3, #14]
	sen_l.is_wall  = (sen_l.value >= TH_SEN_L ) ? true : false;
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <get_speed+0x3c0>)
 8003b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b28:	f240 22bb 	movw	r2, #699	; 0x2bb
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bfcc      	ite	gt
 8003b30:	2301      	movgt	r3, #1
 8003b32:	2300      	movle	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <get_speed+0x3c0>)
 8003b3a:	739a      	strb	r2, [r3, #14]

	if(sen_r.is_wall == true && sen_fr.value > STOP_SEN_FR )	sen_r.is_wall = false;
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <get_speed+0x3c4>)
 8003b3e:	7b9b      	ldrb	r3, [r3, #14]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d109      	bne.n	8003b58 <get_speed+0x328>
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <get_speed+0x3bc>)
 8003b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b4a:	f240 6272 	movw	r2, #1650	; 0x672
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	dd02      	ble.n	8003b58 <get_speed+0x328>
 8003b52:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <get_speed+0x3c4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	739a      	strb	r2, [r3, #14]
	if(sen_l.is_wall == true && sen_fl.value > STOP_SEN_FL )	sen_l.is_wall = false;
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <get_speed+0x3c0>)
 8003b5a:	7b9b      	ldrb	r3, [r3, #14]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <get_speed+0x342>
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <get_speed+0x3c8>)
 8003b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b6a:	dd02      	ble.n	8003b72 <get_speed+0x342>
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <get_speed+0x3c0>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	739a      	strb	r2, [r3, #14]

	if(sen_r.is_wall == true)	sen_r.cnt++;
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <get_speed+0x3c4>)
 8003b74:	7b9b      	ldrb	r3, [r3, #14]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d109      	bne.n	8003b8e <get_speed+0x35e>
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <get_speed+0x3c4>)
 8003b7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b21a      	sxth	r2, r3
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <get_speed+0x3c4>)
 8003b8a:	819a      	strh	r2, [r3, #12]
 8003b8c:	e002      	b.n	8003b94 <get_speed+0x364>
	else						sen_r.cnt = 0;
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <get_speed+0x3c4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	819a      	strh	r2, [r3, #12]

	if(sen_l.is_wall == true)	sen_l.cnt++;
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <get_speed+0x3c0>)
 8003b96:	7b9b      	ldrb	r3, [r3, #14]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d12f      	bne.n	8003bfc <get_speed+0x3cc>
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <get_speed+0x3c0>)
 8003b9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b21a      	sxth	r2, r3
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <get_speed+0x3c0>)
 8003bac:	819a      	strh	r2, [r3, #12]
 8003bae:	e028      	b.n	8003c02 <get_speed+0x3d2>
 8003bb0:	9cf9a06b 	.word	0x9cf9a06b
 8003bb4:	3f85fdbb 	.word	0x3f85fdbb
 8003bb8:	fc8b007a 	.word	0xfc8b007a
 8003bbc:	400921fa 	.word	0x400921fa
 8003bc0:	2000d218 	.word	0x2000d218
 8003bc4:	2000d230 	.word	0x2000d230
 8003bc8:	2000d1b4 	.word	0x2000d1b4
 8003bcc:	2000f494 	.word	0x2000f494
 8003bd0:	20008224 	.word	0x20008224
 8003bd4:	2000d1e8 	.word	0x2000d1e8
 8003bd8:	40668000 	.word	0x40668000
 8003bdc:	2000f4a8 	.word	0x2000f4a8
 8003be0:	408f4000 	.word	0x408f4000
 8003be4:	200123b8 	.word	0x200123b8
 8003be8:	2000d080 	.word	0x2000d080
 8003bec:	2000d1b8 	.word	0x2000d1b8
 8003bf0:	2000d064 	.word	0x2000d064
 8003bf4:	2000f480 	.word	0x2000f480
 8003bf8:	2000d1c8 	.word	0x2000d1c8
	else						sen_l.cnt = 0;
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <get_speed+0x4b4>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	819a      	strh	r2, [r3, #12]

	if(run_mode == TURN_MODE || run_mode == DIALOG_MODE){
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <get_speed+0x4b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d003      	beq.n	8003c12 <get_speed+0x3e2>
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <get_speed+0x4b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d105      	bne.n	8003c1e <get_speed+0x3ee>
		sen_l.cnt = 0;		sen_r.cnt = 0;
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <get_speed+0x4b4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	819a      	strh	r2, [r3, #12]
 8003c18:	4b34      	ldr	r3, [pc, #208]	; (8003cec <get_speed+0x4bc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	819a      	strh	r2, [r3, #12]
	}

	if(sen_r.value > sen_r.th_control){
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <get_speed+0x4bc>)
 8003c20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <get_speed+0x4bc>)
 8003c26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	dd10      	ble.n	8003c50 <get_speed+0x420>
		sen_r.error = sen_r.value - sen_r.ref;
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <get_speed+0x4bc>)
 8003c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <get_speed+0x4bc>)
 8003c38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <get_speed+0x4bc>)
 8003c46:	80da      	strh	r2, [r3, #6]
		sen_r.is_controll = true;
 8003c48:	4b28      	ldr	r3, [pc, #160]	; (8003cec <get_speed+0x4bc>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	73da      	strb	r2, [r3, #15]
 8003c4e:	e005      	b.n	8003c5c <get_speed+0x42c>
		/*if((sen_r.value-sen_r.c_value) > 250 || (sen_r.value-sen_r.c_value) < -250){
			if(sen_r.error < 0)	sen_r.error = 0;
		}*/
	}
	else{
		sen_r.error = 0;
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <get_speed+0x4bc>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	80da      	strh	r2, [r3, #6]
		sen_r.is_controll = false;
 8003c56:	4b25      	ldr	r3, [pc, #148]	; (8003cec <get_speed+0x4bc>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	73da      	strb	r2, [r3, #15]
	}


	if(sen_l.value > sen_l.th_control){
 8003c5c:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <get_speed+0x4b4>)
 8003c5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <get_speed+0x4b4>)
 8003c64:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dd10      	ble.n	8003c8e <get_speed+0x45e>
		sen_l.error = sen_l.value - sen_l.ref;
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <get_speed+0x4b4>)
 8003c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <get_speed+0x4b4>)
 8003c76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b21a      	sxth	r2, r3
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <get_speed+0x4b4>)
 8003c84:	80da      	strh	r2, [r3, #6]
		sen_l.is_controll = true;
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <get_speed+0x4b4>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	73da      	strb	r2, [r3, #15]
 8003c8c:	e005      	b.n	8003c9a <get_speed+0x46a>
			if(sen_l.error < 0)	sen_l.error = 0;
		}*/

	}
	else{
		sen_l.error = 0;
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <get_speed+0x4b4>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	80da      	strh	r2, [r3, #6]
		sen_l.is_controll = false;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <get_speed+0x4b4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	73da      	strb	r2, [r3, #15]
	}

	if(hosei_f == true && hosei_led_cnt < 81){
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <get_speed+0x4c0>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d11c      	bne.n	8003cdc <get_speed+0x4ac>
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <get_speed+0x4c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b50      	cmp	r3, #80	; 0x50
 8003ca8:	dc18      	bgt.n	8003cdc <get_speed+0x4ac>
		hosei_led_cnt++;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <get_speed+0x4c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <get_speed+0x4c4>)
 8003cb2:	6013      	str	r3, [r2, #0]
		if(hosei_led_cnt % 20 == 0){HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);}
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <get_speed+0x4c4>)
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <get_speed+0x4c8>)
 8003cba:	fb83 2301 	smull	r2, r3, r3, r1
 8003cbe:	10da      	asrs	r2, r3, #3
 8003cc0:	17cb      	asrs	r3, r1, #31
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	1aca      	subs	r2, r1, r3
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d104      	bne.n	8003cdc <get_speed+0x4ac>
 8003cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cd6:	4809      	ldr	r0, [pc, #36]	; (8003cfc <get_speed+0x4cc>)
 8003cd8:	f00b fc39 	bl	800f54e <HAL_GPIO_TogglePin>
	}else if(is_mode_enable == true){
		//HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,GPIO_PIN_SET);
	}

}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce4:	2000d064 	.word	0x2000d064
 8003ce8:	2000a170 	.word	0x2000a170
 8003cec:	2000f480 	.word	0x2000f480
 8003cf0:	20002438 	.word	0x20002438
 8003cf4:	2000f490 	.word	0x2000f490
 8003cf8:	66666667 	.word	0x66666667
 8003cfc:	40020400 	.word	0x40020400

08003d00 <check_error>:


void check_error(){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	ed2d 8b02 	vpush	{d8}
 8003d06:	af00      	add	r7, sp, #0
		if((ABS(V_r) > 5.0 || ABS(V_l) > 5.0) && (run_mode == STRAIGHT_MODE || run_mode == TURN_MODE) && accel == 0.0){
 8003d08:	4b85      	ldr	r3, [pc, #532]	; (8003f20 <check_error+0x220>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d50d      	bpl.n	8003d34 <check_error+0x34>
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <check_error+0x220>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	bf4c      	ite	mi
 8003d2c:	2301      	movmi	r3, #1
 8003d2e:	2300      	movpl	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e00c      	b.n	8003d4e <check_error+0x4e>
 8003d34:	4b7a      	ldr	r3, [pc, #488]	; (8003f20 <check_error+0x220>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	bfcc      	ite	gt
 8003d48:	2301      	movgt	r3, #1
 8003d4a:	2300      	movle	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d12b      	bne.n	8003daa <check_error+0xaa>
 8003d52:	4b74      	ldr	r3, [pc, #464]	; (8003f24 <check_error+0x224>)
 8003d54:	edd3 7a00 	vldr	s15, [r3]
 8003d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d60:	d50d      	bpl.n	8003d7e <check_error+0x7e>
 8003d62:	4b70      	ldr	r3, [pc, #448]	; (8003f24 <check_error+0x224>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	bf4c      	ite	mi
 8003d76:	2301      	movmi	r3, #1
 8003d78:	2300      	movpl	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e00c      	b.n	8003d98 <check_error+0x98>
 8003d7e:	4b69      	ldr	r3, [pc, #420]	; (8003f24 <check_error+0x224>)
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	bfcc      	ite	gt
 8003d92:	2301      	movgt	r3, #1
 8003d94:	2300      	movle	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <check_error+0xaa>
 8003d9c:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <check_error+0x228>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <check_error+0xaa>
 8003da4:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <check_error+0x228>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b02      	cmp	r3, #2
			//error_cnt++;
		}

		if((ABS(read_accel_y_axis()) > 15.0 || ABS(read_accel_x_axis()) > 15.0 ) && (run_mode == STRAIGHT_MODE || run_mode == TURN_MODE || run_mode == DIALOG_MODE) && accel == 0.0){
 8003daa:	f000 fb0d 	bl	80043c8 <read_accel_y_axis>
 8003dae:	eef0 7a40 	vmov.f32	s15, s0
 8003db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d50b      	bpl.n	8003dd4 <check_error+0xd4>
 8003dbc:	f000 fb04 	bl	80043c8 <read_accel_y_axis>
 8003dc0:	eeb0 7a40 	vmov.f32	s14, s0
 8003dc4:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8003dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d42b      	bmi.n	8003e2a <check_error+0x12a>
 8003dd2:	e00a      	b.n	8003dea <check_error+0xea>
 8003dd4:	f000 faf8 	bl	80043c8 <read_accel_y_axis>
 8003dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8003ddc:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8003de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de8:	dc1f      	bgt.n	8003e2a <check_error+0x12a>
 8003dea:	f000 fabd 	bl	8004368 <read_accel_x_axis>
 8003dee:	eef0 7a40 	vmov.f32	s15, s0
 8003df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	d50b      	bpl.n	8003e14 <check_error+0x114>
 8003dfc:	f000 fab4 	bl	8004368 <read_accel_x_axis>
 8003e00:	eeb0 7a40 	vmov.f32	s14, s0
 8003e04:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8003e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	d40b      	bmi.n	8003e2a <check_error+0x12a>
 8003e12:	e023      	b.n	8003e5c <check_error+0x15c>
 8003e14:	f000 faa8 	bl	8004368 <read_accel_x_axis>
 8003e18:	eeb0 7a40 	vmov.f32	s14, s0
 8003e1c:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8003e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	dd18      	ble.n	8003e5c <check_error+0x15c>
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <check_error+0x228>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d007      	beq.n	8003e42 <check_error+0x142>
 8003e32:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <check_error+0x228>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <check_error+0x142>
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <check_error+0x228>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d10c      	bne.n	8003e5c <check_error+0x15c>
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <check_error+0x22c>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e50:	d104      	bne.n	8003e5c <check_error+0x15c>
			error_cnt = error_cnt + 10;
 8003e52:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <check_error+0x230>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330a      	adds	r3, #10
 8003e58:	4a35      	ldr	r2, [pc, #212]	; (8003f30 <check_error+0x230>)
 8003e5a:	6013      	str	r3, [r2, #0]
		}


		if((ABS(tar_omega - read_gyro_yaw()) > 1000.0 ) && (run_mode == STRAIGHT_MODE || run_mode == TURN_MODE || run_mode == DIALOG_MODE) && accel == 0.0){
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <check_error+0x234>)
 8003e5e:	ed93 8a00 	vldr	s16, [r3]
 8003e62:	f000 fa05 	bl	8004270 <read_gyro_yaw>
 8003e66:	eef0 7a40 	vmov.f32	s15, s0
 8003e6a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d513      	bpl.n	8003ea0 <check_error+0x1a0>
 8003e78:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <check_error+0x234>)
 8003e7a:	ed93 8a00 	vldr	s16, [r3]
 8003e7e:	f000 f9f7 	bl	8004270 <read_gyro_yaw>
 8003e82:	eef0 7a40 	vmov.f32	s15, s0
 8003e86:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003e8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003f38 <check_error+0x238>
 8003e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	bf4c      	ite	mi
 8003e98:	2301      	movmi	r3, #1
 8003e9a:	2300      	movpl	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e012      	b.n	8003ec6 <check_error+0x1c6>
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <check_error+0x234>)
 8003ea2:	ed93 8a00 	vldr	s16, [r3]
 8003ea6:	f000 f9e3 	bl	8004270 <read_gyro_yaw>
 8003eaa:	eef0 7a40 	vmov.f32	s15, s0
 8003eae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003eb2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003f3c <check_error+0x23c>
 8003eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebe:	bfcc      	ite	gt
 8003ec0:	2301      	movgt	r3, #1
 8003ec2:	2300      	movle	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <check_error+0x1fc>
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <check_error+0x228>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d007      	beq.n	8003ee2 <check_error+0x1e2>
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <check_error+0x228>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <check_error+0x1e2>
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <check_error+0x228>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d10c      	bne.n	8003efc <check_error+0x1fc>
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <check_error+0x22c>)
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	d104      	bne.n	8003efc <check_error+0x1fc>
			error_cnt = error_cnt + 50;
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <check_error+0x230>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <check_error+0x230>)
 8003efa:	6013      	str	r3, [r2, #0]
		}

		if(error_cnt > 50){
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <check_error+0x230>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b32      	cmp	r3, #50	; 0x32
 8003f02:	dd08      	ble.n	8003f16 <check_error+0x216>
			MY_LED(0xff);
 8003f04:	20ff      	movs	r0, #255	; 0xff
 8003f06:	f7fd fbfb 	bl	8001700 <MY_LED>
			Motor_Stop();
 8003f0a:	f7fe fe67 	bl	8002bdc <Motor_Stop>
			write_save_data();
 8003f0e:	f7fd fa11 	bl	8001334 <write_save_data>
			NVIC_SystemReset();
 8003f12:	f7fe fe79 	bl	8002c08 <__NVIC_SystemReset>
		}

}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	ecbd 8b02 	vpop	{d8}
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	2000d060 	.word	0x2000d060
 8003f24:	20008214 	.word	0x20008214
 8003f28:	2000a170 	.word	0x2000a170
 8003f2c:	2000a16c 	.word	0x2000a16c
 8003f30:	2000d224 	.word	0x2000d224
 8003f34:	2000d43c 	.word	0x2000d43c
 8003f38:	c47a0000 	.word	0xc47a0000
 8003f3c:	447a0000 	.word	0x447a0000

08003f40 <write_byte>:
	HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_SET);

	return val;
}

void write_byte(uint8_t reg, uint8_t val){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	460a      	mov	r2, r1
 8003f4a:	71fb      	strb	r3, [r7, #7]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F; //mask
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_RESET);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <write_byte+0x54>)
 8003f62:	f00b fadb 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , 100);
 8003f66:	1df9      	adds	r1, r7, #7
 8003f68:	2364      	movs	r3, #100	; 0x64
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	480a      	ldr	r0, [pc, #40]	; (8003f98 <write_byte+0x58>)
 8003f6e:	f00b ffa9 	bl	800fec4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &val, 1 , 100);
 8003f72:	1db9      	adds	r1, r7, #6
 8003f74:	2364      	movs	r3, #100	; 0x64
 8003f76:	2201      	movs	r2, #1
 8003f78:	4807      	ldr	r0, [pc, #28]	; (8003f98 <write_byte+0x58>)
 8003f7a:	f00b ffa3 	bl	800fec4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_SET);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f84:	4803      	ldr	r0, [pc, #12]	; (8003f94 <write_byte+0x54>)
 8003f86:	f00b fac9 	bl	800f51c <HAL_GPIO_WritePin>

}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40020400 	.word	0x40020400
 8003f98:	200123bc 	.word	0x200123bc

08003f9c <myspi_init>:

void myspi_init(){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LENC_CS_GPIO_Port, LENC_CS_Pin,GPIO_PIN_SET);
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fa6:	4808      	ldr	r0, [pc, #32]	; (8003fc8 <myspi_init+0x2c>)
 8003fa8:	f00b fab8 	bl	800f51c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RENC_CS_GPIO_Port, RENC_CS_Pin,GPIO_PIN_SET);
 8003fac:	2201      	movs	r2, #1
 8003fae:	2108      	movs	r1, #8
 8003fb0:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <myspi_init+0x2c>)
 8003fb2:	f00b fab3 	bl	800f51c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_SET);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <myspi_init+0x2c>)
 8003fbe:	f00b faad 	bl	800f51c <HAL_GPIO_WritePin>

}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40020400 	.word	0x40020400

08003fcc <gyro_init>:

void gyro_init(){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
	//gyro_ref = 0.0;
	write_byte( PWR_MGMT_1    , 0x81 ); 	//Reset all register
 8003fd0:	2181      	movs	r1, #129	; 0x81
 8003fd2:	2006      	movs	r0, #6
 8003fd4:	f7ff ffb4 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8003fd8:	2032      	movs	r0, #50	; 0x32
 8003fda:	f009 fd97 	bl	800db0c <HAL_Delay>
	write_byte( USER_CTRL     , 0x10 );
 8003fde:	2110      	movs	r1, #16
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	f7ff ffad 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8003fe6:	2032      	movs	r0, #50	; 0x32
 8003fe8:	f009 fd90 	bl	800db0c <HAL_Delay>
	write_byte( PWR_MGMT_1    , 0x01 );		//set default value of 0x06
 8003fec:	2101      	movs	r1, #1
 8003fee:	2006      	movs	r0, #6
 8003ff0:	f7ff ffa6 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8003ff4:	2032      	movs	r0, #50	; 0x32
 8003ff6:	f009 fd89 	bl	800db0c <HAL_Delay>

	write_byte( REG_BANK_SEL  , 0x20 );		//change user bank from bank0 to bank2
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	207f      	movs	r0, #127	; 0x7f
 8003ffe:	f7ff ff9f 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8004002:	2032      	movs	r0, #50	; 0x32
 8004004:	f009 fd82 	bl	800db0c <HAL_Delay>
	write_byte( GYRO_CONFIG_1 , 0x0f );		//set low pass filter, Gyro_sensor_FS = 2000dps,
 8004008:	210f      	movs	r1, #15
 800400a:	2001      	movs	r0, #1
 800400c:	f7ff ff98 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8004010:	2032      	movs	r0, #50	; 0x32
 8004012:	f009 fd7b 	bl	800db0c <HAL_Delay>
	write_byte( ACCEL_CONFIG  , 0x23 );		//set low pass filter, Accel_sensor_FS = ,
 8004016:	2123      	movs	r1, #35	; 0x23
 8004018:	2014      	movs	r0, #20
 800401a:	f7ff ff91 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 800401e:	2032      	movs	r0, #50	; 0x32
 8004020:	f009 fd74 	bl	800db0c <HAL_Delay>
	write_byte( ACCEL_CONFIG_2, 0x00 );		//set low pass filter, Accel_sensor_FS = ,
 8004024:	2100      	movs	r1, #0
 8004026:	2015      	movs	r0, #21
 8004028:	f7ff ff8a 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 800402c:	2032      	movs	r0, #50	; 0x32
 800402e:	f009 fd6d 	bl	800db0c <HAL_Delay>

	write_byte( REG_BANK_SEL  , 0x00 );		//change user bank from bank2 to bank0
 8004032:	2100      	movs	r1, #0
 8004034:	207f      	movs	r0, #127	; 0x7f
 8004036:	f7ff ff83 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 800403a:	2032      	movs	r0, #50	; 0x32
 800403c:	f009 fd66 	bl	800db0c <HAL_Delay>
	write_byte( PWR_MGMT_1    , 0x01 );		//set default value of 0x06,
 8004040:	2101      	movs	r1, #1
 8004042:	2006      	movs	r0, #6
 8004044:	f7ff ff7c 	bl	8003f40 <write_byte>
	HAL_Delay(50);
 8004048:	2032      	movs	r0, #50	; 0x32
 800404a:	f009 fd5f 	bl	800db0c <HAL_Delay>

	q0 = 1.0f;
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <gyro_init+0xa8>)
 8004050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004054:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <gyro_init+0xac>)
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 800405e:	4b07      	ldr	r3, [pc, #28]	; (800407c <gyro_init+0xb0>)
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <gyro_init+0xb4>)
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	2000f49c 	.word	0x2000f49c
 8004078:	2000d1b0 	.word	0x2000d1b0
 800407c:	2000820c 	.word	0x2000820c
 8004080:	2000d1a8 	.word	0x2000d1a8

08004084 <myspi_start>:

void myspi_start(){
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004088:	2100      	movs	r1, #0
 800408a:	4804      	ldr	r0, [pc, #16]	; (800409c <myspi_start+0x18>)
 800408c:	f00c fc56 	bl	801093c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim4);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <myspi_start+0x18>)
 8004092:	f00c fb8a 	bl	80107aa <HAL_TIM_Base_Start_IT>
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200124d4 	.word	0x200124d4

080040a0 <IMU_read_DMA>:

void IMU_read_DMA(){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_RESET);
 80040a4:	2200      	movs	r2, #0
 80040a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040aa:	4805      	ldr	r0, [pc, #20]	; (80040c0 <IMU_read_DMA+0x20>)
 80040ac:	f00b fa36 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t));
 80040b0:	230d      	movs	r3, #13
 80040b2:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <IMU_read_DMA+0x24>)
 80040b4:	4904      	ldr	r1, [pc, #16]	; (80040c8 <IMU_read_DMA+0x28>)
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <IMU_read_DMA+0x2c>)
 80040b8:	f00c f838 	bl	801012c <HAL_SPI_TransmitReceive_DMA>
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40020400 	.word	0x40020400
 80040c4:	20000200 	.word	0x20000200
 80040c8:	20000000 	.word	0x20000000
 80040cc:	200123bc 	.word	0x200123bc

080040d0 <RENC_read_DMA>:

void RENC_read_DMA(){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RENC_CS_GPIO_Port, RENC_CS_Pin,GPIO_PIN_RESET);
 80040d4:	2200      	movs	r2, #0
 80040d6:	2108      	movs	r1, #8
 80040d8:	4805      	ldr	r0, [pc, #20]	; (80040f0 <RENC_read_DMA+0x20>)
 80040da:	f00b fa1f 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, renc_address, renc_value, sizeof(renc_value)/sizeof(uint8_t));
 80040de:	2302      	movs	r3, #2
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <RENC_read_DMA+0x24>)
 80040e2:	4905      	ldr	r1, [pc, #20]	; (80040f8 <RENC_read_DMA+0x28>)
 80040e4:	4805      	ldr	r0, [pc, #20]	; (80040fc <RENC_read_DMA+0x2c>)
 80040e6:	f00c f821 	bl	801012c <HAL_SPI_TransmitReceive_DMA>

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40020400 	.word	0x40020400
 80040f4:	20000214 	.word	0x20000214
 80040f8:	20000210 	.word	0x20000210
 80040fc:	200123bc 	.word	0x200123bc

08004100 <LENC_read_DMA>:

void LENC_read_DMA(){
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LENC_CS_GPIO_Port, LENC_CS_Pin,GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800410a:	4805      	ldr	r0, [pc, #20]	; (8004120 <LENC_read_DMA+0x20>)
 800410c:	f00b fa06 	bl	800f51c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, lenc_address, lenc_value, sizeof(lenc_value)/sizeof(uint8_t));
 8004110:	2302      	movs	r3, #2
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <LENC_read_DMA+0x24>)
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <LENC_read_DMA+0x28>)
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <LENC_read_DMA+0x2c>)
 8004118:	f00c f808 	bl	801012c <HAL_SPI_TransmitReceive_DMA>

}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40020400 	.word	0x40020400
 8004124:	2000021c 	.word	0x2000021c
 8004128:	20000218 	.word	0x20000218
 800412c:	200123bc 	.word	0x200123bc

08004130 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GYRO_CS_GPIO_Port, GYRO_CS_Pin) == GPIO_PIN_RESET){
 8004138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800413c:	4836      	ldr	r0, [pc, #216]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 800413e:	f00b f9d5 	bl	800f4ec <HAL_GPIO_ReadPin>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d148      	bne.n	80041da <HAL_SPI_TxRxCpltCallback+0xaa>
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin,GPIO_PIN_SET);
 8004148:	2201      	movs	r2, #1
 800414a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800414e:	4832      	ldr	r0, [pc, #200]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 8004150:	f00b f9e4 	bl	800f51c <HAL_GPIO_WritePin>
		accel_data[x_axis] = (((int16_t)imu_value[1]<<8 ) | ( (int16_t)imu_value[2]&0x00ff ) );
 8004154:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b21a      	sxth	r2, r3
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b21a      	sxth	r2, r3
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_SPI_TxRxCpltCallback+0xf0>)
 8004168:	801a      	strh	r2, [r3, #0]
		accel_data[y_axis] = (((int16_t)imu_value[3]<<8 ) | ( (int16_t)imu_value[4]&0x00ff ) );
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 800416c:	78db      	ldrb	r3, [r3, #3]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b21a      	sxth	r2, r3
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 8004174:	791b      	ldrb	r3, [r3, #4]
 8004176:	b21b      	sxth	r3, r3
 8004178:	4313      	orrs	r3, r2
 800417a:	b21a      	sxth	r2, r3
 800417c:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_SPI_TxRxCpltCallback+0xf0>)
 800417e:	805a      	strh	r2, [r3, #2]
		accel_data[z_axis] = (((int16_t)imu_value[5]<<8 ) | ( (int16_t)imu_value[6]&0x00ff ) );
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 8004182:	795b      	ldrb	r3, [r3, #5]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	b21a      	sxth	r2, r3
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 800418a:	799b      	ldrb	r3, [r3, #6]
 800418c:	b21b      	sxth	r3, r3
 800418e:	4313      	orrs	r3, r2
 8004190:	b21a      	sxth	r2, r3
 8004192:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_SPI_TxRxCpltCallback+0xf0>)
 8004194:	809a      	strh	r2, [r3, #4]
		gyro_data[x_axis] = (((int16_t)imu_value[7]<<8 ) | ( (int16_t)imu_value[8]&0x00ff ) );
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 8004198:	79db      	ldrb	r3, [r3, #7]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	b21a      	sxth	r2, r3
 800419e:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 80041a0:	7a1b      	ldrb	r3, [r3, #8]
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80041aa:	801a      	strh	r2, [r3, #0]
		gyro_data[y_axis] = (((int16_t)imu_value[9]<<8 ) | ( (int16_t)imu_value[10]&0x00ff ) );
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 80041ae:	7a5b      	ldrb	r3, [r3, #9]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 80041b6:	7a9b      	ldrb	r3, [r3, #10]
 80041b8:	b21b      	sxth	r3, r3
 80041ba:	4313      	orrs	r3, r2
 80041bc:	b21a      	sxth	r2, r3
 80041be:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80041c0:	805a      	strh	r2, [r3, #2]
		gyro_data[z_axis] = (((int16_t)imu_value[11]<<8 ) | ( (int16_t)imu_value[12]&0x00ff ) );
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 80041c4:	7adb      	ldrb	r3, [r3, #11]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_SPI_TxRxCpltCallback+0xec>)
 80041cc:	7b1b      	ldrb	r3, [r3, #12]
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80041d6:	809a      	strh	r2, [r3, #4]
	}
	else if(HAL_GPIO_ReadPin(LENC_CS_GPIO_Port, LENC_CS_Pin) == GPIO_PIN_RESET){
		HAL_GPIO_WritePin(LENC_CS_GPIO_Port, LENC_CS_Pin,GPIO_PIN_SET);
	}

}
 80041d8:	e01a      	b.n	8004210 <HAL_SPI_TxRxCpltCallback+0xe0>
	else if(HAL_GPIO_ReadPin(RENC_CS_GPIO_Port, RENC_CS_Pin) == GPIO_PIN_RESET){
 80041da:	2108      	movs	r1, #8
 80041dc:	480e      	ldr	r0, [pc, #56]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 80041de:	f00b f985 	bl	800f4ec <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d105      	bne.n	80041f4 <HAL_SPI_TxRxCpltCallback+0xc4>
		HAL_GPIO_WritePin(RENC_CS_GPIO_Port, RENC_CS_Pin,GPIO_PIN_SET);
 80041e8:	2201      	movs	r2, #1
 80041ea:	2108      	movs	r1, #8
 80041ec:	480a      	ldr	r0, [pc, #40]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 80041ee:	f00b f995 	bl	800f51c <HAL_GPIO_WritePin>
}
 80041f2:	e00d      	b.n	8004210 <HAL_SPI_TxRxCpltCallback+0xe0>
	else if(HAL_GPIO_ReadPin(LENC_CS_GPIO_Port, LENC_CS_Pin) == GPIO_PIN_RESET){
 80041f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041f8:	4807      	ldr	r0, [pc, #28]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 80041fa:	f00b f977 	bl	800f4ec <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_SPI_TxRxCpltCallback+0xe0>
		HAL_GPIO_WritePin(LENC_CS_GPIO_Port, LENC_CS_Pin,GPIO_PIN_SET);
 8004204:	2201      	movs	r2, #1
 8004206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800420a:	4803      	ldr	r0, [pc, #12]	; (8004218 <HAL_SPI_TxRxCpltCallback+0xe8>)
 800420c:	f00b f986 	bl	800f51c <HAL_GPIO_WritePin>
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40020400 	.word	0x40020400
 800421c:	20000200 	.word	0x20000200
 8004220:	2000d1e0 	.word	0x2000d1e0
 8004224:	2000d1f4 	.word	0x2000d1f4

08004228 <read_enc_R_count>:

uint16_t read_enc_R_count(){
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
	return	((uint16_t)(renc_value[0]) << 8 |(uint16_t)renc_value[1]) >> 4;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <read_enc_R_count+0x20>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4a05      	ldr	r2, [pc, #20]	; (8004248 <read_enc_R_count+0x20>)
 8004234:	7852      	ldrb	r2, [r2, #1]
 8004236:	4313      	orrs	r3, r2
 8004238:	111b      	asrs	r3, r3, #4
 800423a:	b29b      	uxth	r3, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000214 	.word	0x20000214

0800424c <read_enc_L_count>:

uint16_t read_enc_L_count(){
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
	return	((uint16_t)(lenc_value[0]) << 8 |(uint16_t)lenc_value[1]) >> 4;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <read_enc_L_count+0x20>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <read_enc_L_count+0x20>)
 8004258:	7852      	ldrb	r2, [r2, #1]
 800425a:	4313      	orrs	r3, r2
 800425c:	111b      	asrs	r3, r3, #4
 800425e:	b29b      	uxth	r3, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000021c 	.word	0x2000021c

08004270 <read_gyro_yaw>:

float read_gyro_yaw(){
 8004270:	b598      	push	{r3, r4, r7, lr}
 8004272:	af00      	add	r7, sp, #0
	return  (float)gyro_data[z_axis]*(-1.0f) / GYRO_FS_SEL_3;
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <read_gyro_yaw+0x50>)
 8004276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004282:	eef1 7a67 	vneg.f32	s15, s15
 8004286:	ee17 3a90 	vmov	r3, s15
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f964 	bl	8000558 <__aeabi_f2d>
 8004290:	a309      	add	r3, pc, #36	; (adr r3, 80042b8 <read_gyro_yaw+0x48>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc fae1 	bl	800085c <__aeabi_ddiv>
 800429a:	4603      	mov	r3, r0
 800429c:	460c      	mov	r4, r1
 800429e:	4618      	mov	r0, r3
 80042a0:	4621      	mov	r1, r4
 80042a2:	f7fc fc89 	bl	8000bb8 <__aeabi_d2f>
 80042a6:	4603      	mov	r3, r0
 80042a8:	ee07 3a90 	vmov	s15, r3
}
 80042ac:	eeb0 0a67 	vmov.f32	s0, s15
 80042b0:	bd98      	pop	{r3, r4, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	1a9fbe77 	.word	0x1a9fbe77
 80042bc:	40305d2f 	.word	0x40305d2f
 80042c0:	2000d1f4 	.word	0x2000d1f4
 80042c4:	00000000 	.word	0x00000000

080042c8 <read_gyro_x_axis>:

float read_gyro_x_axis(){
 80042c8:	b598      	push	{r3, r4, r7, lr}
 80042ca:	af00      	add	r7, sp, #0
	return  (float)gyro_data[x_axis]*(1.0f) / GYRO_FS_SEL_3;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <read_gyro_x_axis+0x48>)
 80042ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	ee17 0a90 	vmov	r0, s15
 80042de:	f7fc f93b 	bl	8000558 <__aeabi_f2d>
 80042e2:	a309      	add	r3, pc, #36	; (adr r3, 8004308 <read_gyro_x_axis+0x40>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fc fab8 	bl	800085c <__aeabi_ddiv>
 80042ec:	4603      	mov	r3, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	4618      	mov	r0, r3
 80042f2:	4621      	mov	r1, r4
 80042f4:	f7fc fc60 	bl	8000bb8 <__aeabi_d2f>
 80042f8:	4603      	mov	r3, r0
 80042fa:	ee07 3a90 	vmov	s15, r3
}
 80042fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004302:	bd98      	pop	{r3, r4, r7, pc}
 8004304:	f3af 8000 	nop.w
 8004308:	1a9fbe77 	.word	0x1a9fbe77
 800430c:	40305d2f 	.word	0x40305d2f
 8004310:	2000d1f4 	.word	0x2000d1f4
 8004314:	00000000 	.word	0x00000000

08004318 <read_gyro_y_axis>:

float read_gyro_y_axis(){
 8004318:	b598      	push	{r3, r4, r7, lr}
 800431a:	af00      	add	r7, sp, #0
	return  (float)gyro_data[y_axis]*(1.0f) / GYRO_FS_SEL_3;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <read_gyro_y_axis+0x48>)
 800431e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ee17 0a90 	vmov	r0, s15
 800432e:	f7fc f913 	bl	8000558 <__aeabi_f2d>
 8004332:	a309      	add	r3, pc, #36	; (adr r3, 8004358 <read_gyro_y_axis+0x40>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc fa90 	bl	800085c <__aeabi_ddiv>
 800433c:	4603      	mov	r3, r0
 800433e:	460c      	mov	r4, r1
 8004340:	4618      	mov	r0, r3
 8004342:	4621      	mov	r1, r4
 8004344:	f7fc fc38 	bl	8000bb8 <__aeabi_d2f>
 8004348:	4603      	mov	r3, r0
 800434a:	ee07 3a90 	vmov	s15, r3
}
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	bd98      	pop	{r3, r4, r7, pc}
 8004354:	f3af 8000 	nop.w
 8004358:	1a9fbe77 	.word	0x1a9fbe77
 800435c:	40305d2f 	.word	0x40305d2f
 8004360:	2000d1f4 	.word	0x2000d1f4
 8004364:	00000000 	.word	0x00000000

08004368 <read_accel_x_axis>:

float read_gyro_z_axis(){
	return  (float)gyro_data[z_axis]*(1.0f) / GYRO_FS_SEL_3;
}

float read_accel_x_axis(){
 8004368:	b598      	push	{r3, r4, r7, lr}
 800436a:	af00      	add	r7, sp, #0
	return  (float)accel_data[x_axis] / ACCEL_FS_SEL_1 * 9.8;
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <read_accel_x_axis+0x58>)
 800436e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800437a:	ee17 0a90 	vmov	r0, s15
 800437e:	f7fc f8eb 	bl	8000558 <__aeabi_f2d>
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <read_accel_x_axis+0x5c>)
 8004388:	f7fc fa68 	bl	800085c <__aeabi_ddiv>
 800438c:	4603      	mov	r3, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4618      	mov	r0, r3
 8004392:	4621      	mov	r1, r4
 8004394:	a308      	add	r3, pc, #32	; (adr r3, 80043b8 <read_accel_x_axis+0x50>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fc f935 	bl	8000608 <__aeabi_dmul>
 800439e:	4603      	mov	r3, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	4618      	mov	r0, r3
 80043a4:	4621      	mov	r1, r4
 80043a6:	f7fc fc07 	bl	8000bb8 <__aeabi_d2f>
 80043aa:	4603      	mov	r3, r0
 80043ac:	ee07 3a90 	vmov	s15, r3
}
 80043b0:	eeb0 0a67 	vmov.f32	s0, s15
 80043b4:	bd98      	pop	{r3, r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	9999999a 	.word	0x9999999a
 80043bc:	40239999 	.word	0x40239999
 80043c0:	2000d1e0 	.word	0x2000d1e0
 80043c4:	40c00000 	.word	0x40c00000

080043c8 <read_accel_y_axis>:

float read_accel_y_axis(){
 80043c8:	b598      	push	{r3, r4, r7, lr}
 80043ca:	af00      	add	r7, sp, #0
	return  (float)accel_data[y_axis] / ACCEL_FS_SEL_1 * 9.8;
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <read_accel_y_axis+0x58>)
 80043ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043da:	ee17 0a90 	vmov	r0, s15
 80043de:	f7fc f8bb 	bl	8000558 <__aeabi_f2d>
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <read_accel_y_axis+0x5c>)
 80043e8:	f7fc fa38 	bl	800085c <__aeabi_ddiv>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4618      	mov	r0, r3
 80043f2:	4621      	mov	r1, r4
 80043f4:	a308      	add	r3, pc, #32	; (adr r3, 8004418 <read_accel_y_axis+0x50>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fc f905 	bl	8000608 <__aeabi_dmul>
 80043fe:	4603      	mov	r3, r0
 8004400:	460c      	mov	r4, r1
 8004402:	4618      	mov	r0, r3
 8004404:	4621      	mov	r1, r4
 8004406:	f7fc fbd7 	bl	8000bb8 <__aeabi_d2f>
 800440a:	4603      	mov	r3, r0
 800440c:	ee07 3a90 	vmov	s15, r3
}
 8004410:	eeb0 0a67 	vmov.f32	s0, s15
 8004414:	bd98      	pop	{r3, r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	9999999a 	.word	0x9999999a
 800441c:	40239999 	.word	0x40239999
 8004420:	2000d1e0 	.word	0x2000d1e0
 8004424:	40c00000 	.word	0x40c00000

08004428 <read_accel_z_axis>:

float read_accel_z_axis(){
 8004428:	b598      	push	{r3, r4, r7, lr}
 800442a:	af00      	add	r7, sp, #0
	return  (float)accel_data[z_axis] / ACCEL_FS_SEL_1 * 9.8;
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <read_accel_z_axis+0x58>)
 800442e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443a:	ee17 0a90 	vmov	r0, s15
 800443e:	f7fc f88b 	bl	8000558 <__aeabi_f2d>
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <read_accel_z_axis+0x5c>)
 8004448:	f7fc fa08 	bl	800085c <__aeabi_ddiv>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	4618      	mov	r0, r3
 8004452:	4621      	mov	r1, r4
 8004454:	a308      	add	r3, pc, #32	; (adr r3, 8004478 <read_accel_z_axis+0x50>)
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f7fc f8d5 	bl	8000608 <__aeabi_dmul>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	4618      	mov	r0, r3
 8004464:	4621      	mov	r1, r4
 8004466:	f7fc fba7 	bl	8000bb8 <__aeabi_d2f>
 800446a:	4603      	mov	r3, r0
 800446c:	ee07 3a90 	vmov	s15, r3
}
 8004470:	eeb0 0a67 	vmov.f32	s0, s15
 8004474:	bd98      	pop	{r3, r4, r7, pc}
 8004476:	bf00      	nop
 8004478:	9999999a 	.word	0x9999999a
 800447c:	40239999 	.word	0x40239999
 8004480:	2000d1e0 	.word	0x2000d1e0
 8004484:	40c00000 	.word	0x40c00000

08004488 <straight>:
void extream_straight(){
	I_omega = 0.0;I_tar_omega = 0.0;
	I_speed = 0.0;I_tar_speed = 0.0;
}

void straight(float len_target,float acc,float max_sp,float end_sp){
 8004488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	ed87 0a03 	vstr	s0, [r7, #12]
 8004494:	edc7 0a02 	vstr	s1, [r7, #8]
 8004498:	ed87 1a01 	vstr	s2, [r7, #4]
 800449c:	edc7 1a00 	vstr	s3, [r7]
	error_cnt = 0;
 80044a0:	4b69      	ldr	r3, [pc, #420]	; (8004648 <straight+0x1c0>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
	con_wall.enable = false;
 80044a6:	4b69      	ldr	r3, [pc, #420]	; (800464c <straight+0x1c4>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
	I_omega = 0.0;I_tar_omega = 0.0;
 80044ac:	4b68      	ldr	r3, [pc, #416]	; (8004650 <straight+0x1c8>)
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	4b67      	ldr	r3, [pc, #412]	; (8004654 <straight+0x1cc>)
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 80044bc:	4b66      	ldr	r3, [pc, #408]	; (8004658 <straight+0x1d0>)
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4b65      	ldr	r3, [pc, #404]	; (800465c <straight+0x1d4>)
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]


	tar_omega = 0.0;omega_accel = 0.0;
 80044cc:	4b64      	ldr	r3, [pc, #400]	; (8004660 <straight+0x1d8>)
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	4b63      	ldr	r3, [pc, #396]	; (8004664 <straight+0x1dc>)
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	run_mode = STRAIGHT_MODE;
 80044dc:	4b62      	ldr	r3, [pc, #392]	; (8004668 <straight+0x1e0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
	if(end_sp == 0.0){
 80044e2:	edd7 7a00 	vldr	s15, [r7]
 80044e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	f040 8091 	bne.w	8004614 <straight+0x18c>

		max_speed = max_sp;accel = acc;
 80044f2:	4a5e      	ldr	r2, [pc, #376]	; (800466c <straight+0x1e4>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4a5d      	ldr	r2, [pc, #372]	; (8004670 <straight+0x1e8>)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6013      	str	r3, [r2, #0]

		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp)/(2.0*acc)){
 80044fe:	e012      	b.n	8004526 <straight+0x9e>
			if(tar_speed >= max_speed){
 8004500:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <straight+0x1ec>)
 8004502:	ed93 7a00 	vldr	s14, [r3]
 8004506:	4b59      	ldr	r3, [pc, #356]	; (800466c <straight+0x1e4>)
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	da00      	bge.n	8004518 <straight+0x90>
 8004516:	e006      	b.n	8004526 <straight+0x9e>
				accel = 0.0;con_wall.enable = true;
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <straight+0x1e8>)
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	4b4a      	ldr	r3, [pc, #296]	; (800464c <straight+0x1c4>)
 8004522:	2201      	movs	r2, #1
 8004524:	771a      	strb	r2, [r3, #28]
		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp)/(2.0*acc)){
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7fc f816 	bl	8000558 <__aeabi_f2d>
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	4b51      	ldr	r3, [pc, #324]	; (8004678 <straight+0x1f0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f80f 	bl	8000558 <__aeabi_f2d>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4620      	mov	r0, r4
 8004540:	4629      	mov	r1, r5
 8004542:	f7fb fea9 	bl	8000298 <__aeabi_dsub>
 8004546:	4603      	mov	r3, r0
 8004548:	460c      	mov	r4, r1
 800454a:	4625      	mov	r5, r4
 800454c:	461c      	mov	r4, r3
 800454e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004552:	edd7 7a01 	vldr	s15, [r7, #4]
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	ee17 0a90 	vmov	r0, s15
 800455e:	f7fb fffb 	bl	8000558 <__aeabi_f2d>
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b45      	ldr	r3, [pc, #276]	; (800467c <straight+0x1f4>)
 8004568:	f7fc f84e 	bl	8000608 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4690      	mov	r8, r2
 8004572:	4699      	mov	r9, r3
 8004574:	68b8      	ldr	r0, [r7, #8]
 8004576:	f7fb ffef 	bl	8000558 <__aeabi_f2d>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	f7fb fe8d 	bl	800029c <__adddf3>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4640      	mov	r0, r8
 8004588:	4649      	mov	r1, r9
 800458a:	f7fc f967 	bl	800085c <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f7fc fac7 	bl	8000b28 <__aeabi_dcmpgt>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1af      	bne.n	8004500 <straight+0x78>
			}
		}
		con_wall.enable = false;
 80045a0:	4b2a      	ldr	r3, [pc, #168]	; (800464c <straight+0x1c4>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
		accel = -acc;
 80045a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045aa:	eef1 7a67 	vneg.f32	s15, s15
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <straight+0x1e8>)
 80045b0:	edc3 7a00 	vstr	s15, [r3]
		while(len_mouse < len_target - 0.0){
 80045b4:	e014      	b.n	80045e0 <straight+0x158>
			if(tar_speed < 0.05){
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <straight+0x1ec>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fb ffcc 	bl	8000558 <__aeabi_f2d>
 80045c0:	a31f      	add	r3, pc, #124	; (adr r3, 8004640 <straight+0x1b8>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fc fa91 	bl	8000aec <__aeabi_dcmplt>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d100      	bne.n	80045d2 <straight+0x14a>
 80045d0:	e006      	b.n	80045e0 <straight+0x158>
				accel = 0.0;	tar_speed = 0.05;
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <straight+0x1e8>)
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <straight+0x1ec>)
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <straight+0x1f8>)
 80045de:	601a      	str	r2, [r3, #0]
		while(len_mouse < len_target - 0.0){
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <straight+0x1f0>)
 80045e2:	edd3 7a00 	vldr	s15, [r3]
 80045e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80045ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	dce0      	bgt.n	80045b6 <straight+0x12e>
			}
		}
		accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <straight+0x1e8>)
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <straight+0x1e4>)
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <straight+0x1ec>)
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

		HAL_Delay(100);
 800460c:	2064      	movs	r0, #100	; 0x64
 800460e:	f009 fa7d 	bl	800db0c <HAL_Delay>
 8004612:	e129      	b.n	8004868 <straight+0x3e0>

	}else{
		//MY_LED(0x10);
		accel = acc;
 8004614:	4a16      	ldr	r2, [pc, #88]	; (8004670 <straight+0x1e8>)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6013      	str	r3, [r2, #0]
		max_speed = max_sp;
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <straight+0x1e4>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6013      	str	r3, [r2, #0]
		r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <straight+0x1fc>)
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <straight+0x200>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <straight+0x204>)
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	4b17      	ldr	r3, [pc, #92]	; (8004690 <straight+0x208>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
		}
		if(len_target == HALF_SECTION || len_target == HALF_SECTION-10){
			r_wall_check = sen_r.is_wall;
			l_wall_check = sen_l.is_wall;
		}*/
		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp - end_sp*end_sp)/(2.0*acc)){
 8004638:	e0a9      	b.n	800478e <straight+0x306>
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w
 8004640:	9999999a 	.word	0x9999999a
 8004644:	3fa99999 	.word	0x3fa99999
 8004648:	2000d224 	.word	0x2000d224
 800464c:	20012398 	.word	0x20012398
 8004650:	2000821c 	.word	0x2000821c
 8004654:	2000d210 	.word	0x2000d210
 8004658:	2000d1d8 	.word	0x2000d1d8
 800465c:	200004ec 	.word	0x200004ec
 8004660:	2000d43c 	.word	0x2000d43c
 8004664:	200002dc 	.word	0x200002dc
 8004668:	2000a170 	.word	0x2000a170
 800466c:	2000d05c 	.word	0x2000d05c
 8004670:	2000a16c 	.word	0x2000a16c
 8004674:	2000d198 	.word	0x2000d198
 8004678:	200123b8 	.word	0x200123b8
 800467c:	408f4000 	.word	0x408f4000
 8004680:	3d4ccccd 	.word	0x3d4ccccd
 8004684:	2000d22c 	.word	0x2000d22c
 8004688:	20010454 	.word	0x20010454
 800468c:	20002438 	.word	0x20002438
 8004690:	2000f490 	.word	0x2000f490
			if(tar_speed >= max_speed){
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <straight+0x3fc>)
 8004696:	ed93 7a00 	vldr	s14, [r3]
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <straight+0x400>)
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	db06      	blt.n	80046b8 <straight+0x230>
				con_wall.enable = true;
 80046aa:	4b78      	ldr	r3, [pc, #480]	; (800488c <straight+0x404>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]
				accel = 0.0;
 80046b0:	4b77      	ldr	r3, [pc, #476]	; (8004890 <straight+0x408>)
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
			}
			if(len_target == SECTION){
 80046b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046bc:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004894 <straight+0x40c>
 80046c0:	eef4 7a47 	vcmp.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d123      	bne.n	8004712 <straight+0x28a>
		        if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 80046ca:	4b73      	ldr	r3, [pc, #460]	; (8004898 <straight+0x410>)
 80046cc:	7b9b      	ldrb	r3, [r3, #14]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <straight+0x266>
 80046d2:	4b72      	ldr	r3, [pc, #456]	; (800489c <straight+0x414>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d109      	bne.n	80046ee <straight+0x266>
 80046da:	4b71      	ldr	r3, [pc, #452]	; (80048a0 <straight+0x418>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <straight+0x266>
		            len_mouse = 56.0;//(len_mouse+56.0)/2;
 80046e2:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <straight+0x41c>)
 80046e4:	4a70      	ldr	r2, [pc, #448]	; (80048a8 <straight+0x420>)
 80046e6:	601a      	str	r2, [r3, #0]
		            hosei_f=1;
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <straight+0x418>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
		        }
		        if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 80046ee:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <straight+0x424>)
 80046f0:	7b9b      	ldrb	r3, [r3, #14]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <straight+0x28a>
 80046f6:	4b6e      	ldr	r3, [pc, #440]	; (80048b0 <straight+0x428>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d109      	bne.n	8004712 <straight+0x28a>
 80046fe:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <straight+0x418>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <straight+0x28a>
		            len_mouse = 56.0;//(len_mouse+56.0)/2;
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <straight+0x41c>)
 8004708:	4a67      	ldr	r2, [pc, #412]	; (80048a8 <straight+0x420>)
 800470a:	601a      	str	r2, [r3, #0]
		            hosei_f=1;
 800470c:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <straight+0x418>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
		        }
			}
			if(len_target == HALF_SECTION || len_target == HALF_SECTION-10 ){
 8004712:	edd7 7a03 	vldr	s15, [r7, #12]
 8004716:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80048b4 <straight+0x42c>
 800471a:	eef4 7a47 	vcmp.f32	s15, s14
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d008      	beq.n	8004736 <straight+0x2ae>
 8004724:	edd7 7a03 	vldr	s15, [r7, #12]
 8004728:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80048b8 <straight+0x430>
 800472c:	eef4 7a47 	vcmp.f32	s15, s14
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	d123      	bne.n	800477e <straight+0x2f6>
		        if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8004736:	4b58      	ldr	r3, [pc, #352]	; (8004898 <straight+0x410>)
 8004738:	7b9b      	ldrb	r3, [r3, #14]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <straight+0x2d2>
 800473e:	4b57      	ldr	r3, [pc, #348]	; (800489c <straight+0x414>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d109      	bne.n	800475a <straight+0x2d2>
 8004746:	4b56      	ldr	r3, [pc, #344]	; (80048a0 <straight+0x418>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <straight+0x2d2>
		            len_mouse = 15.0;//(len_mouse+15.0)/2;
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <straight+0x41c>)
 8004750:	4a5a      	ldr	r2, [pc, #360]	; (80048bc <straight+0x434>)
 8004752:	601a      	str	r2, [r3, #0]
		            hosei_f=1;
 8004754:	4b52      	ldr	r3, [pc, #328]	; (80048a0 <straight+0x418>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
		        }
		        if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 800475a:	4b54      	ldr	r3, [pc, #336]	; (80048ac <straight+0x424>)
 800475c:	7b9b      	ldrb	r3, [r3, #14]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <straight+0x2f6>
 8004762:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <straight+0x428>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d109      	bne.n	800477e <straight+0x2f6>
 800476a:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <straight+0x418>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d105      	bne.n	800477e <straight+0x2f6>
		            len_mouse = 15.0;//(len_mouse+15.0)/2;
 8004772:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <straight+0x41c>)
 8004774:	4a51      	ldr	r2, [pc, #324]	; (80048bc <straight+0x434>)
 8004776:	601a      	str	r2, [r3, #0]
		            hosei_f=1;
 8004778:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <straight+0x418>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
		        }
			}
			r_wall_check = sen_r.is_wall;
 800477e:	4b46      	ldr	r3, [pc, #280]	; (8004898 <straight+0x410>)
 8004780:	7b9a      	ldrb	r2, [r3, #14]
 8004782:	4b46      	ldr	r3, [pc, #280]	; (800489c <straight+0x414>)
 8004784:	701a      	strb	r2, [r3, #0]
			l_wall_check = sen_l.is_wall;
 8004786:	4b49      	ldr	r3, [pc, #292]	; (80048ac <straight+0x424>)
 8004788:	7b9a      	ldrb	r2, [r3, #14]
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <straight+0x428>)
 800478c:	701a      	strb	r2, [r3, #0]
		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp - end_sp*end_sp)/(2.0*acc)){
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7fb fee2 	bl	8000558 <__aeabi_f2d>
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
 8004798:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <straight+0x41c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fb fedb 	bl	8000558 <__aeabi_f2d>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fd75 	bl	8000298 <__aeabi_dsub>
 80047ae:	4603      	mov	r3, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	4625      	mov	r5, r4
 80047b4:	461c      	mov	r4, r3
 80047b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80047ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80047be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047c2:	edd7 6a00 	vldr	s13, [r7]
 80047c6:	edd7 7a00 	vldr	s15, [r7]
 80047ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	ee17 0a90 	vmov	r0, s15
 80047d6:	f7fb febf 	bl	8000558 <__aeabi_f2d>
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <straight+0x438>)
 80047e0:	f7fb ff12 	bl	8000608 <__aeabi_dmul>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4690      	mov	r8, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7fb feb3 	bl	8000558 <__aeabi_f2d>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	f7fb fd51 	bl	800029c <__adddf3>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f7fc f82b 	bl	800085c <__aeabi_ddiv>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4620      	mov	r0, r4
 800480c:	4629      	mov	r1, r5
 800480e:	f7fc f98b 	bl	8000b28 <__aeabi_dcmpgt>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f af3d 	bne.w	8004694 <straight+0x20c>

		}
		con_wall.enable = false;
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <straight+0x404>)
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
		accel = -acc;
 8004820:	edd7 7a02 	vldr	s15, [r7, #8]
 8004824:	eef1 7a67 	vneg.f32	s15, s15
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <straight+0x408>)
 800482a:	edc3 7a00 	vstr	s15, [r3]
		while(len_mouse < len_target){
 800482e:	e011      	b.n	8004854 <straight+0x3cc>
			if(tar_speed <= end_sp){
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <straight+0x3fc>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ed97 7a00 	vldr	s14, [r7]
 800483a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	da00      	bge.n	8004846 <straight+0x3be>
 8004844:	e006      	b.n	8004854 <straight+0x3cc>
				tar_speed = end_sp; accel = 0.0;
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <straight+0x3fc>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <straight+0x408>)
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
		while(len_mouse < len_target){
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <straight+0x41c>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	ed97 7a03 	vldr	s14, [r7, #12]
 800485e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004866:	dce3      	bgt.n	8004830 <straight+0x3a8>
			}
		}

	}

	accel = 0.0;	len_mouse = 0.0;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <straight+0x408>)
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <straight+0x41c>)
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004882:	bf00      	nop
 8004884:	2000d198 	.word	0x2000d198
 8004888:	2000d05c 	.word	0x2000d05c
 800488c:	20012398 	.word	0x20012398
 8004890:	2000a16c 	.word	0x2000a16c
 8004894:	42b40000 	.word	0x42b40000
 8004898:	2000f480 	.word	0x2000f480
 800489c:	2000d22c 	.word	0x2000d22c
 80048a0:	20002438 	.word	0x20002438
 80048a4:	200123b8 	.word	0x200123b8
 80048a8:	42600000 	.word	0x42600000
 80048ac:	2000d064 	.word	0x2000d064
 80048b0:	20010454 	.word	0x20010454
 80048b4:	42340000 	.word	0x42340000
 80048b8:	420c0000 	.word	0x420c0000
 80048bc:	41700000 	.word	0x41700000
 80048c0:	408f4000 	.word	0x408f4000
 80048c4:	00000000 	.word	0x00000000

080048c8 <STOP_WALL>:

	accel = 0.0;	len_mouse = 0.0;

}

void STOP_WALL(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
	error_cnt = 0;
 80048ce:	4b48      	ldr	r3, [pc, #288]	; (80049f0 <STOP_WALL+0x128>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <STOP_WALL+0x12c>)
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <STOP_WALL+0x130>)
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 80048e4:	4b45      	ldr	r3, [pc, #276]	; (80049fc <STOP_WALL+0x134>)
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b44      	ldr	r3, [pc, #272]	; (8004a00 <STOP_WALL+0x138>)
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

	con_wall.enable = false;
 80048f4:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <STOP_WALL+0x13c>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	771a      	strb	r2, [r3, #28]

	tar_omega = 0.0;
 80048fa:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <STOP_WALL+0x140>)
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

	run_mode = STRAIGHT_MODE;
 8004902:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <STOP_WALL+0x144>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]

		max_speed = SEARCH_SPEED;accel = SEARCH_ACCEL;
 8004908:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <STOP_WALL+0x148>)
 800490a:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <STOP_WALL+0x14c>)
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <STOP_WALL+0x150>)
 8004910:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004914:	601a      	str	r2, [r3, #0]
		//con_wall.enable = true;

		while(sen_fr.value <= STOP_SEN_FR && sen_fl.value <= STOP_SEN_FL){
 8004916:	e00f      	b.n	8004938 <STOP_WALL+0x70>
			if(tar_speed >= max_speed){
 8004918:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <STOP_WALL+0x154>)
 800491a:	ed93 7a00 	vldr	s14, [r3]
 800491e:	4b3c      	ldr	r3, [pc, #240]	; (8004a10 <STOP_WALL+0x148>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492c:	da00      	bge.n	8004930 <STOP_WALL+0x68>
 800492e:	e003      	b.n	8004938 <STOP_WALL+0x70>
				accel = 0.0;
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <STOP_WALL+0x150>)
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
		while(sen_fr.value <= STOP_SEN_FR && sen_fl.value <= STOP_SEN_FL){
 8004938:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <STOP_WALL+0x158>)
 800493a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800493e:	f240 6272 	movw	r2, #1650	; 0x672
 8004942:	4293      	cmp	r3, r2
 8004944:	dc05      	bgt.n	8004952 <STOP_WALL+0x8a>
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <STOP_WALL+0x15c>)
 8004948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800494c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004950:	dde2      	ble.n	8004918 <STOP_WALL+0x50>

			}
		}
		con_wall.enable = false;
 8004952:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <STOP_WALL+0x13c>)
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]

		accel = -SEARCH_ACCEL;
 8004958:	4b2f      	ldr	r3, [pc, #188]	; (8004a18 <STOP_WALL+0x150>)
 800495a:	4a33      	ldr	r2, [pc, #204]	; (8004a28 <STOP_WALL+0x160>)
 800495c:	601a      	str	r2, [r3, #0]
		float local_length = len_mouse;
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <STOP_WALL+0x164>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	607b      	str	r3, [r7, #4]
		while(len_mouse - local_length < 15.0 + 7.5 - 1.0){
 8004964:	e014      	b.n	8004990 <STOP_WALL+0xc8>
			if(tar_speed < 0.05){
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <STOP_WALL+0x154>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fdf4 	bl	8000558 <__aeabi_f2d>
 8004970:	a31d      	add	r3, pc, #116	; (adr r3, 80049e8 <STOP_WALL+0x120>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fc f8b9 	bl	8000aec <__aeabi_dcmplt>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <STOP_WALL+0xba>
 8004980:	e006      	b.n	8004990 <STOP_WALL+0xc8>
				accel = 0.0;	tar_speed = 0.05;
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <STOP_WALL+0x150>)
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <STOP_WALL+0x154>)
 800498c:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <STOP_WALL+0x168>)
 800498e:	601a      	str	r2, [r3, #0]
		while(len_mouse - local_length < 15.0 + 7.5 - 1.0){
 8004990:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <STOP_WALL+0x164>)
 8004992:	ed93 7a00 	vldr	s14, [r3]
 8004996:	edd7 7a01 	vldr	s15, [r7, #4]
 800499a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800499e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004a34 <STOP_WALL+0x16c>
 80049a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d4dc      	bmi.n	8004966 <STOP_WALL+0x9e>
			}
		}
		accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <STOP_WALL+0x150>)
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <STOP_WALL+0x148>)
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <STOP_WALL+0x154>)
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

		HAL_Delay(100);
 80049c4:	2064      	movs	r0, #100	; 0x64
 80049c6:	f009 f8a1 	bl	800db0c <HAL_Delay>

		accel = 0.0;	len_mouse = 0.0;
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <STOP_WALL+0x150>)
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <STOP_WALL+0x164>)
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

		run_mode = NON_CON_MODE;
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <STOP_WALL+0x144>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	9999999a 	.word	0x9999999a
 80049ec:	3fa99999 	.word	0x3fa99999
 80049f0:	2000d224 	.word	0x2000d224
 80049f4:	2000821c 	.word	0x2000821c
 80049f8:	2000d210 	.word	0x2000d210
 80049fc:	2000d1d8 	.word	0x2000d1d8
 8004a00:	200004ec 	.word	0x200004ec
 8004a04:	20012398 	.word	0x20012398
 8004a08:	2000d43c 	.word	0x2000d43c
 8004a0c:	2000a170 	.word	0x2000a170
 8004a10:	2000d05c 	.word	0x2000d05c
 8004a14:	3e99999a 	.word	0x3e99999a
 8004a18:	2000a16c 	.word	0x2000a16c
 8004a1c:	2000d198 	.word	0x2000d198
 8004a20:	2000d1b8 	.word	0x2000d1b8
 8004a24:	2000d1c8 	.word	0x2000d1c8
 8004a28:	c0800000 	.word	0xc0800000
 8004a2c:	200123b8 	.word	0x200123b8
 8004a30:	3d4ccccd 	.word	0x3d4ccccd
 8004a34:	41ac0000 	.word	0x41ac0000

08004a38 <STOP_WALL2>:

void STOP_WALL2(int millis){
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	error_cnt = 0;
 8004a40:	4bbf      	ldr	r3, [pc, #764]	; (8004d40 <STOP_WALL2+0x308>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

	int cnt = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
	I_omega = 0.0;I_tar_omega = 0.0;
 8004a4a:	4bbe      	ldr	r3, [pc, #760]	; (8004d44 <STOP_WALL2+0x30c>)
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	4bbd      	ldr	r3, [pc, #756]	; (8004d48 <STOP_WALL2+0x310>)
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8004a5a:	4bbc      	ldr	r3, [pc, #752]	; (8004d4c <STOP_WALL2+0x314>)
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	4bbb      	ldr	r3, [pc, #748]	; (8004d50 <STOP_WALL2+0x318>)
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

	con_wall.enable = false;
 8004a6a:	4bba      	ldr	r3, [pc, #744]	; (8004d54 <STOP_WALL2+0x31c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]

	run_mode = TURN_MODE; 		turn_dir = LEFT;
 8004a70:	4bb9      	ldr	r3, [pc, #740]	; (8004d58 <STOP_WALL2+0x320>)
 8004a72:	2202      	movs	r2, #2
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4bb9      	ldr	r3, [pc, #740]	; (8004d5c <STOP_WALL2+0x324>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
	max_speed = SEARCH_SPEED;	max_omega = SEARCH_TURN_SPEED;
 8004a7c:	4bb8      	ldr	r3, [pc, #736]	; (8004d60 <STOP_WALL2+0x328>)
 8004a7e:	4ab9      	ldr	r2, [pc, #740]	; (8004d64 <STOP_WALL2+0x32c>)
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	4bb9      	ldr	r3, [pc, #740]	; (8004d68 <STOP_WALL2+0x330>)
 8004a84:	4ab9      	ldr	r2, [pc, #740]	; (8004d6c <STOP_WALL2+0x334>)
 8004a86:	601a      	str	r2, [r3, #0]

	float set_sp_err,set_sp_pre_err,set_sp_sum_err;
	float set_om_err,set_om_pre_err,set_om_sum_err;

	while(cnt < millis){
 8004a88:	e11a      	b.n	8004cc0 <STOP_WALL2+0x288>
		error_cnt = 0;
 8004a8a:	4bad      	ldr	r3, [pc, #692]	; (8004d40 <STOP_WALL2+0x308>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
		if(sen_fr.value >= STOP_SEN_FR && sen_fl.value >= STOP_SEN_FL){
 8004a90:	4bb7      	ldr	r3, [pc, #732]	; (8004d70 <STOP_WALL2+0x338>)
 8004a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a96:	f240 6271 	movw	r2, #1649	; 0x671
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f340 8102 	ble.w	8004ca4 <STOP_WALL2+0x26c>
 8004aa0:	4bb4      	ldr	r3, [pc, #720]	; (8004d74 <STOP_WALL2+0x33c>)
 8004aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004aaa:	f2c0 80fb 	blt.w	8004ca4 <STOP_WALL2+0x26c>
			set_sp_pre_err = set_sp_err;	set_om_pre_err = set_om_err;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	60fb      	str	r3, [r7, #12]
			set_sp_err = (float)(( SET_SEN_FR - sen_fr.value ) + ( SET_SEN_FL - sen_fl.value )) / 2.0 ;
 8004ab6:	4bae      	ldr	r3, [pc, #696]	; (8004d70 <STOP_WALL2+0x338>)
 8004ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abc:	f5c3 625a 	rsb	r2, r3, #3488	; 0xda0
 8004ac0:	3207      	adds	r2, #7
 8004ac2:	4bac      	ldr	r3, [pc, #688]	; (8004d74 <STOP_WALL2+0x33c>)
 8004ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac8:	f5c3 635d 	rsb	r3, r3, #3536	; 0xdd0
 8004acc:	330e      	adds	r3, #14
 8004ace:	4413      	add	r3, r2
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ad8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae0:	edc7 7a08 	vstr	s15, [r7, #32]
			set_om_err = (float)(( SET_SEN_FR - sen_fr.value ) - ( SET_SEN_FL - sen_fl.value )) / 2.0 ;
 8004ae4:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <STOP_WALL2+0x338>)
 8004ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aea:	f5c3 625a 	rsb	r2, r3, #3488	; 0xda0
 8004aee:	3207      	adds	r2, #7
 8004af0:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <STOP_WALL2+0x33c>)
 8004af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af6:	f5c3 635d 	rsb	r3, r3, #3536	; 0xdd0
 8004afa:	330e      	adds	r3, #14
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b0e:	edc7 7a06 	vstr	s15, [r7, #24]
			set_sp_sum_err += set_sp_err;	set_om_sum_err += set_om_err;
 8004b12:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b16:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
 8004b22:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b26:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b2e:	edc7 7a05 	vstr	s15, [r7, #20]

			tar_speed = 0.001 * set_sp_err + 0.0 * set_sp_sum_err + 0.0 * (set_sp_err-set_sp_pre_err);
 8004b32:	6a38      	ldr	r0, [r7, #32]
 8004b34:	f7fb fd10 	bl	8000558 <__aeabi_f2d>
 8004b38:	a379      	add	r3, pc, #484	; (adr r3, 8004d20 <STOP_WALL2+0x2e8>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fd63 	bl	8000608 <__aeabi_dmul>
 8004b42:	4603      	mov	r3, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	4625      	mov	r5, r4
 8004b48:	461c      	mov	r4, r3
 8004b4a:	69f8      	ldr	r0, [r7, #28]
 8004b4c:	f7fb fd04 	bl	8000558 <__aeabi_f2d>
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	f7fb fd56 	bl	8000608 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fb9a 	bl	800029c <__adddf3>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4625      	mov	r5, r4
 8004b6e:	461c      	mov	r4, r3
 8004b70:	ed97 7a08 	vldr	s14, [r7, #32]
 8004b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	ee17 0a90 	vmov	r0, s15
 8004b80:	f7fb fcea 	bl	8000558 <__aeabi_f2d>
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	f7fb fd3c 	bl	8000608 <__aeabi_dmul>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4620      	mov	r0, r4
 8004b96:	4629      	mov	r1, r5
 8004b98:	f7fb fb80 	bl	800029c <__adddf3>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	f7fc f808 	bl	8000bb8 <__aeabi_d2f>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b73      	ldr	r3, [pc, #460]	; (8004d78 <STOP_WALL2+0x340>)
 8004bac:	601a      	str	r2, [r3, #0]
			if(fabs(tar_speed) > 0.15) tar_speed = SIGN(tar_speed)*0.15;
 8004bae:	4b72      	ldr	r3, [pc, #456]	; (8004d78 <STOP_WALL2+0x340>)
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8004bb8:	ee17 0a90 	vmov	r0, s15
 8004bbc:	f7fb fccc 	bl	8000558 <__aeabi_f2d>
 8004bc0:	a359      	add	r3, pc, #356	; (adr r3, 8004d28 <STOP_WALL2+0x2f0>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <STOP_WALL2+0x1b2>
 8004bd0:	4b69      	ldr	r3, [pc, #420]	; (8004d78 <STOP_WALL2+0x340>)
 8004bd2:	edd3 7a00 	vldr	s15, [r3]
 8004bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	d501      	bpl.n	8004be4 <STOP_WALL2+0x1ac>
 8004be0:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <STOP_WALL2+0x344>)
 8004be2:	e000      	b.n	8004be6 <STOP_WALL2+0x1ae>
 8004be4:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <STOP_WALL2+0x348>)
 8004be6:	4a64      	ldr	r2, [pc, #400]	; (8004d78 <STOP_WALL2+0x340>)
 8004be8:	6013      	str	r3, [r2, #0]
			tar_omega = 0.01 * set_om_err + 0.0 * set_om_sum_err + 0.0 * (set_om_err-set_om_pre_err);
 8004bea:	69b8      	ldr	r0, [r7, #24]
 8004bec:	f7fb fcb4 	bl	8000558 <__aeabi_f2d>
 8004bf0:	a34f      	add	r3, pc, #316	; (adr r3, 8004d30 <STOP_WALL2+0x2f8>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fd07 	bl	8000608 <__aeabi_dmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4625      	mov	r5, r4
 8004c00:	461c      	mov	r4, r3
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7fb fca8 	bl	8000558 <__aeabi_f2d>
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	f7fb fcfa 	bl	8000608 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fb3e 	bl	800029c <__adddf3>
 8004c20:	4603      	mov	r3, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	4625      	mov	r5, r4
 8004c26:	461c      	mov	r4, r3
 8004c28:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c34:	ee17 0a90 	vmov	r0, s15
 8004c38:	f7fb fc8e 	bl	8000558 <__aeabi_f2d>
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	f7fb fce0 	bl	8000608 <__aeabi_dmul>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7fb fb24 	bl	800029c <__adddf3>
 8004c54:	4603      	mov	r3, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	f7fb ffac 	bl	8000bb8 <__aeabi_d2f>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <STOP_WALL2+0x34c>)
 8004c64:	601a      	str	r2, [r3, #0]
			if(fabs(tar_omega) > SEARCH_TURN_SPEED) tar_omega = SIGN(tar_omega)*SEARCH_TURN_SPEED;
 8004c66:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <STOP_WALL2+0x34c>)
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	eef0 7ae7 	vabs.f32	s15, s15
 8004c70:	ee17 0a90 	vmov	r0, s15
 8004c74:	f7fb fc70 	bl	8000558 <__aeabi_f2d>
 8004c78:	a32f      	add	r3, pc, #188	; (adr r3, 8004d38 <STOP_WALL2+0x300>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb ff53 	bl	8000b28 <__aeabi_dcmpgt>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <STOP_WALL2+0x27c>
 8004c88:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <STOP_WALL2+0x34c>)
 8004c8a:	edd3 7a00 	vldr	s15, [r3]
 8004c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	d501      	bpl.n	8004c9c <STOP_WALL2+0x264>
 8004c98:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <STOP_WALL2+0x350>)
 8004c9a:	e000      	b.n	8004c9e <STOP_WALL2+0x266>
 8004c9c:	4b33      	ldr	r3, [pc, #204]	; (8004d6c <STOP_WALL2+0x334>)
 8004c9e:	4a39      	ldr	r2, [pc, #228]	; (8004d84 <STOP_WALL2+0x34c>)
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e007      	b.n	8004cb4 <STOP_WALL2+0x27c>

		}else{
			tar_speed = 0.0;	tar_omega = 0.0;
 8004ca4:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <STOP_WALL2+0x340>)
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <STOP_WALL2+0x34c>)
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
		}

		cnt++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_Delay(1);
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f008 ff26 	bl	800db0c <HAL_Delay>
	while(cnt < millis){
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f6ff aee0 	blt.w	8004a8a <STOP_WALL2+0x52>
	}



	HAL_Delay(100);
 8004cca:	2064      	movs	r0, #100	; 0x64
 8004ccc:	f008 ff1e 	bl	800db0c <HAL_Delay>

	accel = 0.0; 		max_speed = 0.0; tar_speed = 0.0;
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <STOP_WALL2+0x354>)
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <STOP_WALL2+0x328>)
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <STOP_WALL2+0x340>)
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0;	max_omega = 0.0; tar_omega = 0.0;
 8004ce8:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <STOP_WALL2+0x358>)
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <STOP_WALL2+0x330>)
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <STOP_WALL2+0x34c>)
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
	len_mouse = 0.0;
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <STOP_WALL2+0x35c>)
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 8004d08:	2064      	movs	r0, #100	; 0x64
 8004d0a:	f008 feff 	bl	800db0c <HAL_Delay>
	run_mode = NON_CON_MODE;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <STOP_WALL2+0x320>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d1c:	f3af 8000 	nop.w
 8004d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d24:	3f50624d 	.word	0x3f50624d
 8004d28:	33333333 	.word	0x33333333
 8004d2c:	3fc33333 	.word	0x3fc33333
 8004d30:	47ae147b 	.word	0x47ae147b
 8004d34:	3f847ae1 	.word	0x3f847ae1
 8004d38:	fc8b007a 	.word	0xfc8b007a
 8004d3c:	402921fa 	.word	0x402921fa
 8004d40:	2000d224 	.word	0x2000d224
 8004d44:	2000821c 	.word	0x2000821c
 8004d48:	2000d210 	.word	0x2000d210
 8004d4c:	2000d1d8 	.word	0x2000d1d8
 8004d50:	200004ec 	.word	0x200004ec
 8004d54:	20012398 	.word	0x20012398
 8004d58:	2000a170 	.word	0x2000a170
 8004d5c:	20008218 	.word	0x20008218
 8004d60:	2000d05c 	.word	0x2000d05c
 8004d64:	3e99999a 	.word	0x3e99999a
 8004d68:	20008208 	.word	0x20008208
 8004d6c:	41490fd8 	.word	0x41490fd8
 8004d70:	2000d1b8 	.word	0x2000d1b8
 8004d74:	2000d1c8 	.word	0x2000d1c8
 8004d78:	2000d198 	.word	0x2000d198
 8004d7c:	be19999a 	.word	0xbe19999a
 8004d80:	3e19999a 	.word	0x3e19999a
 8004d84:	2000d43c 	.word	0x2000d43c
 8004d88:	c1490fd8 	.word	0xc1490fd8
 8004d8c:	2000a16c 	.word	0x2000a16c
 8004d90:	200002dc 	.word	0x200002dc
 8004d94:	200123b8 	.word	0x200123b8

08004d98 <turn_R90>:

	run_mode = NON_CON_MODE;

}

void turn_R90(float omega_acc,float max_omg){
 8004d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	ed87 0a01 	vstr	s0, [r7, #4]
 8004da4:	edc7 0a00 	vstr	s1, [r7]

	error_cnt = 0;
 8004da8:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <turn_R90+0x1e8>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8004dae:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <turn_R90+0x1ec>)
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	4b74      	ldr	r3, [pc, #464]	; (8004f88 <turn_R90+0x1f0>)
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8004dbe:	4b73      	ldr	r3, [pc, #460]	; (8004f8c <turn_R90+0x1f4>)
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	4b72      	ldr	r3, [pc, #456]	; (8004f90 <turn_R90+0x1f8>)
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]

	accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 8004dce:	4b71      	ldr	r3, [pc, #452]	; (8004f94 <turn_R90+0x1fc>)
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4b70      	ldr	r3, [pc, #448]	; (8004f98 <turn_R90+0x200>)
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <turn_R90+0x204>)
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8004de6:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <turn_R90+0x208>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <turn_R90+0x20c>)
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	4b6c      	ldr	r3, [pc, #432]	; (8004fa8 <turn_R90+0x210>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

	float local_degree = 0.0;
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

	local_degree = degree;
 8004e04:	4b69      	ldr	r3, [pc, #420]	; (8004fac <turn_R90+0x214>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

	run_mode = TURN_MODE;	turn_dir = RIGHT;
 8004e0a:	4b69      	ldr	r3, [pc, #420]	; (8004fb0 <turn_R90+0x218>)
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	4b68      	ldr	r3, [pc, #416]	; (8004fb4 <turn_R90+0x21c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

	//符号　符号を変えないといけない
	omega_accel = -omega_acc; max_omega = -max_omg;
 8004e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e1a:	eef1 7a67 	vneg.f32	s15, s15
 8004e1e:	4b60      	ldr	r3, [pc, #384]	; (8004fa0 <turn_R90+0x208>)
 8004e20:	edc3 7a00 	vstr	s15, [r3]
 8004e24:	edd7 7a00 	vldr	s15, [r7]
 8004e28:	eef1 7a67 	vneg.f32	s15, s15
 8004e2c:	4b5d      	ldr	r3, [pc, #372]	; (8004fa4 <turn_R90+0x20c>)
 8004e2e:	edc3 7a00 	vstr	s15, [r3]

	while(((-90.0) - (degree - local_degree)) < -(max_omega*max_omega)/(2.0*omega_acc)*180.0/PI){
 8004e32:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <turn_R90+0x214>)
 8004e34:	ed93 7a00 	vldr	s14, [r3]
 8004e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e40:	ee17 0a90 	vmov	r0, s15
 8004e44:	f7fb fb88 	bl	8000558 <__aeabi_f2d>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	4958      	ldr	r1, [pc, #352]	; (8004fb8 <turn_R90+0x220>)
 8004e56:	f7fb fa1f 	bl	8000298 <__aeabi_dsub>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4625      	mov	r5, r4
 8004e60:	461c      	mov	r4, r3
 8004e62:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <turn_R90+0x20c>)
 8004e64:	ed93 7a00 	vldr	s14, [r3]
 8004e68:	4b4e      	ldr	r3, [pc, #312]	; (8004fa4 <turn_R90+0x20c>)
 8004e6a:	edd3 7a00 	vldr	s15, [r3]
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	eef1 7a67 	vneg.f32	s15, s15
 8004e76:	ee17 3a90 	vmov	r3, s15
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb fb6c 	bl	8000558 <__aeabi_f2d>
 8004e80:	4680      	mov	r8, r0
 8004e82:	4689      	mov	r9, r1
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fb fb67 	bl	8000558 <__aeabi_f2d>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	f7fb fa05 	bl	800029c <__adddf3>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4640      	mov	r0, r8
 8004e98:	4649      	mov	r1, r9
 8004e9a:	f7fb fcdf 	bl	800085c <__aeabi_ddiv>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	4b44      	ldr	r3, [pc, #272]	; (8004fbc <turn_R90+0x224>)
 8004eac:	f7fb fbac 	bl	8000608 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	a32d      	add	r3, pc, #180	; (adr r3, 8004f70 <turn_R90+0x1d8>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb fccd 	bl	800085c <__aeabi_ddiv>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fe0f 	bl	8000aec <__aeabi_dcmplt>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ae      	bne.n	8004e32 <turn_R90+0x9a>
		if(tar_omega <= max_omega){
			//I_omega = 0.0;I_tar_omega = 0.0;
		}
	}

	omega_accel = omega_acc;
 8004ed4:	4a32      	ldr	r2, [pc, #200]	; (8004fa0 <turn_R90+0x208>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6013      	str	r3, [r2, #0]

	while((degree - local_degree) > -90.0 + 0.0){
 8004eda:	e014      	b.n	8004f06 <turn_R90+0x16e>
		if(tar_omega > -0.05*PI) {
 8004edc:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <turn_R90+0x210>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb fb39 	bl	8000558 <__aeabi_f2d>
 8004ee6:	a324      	add	r3, pc, #144	; (adr r3, 8004f78 <turn_R90+0x1e0>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d100      	bne.n	8004ef8 <turn_R90+0x160>
 8004ef6:	e006      	b.n	8004f06 <turn_R90+0x16e>
			tar_omega = -0.05*PI;
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <turn_R90+0x210>)
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <turn_R90+0x228>)
 8004efc:	601a      	str	r2, [r3, #0]
			omega_accel = 0.0;
 8004efe:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <turn_R90+0x208>)
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	while((degree - local_degree) > -90.0 + 0.0){
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <turn_R90+0x214>)
 8004f08:	ed93 7a00 	vldr	s14, [r3]
 8004f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f14:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004fc4 <turn_R90+0x22c>
 8004f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	dcdc      	bgt.n	8004edc <turn_R90+0x144>
		}
	}

	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <turn_R90+0x208>)
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <turn_R90+0x20c>)
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <turn_R90+0x210>)
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
	sen_r.cnt = 0;sen_l.cnt = 0;
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <turn_R90+0x230>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	819a      	strh	r2, [r3, #12]
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <turn_R90+0x234>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	819a      	strh	r2, [r3, #12]
	HAL_Delay(200);
 8004f46:	20c8      	movs	r0, #200	; 0xc8
 8004f48:	f008 fde0 	bl	800db0c <HAL_Delay>

	accel = 0.0;	len_mouse = 0.0;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <turn_R90+0x1fc>)
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <turn_R90+0x238>)
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	run_mode = NON_CON_MODE;
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <turn_R90+0x218>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f6c:	f3af 8000 	nop.w
 8004f70:	fc8b007a 	.word	0xfc8b007a
 8004f74:	400921fa 	.word	0x400921fa
 8004f78:	306f3395 	.word	0x306f3395
 8004f7c:	bfc41b2f 	.word	0xbfc41b2f
 8004f80:	2000d224 	.word	0x2000d224
 8004f84:	2000821c 	.word	0x2000821c
 8004f88:	2000d210 	.word	0x2000d210
 8004f8c:	2000d1d8 	.word	0x2000d1d8
 8004f90:	200004ec 	.word	0x200004ec
 8004f94:	2000a16c 	.word	0x2000a16c
 8004f98:	2000d05c 	.word	0x2000d05c
 8004f9c:	2000d198 	.word	0x2000d198
 8004fa0:	200002dc 	.word	0x200002dc
 8004fa4:	20008208 	.word	0x20008208
 8004fa8:	2000d43c 	.word	0x2000d43c
 8004fac:	2000f4a8 	.word	0x2000f4a8
 8004fb0:	2000a170 	.word	0x2000a170
 8004fb4:	20008218 	.word	0x20008218
 8004fb8:	c0568000 	.word	0xc0568000
 8004fbc:	40668000 	.word	0x40668000
 8004fc0:	be20d97a 	.word	0xbe20d97a
 8004fc4:	c2b40000 	.word	0xc2b40000
 8004fc8:	2000f480 	.word	0x2000f480
 8004fcc:	2000d064 	.word	0x2000d064
 8004fd0:	200123b8 	.word	0x200123b8
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <turn_L90>:



void turn_L90(float omega_acc,float max_omg){
 8004fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	ed87 0a01 	vstr	s0, [r7, #4]
 8004fe4:	edc7 0a00 	vstr	s1, [r7]

	error_cnt = 0;
 8004fe8:	4b71      	ldr	r3, [pc, #452]	; (80051b0 <turn_L90+0x1d8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8004fee:	4b71      	ldr	r3, [pc, #452]	; (80051b4 <turn_L90+0x1dc>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4b70      	ldr	r3, [pc, #448]	; (80051b8 <turn_L90+0x1e0>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8004ffe:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <turn_L90+0x1e4>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <turn_L90+0x1e8>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

	accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 800500e:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <turn_L90+0x1ec>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	4b6c      	ldr	r3, [pc, #432]	; (80051c8 <turn_L90+0x1f0>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <turn_L90+0x1f4>)
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005026:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <turn_L90+0x1f8>)
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	4b69      	ldr	r3, [pc, #420]	; (80051d4 <turn_L90+0x1fc>)
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <turn_L90+0x200>)
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

	float local_degree = 0.0;
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

	local_degree = degree;
 8005044:	4b65      	ldr	r3, [pc, #404]	; (80051dc <turn_L90+0x204>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]

	run_mode = TURN_MODE;	turn_dir = LEFT;
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <turn_L90+0x208>)
 800504c:	2202      	movs	r2, #2
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <turn_L90+0x20c>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

	omega_accel = omega_acc; max_omega = max_omg;
 8005056:	4a5e      	ldr	r2, [pc, #376]	; (80051d0 <turn_L90+0x1f8>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4a5d      	ldr	r2, [pc, #372]	; (80051d4 <turn_L90+0x1fc>)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6013      	str	r3, [r2, #0]

	//accel and const turn
	while(((90.0) - (degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI){
 8005062:	4b5e      	ldr	r3, [pc, #376]	; (80051dc <turn_L90+0x204>)
 8005064:	ed93 7a00 	vldr	s14, [r3]
 8005068:	edd7 7a03 	vldr	s15, [r7, #12]
 800506c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005070:	ee17 0a90 	vmov	r0, s15
 8005074:	f7fb fa70 	bl	8000558 <__aeabi_f2d>
 8005078:	4603      	mov	r3, r0
 800507a:	460c      	mov	r4, r1
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f04f 0000 	mov.w	r0, #0
 8005084:	4958      	ldr	r1, [pc, #352]	; (80051e8 <turn_L90+0x210>)
 8005086:	f7fb f907 	bl	8000298 <__aeabi_dsub>
 800508a:	4603      	mov	r3, r0
 800508c:	460c      	mov	r4, r1
 800508e:	4625      	mov	r5, r4
 8005090:	461c      	mov	r4, r3
 8005092:	4b50      	ldr	r3, [pc, #320]	; (80051d4 <turn_L90+0x1fc>)
 8005094:	ed93 7a00 	vldr	s14, [r3]
 8005098:	4b4e      	ldr	r3, [pc, #312]	; (80051d4 <turn_L90+0x1fc>)
 800509a:	edd3 7a00 	vldr	s15, [r3]
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	ee17 0a90 	vmov	r0, s15
 80050a6:	f7fb fa57 	bl	8000558 <__aeabi_f2d>
 80050aa:	4680      	mov	r8, r0
 80050ac:	4689      	mov	r9, r1
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fb fa52 	bl	8000558 <__aeabi_f2d>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	f7fb f8f0 	bl	800029c <__adddf3>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4640      	mov	r0, r8
 80050c2:	4649      	mov	r1, r9
 80050c4:	f7fb fbca 	bl	800085c <__aeabi_ddiv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	4b45      	ldr	r3, [pc, #276]	; (80051ec <turn_L90+0x214>)
 80050d6:	f7fb fa97 	bl	8000608 <__aeabi_dmul>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	a32f      	add	r3, pc, #188	; (adr r3, 80051a0 <turn_L90+0x1c8>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f7fb fbb8 	bl	800085c <__aeabi_ddiv>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1b1      	bne.n	8005062 <turn_L90+0x8a>
		if(tar_omega >= max_omega){
			//I_omega = 0.0;I_tar_omega = 0.0;
		}
	}

	omega_accel = -omega_acc;
 80050fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005102:	eef1 7a67 	vneg.f32	s15, s15
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <turn_L90+0x1f8>)
 8005108:	edc3 7a00 	vstr	s15, [r3]

	while((degree - local_degree) < 90.0 - 0.0){
 800510c:	e014      	b.n	8005138 <turn_L90+0x160>
		if(tar_omega < 0.05*PI) {
 800510e:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <turn_L90+0x200>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb fa20 	bl	8000558 <__aeabi_f2d>
 8005118:	a323      	add	r3, pc, #140	; (adr r3, 80051a8 <turn_L90+0x1d0>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb fce5 	bl	8000aec <__aeabi_dcmplt>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d100      	bne.n	800512a <turn_L90+0x152>
 8005128:	e006      	b.n	8005138 <turn_L90+0x160>
			tar_omega = 0.05*PI;
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <turn_L90+0x200>)
 800512c:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <turn_L90+0x218>)
 800512e:	601a      	str	r2, [r3, #0]
			omega_accel = 0.0;
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <turn_L90+0x1f8>)
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
	while((degree - local_degree) < 90.0 - 0.0){
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <turn_L90+0x204>)
 800513a:	ed93 7a00 	vldr	s14, [r3]
 800513e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005146:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80051f4 <turn_L90+0x21c>
 800514a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	d4dc      	bmi.n	800510e <turn_L90+0x136>
		}
	}

	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005154:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <turn_L90+0x1f8>)
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <turn_L90+0x1fc>)
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <turn_L90+0x200>)
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
	sen_r.cnt = 0;sen_l.cnt = 0;
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <turn_L90+0x220>)
 800516e:	2200      	movs	r2, #0
 8005170:	819a      	strh	r2, [r3, #12]
 8005172:	4b22      	ldr	r3, [pc, #136]	; (80051fc <turn_L90+0x224>)
 8005174:	2200      	movs	r2, #0
 8005176:	819a      	strh	r2, [r3, #12]
	HAL_Delay(200);
 8005178:	20c8      	movs	r0, #200	; 0xc8
 800517a:	f008 fcc7 	bl	800db0c <HAL_Delay>

	accel = 0.0;	len_mouse = 0.0;
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <turn_L90+0x1ec>)
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <turn_L90+0x228>)
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

	run_mode = NON_CON_MODE;
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <turn_L90+0x208>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]

}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800519e:	bf00      	nop
 80051a0:	fc8b007a 	.word	0xfc8b007a
 80051a4:	400921fa 	.word	0x400921fa
 80051a8:	306f3395 	.word	0x306f3395
 80051ac:	3fc41b2f 	.word	0x3fc41b2f
 80051b0:	2000d224 	.word	0x2000d224
 80051b4:	2000821c 	.word	0x2000821c
 80051b8:	2000d210 	.word	0x2000d210
 80051bc:	2000d1d8 	.word	0x2000d1d8
 80051c0:	200004ec 	.word	0x200004ec
 80051c4:	2000a16c 	.word	0x2000a16c
 80051c8:	2000d05c 	.word	0x2000d05c
 80051cc:	2000d198 	.word	0x2000d198
 80051d0:	200002dc 	.word	0x200002dc
 80051d4:	20008208 	.word	0x20008208
 80051d8:	2000d43c 	.word	0x2000d43c
 80051dc:	2000f4a8 	.word	0x2000f4a8
 80051e0:	2000a170 	.word	0x2000a170
 80051e4:	20008218 	.word	0x20008218
 80051e8:	40568000 	.word	0x40568000
 80051ec:	40668000 	.word	0x40668000
 80051f0:	3e20d97a 	.word	0x3e20d97a
 80051f4:	42b40000 	.word	0x42b40000
 80051f8:	2000f480 	.word	0x2000f480
 80051fc:	2000d064 	.word	0x2000d064
 8005200:	200123b8 	.word	0x200123b8
 8005204:	00000000 	.word	0x00000000

08005208 <turn_L180>:

void turn_L180(float omega_acc,float max_omg){
 8005208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	ed87 0a01 	vstr	s0, [r7, #4]
 8005214:	edc7 0a00 	vstr	s1, [r7]

	error_cnt = 0;
 8005218:	4b71      	ldr	r3, [pc, #452]	; (80053e0 <turn_L180+0x1d8>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 800521e:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <turn_L180+0x1dc>)
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <turn_L180+0x1e0>)
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 800522e:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <turn_L180+0x1e4>)
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	4b6e      	ldr	r3, [pc, #440]	; (80053f0 <turn_L180+0x1e8>)
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

	accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 800523e:	4b6d      	ldr	r3, [pc, #436]	; (80053f4 <turn_L180+0x1ec>)
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4b6c      	ldr	r3, [pc, #432]	; (80053f8 <turn_L180+0x1f0>)
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	4b6b      	ldr	r3, [pc, #428]	; (80053fc <turn_L180+0x1f4>)
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005256:	4b6a      	ldr	r3, [pc, #424]	; (8005400 <turn_L180+0x1f8>)
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	4b69      	ldr	r3, [pc, #420]	; (8005404 <turn_L180+0x1fc>)
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	4b68      	ldr	r3, [pc, #416]	; (8005408 <turn_L180+0x200>)
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	601a      	str	r2, [r3, #0]

	float local_degree = 0.0;
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

	local_degree = degree;
 8005274:	4b65      	ldr	r3, [pc, #404]	; (800540c <turn_L180+0x204>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]

	run_mode = TURN_MODE;	turn_dir = LEFT;
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <turn_L180+0x208>)
 800527c:	2202      	movs	r2, #2
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	4b64      	ldr	r3, [pc, #400]	; (8005414 <turn_L180+0x20c>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

	omega_accel = omega_acc; max_omega = max_omg;
 8005286:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <turn_L180+0x1f8>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4a5d      	ldr	r2, [pc, #372]	; (8005404 <turn_L180+0x1fc>)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6013      	str	r3, [r2, #0]

	//accel and const turn
	while(((180.0) - (degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI){
 8005292:	4b5e      	ldr	r3, [pc, #376]	; (800540c <turn_L180+0x204>)
 8005294:	ed93 7a00 	vldr	s14, [r3]
 8005298:	edd7 7a03 	vldr	s15, [r7, #12]
 800529c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052a0:	ee17 0a90 	vmov	r0, s15
 80052a4:	f7fb f958 	bl	8000558 <__aeabi_f2d>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	461a      	mov	r2, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	f04f 0000 	mov.w	r0, #0
 80052b4:	4958      	ldr	r1, [pc, #352]	; (8005418 <turn_L180+0x210>)
 80052b6:	f7fa ffef 	bl	8000298 <__aeabi_dsub>
 80052ba:	4603      	mov	r3, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	4625      	mov	r5, r4
 80052c0:	461c      	mov	r4, r3
 80052c2:	4b50      	ldr	r3, [pc, #320]	; (8005404 <turn_L180+0x1fc>)
 80052c4:	ed93 7a00 	vldr	s14, [r3]
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <turn_L180+0x1fc>)
 80052ca:	edd3 7a00 	vldr	s15, [r3]
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	ee17 0a90 	vmov	r0, s15
 80052d6:	f7fb f93f 	bl	8000558 <__aeabi_f2d>
 80052da:	4680      	mov	r8, r0
 80052dc:	4689      	mov	r9, r1
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb f93a 	bl	8000558 <__aeabi_f2d>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	f7fa ffd8 	bl	800029c <__adddf3>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4640      	mov	r0, r8
 80052f2:	4649      	mov	r1, r9
 80052f4:	f7fb fab2 	bl	800085c <__aeabi_ddiv>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	4b44      	ldr	r3, [pc, #272]	; (8005418 <turn_L180+0x210>)
 8005306:	f7fb f97f 	bl	8000608 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	a32f      	add	r3, pc, #188	; (adr r3, 80053d0 <turn_L180+0x1c8>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fb faa0 	bl	800085c <__aeabi_ddiv>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4620      	mov	r0, r4
 8005322:	4629      	mov	r1, r5
 8005324:	f7fb fc00 	bl	8000b28 <__aeabi_dcmpgt>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1b1      	bne.n	8005292 <turn_L180+0x8a>
		if(tar_omega >= max_omega){
			//I_omega = 0.0;I_tar_omega = 0.0;
		}
	}

	omega_accel = -omega_acc;
 800532e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005332:	eef1 7a67 	vneg.f32	s15, s15
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <turn_L180+0x1f8>)
 8005338:	edc3 7a00 	vstr	s15, [r3]

	while((degree - local_degree) < 180.0 - 0.0){
 800533c:	e014      	b.n	8005368 <turn_L180+0x160>
		if(tar_omega < 0.05*PI) {
 800533e:	4b32      	ldr	r3, [pc, #200]	; (8005408 <turn_L180+0x200>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fb f908 	bl	8000558 <__aeabi_f2d>
 8005348:	a323      	add	r3, pc, #140	; (adr r3, 80053d8 <turn_L180+0x1d0>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb fbcd 	bl	8000aec <__aeabi_dcmplt>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d100      	bne.n	800535a <turn_L180+0x152>
 8005358:	e006      	b.n	8005368 <turn_L180+0x160>
			tar_omega = 0.05*PI;
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <turn_L180+0x200>)
 800535c:	4a2f      	ldr	r2, [pc, #188]	; (800541c <turn_L180+0x214>)
 800535e:	601a      	str	r2, [r3, #0]
			omega_accel = 0.0;
 8005360:	4b27      	ldr	r3, [pc, #156]	; (8005400 <turn_L180+0x1f8>)
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
	while((degree - local_degree) < 180.0 - 0.0){
 8005368:	4b28      	ldr	r3, [pc, #160]	; (800540c <turn_L180+0x204>)
 800536a:	ed93 7a00 	vldr	s14, [r3]
 800536e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005376:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005420 <turn_L180+0x218>
 800537a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	d4dc      	bmi.n	800533e <turn_L180+0x136>
		}
	}

	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <turn_L180+0x1f8>)
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <turn_L180+0x1fc>)
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <turn_L180+0x200>)
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
	sen_r.cnt = 0;sen_l.cnt = 0;
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <turn_L180+0x21c>)
 800539e:	2200      	movs	r2, #0
 80053a0:	819a      	strh	r2, [r3, #12]
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <turn_L180+0x220>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	819a      	strh	r2, [r3, #12]
	HAL_Delay(200);
 80053a8:	20c8      	movs	r0, #200	; 0xc8
 80053aa:	f008 fbaf 	bl	800db0c <HAL_Delay>

	accel = 0.0;	len_mouse = 0.0;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <turn_L180+0x1ec>)
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <turn_L180+0x224>)
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

	run_mode = NON_CON_MODE;
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <turn_L180+0x208>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053ce:	bf00      	nop
 80053d0:	fc8b007a 	.word	0xfc8b007a
 80053d4:	400921fa 	.word	0x400921fa
 80053d8:	306f3395 	.word	0x306f3395
 80053dc:	3fc41b2f 	.word	0x3fc41b2f
 80053e0:	2000d224 	.word	0x2000d224
 80053e4:	2000821c 	.word	0x2000821c
 80053e8:	2000d210 	.word	0x2000d210
 80053ec:	2000d1d8 	.word	0x2000d1d8
 80053f0:	200004ec 	.word	0x200004ec
 80053f4:	2000a16c 	.word	0x2000a16c
 80053f8:	2000d05c 	.word	0x2000d05c
 80053fc:	2000d198 	.word	0x2000d198
 8005400:	200002dc 	.word	0x200002dc
 8005404:	20008208 	.word	0x20008208
 8005408:	2000d43c 	.word	0x2000d43c
 800540c:	2000f4a8 	.word	0x2000f4a8
 8005410:	2000a170 	.word	0x2000a170
 8005414:	20008218 	.word	0x20008218
 8005418:	40668000 	.word	0x40668000
 800541c:	3e20d97a 	.word	0x3e20d97a
 8005420:	43340000 	.word	0x43340000
 8005424:	2000f480 	.word	0x2000f480
 8005428:	2000d064 	.word	0x2000d064
 800542c:	200123b8 	.word	0x200123b8

08005430 <sla_L90>:

void sla_L90(){
 8005430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8005438:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <sla_L90+0x238>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 800543e:	4b8b      	ldr	r3, [pc, #556]	; (800566c <sla_L90+0x23c>)
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	4b8a      	ldr	r3, [pc, #552]	; (8005670 <sla_L90+0x240>)
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 800544e:	4b89      	ldr	r3, [pc, #548]	; (8005674 <sla_L90+0x244>)
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	4b88      	ldr	r3, [pc, #544]	; (8005678 <sla_L90+0x248>)
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

	accel = 0.0; max_speed = 0.3; tar_speed = 0.3;
 800545e:	4b87      	ldr	r3, [pc, #540]	; (800567c <sla_L90+0x24c>)
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	4b86      	ldr	r3, [pc, #536]	; (8005680 <sla_L90+0x250>)
 8005468:	4a86      	ldr	r2, [pc, #536]	; (8005684 <sla_L90+0x254>)
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	4b86      	ldr	r3, [pc, #536]	; (8005688 <sla_L90+0x258>)
 800546e:	4a85      	ldr	r2, [pc, #532]	; (8005684 <sla_L90+0x254>)
 8005470:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005472:	4b86      	ldr	r3, [pc, #536]	; (800568c <sla_L90+0x25c>)
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	4b85      	ldr	r3, [pc, #532]	; (8005690 <sla_L90+0x260>)
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	4b84      	ldr	r3, [pc, #528]	; (8005694 <sla_L90+0x264>)
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
	con_wall.enable = false;
 800548a:	4b83      	ldr	r3, [pc, #524]	; (8005698 <sla_L90+0x268>)
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
	float local_length = 0.0;
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]

	local_length = len_mouse;run_mode = STRAIGHT_MODE;
 8005496:	4b81      	ldr	r3, [pc, #516]	; (800569c <sla_L90+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	4b80      	ldr	r3, [pc, #512]	; (80056a0 <sla_L90+0x270>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 80054a2:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <sla_L90+0x268>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	771a      	strb	r2, [r3, #28]
	sen_r.cnt = 0;sen_l.cnt = 0;
 80054a8:	4b7e      	ldr	r3, [pc, #504]	; (80056a4 <sla_L90+0x274>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	819a      	strh	r2, [r3, #12]
 80054ae:	4b7e      	ldr	r3, [pc, #504]	; (80056a8 <sla_L90+0x278>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	819a      	strh	r2, [r3, #12]

	accel = -SLA_SEARCH_ACCEL;
 80054b4:	4b71      	ldr	r3, [pc, #452]	; (800567c <sla_L90+0x24c>)
 80054b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054ba:	601a      	str	r2, [r3, #0]
	if(sen_fr.is_wall == true && sen_fl.is_wall == true){
 80054bc:	4b7b      	ldr	r3, [pc, #492]	; (80056ac <sla_L90+0x27c>)
 80054be:	7b9b      	ldrb	r3, [r3, #14]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d12a      	bne.n	800551a <sla_L90+0xea>
 80054c4:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <sla_L90+0x280>)
 80054c6:	7b9b      	ldrb	r3, [r3, #14]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d126      	bne.n	800551a <sla_L90+0xea>
		while(sen_fr.value < STOP_SLA_FR || sen_fl.value < STOP_SLA_FL);
 80054cc:	bf00      	nop
 80054ce:	4b77      	ldr	r3, [pc, #476]	; (80056ac <sla_L90+0x27c>)
 80054d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054d8:	dbf9      	blt.n	80054ce <sla_L90+0x9e>
 80054da:	4b75      	ldr	r3, [pc, #468]	; (80056b0 <sla_L90+0x280>)
 80054dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e0:	f240 427d 	movw	r2, #1149	; 0x47d
 80054e4:	4293      	cmp	r3, r2
 80054e6:	ddf2      	ble.n	80054ce <sla_L90+0x9e>
	if(sen_fr.is_wall == true && sen_fl.is_wall == true){
 80054e8:	e02a      	b.n	8005540 <sla_L90+0x110>
	}else{
		while((len_mouse - local_length)< 13.7){
			if(tar_speed <= SLA_SEARCH_SPEED){
 80054ea:	4b67      	ldr	r3, [pc, #412]	; (8005688 <sla_L90+0x258>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fb f832 	bl	8000558 <__aeabi_f2d>
 80054f4:	a354      	add	r3, pc, #336	; (adr r3, 8005648 <sla_L90+0x218>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fb fb01 	bl	8000b00 <__aeabi_dcmple>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d100      	bne.n	8005506 <sla_L90+0xd6>
 8005504:	e009      	b.n	800551a <sla_L90+0xea>
				 max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 8005506:	4b5e      	ldr	r3, [pc, #376]	; (8005680 <sla_L90+0x250>)
 8005508:	4a5e      	ldr	r2, [pc, #376]	; (8005684 <sla_L90+0x254>)
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b5e      	ldr	r3, [pc, #376]	; (8005688 <sla_L90+0x258>)
 800550e:	4a5d      	ldr	r2, [pc, #372]	; (8005684 <sla_L90+0x254>)
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	4b5a      	ldr	r3, [pc, #360]	; (800567c <sla_L90+0x24c>)
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
		while((len_mouse - local_length)< 13.7){
 800551a:	4b60      	ldr	r3, [pc, #384]	; (800569c <sla_L90+0x26c>)
 800551c:	ed93 7a00 	vldr	s14, [r3]
 8005520:	edd7 7a03 	vldr	s15, [r7, #12]
 8005524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005528:	ee17 0a90 	vmov	r0, s15
 800552c:	f7fb f814 	bl	8000558 <__aeabi_f2d>
 8005530:	a347      	add	r3, pc, #284	; (adr r3, 8005650 <sla_L90+0x220>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb fad9 	bl	8000aec <__aeabi_dcmplt>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1d4      	bne.n	80054ea <sla_L90+0xba>
			}
		}
	}

	max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 8005540:	4b4f      	ldr	r3, [pc, #316]	; (8005680 <sla_L90+0x250>)
 8005542:	4a50      	ldr	r2, [pc, #320]	; (8005684 <sla_L90+0x254>)
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4b50      	ldr	r3, [pc, #320]	; (8005688 <sla_L90+0x258>)
 8005548:	4a4e      	ldr	r2, [pc, #312]	; (8005684 <sla_L90+0x254>)
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <sla_L90+0x24c>)
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
	float local_degree = 0.0;	local_degree = tar_degree;//local_degree = degree;
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	4b56      	ldr	r3, [pc, #344]	; (80056b4 <sla_L90+0x284>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8005560:	4b4f      	ldr	r3, [pc, #316]	; (80056a0 <sla_L90+0x270>)
 8005562:	2202      	movs	r2, #2
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	4b54      	ldr	r3, [pc, #336]	; (80056b8 <sla_L90+0x288>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 800556c:	4b47      	ldr	r3, [pc, #284]	; (800568c <sla_L90+0x25c>)
 800556e:	4a53      	ldr	r2, [pc, #332]	; (80056bc <sla_L90+0x28c>)
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <sla_L90+0x260>)
 8005574:	4a52      	ldr	r2, [pc, #328]	; (80056c0 <sla_L90+0x290>)
 8005576:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8005578:	4b44      	ldr	r3, [pc, #272]	; (800568c <sla_L90+0x25c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	607b      	str	r3, [r7, #4]

	//while(((90.0-0.0) - (degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
	while(((90.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 800557e:	bf00      	nop
 8005580:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <sla_L90+0x284>)
 8005582:	ed93 7a00 	vldr	s14, [r3]
 8005586:	edd7 7a02 	vldr	s15, [r7, #8]
 800558a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558e:	ee17 0a90 	vmov	r0, s15
 8005592:	f7fa ffe1 	bl	8000558 <__aeabi_f2d>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	461a      	mov	r2, r3
 800559c:	4623      	mov	r3, r4
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	4948      	ldr	r1, [pc, #288]	; (80056c4 <sla_L90+0x294>)
 80055a4:	f7fa fe78 	bl	8000298 <__aeabi_dsub>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4625      	mov	r5, r4
 80055ae:	461c      	mov	r4, r3
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <sla_L90+0x260>)
 80055b2:	ed93 7a00 	vldr	s14, [r3]
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <sla_L90+0x260>)
 80055b8:	edd3 7a00 	vldr	s15, [r3]
 80055bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c0:	ee17 0a90 	vmov	r0, s15
 80055c4:	f7fa ffc8 	bl	8000558 <__aeabi_f2d>
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fa ffc3 	bl	8000558 <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	f7fa fe61 	bl	800029c <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4640      	mov	r0, r8
 80055e0:	4649      	mov	r1, r9
 80055e2:	f7fb f93b 	bl	800085c <__aeabi_ddiv>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <sla_L90+0x298>)
 80055f4:	f7fb f808 	bl	8000608 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	a315      	add	r3, pc, #84	; (adr r3, 8005658 <sla_L90+0x228>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fb f929 	bl	800085c <__aeabi_ddiv>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4620      	mov	r0, r4
 8005610:	4629      	mov	r1, r5
 8005612:	f7fb fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1b1      	bne.n	8005580 <sla_L90+0x150>

	omega_accel = -omega_acc;
 800561c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005620:	eef1 7a67 	vneg.f32	s15, s15
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <sla_L90+0x25c>)
 8005626:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 90.0 + SLA_L90_ERR ){
 800562a:	e056      	b.n	80056da <sla_L90+0x2aa>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <sla_L90+0x264>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fa ff91 	bl	8000558 <__aeabi_f2d>
 8005636:	a30a      	add	r3, pc, #40	; (adr r3, 8005660 <sla_L90+0x230>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fb fa56 	bl	8000aec <__aeabi_dcmplt>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d142      	bne.n	80056cc <sla_L90+0x29c>
 8005646:	e048      	b.n	80056da <sla_L90+0x2aa>
 8005648:	33333333 	.word	0x33333333
 800564c:	3fd33333 	.word	0x3fd33333
 8005650:	66666666 	.word	0x66666666
 8005654:	402b6666 	.word	0x402b6666
 8005658:	fc8b007a 	.word	0xfc8b007a
 800565c:	400921fa 	.word	0x400921fa
 8005660:	306f3395 	.word	0x306f3395
 8005664:	3fc41b2f 	.word	0x3fc41b2f
 8005668:	2000d224 	.word	0x2000d224
 800566c:	2000821c 	.word	0x2000821c
 8005670:	2000d210 	.word	0x2000d210
 8005674:	2000d1d8 	.word	0x2000d1d8
 8005678:	200004ec 	.word	0x200004ec
 800567c:	2000a16c 	.word	0x2000a16c
 8005680:	2000d05c 	.word	0x2000d05c
 8005684:	3e99999a 	.word	0x3e99999a
 8005688:	2000d198 	.word	0x2000d198
 800568c:	200002dc 	.word	0x200002dc
 8005690:	20008208 	.word	0x20008208
 8005694:	2000d43c 	.word	0x2000d43c
 8005698:	20012398 	.word	0x20012398
 800569c:	200123b8 	.word	0x200123b8
 80056a0:	2000a170 	.word	0x2000a170
 80056a4:	2000f480 	.word	0x2000f480
 80056a8:	2000d064 	.word	0x2000d064
 80056ac:	2000d1b8 	.word	0x2000d1b8
 80056b0:	2000d1c8 	.word	0x2000d1c8
 80056b4:	2001044c 	.word	0x2001044c
 80056b8:	20008218 	.word	0x20008218
 80056bc:	437b53ce 	.word	0x437b53ce
 80056c0:	41490fd8 	.word	0x41490fd8
 80056c4:	40568000 	.word	0x40568000
 80056c8:	40668000 	.word	0x40668000
 80056cc:	4b3a      	ldr	r3, [pc, #232]	; (80057b8 <sla_L90+0x388>)
 80056ce:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <sla_L90+0x38c>)
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <sla_L90+0x390>)
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 90.0 + SLA_L90_ERR ){
 80056da:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <sla_L90+0x394>)
 80056dc:	ed93 7a00 	vldr	s14, [r3]
 80056e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80056e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80057c8 <sla_L90+0x398>
 80056ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	d49a      	bmi.n	800562c <sla_L90+0x1fc>
	}
	tar_omega = 0.0;	omega_accel = 0.0;
 80056f6:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <sla_L90+0x388>)
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <sla_L90+0x390>)
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <sla_L90+0x39c>)
 8005708:	2201      	movs	r2, #1
 800570a:	771a      	strb	r2, [r3, #28]
	sen_r.cnt = 0;sen_l.cnt = 0;
 800570c:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <sla_L90+0x3a0>)
 800570e:	2200      	movs	r2, #0
 8005710:	819a      	strh	r2, [r3, #12]
 8005712:	4b30      	ldr	r3, [pc, #192]	; (80057d4 <sla_L90+0x3a4>)
 8005714:	2200      	movs	r2, #0
 8005716:	819a      	strh	r2, [r3, #12]
	local_length = len_mouse;run_mode = STRAIGHT_MODE;
 8005718:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <sla_L90+0x3a8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <sla_L90+0x3ac>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED;
 8005724:	4b2e      	ldr	r3, [pc, #184]	; (80057e0 <sla_L90+0x3b0>)
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <sla_L90+0x3b4>)
 800572e:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <sla_L90+0x3b8>)
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <sla_L90+0x3bc>)
 8005734:	4a2c      	ldr	r2, [pc, #176]	; (80057e8 <sla_L90+0x3b8>)
 8005736:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 				tar_omega = 0.0;
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <sla_L90+0x390>)
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <sla_L90+0x3c0>)
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <sla_L90+0x388>)
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 13.7);
 8005750:	bf00      	nop
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <sla_L90+0x3a8>)
 8005754:	ed93 7a00 	vldr	s14, [r3]
 8005758:	edd7 7a03 	vldr	s15, [r7, #12]
 800575c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005760:	ee17 0a90 	vmov	r0, s15
 8005764:	f7fa fef8 	bl	8000558 <__aeabi_f2d>
 8005768:	a311      	add	r3, pc, #68	; (adr r3, 80057b0 <sla_L90+0x380>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fb f9bd 	bl	8000aec <__aeabi_dcmplt>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ec      	bne.n	8005752 <sla_L90+0x322>
	accel = 0.0; max_speed = SLA_SEARCH_SPEED;tar_speed = SLA_SEARCH_SPEED;
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <sla_L90+0x3b0>)
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <sla_L90+0x3b4>)
 8005782:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <sla_L90+0x3b8>)
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <sla_L90+0x3bc>)
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <sla_L90+0x3b8>)
 800578a:	601a      	str	r2, [r3, #0]
	len_mouse = 0.0;
 800578c:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <sla_L90+0x3a8>)
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
	con_wall.enable = false;
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <sla_L90+0x39c>)
 8005796:	2200      	movs	r2, #0
 8005798:	771a      	strb	r2, [r3, #28]
	run_mode = STRAIGHT_MODE;
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <sla_L90+0x3ac>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057aa:	bf00      	nop
 80057ac:	f3af 8000 	nop.w
 80057b0:	66666666 	.word	0x66666666
 80057b4:	402b6666 	.word	0x402b6666
 80057b8:	2000d43c 	.word	0x2000d43c
 80057bc:	3e20d97a 	.word	0x3e20d97a
 80057c0:	200002dc 	.word	0x200002dc
 80057c4:	2001044c 	.word	0x2001044c
 80057c8:	42b40000 	.word	0x42b40000
 80057cc:	20012398 	.word	0x20012398
 80057d0:	2000f480 	.word	0x2000f480
 80057d4:	2000d064 	.word	0x2000d064
 80057d8:	200123b8 	.word	0x200123b8
 80057dc:	2000a170 	.word	0x2000a170
 80057e0:	2000a16c 	.word	0x2000a16c
 80057e4:	2000d05c 	.word	0x2000d05c
 80057e8:	3e99999a 	.word	0x3e99999a
 80057ec:	2000d198 	.word	0x2000d198
 80057f0:	20008208 	.word	0x20008208
 80057f4:	00000000 	.word	0x00000000

080057f8 <sla_R90>:

void sla_R90(){
 80057f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8005800:	4b99      	ldr	r3, [pc, #612]	; (8005a68 <sla_R90+0x270>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8005806:	4b99      	ldr	r3, [pc, #612]	; (8005a6c <sla_R90+0x274>)
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4b98      	ldr	r3, [pc, #608]	; (8005a70 <sla_R90+0x278>)
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8005816:	4b97      	ldr	r3, [pc, #604]	; (8005a74 <sla_R90+0x27c>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4b96      	ldr	r3, [pc, #600]	; (8005a78 <sla_R90+0x280>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

	con_wall.enable = false;
 8005826:	4b95      	ldr	r3, [pc, #596]	; (8005a7c <sla_R90+0x284>)
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]

	accel = 0.0; max_speed = 0.3; tar_speed = 0.3;
 800582c:	4b94      	ldr	r3, [pc, #592]	; (8005a80 <sla_R90+0x288>)
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	4b93      	ldr	r3, [pc, #588]	; (8005a84 <sla_R90+0x28c>)
 8005836:	4a94      	ldr	r2, [pc, #592]	; (8005a88 <sla_R90+0x290>)
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <sla_R90+0x294>)
 800583c:	4a92      	ldr	r2, [pc, #584]	; (8005a88 <sla_R90+0x290>)
 800583e:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; max_omega = 0.0; tar_omega = 0.0;
 8005840:	4b93      	ldr	r3, [pc, #588]	; (8005a90 <sla_R90+0x298>)
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	4b92      	ldr	r3, [pc, #584]	; (8005a94 <sla_R90+0x29c>)
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <sla_R90+0x2a0>)
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
	float local_length = 0.0;
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]

	local_length = len_mouse;run_mode = STRAIGHT_MODE;
 800585e:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <sla_R90+0x2a4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	4b8e      	ldr	r3, [pc, #568]	; (8005aa0 <sla_R90+0x2a8>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;
 800586a:	4b84      	ldr	r3, [pc, #528]	; (8005a7c <sla_R90+0x284>)
 800586c:	2201      	movs	r2, #1
 800586e:	771a      	strb	r2, [r3, #28]
	sen_r.cnt = 0;sen_l.cnt = 0;
 8005870:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <sla_R90+0x2ac>)
 8005872:	2200      	movs	r2, #0
 8005874:	819a      	strh	r2, [r3, #12]
 8005876:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <sla_R90+0x2b0>)
 8005878:	2200      	movs	r2, #0
 800587a:	819a      	strh	r2, [r3, #12]


	if(sen_fr.is_wall == true || sen_fl.is_wall == true){
 800587c:	4b8b      	ldr	r3, [pc, #556]	; (8005aac <sla_R90+0x2b4>)
 800587e:	7b9b      	ldrb	r3, [r3, #14]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d01c      	beq.n	80058be <sla_R90+0xc6>
 8005884:	4b8a      	ldr	r3, [pc, #552]	; (8005ab0 <sla_R90+0x2b8>)
 8005886:	7b9b      	ldrb	r3, [r3, #14]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d148      	bne.n	800591e <sla_R90+0x126>
		while(sen_fr.value < STOP_SLA_FR || sen_fl.value < STOP_SLA_FL){
 800588c:	e017      	b.n	80058be <sla_R90+0xc6>
			if(tar_speed <= SLA_SEARCH_SPEED){
 800588e:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <sla_R90+0x294>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa fe60 	bl	8000558 <__aeabi_f2d>
 8005898:	a36b      	add	r3, pc, #428	; (adr r3, 8005a48 <sla_R90+0x250>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fb f92f 	bl	8000b00 <__aeabi_dcmple>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d100      	bne.n	80058aa <sla_R90+0xb2>
 80058a8:	e009      	b.n	80058be <sla_R90+0xc6>
				 max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 80058aa:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <sla_R90+0x28c>)
 80058ac:	4a76      	ldr	r2, [pc, #472]	; (8005a88 <sla_R90+0x290>)
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <sla_R90+0x294>)
 80058b2:	4a75      	ldr	r2, [pc, #468]	; (8005a88 <sla_R90+0x290>)
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	4b72      	ldr	r3, [pc, #456]	; (8005a80 <sla_R90+0x288>)
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
		while(sen_fr.value < STOP_SLA_FR || sen_fl.value < STOP_SLA_FL){
 80058be:	4b7b      	ldr	r3, [pc, #492]	; (8005aac <sla_R90+0x2b4>)
 80058c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c8:	dbe1      	blt.n	800588e <sla_R90+0x96>
 80058ca:	4b79      	ldr	r3, [pc, #484]	; (8005ab0 <sla_R90+0x2b8>)
 80058cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058d0:	f240 427d 	movw	r2, #1149	; 0x47d
 80058d4:	4293      	cmp	r3, r2
 80058d6:	ddda      	ble.n	800588e <sla_R90+0x96>
			}
		}
		max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 80058d8:	4b6a      	ldr	r3, [pc, #424]	; (8005a84 <sla_R90+0x28c>)
 80058da:	4a6b      	ldr	r2, [pc, #428]	; (8005a88 <sla_R90+0x290>)
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	4b6b      	ldr	r3, [pc, #428]	; (8005a8c <sla_R90+0x294>)
 80058e0:	4a69      	ldr	r2, [pc, #420]	; (8005a88 <sla_R90+0x290>)
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	4b66      	ldr	r3, [pc, #408]	; (8005a80 <sla_R90+0x288>)
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e02a      	b.n	8005944 <sla_R90+0x14c>
	}else{
		while((len_mouse - local_length)< 13.7){
			if(tar_speed <= SLA_SEARCH_SPEED){
 80058ee:	4b67      	ldr	r3, [pc, #412]	; (8005a8c <sla_R90+0x294>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fa fe30 	bl	8000558 <__aeabi_f2d>
 80058f8:	a353      	add	r3, pc, #332	; (adr r3, 8005a48 <sla_R90+0x250>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fb f8ff 	bl	8000b00 <__aeabi_dcmple>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d100      	bne.n	800590a <sla_R90+0x112>
 8005908:	e009      	b.n	800591e <sla_R90+0x126>
				 max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 800590a:	4b5e      	ldr	r3, [pc, #376]	; (8005a84 <sla_R90+0x28c>)
 800590c:	4a5e      	ldr	r2, [pc, #376]	; (8005a88 <sla_R90+0x290>)
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	4b5e      	ldr	r3, [pc, #376]	; (8005a8c <sla_R90+0x294>)
 8005912:	4a5d      	ldr	r2, [pc, #372]	; (8005a88 <sla_R90+0x290>)
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	4b5a      	ldr	r3, [pc, #360]	; (8005a80 <sla_R90+0x288>)
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
		while((len_mouse - local_length)< 13.7){
 800591e:	4b5f      	ldr	r3, [pc, #380]	; (8005a9c <sla_R90+0x2a4>)
 8005920:	ed93 7a00 	vldr	s14, [r3]
 8005924:	edd7 7a03 	vldr	s15, [r7, #12]
 8005928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800592c:	ee17 0a90 	vmov	r0, s15
 8005930:	f7fa fe12 	bl	8000558 <__aeabi_f2d>
 8005934:	a346      	add	r3, pc, #280	; (adr r3, 8005a50 <sla_R90+0x258>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fb f8d7 	bl	8000aec <__aeabi_dcmplt>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1d4      	bne.n	80058ee <sla_R90+0xf6>
			}
		}
	}

	max_speed = SLA_SEARCH_SPEED;	tar_speed = SLA_SEARCH_SPEED; 	accel = 0.0;
 8005944:	4b4f      	ldr	r3, [pc, #316]	; (8005a84 <sla_R90+0x28c>)
 8005946:	4a50      	ldr	r2, [pc, #320]	; (8005a88 <sla_R90+0x290>)
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	4b50      	ldr	r3, [pc, #320]	; (8005a8c <sla_R90+0x294>)
 800594c:	4a4e      	ldr	r2, [pc, #312]	; (8005a88 <sla_R90+0x290>)
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	4b4b      	ldr	r3, [pc, #300]	; (8005a80 <sla_R90+0x288>)
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

	float local_degree = 0.0;	local_degree = tar_degree;//local_degree = degree;
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <sla_R90+0x2bc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60bb      	str	r3, [r7, #8]

	run_mode = TURN_MODE;	turn_dir = RIGHT;
 8005964:	4b4e      	ldr	r3, [pc, #312]	; (8005aa0 <sla_R90+0x2a8>)
 8005966:	2202      	movs	r2, #2
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	4b53      	ldr	r3, [pc, #332]	; (8005ab8 <sla_R90+0x2c0>)
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]

	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -SLA_SEARCH_TURN_SPEED;
 8005970:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <sla_R90+0x298>)
 8005972:	4a52      	ldr	r2, [pc, #328]	; (8005abc <sla_R90+0x2c4>)
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <sla_R90+0x29c>)
 8005978:	4a51      	ldr	r2, [pc, #324]	; (8005ac0 <sla_R90+0x2c8>)
 800597a:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 800597c:	4b44      	ldr	r3, [pc, #272]	; (8005a90 <sla_R90+0x298>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	607b      	str	r3, [r7, #4]

	//while(((-90.0+0.0) - (degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
	while(((-90.0+SLA_R90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8005982:	bf00      	nop
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <sla_R90+0x2bc>)
 8005986:	ed93 7a00 	vldr	s14, [r3]
 800598a:	edd7 7a02 	vldr	s15, [r7, #8]
 800598e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005992:	ee17 0a90 	vmov	r0, s15
 8005996:	f7fa fddf 	bl	8000558 <__aeabi_f2d>
 800599a:	4603      	mov	r3, r0
 800599c:	460c      	mov	r4, r1
 800599e:	461a      	mov	r2, r3
 80059a0:	4623      	mov	r3, r4
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	4947      	ldr	r1, [pc, #284]	; (8005ac4 <sla_R90+0x2cc>)
 80059a8:	f7fa fc76 	bl	8000298 <__aeabi_dsub>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	4625      	mov	r5, r4
 80059b2:	461c      	mov	r4, r3
 80059b4:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <sla_R90+0x29c>)
 80059b6:	ed93 7a00 	vldr	s14, [r3]
 80059ba:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <sla_R90+0x29c>)
 80059bc:	edd3 7a00 	vldr	s15, [r3]
 80059c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c4:	ee17 0a90 	vmov	r0, s15
 80059c8:	f7fa fdc6 	bl	8000558 <__aeabi_f2d>
 80059cc:	4680      	mov	r8, r0
 80059ce:	4689      	mov	r9, r1
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fa fdc1 	bl	8000558 <__aeabi_f2d>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	f7fa fc5f 	bl	800029c <__adddf3>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4640      	mov	r0, r8
 80059e4:	4649      	mov	r1, r9
 80059e6:	f7fa ff39 	bl	800085c <__aeabi_ddiv>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	4b34      	ldr	r3, [pc, #208]	; (8005ac8 <sla_R90+0x2d0>)
 80059f8:	f7fa fe06 	bl	8000608 <__aeabi_dmul>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	a314      	add	r3, pc, #80	; (adr r3, 8005a58 <sla_R90+0x260>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa ff27 	bl	800085c <__aeabi_ddiv>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fb f869 	bl	8000aec <__aeabi_dcmplt>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1b1      	bne.n	8005984 <sla_R90+0x18c>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <sla_R90+0x298>)
 8005a22:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <sla_R90+0x2d4>)
 8005a24:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -90.0 + SLA_R90_ERR){
 8005a26:	e05a      	b.n	8005ade <sla_R90+0x2e6>
		if(tar_omega > -0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <sla_R90+0x2a0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fa fd93 	bl	8000558 <__aeabi_f2d>
 8005a32:	a30b      	add	r3, pc, #44	; (adr r3, 8005a60 <sla_R90+0x268>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f7fb f876 	bl	8000b28 <__aeabi_dcmpgt>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d146      	bne.n	8005ad0 <sla_R90+0x2d8>
 8005a42:	e04c      	b.n	8005ade <sla_R90+0x2e6>
 8005a44:	f3af 8000 	nop.w
 8005a48:	33333333 	.word	0x33333333
 8005a4c:	3fd33333 	.word	0x3fd33333
 8005a50:	66666666 	.word	0x66666666
 8005a54:	402b6666 	.word	0x402b6666
 8005a58:	fc8b007a 	.word	0xfc8b007a
 8005a5c:	400921fa 	.word	0x400921fa
 8005a60:	306f3395 	.word	0x306f3395
 8005a64:	bfc41b2f 	.word	0xbfc41b2f
 8005a68:	2000d224 	.word	0x2000d224
 8005a6c:	2000821c 	.word	0x2000821c
 8005a70:	2000d210 	.word	0x2000d210
 8005a74:	2000d1d8 	.word	0x2000d1d8
 8005a78:	200004ec 	.word	0x200004ec
 8005a7c:	20012398 	.word	0x20012398
 8005a80:	2000a16c 	.word	0x2000a16c
 8005a84:	2000d05c 	.word	0x2000d05c
 8005a88:	3e99999a 	.word	0x3e99999a
 8005a8c:	2000d198 	.word	0x2000d198
 8005a90:	200002dc 	.word	0x200002dc
 8005a94:	20008208 	.word	0x20008208
 8005a98:	2000d43c 	.word	0x2000d43c
 8005a9c:	200123b8 	.word	0x200123b8
 8005aa0:	2000a170 	.word	0x2000a170
 8005aa4:	2000f480 	.word	0x2000f480
 8005aa8:	2000d064 	.word	0x2000d064
 8005aac:	2000d1b8 	.word	0x2000d1b8
 8005ab0:	2000d1c8 	.word	0x2000d1c8
 8005ab4:	2001044c 	.word	0x2001044c
 8005ab8:	20008218 	.word	0x20008218
 8005abc:	c37b53ce 	.word	0xc37b53ce
 8005ac0:	c1490fd8 	.word	0xc1490fd8
 8005ac4:	c0568000 	.word	0xc0568000
 8005ac8:	40668000 	.word	0x40668000
 8005acc:	437b53ce 	.word	0x437b53ce
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <sla_R90+0x398>)
 8005ad2:	4a30      	ldr	r2, [pc, #192]	; (8005b94 <sla_R90+0x39c>)
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <sla_R90+0x3a0>)
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -90.0 + SLA_R90_ERR){
 8005ade:	4b2f      	ldr	r3, [pc, #188]	; (8005b9c <sla_R90+0x3a4>)
 8005ae0:	ed93 7a00 	vldr	s14, [r3]
 8005ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aec:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005ba0 <sla_R90+0x3a8>
 8005af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af8:	dc96      	bgt.n	8005a28 <sla_R90+0x230>
	}

	omega_accel = 0.0;	tar_omega = 0.0;	max_omega = 0.0;
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <sla_R90+0x3a0>)
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <sla_R90+0x398>)
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <sla_R90+0x3ac>)
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]

	sen_r.cnt = 0;sen_l.cnt = 0;
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <sla_R90+0x3b0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	819a      	strh	r2, [r3, #12]
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <sla_R90+0x3b4>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	819a      	strh	r2, [r3, #12]
	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <sla_R90+0x3b8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <sla_R90+0x3bc>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
	accel = 0.0; max_speed = SLA_SEARCH_SPEED;tar_speed = SLA_SEARCH_SPEED;
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <sla_R90+0x3c0>)
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <sla_R90+0x3c4>)
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <sla_R90+0x3c8>)
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <sla_R90+0x3cc>)
 8005b3a:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <sla_R90+0x3c8>)
 8005b3c:	601a      	str	r2, [r3, #0]
	while((len_mouse - local_length)< 13.7);
 8005b3e:	bf00      	nop
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <sla_R90+0x3b8>)
 8005b42:	ed93 7a00 	vldr	s14, [r3]
 8005b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4e:	ee17 0a90 	vmov	r0, s15
 8005b52:	f7fa fd01 	bl	8000558 <__aeabi_f2d>
 8005b56:	a30c      	add	r3, pc, #48	; (adr r3, 8005b88 <sla_R90+0x390>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa ffc6 	bl	8000aec <__aeabi_dcmplt>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ec      	bne.n	8005b40 <sla_R90+0x348>

	len_mouse = 0.0;
 8005b66:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <sla_R90+0x3b8>)
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

	con_wall.enable = false;
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <sla_R90+0x3d0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]

	run_mode = STRAIGHT_MODE;
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <sla_R90+0x3bc>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]


}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b84:	f3af 8000 	nop.w
 8005b88:	66666666 	.word	0x66666666
 8005b8c:	402b6666 	.word	0x402b6666
 8005b90:	2000d43c 	.word	0x2000d43c
 8005b94:	be20d97a 	.word	0xbe20d97a
 8005b98:	200002dc 	.word	0x200002dc
 8005b9c:	2001044c 	.word	0x2001044c
 8005ba0:	c2b40000 	.word	0xc2b40000
 8005ba4:	20008208 	.word	0x20008208
 8005ba8:	2000f480 	.word	0x2000f480
 8005bac:	2000d064 	.word	0x2000d064
 8005bb0:	200123b8 	.word	0x200123b8
 8005bb4:	2000a170 	.word	0x2000a170
 8005bb8:	2000a16c 	.word	0x2000a16c
 8005bbc:	2000d05c 	.word	0x2000d05c
 8005bc0:	3e99999a 	.word	0x3e99999a
 8005bc4:	2000d198 	.word	0x2000d198
 8005bc8:	20012398 	.word	0x20012398
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <long_turn_R90>:

void long_turn_R90(){
 8005bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8005bd8:	4bb1      	ldr	r3, [pc, #708]	; (8005ea0 <long_turn_R90+0x2d0>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8005bde:	4bb1      	ldr	r3, [pc, #708]	; (8005ea4 <long_turn_R90+0x2d4>)
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	4bb0      	ldr	r3, [pc, #704]	; (8005ea8 <long_turn_R90+0x2d8>)
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8005bee:	4baf      	ldr	r3, [pc, #700]	; (8005eac <long_turn_R90+0x2dc>)
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	4bae      	ldr	r3, [pc, #696]	; (8005eb0 <long_turn_R90+0x2e0>)
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8005c04:	4bab      	ldr	r3, [pc, #684]	; (8005eb4 <long_turn_R90+0x2e4>)
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	4baa      	ldr	r3, [pc, #680]	; (8005eb8 <long_turn_R90+0x2e8>)
 8005c0e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	4ba9      	ldr	r3, [pc, #676]	; (8005ebc <long_turn_R90+0x2ec>)
 8005c16:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005c1a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 8005c1c:	4ba8      	ldr	r3, [pc, #672]	; (8005ec0 <long_turn_R90+0x2f0>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8005c22:	4ba8      	ldr	r3, [pc, #672]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	4ba7      	ldr	r3, [pc, #668]	; (8005ec8 <long_turn_R90+0x2f8>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8005c2e:	4ba7      	ldr	r3, [pc, #668]	; (8005ecc <long_turn_R90+0x2fc>)
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	4ba6      	ldr	r3, [pc, #664]	; (8005ed0 <long_turn_R90+0x300>)
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8005c3e:	4ba5      	ldr	r3, [pc, #660]	; (8005ed4 <long_turn_R90+0x304>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	4ba4      	ldr	r3, [pc, #656]	; (8005ed8 <long_turn_R90+0x308>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	4ba4      	ldr	r3, [pc, #656]	; (8005edc <long_turn_R90+0x30c>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	4ba3      	ldr	r3, [pc, #652]	; (8005ee0 <long_turn_R90+0x310>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 37.10){
 8005c56:	e031      	b.n	8005cbc <long_turn_R90+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8005c58:	4ba2      	ldr	r3, [pc, #648]	; (8005ee4 <long_turn_R90+0x314>)
 8005c5a:	7b9b      	ldrb	r3, [r3, #14]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <long_turn_R90+0xb2>
 8005c60:	4b9c      	ldr	r3, [pc, #624]	; (8005ed4 <long_turn_R90+0x304>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10c      	bne.n	8005c82 <long_turn_R90+0xb2>
 8005c68:	4b9c      	ldr	r3, [pc, #624]	; (8005edc <long_turn_R90+0x30c>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d108      	bne.n	8005c82 <long_turn_R90+0xb2>
			local_length = 0.0;
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 8005c76:	4b93      	ldr	r3, [pc, #588]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005c78:	4a9b      	ldr	r2, [pc, #620]	; (8005ee8 <long_turn_R90+0x318>)
 8005c7a:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 8005c7c:	4b97      	ldr	r3, [pc, #604]	; (8005edc <long_turn_R90+0x30c>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 8005c82:	4b9a      	ldr	r3, [pc, #616]	; (8005eec <long_turn_R90+0x31c>)
 8005c84:	7b9b      	ldrb	r3, [r3, #14]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d110      	bne.n	8005cac <long_turn_R90+0xdc>
 8005c8a:	4b93      	ldr	r3, [pc, #588]	; (8005ed8 <long_turn_R90+0x308>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10c      	bne.n	8005cac <long_turn_R90+0xdc>
 8005c92:	4b92      	ldr	r3, [pc, #584]	; (8005edc <long_turn_R90+0x30c>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <long_turn_R90+0xdc>
	    	local_length = 0.0;
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8005ca0:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005ca2:	4a91      	ldr	r2, [pc, #580]	; (8005ee8 <long_turn_R90+0x318>)
 8005ca4:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 8005ca6:	4b8d      	ldr	r3, [pc, #564]	; (8005edc <long_turn_R90+0x30c>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 8005cac:	4b8d      	ldr	r3, [pc, #564]	; (8005ee4 <long_turn_R90+0x314>)
 8005cae:	7b9a      	ldrb	r2, [r3, #14]
 8005cb0:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <long_turn_R90+0x304>)
 8005cb2:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 8005cb4:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <long_turn_R90+0x31c>)
 8005cb6:	7b9a      	ldrb	r2, [r3, #14]
 8005cb8:	4b87      	ldr	r3, [pc, #540]	; (8005ed8 <long_turn_R90+0x308>)
 8005cba:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 37.10){
 8005cbc:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005cbe:	ed93 7a00 	vldr	s14, [r3]
 8005cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cca:	ee17 0a90 	vmov	r0, s15
 8005cce:	f7fa fc43 	bl	8000558 <__aeabi_f2d>
 8005cd2:	a36d      	add	r3, pc, #436	; (adr r3, 8005e88 <long_turn_R90+0x2b8>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa ff08 	bl	8000aec <__aeabi_dcmplt>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ba      	bne.n	8005c58 <long_turn_R90+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	4b81      	ldr	r3, [pc, #516]	; (8005ef0 <long_turn_R90+0x320>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 8005cee:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <long_turn_R90+0x2f8>)
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	4b7f      	ldr	r3, [pc, #508]	; (8005ef4 <long_turn_R90+0x324>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -SLA_SEARCH_TURN_SPEED;
 8005cfa:	4b74      	ldr	r3, [pc, #464]	; (8005ecc <long_turn_R90+0x2fc>)
 8005cfc:	4a7e      	ldr	r2, [pc, #504]	; (8005ef8 <long_turn_R90+0x328>)
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	4b73      	ldr	r3, [pc, #460]	; (8005ed0 <long_turn_R90+0x300>)
 8005d02:	4a7e      	ldr	r2, [pc, #504]	; (8005efc <long_turn_R90+0x32c>)
 8005d04:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8005d06:	4b71      	ldr	r3, [pc, #452]	; (8005ecc <long_turn_R90+0x2fc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	607b      	str	r3, [r7, #4]

	while(((-90.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8005d0c:	bf00      	nop
 8005d0e:	4b78      	ldr	r3, [pc, #480]	; (8005ef0 <long_turn_R90+0x320>)
 8005d10:	ed93 7a00 	vldr	s14, [r3]
 8005d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1c:	ee17 0a90 	vmov	r0, s15
 8005d20:	f7fa fc1a 	bl	8000558 <__aeabi_f2d>
 8005d24:	4603      	mov	r3, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	f04f 0000 	mov.w	r0, #0
 8005d30:	4973      	ldr	r1, [pc, #460]	; (8005f00 <long_turn_R90+0x330>)
 8005d32:	f7fa fab1 	bl	8000298 <__aeabi_dsub>
 8005d36:	4603      	mov	r3, r0
 8005d38:	460c      	mov	r4, r1
 8005d3a:	4625      	mov	r5, r4
 8005d3c:	461c      	mov	r4, r3
 8005d3e:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <long_turn_R90+0x300>)
 8005d40:	ed93 7a00 	vldr	s14, [r3]
 8005d44:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <long_turn_R90+0x300>)
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	ee17 0a90 	vmov	r0, s15
 8005d52:	f7fa fc01 	bl	8000558 <__aeabi_f2d>
 8005d56:	4680      	mov	r8, r0
 8005d58:	4689      	mov	r9, r1
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fa fbfc 	bl	8000558 <__aeabi_f2d>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	f7fa fa9a 	bl	800029c <__adddf3>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4649      	mov	r1, r9
 8005d70:	f7fa fd74 	bl	800085c <__aeabi_ddiv>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	4b60      	ldr	r3, [pc, #384]	; (8005f04 <long_turn_R90+0x334>)
 8005d82:	f7fa fc41 	bl	8000608 <__aeabi_dmul>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	a340      	add	r3, pc, #256	; (adr r3, 8005e90 <long_turn_R90+0x2c0>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fd62 	bl	800085c <__aeabi_ddiv>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fea4 	bl	8000aec <__aeabi_dcmplt>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1b1      	bne.n	8005d0e <long_turn_R90+0x13e>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 8005daa:	4b48      	ldr	r3, [pc, #288]	; (8005ecc <long_turn_R90+0x2fc>)
 8005dac:	4a56      	ldr	r2, [pc, #344]	; (8005f08 <long_turn_R90+0x338>)
 8005dae:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -90.0 ){
 8005db0:	e014      	b.n	8005ddc <long_turn_R90+0x20c>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 8005db2:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <long_turn_R90+0x33c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fa fbce 	bl	8000558 <__aeabi_f2d>
 8005dbc:	a336      	add	r3, pc, #216	; (adr r3, 8005e98 <long_turn_R90+0x2c8>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa feb1 	bl	8000b28 <__aeabi_dcmpgt>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d100      	bne.n	8005dce <long_turn_R90+0x1fe>
 8005dcc:	e006      	b.n	8005ddc <long_turn_R90+0x20c>
 8005dce:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <long_turn_R90+0x33c>)
 8005dd0:	4a4f      	ldr	r2, [pc, #316]	; (8005f10 <long_turn_R90+0x340>)
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <long_turn_R90+0x2fc>)
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -90.0 ){
 8005ddc:	4b44      	ldr	r3, [pc, #272]	; (8005ef0 <long_turn_R90+0x320>)
 8005dde:	ed93 7a00 	vldr	s14, [r3]
 8005de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dea:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005f14 <long_turn_R90+0x344>
 8005dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df6:	dcdc      	bgt.n	8005db2 <long_turn_R90+0x1e2>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8005df8:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	4b32      	ldr	r3, [pc, #200]	; (8005ec8 <long_turn_R90+0x2f8>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8005e04:	4b2b      	ldr	r3, [pc, #172]	; (8005eb4 <long_turn_R90+0x2e4>)
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	4b2a      	ldr	r3, [pc, #168]	; (8005eb8 <long_turn_R90+0x2e8>)
 8005e0e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <long_turn_R90+0x2ec>)
 8005e16:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005e1a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <long_turn_R90+0x2fc>)
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <long_turn_R90+0x300>)
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <long_turn_R90+0x33c>)
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8005e34:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <long_turn_R90+0x2f0>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	771a      	strb	r2, [r3, #28]
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <long_turn_R90+0x314>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	819a      	strh	r2, [r3, #12]
 8005e40:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <long_turn_R90+0x31c>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	819a      	strh	r2, [r3, #12]

	while((len_mouse - local_length)< 37.10);
 8005e46:	bf00      	nop
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005e4a:	ed93 7a00 	vldr	s14, [r3]
 8005e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e56:	ee17 0a90 	vmov	r0, s15
 8005e5a:	f7fa fb7d 	bl	8000558 <__aeabi_f2d>
 8005e5e:	a30a      	add	r3, pc, #40	; (adr r3, 8005e88 <long_turn_R90+0x2b8>)
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f7fa fe42 	bl	8000aec <__aeabi_dcmplt>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1ec      	bne.n	8005e48 <long_turn_R90+0x278>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <long_turn_R90+0x2f4>)
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <long_turn_R90+0x2f8>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e86:	bf00      	nop
 8005e88:	cccccccd 	.word	0xcccccccd
 8005e8c:	40428ccc 	.word	0x40428ccc
 8005e90:	fc8b007a 	.word	0xfc8b007a
 8005e94:	400921fa 	.word	0x400921fa
 8005e98:	306f3395 	.word	0x306f3395
 8005e9c:	bfc41b2f 	.word	0xbfc41b2f
 8005ea0:	2000d224 	.word	0x2000d224
 8005ea4:	2000821c 	.word	0x2000821c
 8005ea8:	2000d210 	.word	0x2000d210
 8005eac:	2000d1d8 	.word	0x2000d1d8
 8005eb0:	200004ec 	.word	0x200004ec
 8005eb4:	2000a16c 	.word	0x2000a16c
 8005eb8:	2000d05c 	.word	0x2000d05c
 8005ebc:	2000d198 	.word	0x2000d198
 8005ec0:	20012398 	.word	0x20012398
 8005ec4:	200123b8 	.word	0x200123b8
 8005ec8:	2000a170 	.word	0x2000a170
 8005ecc:	200002dc 	.word	0x200002dc
 8005ed0:	20008208 	.word	0x20008208
 8005ed4:	2000d22c 	.word	0x2000d22c
 8005ed8:	20010454 	.word	0x20010454
 8005edc:	20002438 	.word	0x20002438
 8005ee0:	2000f490 	.word	0x2000f490
 8005ee4:	2000f480 	.word	0x2000f480
 8005ee8:	41700000 	.word	0x41700000
 8005eec:	2000d064 	.word	0x2000d064
 8005ef0:	2001044c 	.word	0x2001044c
 8005ef4:	20008218 	.word	0x20008218
 8005ef8:	c37b53ce 	.word	0xc37b53ce
 8005efc:	c1490fd8 	.word	0xc1490fd8
 8005f00:	c0568000 	.word	0xc0568000
 8005f04:	40668000 	.word	0x40668000
 8005f08:	437b53ce 	.word	0x437b53ce
 8005f0c:	2000d43c 	.word	0x2000d43c
 8005f10:	be20d97a 	.word	0xbe20d97a
 8005f14:	c2b40000 	.word	0xc2b40000

08005f18 <long_turn_L90>:

void long_turn_L90(){
 8005f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8005f20:	4bb3      	ldr	r3, [pc, #716]	; (80061f0 <long_turn_L90+0x2d8>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8005f26:	4bb3      	ldr	r3, [pc, #716]	; (80061f4 <long_turn_L90+0x2dc>)
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	4bb2      	ldr	r3, [pc, #712]	; (80061f8 <long_turn_L90+0x2e0>)
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8005f36:	4bb1      	ldr	r3, [pc, #708]	; (80061fc <long_turn_L90+0x2e4>)
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	4bb0      	ldr	r3, [pc, #704]	; (8006200 <long_turn_L90+0x2e8>)
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8005f4c:	4bad      	ldr	r3, [pc, #692]	; (8006204 <long_turn_L90+0x2ec>)
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	4bac      	ldr	r3, [pc, #688]	; (8006208 <long_turn_L90+0x2f0>)
 8005f56:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	4bab      	ldr	r3, [pc, #684]	; (800620c <long_turn_L90+0x2f4>)
 8005f5e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005f62:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 8005f64:	4baa      	ldr	r3, [pc, #680]	; (8006210 <long_turn_L90+0x2f8>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8005f6a:	4baa      	ldr	r3, [pc, #680]	; (8006214 <long_turn_L90+0x2fc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	4ba9      	ldr	r3, [pc, #676]	; (8006218 <long_turn_L90+0x300>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8005f76:	4ba9      	ldr	r3, [pc, #676]	; (800621c <long_turn_L90+0x304>)
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	4ba8      	ldr	r3, [pc, #672]	; (8006220 <long_turn_L90+0x308>)
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8005f86:	4ba7      	ldr	r3, [pc, #668]	; (8006224 <long_turn_L90+0x30c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	4ba6      	ldr	r3, [pc, #664]	; (8006228 <long_turn_L90+0x310>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	4ba6      	ldr	r3, [pc, #664]	; (800622c <long_turn_L90+0x314>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	4ba5      	ldr	r3, [pc, #660]	; (8006230 <long_turn_L90+0x318>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 37.10){
 8005f9e:	e031      	b.n	8006004 <long_turn_L90+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8005fa0:	4ba4      	ldr	r3, [pc, #656]	; (8006234 <long_turn_L90+0x31c>)
 8005fa2:	7b9b      	ldrb	r3, [r3, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d110      	bne.n	8005fca <long_turn_L90+0xb2>
 8005fa8:	4b9e      	ldr	r3, [pc, #632]	; (8006224 <long_turn_L90+0x30c>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10c      	bne.n	8005fca <long_turn_L90+0xb2>
 8005fb0:	4b9e      	ldr	r3, [pc, #632]	; (800622c <long_turn_L90+0x314>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <long_turn_L90+0xb2>
			local_length = 0.0;
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 8005fbe:	4b95      	ldr	r3, [pc, #596]	; (8006214 <long_turn_L90+0x2fc>)
 8005fc0:	4a9d      	ldr	r2, [pc, #628]	; (8006238 <long_turn_L90+0x320>)
 8005fc2:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 8005fc4:	4b99      	ldr	r3, [pc, #612]	; (800622c <long_turn_L90+0x314>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 8005fca:	4b9c      	ldr	r3, [pc, #624]	; (800623c <long_turn_L90+0x324>)
 8005fcc:	7b9b      	ldrb	r3, [r3, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <long_turn_L90+0xdc>
 8005fd2:	4b95      	ldr	r3, [pc, #596]	; (8006228 <long_turn_L90+0x310>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d10c      	bne.n	8005ff4 <long_turn_L90+0xdc>
 8005fda:	4b94      	ldr	r3, [pc, #592]	; (800622c <long_turn_L90+0x314>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <long_turn_L90+0xdc>
	    	local_length = 0.0;
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	; (8006214 <long_turn_L90+0x2fc>)
 8005fea:	4a93      	ldr	r2, [pc, #588]	; (8006238 <long_turn_L90+0x320>)
 8005fec:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 8005fee:	4b8f      	ldr	r3, [pc, #572]	; (800622c <long_turn_L90+0x314>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 8005ff4:	4b8f      	ldr	r3, [pc, #572]	; (8006234 <long_turn_L90+0x31c>)
 8005ff6:	7b9a      	ldrb	r2, [r3, #14]
 8005ff8:	4b8a      	ldr	r3, [pc, #552]	; (8006224 <long_turn_L90+0x30c>)
 8005ffa:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 8005ffc:	4b8f      	ldr	r3, [pc, #572]	; (800623c <long_turn_L90+0x324>)
 8005ffe:	7b9a      	ldrb	r2, [r3, #14]
 8006000:	4b89      	ldr	r3, [pc, #548]	; (8006228 <long_turn_L90+0x310>)
 8006002:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 37.10){
 8006004:	4b83      	ldr	r3, [pc, #524]	; (8006214 <long_turn_L90+0x2fc>)
 8006006:	ed93 7a00 	vldr	s14, [r3]
 800600a:	edd7 7a03 	vldr	s15, [r7, #12]
 800600e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006012:	ee17 0a90 	vmov	r0, s15
 8006016:	f7fa fa9f 	bl	8000558 <__aeabi_f2d>
 800601a:	a36f      	add	r3, pc, #444	; (adr r3, 80061d8 <long_turn_L90+0x2c0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa fd64 	bl	8000aec <__aeabi_dcmplt>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ba      	bne.n	8005fa0 <long_turn_L90+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	4b83      	ldr	r3, [pc, #524]	; (8006240 <long_turn_L90+0x328>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8006036:	4b78      	ldr	r3, [pc, #480]	; (8006218 <long_turn_L90+0x300>)
 8006038:	2202      	movs	r2, #2
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	4b81      	ldr	r3, [pc, #516]	; (8006244 <long_turn_L90+0x32c>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 8006042:	4b76      	ldr	r3, [pc, #472]	; (800621c <long_turn_L90+0x304>)
 8006044:	4a80      	ldr	r2, [pc, #512]	; (8006248 <long_turn_L90+0x330>)
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	4b75      	ldr	r3, [pc, #468]	; (8006220 <long_turn_L90+0x308>)
 800604a:	4a80      	ldr	r2, [pc, #512]	; (800624c <long_turn_L90+0x334>)
 800604c:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 800604e:	4b73      	ldr	r3, [pc, #460]	; (800621c <long_turn_L90+0x304>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	607b      	str	r3, [r7, #4]

	while(((90.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8006054:	bf00      	nop
 8006056:	4b7a      	ldr	r3, [pc, #488]	; (8006240 <long_turn_L90+0x328>)
 8006058:	ed93 7a00 	vldr	s14, [r3]
 800605c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006064:	ee17 0a90 	vmov	r0, s15
 8006068:	f7fa fa76 	bl	8000558 <__aeabi_f2d>
 800606c:	4603      	mov	r3, r0
 800606e:	460c      	mov	r4, r1
 8006070:	461a      	mov	r2, r3
 8006072:	4623      	mov	r3, r4
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	4975      	ldr	r1, [pc, #468]	; (8006250 <long_turn_L90+0x338>)
 800607a:	f7fa f90d 	bl	8000298 <__aeabi_dsub>
 800607e:	4603      	mov	r3, r0
 8006080:	460c      	mov	r4, r1
 8006082:	4625      	mov	r5, r4
 8006084:	461c      	mov	r4, r3
 8006086:	4b66      	ldr	r3, [pc, #408]	; (8006220 <long_turn_L90+0x308>)
 8006088:	ed93 7a00 	vldr	s14, [r3]
 800608c:	4b64      	ldr	r3, [pc, #400]	; (8006220 <long_turn_L90+0x308>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	ee17 0a90 	vmov	r0, s15
 800609a:	f7fa fa5d 	bl	8000558 <__aeabi_f2d>
 800609e:	4680      	mov	r8, r0
 80060a0:	4689      	mov	r9, r1
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fa fa58 	bl	8000558 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	f7fa f8f6 	bl	800029c <__adddf3>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa fbd0 	bl	800085c <__aeabi_ddiv>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	4b62      	ldr	r3, [pc, #392]	; (8006254 <long_turn_L90+0x33c>)
 80060ca:	f7fa fa9d 	bl	8000608 <__aeabi_dmul>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	a342      	add	r3, pc, #264	; (adr r3, 80061e0 <long_turn_L90+0x2c8>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa fbbe 	bl	800085c <__aeabi_ddiv>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa fd1e 	bl	8000b28 <__aeabi_dcmpgt>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1b1      	bne.n	8006056 <long_turn_L90+0x13e>

	omega_accel = -omega_acc;
 80060f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80060f6:	eef1 7a67 	vneg.f32	s15, s15
 80060fa:	4b48      	ldr	r3, [pc, #288]	; (800621c <long_turn_L90+0x304>)
 80060fc:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 90.0 ){
 8006100:	e014      	b.n	800612c <long_turn_L90+0x214>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8006102:	4b55      	ldr	r3, [pc, #340]	; (8006258 <long_turn_L90+0x340>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fa fa26 	bl	8000558 <__aeabi_f2d>
 800610c:	a336      	add	r3, pc, #216	; (adr r3, 80061e8 <long_turn_L90+0x2d0>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa fceb 	bl	8000aec <__aeabi_dcmplt>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d100      	bne.n	800611e <long_turn_L90+0x206>
 800611c:	e006      	b.n	800612c <long_turn_L90+0x214>
 800611e:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <long_turn_L90+0x340>)
 8006120:	4a4e      	ldr	r2, [pc, #312]	; (800625c <long_turn_L90+0x344>)
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	4b3d      	ldr	r3, [pc, #244]	; (800621c <long_turn_L90+0x304>)
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 90.0 ){
 800612c:	4b44      	ldr	r3, [pc, #272]	; (8006240 <long_turn_L90+0x328>)
 800612e:	ed93 7a00 	vldr	s14, [r3]
 8006132:	edd7 7a02 	vldr	s15, [r7, #8]
 8006136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006260 <long_turn_L90+0x348>
 800613e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006146:	d4dc      	bmi.n	8006102 <long_turn_L90+0x1ea>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <long_turn_L90+0x2fc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	4b32      	ldr	r3, [pc, #200]	; (8006218 <long_turn_L90+0x300>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8006154:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <long_turn_L90+0x2ec>)
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <long_turn_L90+0x2f0>)
 800615e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <long_turn_L90+0x2f4>)
 8006166:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800616a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800616c:	4b2b      	ldr	r3, [pc, #172]	; (800621c <long_turn_L90+0x304>)
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <long_turn_L90+0x308>)
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	4b36      	ldr	r3, [pc, #216]	; (8006258 <long_turn_L90+0x340>)
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8006184:	4b22      	ldr	r3, [pc, #136]	; (8006210 <long_turn_L90+0x2f8>)
 8006186:	2201      	movs	r2, #1
 8006188:	771a      	strb	r2, [r3, #28]
 800618a:	4b2a      	ldr	r3, [pc, #168]	; (8006234 <long_turn_L90+0x31c>)
 800618c:	2200      	movs	r2, #0
 800618e:	819a      	strh	r2, [r3, #12]
 8006190:	4b2a      	ldr	r3, [pc, #168]	; (800623c <long_turn_L90+0x324>)
 8006192:	2200      	movs	r2, #0
 8006194:	819a      	strh	r2, [r3, #12]

	while((len_mouse - local_length)< 37.10);
 8006196:	bf00      	nop
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <long_turn_L90+0x2fc>)
 800619a:	ed93 7a00 	vldr	s14, [r3]
 800619e:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a6:	ee17 0a90 	vmov	r0, s15
 80061aa:	f7fa f9d5 	bl	8000558 <__aeabi_f2d>
 80061ae:	a30a      	add	r3, pc, #40	; (adr r3, 80061d8 <long_turn_L90+0x2c0>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa fc9a 	bl	8000aec <__aeabi_dcmplt>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1ec      	bne.n	8006198 <long_turn_L90+0x280>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 80061be:	4b15      	ldr	r3, [pc, #84]	; (8006214 <long_turn_L90+0x2fc>)
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <long_turn_L90+0x300>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061d6:	bf00      	nop
 80061d8:	cccccccd 	.word	0xcccccccd
 80061dc:	40428ccc 	.word	0x40428ccc
 80061e0:	fc8b007a 	.word	0xfc8b007a
 80061e4:	400921fa 	.word	0x400921fa
 80061e8:	306f3395 	.word	0x306f3395
 80061ec:	3fc41b2f 	.word	0x3fc41b2f
 80061f0:	2000d224 	.word	0x2000d224
 80061f4:	2000821c 	.word	0x2000821c
 80061f8:	2000d210 	.word	0x2000d210
 80061fc:	2000d1d8 	.word	0x2000d1d8
 8006200:	200004ec 	.word	0x200004ec
 8006204:	2000a16c 	.word	0x2000a16c
 8006208:	2000d05c 	.word	0x2000d05c
 800620c:	2000d198 	.word	0x2000d198
 8006210:	20012398 	.word	0x20012398
 8006214:	200123b8 	.word	0x200123b8
 8006218:	2000a170 	.word	0x2000a170
 800621c:	200002dc 	.word	0x200002dc
 8006220:	20008208 	.word	0x20008208
 8006224:	2000d22c 	.word	0x2000d22c
 8006228:	20010454 	.word	0x20010454
 800622c:	20002438 	.word	0x20002438
 8006230:	2000f490 	.word	0x2000f490
 8006234:	2000f480 	.word	0x2000f480
 8006238:	41700000 	.word	0x41700000
 800623c:	2000d064 	.word	0x2000d064
 8006240:	2001044c 	.word	0x2001044c
 8006244:	20008218 	.word	0x20008218
 8006248:	437b53ce 	.word	0x437b53ce
 800624c:	41490fd8 	.word	0x41490fd8
 8006250:	40568000 	.word	0x40568000
 8006254:	40668000 	.word	0x40668000
 8006258:	2000d43c 	.word	0x2000d43c
 800625c:	3e20d97a 	.word	0x3e20d97a
 8006260:	42b40000 	.word	0x42b40000
 8006264:	00000000 	.word	0x00000000

08006268 <long_turn_R180>:

void long_turn_R180(){
 8006268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8006270:	4bb1      	ldr	r3, [pc, #708]	; (8006538 <long_turn_R180+0x2d0>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8006276:	4bb1      	ldr	r3, [pc, #708]	; (800653c <long_turn_R180+0x2d4>)
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	4bb0      	ldr	r3, [pc, #704]	; (8006540 <long_turn_R180+0x2d8>)
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8006286:	4baf      	ldr	r3, [pc, #700]	; (8006544 <long_turn_R180+0x2dc>)
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	4bae      	ldr	r3, [pc, #696]	; (8006548 <long_turn_R180+0x2e0>)
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 800629c:	4bab      	ldr	r3, [pc, #684]	; (800654c <long_turn_R180+0x2e4>)
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	4baa      	ldr	r3, [pc, #680]	; (8006550 <long_turn_R180+0x2e8>)
 80062a6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	4ba9      	ldr	r3, [pc, #676]	; (8006554 <long_turn_R180+0x2ec>)
 80062ae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80062b2:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 80062b4:	4ba8      	ldr	r3, [pc, #672]	; (8006558 <long_turn_R180+0x2f0>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 80062ba:	4ba8      	ldr	r3, [pc, #672]	; (800655c <long_turn_R180+0x2f4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	4ba7      	ldr	r3, [pc, #668]	; (8006560 <long_turn_R180+0x2f8>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 80062c6:	4ba7      	ldr	r3, [pc, #668]	; (8006564 <long_turn_R180+0x2fc>)
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	4ba6      	ldr	r3, [pc, #664]	; (8006568 <long_turn_R180+0x300>)
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 34.56);
	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 80062d6:	4ba5      	ldr	r3, [pc, #660]	; (800656c <long_turn_R180+0x304>)
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	4ba4      	ldr	r3, [pc, #656]	; (8006570 <long_turn_R180+0x308>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	4ba4      	ldr	r3, [pc, #656]	; (8006574 <long_turn_R180+0x30c>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	4ba3      	ldr	r3, [pc, #652]	; (8006578 <long_turn_R180+0x310>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 34.56){
 80062ee:	e031      	b.n	8006354 <long_turn_R180+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 80062f0:	4ba2      	ldr	r3, [pc, #648]	; (800657c <long_turn_R180+0x314>)
 80062f2:	7b9b      	ldrb	r3, [r3, #14]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <long_turn_R180+0xb2>
 80062f8:	4b9c      	ldr	r3, [pc, #624]	; (800656c <long_turn_R180+0x304>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10c      	bne.n	800631a <long_turn_R180+0xb2>
 8006300:	4b9c      	ldr	r3, [pc, #624]	; (8006574 <long_turn_R180+0x30c>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <long_turn_R180+0xb2>
			local_length = 0.0;
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 800630e:	4b93      	ldr	r3, [pc, #588]	; (800655c <long_turn_R180+0x2f4>)
 8006310:	4a9b      	ldr	r2, [pc, #620]	; (8006580 <long_turn_R180+0x318>)
 8006312:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 8006314:	4b97      	ldr	r3, [pc, #604]	; (8006574 <long_turn_R180+0x30c>)
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 800631a:	4b9a      	ldr	r3, [pc, #616]	; (8006584 <long_turn_R180+0x31c>)
 800631c:	7b9b      	ldrb	r3, [r3, #14]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d110      	bne.n	8006344 <long_turn_R180+0xdc>
 8006322:	4b93      	ldr	r3, [pc, #588]	; (8006570 <long_turn_R180+0x308>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d10c      	bne.n	8006344 <long_turn_R180+0xdc>
 800632a:	4b92      	ldr	r3, [pc, #584]	; (8006574 <long_turn_R180+0x30c>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d108      	bne.n	8006344 <long_turn_R180+0xdc>
	    	local_length = 0.0;
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8006338:	4b88      	ldr	r3, [pc, #544]	; (800655c <long_turn_R180+0x2f4>)
 800633a:	4a91      	ldr	r2, [pc, #580]	; (8006580 <long_turn_R180+0x318>)
 800633c:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 800633e:	4b8d      	ldr	r3, [pc, #564]	; (8006574 <long_turn_R180+0x30c>)
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 8006344:	4b8d      	ldr	r3, [pc, #564]	; (800657c <long_turn_R180+0x314>)
 8006346:	7b9a      	ldrb	r2, [r3, #14]
 8006348:	4b88      	ldr	r3, [pc, #544]	; (800656c <long_turn_R180+0x304>)
 800634a:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 800634c:	4b8d      	ldr	r3, [pc, #564]	; (8006584 <long_turn_R180+0x31c>)
 800634e:	7b9a      	ldrb	r2, [r3, #14]
 8006350:	4b87      	ldr	r3, [pc, #540]	; (8006570 <long_turn_R180+0x308>)
 8006352:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 34.56){
 8006354:	4b81      	ldr	r3, [pc, #516]	; (800655c <long_turn_R180+0x2f4>)
 8006356:	ed93 7a00 	vldr	s14, [r3]
 800635a:	edd7 7a03 	vldr	s15, [r7, #12]
 800635e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006362:	ee17 0a90 	vmov	r0, s15
 8006366:	f7fa f8f7 	bl	8000558 <__aeabi_f2d>
 800636a:	a36d      	add	r3, pc, #436	; (adr r3, 8006520 <long_turn_R180+0x2b8>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7fa fbbc 	bl	8000aec <__aeabi_dcmplt>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1ba      	bne.n	80062f0 <long_turn_R180+0x88>
	}


	float local_degree = 0.0;	local_degree = tar_degree;
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	4b81      	ldr	r3, [pc, #516]	; (8006588 <long_turn_R180+0x320>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 8006386:	4b76      	ldr	r3, [pc, #472]	; (8006560 <long_turn_R180+0x2f8>)
 8006388:	2202      	movs	r2, #2
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b7f      	ldr	r3, [pc, #508]	; (800658c <long_turn_R180+0x324>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -LONG_TURN_SPEED;
 8006392:	4b74      	ldr	r3, [pc, #464]	; (8006564 <long_turn_R180+0x2fc>)
 8006394:	4a7e      	ldr	r2, [pc, #504]	; (8006590 <long_turn_R180+0x328>)
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	4b73      	ldr	r3, [pc, #460]	; (8006568 <long_turn_R180+0x300>)
 800639a:	4a7e      	ldr	r2, [pc, #504]	; (8006594 <long_turn_R180+0x32c>)
 800639c:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 800639e:	4b71      	ldr	r3, [pc, #452]	; (8006564 <long_turn_R180+0x2fc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	607b      	str	r3, [r7, #4]

	while(((-180.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 80063a4:	bf00      	nop
 80063a6:	4b78      	ldr	r3, [pc, #480]	; (8006588 <long_turn_R180+0x320>)
 80063a8:	ed93 7a00 	vldr	s14, [r3]
 80063ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80063b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063b4:	ee17 0a90 	vmov	r0, s15
 80063b8:	f7fa f8ce 	bl	8000558 <__aeabi_f2d>
 80063bc:	4603      	mov	r3, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	461a      	mov	r2, r3
 80063c2:	4623      	mov	r3, r4
 80063c4:	f04f 0000 	mov.w	r0, #0
 80063c8:	4973      	ldr	r1, [pc, #460]	; (8006598 <long_turn_R180+0x330>)
 80063ca:	f7f9 ff65 	bl	8000298 <__aeabi_dsub>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	4625      	mov	r5, r4
 80063d4:	461c      	mov	r4, r3
 80063d6:	4b64      	ldr	r3, [pc, #400]	; (8006568 <long_turn_R180+0x300>)
 80063d8:	ed93 7a00 	vldr	s14, [r3]
 80063dc:	4b62      	ldr	r3, [pc, #392]	; (8006568 <long_turn_R180+0x300>)
 80063de:	edd3 7a00 	vldr	s15, [r3]
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	ee17 0a90 	vmov	r0, s15
 80063ea:	f7fa f8b5 	bl	8000558 <__aeabi_f2d>
 80063ee:	4680      	mov	r8, r0
 80063f0:	4689      	mov	r9, r1
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fa f8b0 	bl	8000558 <__aeabi_f2d>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	f7f9 ff4e 	bl	800029c <__adddf3>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7fa fa28 	bl	800085c <__aeabi_ddiv>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b60      	ldr	r3, [pc, #384]	; (800659c <long_turn_R180+0x334>)
 800641a:	f7fa f8f5 	bl	8000608 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	a340      	add	r3, pc, #256	; (adr r3, 8006528 <long_turn_R180+0x2c0>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f7fa fa16 	bl	800085c <__aeabi_ddiv>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa fb58 	bl	8000aec <__aeabi_dcmplt>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1b1      	bne.n	80063a6 <long_turn_R180+0x13e>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 8006442:	4b48      	ldr	r3, [pc, #288]	; (8006564 <long_turn_R180+0x2fc>)
 8006444:	4a56      	ldr	r2, [pc, #344]	; (80065a0 <long_turn_R180+0x338>)
 8006446:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -180.0 ){
 8006448:	e014      	b.n	8006474 <long_turn_R180+0x20c>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 800644a:	4b56      	ldr	r3, [pc, #344]	; (80065a4 <long_turn_R180+0x33c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa f882 	bl	8000558 <__aeabi_f2d>
 8006454:	a336      	add	r3, pc, #216	; (adr r3, 8006530 <long_turn_R180+0x2c8>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7fa fb65 	bl	8000b28 <__aeabi_dcmpgt>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d100      	bne.n	8006466 <long_turn_R180+0x1fe>
 8006464:	e006      	b.n	8006474 <long_turn_R180+0x20c>
 8006466:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <long_turn_R180+0x33c>)
 8006468:	4a4f      	ldr	r2, [pc, #316]	; (80065a8 <long_turn_R180+0x340>)
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	4b3d      	ldr	r3, [pc, #244]	; (8006564 <long_turn_R180+0x2fc>)
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -180.0 ){
 8006474:	4b44      	ldr	r3, [pc, #272]	; (8006588 <long_turn_R180+0x320>)
 8006476:	ed93 7a00 	vldr	s14, [r3]
 800647a:	edd7 7a02 	vldr	s15, [r7, #8]
 800647e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006482:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80065ac <long_turn_R180+0x344>
 8006486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648e:	dcdc      	bgt.n	800644a <long_turn_R180+0x1e2>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8006490:	4b32      	ldr	r3, [pc, #200]	; (800655c <long_turn_R180+0x2f4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	4b32      	ldr	r3, [pc, #200]	; (8006560 <long_turn_R180+0x2f8>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 800649c:	4b2b      	ldr	r3, [pc, #172]	; (800654c <long_turn_R180+0x2e4>)
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <long_turn_R180+0x2e8>)
 80064a6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	4b29      	ldr	r3, [pc, #164]	; (8006554 <long_turn_R180+0x2ec>)
 80064ae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80064b2:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 80064b4:	4b2b      	ldr	r3, [pc, #172]	; (8006564 <long_turn_R180+0x2fc>)
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	4b2a      	ldr	r3, [pc, #168]	; (8006568 <long_turn_R180+0x300>)
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <long_turn_R180+0x33c>)
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 80064cc:	4b22      	ldr	r3, [pc, #136]	; (8006558 <long_turn_R180+0x2f0>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	771a      	strb	r2, [r3, #28]
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <long_turn_R180+0x314>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	819a      	strh	r2, [r3, #12]
 80064d8:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <long_turn_R180+0x31c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	819a      	strh	r2, [r3, #12]

	while((len_mouse - local_length)< 34.56);
 80064de:	bf00      	nop
 80064e0:	4b1e      	ldr	r3, [pc, #120]	; (800655c <long_turn_R180+0x2f4>)
 80064e2:	ed93 7a00 	vldr	s14, [r3]
 80064e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80064ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ee:	ee17 0a90 	vmov	r0, s15
 80064f2:	f7fa f831 	bl	8000558 <__aeabi_f2d>
 80064f6:	a30a      	add	r3, pc, #40	; (adr r3, 8006520 <long_turn_R180+0x2b8>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f7fa faf6 	bl	8000aec <__aeabi_dcmplt>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ec      	bne.n	80064e0 <long_turn_R180+0x278>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 8006506:	4b15      	ldr	r3, [pc, #84]	; (800655c <long_turn_R180+0x2f4>)
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <long_turn_R180+0x2f8>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800651e:	bf00      	nop
 8006520:	147ae148 	.word	0x147ae148
 8006524:	404147ae 	.word	0x404147ae
 8006528:	fc8b007a 	.word	0xfc8b007a
 800652c:	400921fa 	.word	0x400921fa
 8006530:	306f3395 	.word	0x306f3395
 8006534:	bfc41b2f 	.word	0xbfc41b2f
 8006538:	2000d224 	.word	0x2000d224
 800653c:	2000821c 	.word	0x2000821c
 8006540:	2000d210 	.word	0x2000d210
 8006544:	2000d1d8 	.word	0x2000d1d8
 8006548:	200004ec 	.word	0x200004ec
 800654c:	2000a16c 	.word	0x2000a16c
 8006550:	2000d05c 	.word	0x2000d05c
 8006554:	2000d198 	.word	0x2000d198
 8006558:	20012398 	.word	0x20012398
 800655c:	200123b8 	.word	0x200123b8
 8006560:	2000a170 	.word	0x2000a170
 8006564:	200002dc 	.word	0x200002dc
 8006568:	20008208 	.word	0x20008208
 800656c:	2000d22c 	.word	0x2000d22c
 8006570:	20010454 	.word	0x20010454
 8006574:	20002438 	.word	0x20002438
 8006578:	2000f490 	.word	0x2000f490
 800657c:	2000f480 	.word	0x2000f480
 8006580:	41700000 	.word	0x41700000
 8006584:	2000d064 	.word	0x2000d064
 8006588:	2001044c 	.word	0x2001044c
 800658c:	20008218 	.word	0x20008218
 8006590:	c37b53ce 	.word	0xc37b53ce
 8006594:	c134f4a9 	.word	0xc134f4a9
 8006598:	c0668000 	.word	0xc0668000
 800659c:	40668000 	.word	0x40668000
 80065a0:	437b53ce 	.word	0x437b53ce
 80065a4:	2000d43c 	.word	0x2000d43c
 80065a8:	be20d97a 	.word	0xbe20d97a
 80065ac:	c3340000 	.word	0xc3340000

080065b0 <long_turn_L180>:

void long_turn_L180(){
 80065b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
	error_cnt = 0;
 80065b8:	4bb3      	ldr	r3, [pc, #716]	; (8006888 <long_turn_L180+0x2d8>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 80065be:	4bb3      	ldr	r3, [pc, #716]	; (800688c <long_turn_L180+0x2dc>)
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	4bb2      	ldr	r3, [pc, #712]	; (8006890 <long_turn_L180+0x2e0>)
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 80065ce:	4bb1      	ldr	r3, [pc, #708]	; (8006894 <long_turn_L180+0x2e4>)
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	4bb0      	ldr	r3, [pc, #704]	; (8006898 <long_turn_L180+0x2e8>)
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 80065e4:	4bad      	ldr	r3, [pc, #692]	; (800689c <long_turn_L180+0x2ec>)
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	4bac      	ldr	r3, [pc, #688]	; (80068a0 <long_turn_L180+0x2f0>)
 80065ee:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	4bab      	ldr	r3, [pc, #684]	; (80068a4 <long_turn_L180+0x2f4>)
 80065f6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80065fa:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 80065fc:	4baa      	ldr	r3, [pc, #680]	; (80068a8 <long_turn_L180+0x2f8>)
 80065fe:	2201      	movs	r2, #1
 8006600:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8006602:	4baa      	ldr	r3, [pc, #680]	; (80068ac <long_turn_L180+0x2fc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	4ba9      	ldr	r3, [pc, #676]	; (80068b0 <long_turn_L180+0x300>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 800660e:	4ba9      	ldr	r3, [pc, #676]	; (80068b4 <long_turn_L180+0x304>)
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	4ba8      	ldr	r3, [pc, #672]	; (80068b8 <long_turn_L180+0x308>)
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 34.56);
	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 800661e:	4ba7      	ldr	r3, [pc, #668]	; (80068bc <long_turn_L180+0x30c>)
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	4ba6      	ldr	r3, [pc, #664]	; (80068c0 <long_turn_L180+0x310>)
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	4ba6      	ldr	r3, [pc, #664]	; (80068c4 <long_turn_L180+0x314>)
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	4ba5      	ldr	r3, [pc, #660]	; (80068c8 <long_turn_L180+0x318>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 34.56){
 8006636:	e031      	b.n	800669c <long_turn_L180+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8006638:	4ba4      	ldr	r3, [pc, #656]	; (80068cc <long_turn_L180+0x31c>)
 800663a:	7b9b      	ldrb	r3, [r3, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d110      	bne.n	8006662 <long_turn_L180+0xb2>
 8006640:	4b9e      	ldr	r3, [pc, #632]	; (80068bc <long_turn_L180+0x30c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10c      	bne.n	8006662 <long_turn_L180+0xb2>
 8006648:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <long_turn_L180+0x314>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <long_turn_L180+0xb2>
			local_length = 0.0;
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 8006656:	4b95      	ldr	r3, [pc, #596]	; (80068ac <long_turn_L180+0x2fc>)
 8006658:	4a9d      	ldr	r2, [pc, #628]	; (80068d0 <long_turn_L180+0x320>)
 800665a:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 800665c:	4b99      	ldr	r3, [pc, #612]	; (80068c4 <long_turn_L180+0x314>)
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 8006662:	4b9c      	ldr	r3, [pc, #624]	; (80068d4 <long_turn_L180+0x324>)
 8006664:	7b9b      	ldrb	r3, [r3, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <long_turn_L180+0xdc>
 800666a:	4b95      	ldr	r3, [pc, #596]	; (80068c0 <long_turn_L180+0x310>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10c      	bne.n	800668c <long_turn_L180+0xdc>
 8006672:	4b94      	ldr	r3, [pc, #592]	; (80068c4 <long_turn_L180+0x314>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <long_turn_L180+0xdc>
	    	local_length = 0.0;
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8006680:	4b8a      	ldr	r3, [pc, #552]	; (80068ac <long_turn_L180+0x2fc>)
 8006682:	4a93      	ldr	r2, [pc, #588]	; (80068d0 <long_turn_L180+0x320>)
 8006684:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 8006686:	4b8f      	ldr	r3, [pc, #572]	; (80068c4 <long_turn_L180+0x314>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 800668c:	4b8f      	ldr	r3, [pc, #572]	; (80068cc <long_turn_L180+0x31c>)
 800668e:	7b9a      	ldrb	r2, [r3, #14]
 8006690:	4b8a      	ldr	r3, [pc, #552]	; (80068bc <long_turn_L180+0x30c>)
 8006692:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 8006694:	4b8f      	ldr	r3, [pc, #572]	; (80068d4 <long_turn_L180+0x324>)
 8006696:	7b9a      	ldrb	r2, [r3, #14]
 8006698:	4b89      	ldr	r3, [pc, #548]	; (80068c0 <long_turn_L180+0x310>)
 800669a:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 34.56){
 800669c:	4b83      	ldr	r3, [pc, #524]	; (80068ac <long_turn_L180+0x2fc>)
 800669e:	ed93 7a00 	vldr	s14, [r3]
 80066a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80066a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066aa:	ee17 0a90 	vmov	r0, s15
 80066ae:	f7f9 ff53 	bl	8000558 <__aeabi_f2d>
 80066b2:	a36f      	add	r3, pc, #444	; (adr r3, 8006870 <long_turn_L180+0x2c0>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7fa fa18 	bl	8000aec <__aeabi_dcmplt>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ba      	bne.n	8006638 <long_turn_L180+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	60bb      	str	r3, [r7, #8]
 80066c8:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <long_turn_L180+0x328>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 80066ce:	4b78      	ldr	r3, [pc, #480]	; (80068b0 <long_turn_L180+0x300>)
 80066d0:	2202      	movs	r2, #2
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	4b81      	ldr	r3, [pc, #516]	; (80068dc <long_turn_L180+0x32c>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = LONG_TURN_SPEED;
 80066da:	4b76      	ldr	r3, [pc, #472]	; (80068b4 <long_turn_L180+0x304>)
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <long_turn_L180+0x330>)
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	4b75      	ldr	r3, [pc, #468]	; (80068b8 <long_turn_L180+0x308>)
 80066e2:	4a80      	ldr	r2, [pc, #512]	; (80068e4 <long_turn_L180+0x334>)
 80066e4:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 80066e6:	4b73      	ldr	r3, [pc, #460]	; (80068b4 <long_turn_L180+0x304>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]

	while(((180.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 80066ec:	bf00      	nop
 80066ee:	4b7a      	ldr	r3, [pc, #488]	; (80068d8 <long_turn_L180+0x328>)
 80066f0:	ed93 7a00 	vldr	s14, [r3]
 80066f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80066f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066fc:	ee17 0a90 	vmov	r0, s15
 8006700:	f7f9 ff2a 	bl	8000558 <__aeabi_f2d>
 8006704:	4603      	mov	r3, r0
 8006706:	460c      	mov	r4, r1
 8006708:	461a      	mov	r2, r3
 800670a:	4623      	mov	r3, r4
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	4975      	ldr	r1, [pc, #468]	; (80068e8 <long_turn_L180+0x338>)
 8006712:	f7f9 fdc1 	bl	8000298 <__aeabi_dsub>
 8006716:	4603      	mov	r3, r0
 8006718:	460c      	mov	r4, r1
 800671a:	4625      	mov	r5, r4
 800671c:	461c      	mov	r4, r3
 800671e:	4b66      	ldr	r3, [pc, #408]	; (80068b8 <long_turn_L180+0x308>)
 8006720:	ed93 7a00 	vldr	s14, [r3]
 8006724:	4b64      	ldr	r3, [pc, #400]	; (80068b8 <long_turn_L180+0x308>)
 8006726:	edd3 7a00 	vldr	s15, [r3]
 800672a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672e:	ee17 0a90 	vmov	r0, s15
 8006732:	f7f9 ff11 	bl	8000558 <__aeabi_f2d>
 8006736:	4680      	mov	r8, r0
 8006738:	4689      	mov	r9, r1
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7f9 ff0c 	bl	8000558 <__aeabi_f2d>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	f7f9 fdaa 	bl	800029c <__adddf3>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7fa f884 	bl	800085c <__aeabi_ddiv>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <long_turn_L180+0x338>)
 8006762:	f7f9 ff51 	bl	8000608 <__aeabi_dmul>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	a342      	add	r3, pc, #264	; (adr r3, 8006878 <long_turn_L180+0x2c8>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f7fa f872 	bl	800085c <__aeabi_ddiv>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7fa f9d2 	bl	8000b28 <__aeabi_dcmpgt>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1b1      	bne.n	80066ee <long_turn_L180+0x13e>

	omega_accel = -omega_acc;
 800678a:	edd7 7a01 	vldr	s15, [r7, #4]
 800678e:	eef1 7a67 	vneg.f32	s15, s15
 8006792:	4b48      	ldr	r3, [pc, #288]	; (80068b4 <long_turn_L180+0x304>)
 8006794:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 180.0 ){
 8006798:	e014      	b.n	80067c4 <long_turn_L180+0x214>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 800679a:	4b54      	ldr	r3, [pc, #336]	; (80068ec <long_turn_L180+0x33c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 feda 	bl	8000558 <__aeabi_f2d>
 80067a4:	a336      	add	r3, pc, #216	; (adr r3, 8006880 <long_turn_L180+0x2d0>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7fa f99f 	bl	8000aec <__aeabi_dcmplt>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d100      	bne.n	80067b6 <long_turn_L180+0x206>
 80067b4:	e006      	b.n	80067c4 <long_turn_L180+0x214>
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <long_turn_L180+0x33c>)
 80067b8:	4a4d      	ldr	r2, [pc, #308]	; (80068f0 <long_turn_L180+0x340>)
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	4b3d      	ldr	r3, [pc, #244]	; (80068b4 <long_turn_L180+0x304>)
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 180.0 ){
 80067c4:	4b44      	ldr	r3, [pc, #272]	; (80068d8 <long_turn_L180+0x328>)
 80067c6:	ed93 7a00 	vldr	s14, [r3]
 80067ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80067ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80068f4 <long_turn_L180+0x344>
 80067d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	d4dc      	bmi.n	800679a <long_turn_L180+0x1ea>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 80067e0:	4b32      	ldr	r3, [pc, #200]	; (80068ac <long_turn_L180+0x2fc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <long_turn_L180+0x300>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <long_turn_L180+0x2ec>)
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <long_turn_L180+0x2f0>)
 80067f6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <long_turn_L180+0x2f4>)
 80067fe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006802:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8006804:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <long_turn_L180+0x304>)
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	4b2a      	ldr	r3, [pc, #168]	; (80068b8 <long_turn_L180+0x308>)
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	4b35      	ldr	r3, [pc, #212]	; (80068ec <long_turn_L180+0x33c>)
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 800681c:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <long_turn_L180+0x2f8>)
 800681e:	2201      	movs	r2, #1
 8006820:	771a      	strb	r2, [r3, #28]
 8006822:	4b2a      	ldr	r3, [pc, #168]	; (80068cc <long_turn_L180+0x31c>)
 8006824:	2200      	movs	r2, #0
 8006826:	819a      	strh	r2, [r3, #12]
 8006828:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <long_turn_L180+0x324>)
 800682a:	2200      	movs	r2, #0
 800682c:	819a      	strh	r2, [r3, #12]

	while((len_mouse - local_length)< 34.56);
 800682e:	bf00      	nop
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <long_turn_L180+0x2fc>)
 8006832:	ed93 7a00 	vldr	s14, [r3]
 8006836:	edd7 7a03 	vldr	s15, [r7, #12]
 800683a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800683e:	ee17 0a90 	vmov	r0, s15
 8006842:	f7f9 fe89 	bl	8000558 <__aeabi_f2d>
 8006846:	a30a      	add	r3, pc, #40	; (adr r3, 8006870 <long_turn_L180+0x2c0>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f7fa f94e 	bl	8000aec <__aeabi_dcmplt>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ec      	bne.n	8006830 <long_turn_L180+0x280>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <long_turn_L180+0x2fc>)
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <long_turn_L180+0x300>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800686e:	bf00      	nop
 8006870:	147ae148 	.word	0x147ae148
 8006874:	404147ae 	.word	0x404147ae
 8006878:	fc8b007a 	.word	0xfc8b007a
 800687c:	400921fa 	.word	0x400921fa
 8006880:	306f3395 	.word	0x306f3395
 8006884:	3fc41b2f 	.word	0x3fc41b2f
 8006888:	2000d224 	.word	0x2000d224
 800688c:	2000821c 	.word	0x2000821c
 8006890:	2000d210 	.word	0x2000d210
 8006894:	2000d1d8 	.word	0x2000d1d8
 8006898:	200004ec 	.word	0x200004ec
 800689c:	2000a16c 	.word	0x2000a16c
 80068a0:	2000d05c 	.word	0x2000d05c
 80068a4:	2000d198 	.word	0x2000d198
 80068a8:	20012398 	.word	0x20012398
 80068ac:	200123b8 	.word	0x200123b8
 80068b0:	2000a170 	.word	0x2000a170
 80068b4:	200002dc 	.word	0x200002dc
 80068b8:	20008208 	.word	0x20008208
 80068bc:	2000d22c 	.word	0x2000d22c
 80068c0:	20010454 	.word	0x20010454
 80068c4:	20002438 	.word	0x20002438
 80068c8:	2000f490 	.word	0x2000f490
 80068cc:	2000f480 	.word	0x2000f480
 80068d0:	41700000 	.word	0x41700000
 80068d4:	2000d064 	.word	0x2000d064
 80068d8:	2001044c 	.word	0x2001044c
 80068dc:	20008218 	.word	0x20008218
 80068e0:	437b53ce 	.word	0x437b53ce
 80068e4:	4134f4a9 	.word	0x4134f4a9
 80068e8:	40668000 	.word	0x40668000
 80068ec:	2000d43c 	.word	0x2000d43c
 80068f0:	3e20d97a 	.word	0x3e20d97a
 80068f4:	43340000 	.word	0x43340000

080068f8 <in_L45>:

void in_L45(){
 80068f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8006900:	4bb1      	ldr	r3, [pc, #708]	; (8006bc8 <in_L45+0x2d0>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8006906:	4bb1      	ldr	r3, [pc, #708]	; (8006bcc <in_L45+0x2d4>)
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	4bb0      	ldr	r3, [pc, #704]	; (8006bd0 <in_L45+0x2d8>)
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8006916:	4baf      	ldr	r3, [pc, #700]	; (8006bd4 <in_L45+0x2dc>)
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	4bae      	ldr	r3, [pc, #696]	; (8006bd8 <in_L45+0x2e0>)
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 800692c:	4bab      	ldr	r3, [pc, #684]	; (8006bdc <in_L45+0x2e4>)
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	4baa      	ldr	r3, [pc, #680]	; (8006be0 <in_L45+0x2e8>)
 8006936:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	4ba9      	ldr	r3, [pc, #676]	; (8006be4 <in_L45+0x2ec>)
 800693e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006942:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 8006944:	4ba8      	ldr	r3, [pc, #672]	; (8006be8 <in_L45+0x2f0>)
 8006946:	2201      	movs	r2, #1
 8006948:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 800694a:	4ba8      	ldr	r3, [pc, #672]	; (8006bec <in_L45+0x2f4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	4ba7      	ldr	r3, [pc, #668]	; (8006bf0 <in_L45+0x2f8>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8006956:	4ba7      	ldr	r3, [pc, #668]	; (8006bf4 <in_L45+0x2fc>)
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	4ba6      	ldr	r3, [pc, #664]	; (8006bf8 <in_L45+0x300>)
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8006966:	4ba5      	ldr	r3, [pc, #660]	; (8006bfc <in_L45+0x304>)
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	4ba4      	ldr	r3, [pc, #656]	; (8006c00 <in_L45+0x308>)
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	4ba4      	ldr	r3, [pc, #656]	; (8006c04 <in_L45+0x30c>)
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	4ba3      	ldr	r3, [pc, #652]	; (8006c08 <in_L45+0x310>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
	//while((len_mouse - local_length)< 15.3){
	while((len_mouse - local_length)< 17.94){
 800697e:	e031      	b.n	80069e4 <in_L45+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8006980:	4ba2      	ldr	r3, [pc, #648]	; (8006c0c <in_L45+0x314>)
 8006982:	7b9b      	ldrb	r3, [r3, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d110      	bne.n	80069aa <in_L45+0xb2>
 8006988:	4b9c      	ldr	r3, [pc, #624]	; (8006bfc <in_L45+0x304>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10c      	bne.n	80069aa <in_L45+0xb2>
 8006990:	4b9c      	ldr	r3, [pc, #624]	; (8006c04 <in_L45+0x30c>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <in_L45+0xb2>
			local_length = 0.0;
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 800699e:	4b93      	ldr	r3, [pc, #588]	; (8006bec <in_L45+0x2f4>)
 80069a0:	4a9b      	ldr	r2, [pc, #620]	; (8006c10 <in_L45+0x318>)
 80069a2:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 80069a4:	4b97      	ldr	r3, [pc, #604]	; (8006c04 <in_L45+0x30c>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 80069aa:	4b9a      	ldr	r3, [pc, #616]	; (8006c14 <in_L45+0x31c>)
 80069ac:	7b9b      	ldrb	r3, [r3, #14]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d110      	bne.n	80069d4 <in_L45+0xdc>
 80069b2:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <in_L45+0x308>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10c      	bne.n	80069d4 <in_L45+0xdc>
 80069ba:	4b92      	ldr	r3, [pc, #584]	; (8006c04 <in_L45+0x30c>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <in_L45+0xdc>
	    	local_length = 0.0;
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 80069c8:	4b88      	ldr	r3, [pc, #544]	; (8006bec <in_L45+0x2f4>)
 80069ca:	4a91      	ldr	r2, [pc, #580]	; (8006c10 <in_L45+0x318>)
 80069cc:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 80069ce:	4b8d      	ldr	r3, [pc, #564]	; (8006c04 <in_L45+0x30c>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 80069d4:	4b8d      	ldr	r3, [pc, #564]	; (8006c0c <in_L45+0x314>)
 80069d6:	7b9a      	ldrb	r2, [r3, #14]
 80069d8:	4b88      	ldr	r3, [pc, #544]	; (8006bfc <in_L45+0x304>)
 80069da:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 80069dc:	4b8d      	ldr	r3, [pc, #564]	; (8006c14 <in_L45+0x31c>)
 80069de:	7b9a      	ldrb	r2, [r3, #14]
 80069e0:	4b87      	ldr	r3, [pc, #540]	; (8006c00 <in_L45+0x308>)
 80069e2:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 17.94){
 80069e4:	4b81      	ldr	r3, [pc, #516]	; (8006bec <in_L45+0x2f4>)
 80069e6:	ed93 7a00 	vldr	s14, [r3]
 80069ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80069ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069f2:	ee17 0a90 	vmov	r0, s15
 80069f6:	f7f9 fdaf 	bl	8000558 <__aeabi_f2d>
 80069fa:	a36b      	add	r3, pc, #428	; (adr r3, 8006ba8 <in_L45+0x2b0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7fa f874 	bl	8000aec <__aeabi_dcmplt>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ba      	bne.n	8006980 <in_L45+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <in_L45+0x320>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8006a16:	4b76      	ldr	r3, [pc, #472]	; (8006bf0 <in_L45+0x2f8>)
 8006a18:	2202      	movs	r2, #2
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	4b7f      	ldr	r3, [pc, #508]	; (8006c1c <in_L45+0x324>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
	omega_accel = D45_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 8006a22:	4b74      	ldr	r3, [pc, #464]	; (8006bf4 <in_L45+0x2fc>)
 8006a24:	4a7e      	ldr	r2, [pc, #504]	; (8006c20 <in_L45+0x328>)
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	4b73      	ldr	r3, [pc, #460]	; (8006bf8 <in_L45+0x300>)
 8006a2a:	4a7e      	ldr	r2, [pc, #504]	; (8006c24 <in_L45+0x32c>)
 8006a2c:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8006a2e:	4b71      	ldr	r3, [pc, #452]	; (8006bf4 <in_L45+0x2fc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	607b      	str	r3, [r7, #4]

	while(((45.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8006a34:	bf00      	nop
 8006a36:	4b78      	ldr	r3, [pc, #480]	; (8006c18 <in_L45+0x320>)
 8006a38:	ed93 7a00 	vldr	s14, [r3]
 8006a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a44:	ee17 0a90 	vmov	r0, s15
 8006a48:	f7f9 fd86 	bl	8000558 <__aeabi_f2d>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	461a      	mov	r2, r3
 8006a52:	4623      	mov	r3, r4
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	4973      	ldr	r1, [pc, #460]	; (8006c28 <in_L45+0x330>)
 8006a5a:	f7f9 fc1d 	bl	8000298 <__aeabi_dsub>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	4625      	mov	r5, r4
 8006a64:	461c      	mov	r4, r3
 8006a66:	4b64      	ldr	r3, [pc, #400]	; (8006bf8 <in_L45+0x300>)
 8006a68:	ed93 7a00 	vldr	s14, [r3]
 8006a6c:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <in_L45+0x300>)
 8006a6e:	edd3 7a00 	vldr	s15, [r3]
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	ee17 0a90 	vmov	r0, s15
 8006a7a:	f7f9 fd6d 	bl	8000558 <__aeabi_f2d>
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4689      	mov	r9, r1
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7f9 fd68 	bl	8000558 <__aeabi_f2d>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	f7f9 fc06 	bl	800029c <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 fee0 	bl	800085c <__aeabi_ddiv>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	4b60      	ldr	r3, [pc, #384]	; (8006c2c <in_L45+0x334>)
 8006aaa:	f7f9 fdad 	bl	8000608 <__aeabi_dmul>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8006bb0 <in_L45+0x2b8>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fece 	bl	800085c <__aeabi_ddiv>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7fa f82e 	bl	8000b28 <__aeabi_dcmpgt>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1b1      	bne.n	8006a36 <in_L45+0x13e>

	omega_accel = -omega_acc;
 8006ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ad6:	eef1 7a67 	vneg.f32	s15, s15
 8006ada:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <in_L45+0x2fc>)
 8006adc:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 45.0 ){
 8006ae0:	e014      	b.n	8006b0c <in_L45+0x214>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8006ae2:	4b53      	ldr	r3, [pc, #332]	; (8006c30 <in_L45+0x338>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7f9 fd36 	bl	8000558 <__aeabi_f2d>
 8006aec:	a332      	add	r3, pc, #200	; (adr r3, 8006bb8 <in_L45+0x2c0>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fffb 	bl	8000aec <__aeabi_dcmplt>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d100      	bne.n	8006afe <in_L45+0x206>
 8006afc:	e006      	b.n	8006b0c <in_L45+0x214>
 8006afe:	4b4c      	ldr	r3, [pc, #304]	; (8006c30 <in_L45+0x338>)
 8006b00:	4a4c      	ldr	r2, [pc, #304]	; (8006c34 <in_L45+0x33c>)
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	4b3b      	ldr	r3, [pc, #236]	; (8006bf4 <in_L45+0x2fc>)
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 45.0 ){
 8006b0c:	4b42      	ldr	r3, [pc, #264]	; (8006c18 <in_L45+0x320>)
 8006b0e:	ed93 7a00 	vldr	s14, [r3]
 8006b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b1a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006c38 <in_L45+0x340>
 8006b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b26:	d4dc      	bmi.n	8006ae2 <in_L45+0x1ea>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8006b28:	4b30      	ldr	r3, [pc, #192]	; (8006bec <in_L45+0x2f4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4b30      	ldr	r3, [pc, #192]	; (8006bf0 <in_L45+0x2f8>)
 8006b30:	2203      	movs	r2, #3
 8006b32:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <in_L45+0x2e4>)
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <in_L45+0x2e8>)
 8006b3e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <in_L45+0x2ec>)
 8006b46:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006b4a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8006b4c:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <in_L45+0x2fc>)
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	4b28      	ldr	r3, [pc, #160]	; (8006bf8 <in_L45+0x300>)
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <in_L45+0x338>)
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 34.48);
	while((len_mouse - local_length)< 37.05);
 8006b64:	bf00      	nop
 8006b66:	4b21      	ldr	r3, [pc, #132]	; (8006bec <in_L45+0x2f4>)
 8006b68:	ed93 7a00 	vldr	s14, [r3]
 8006b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b74:	ee17 0a90 	vmov	r0, s15
 8006b78:	f7f9 fcee 	bl	8000558 <__aeabi_f2d>
 8006b7c:	a310      	add	r3, pc, #64	; (adr r3, 8006bc0 <in_L45+0x2c8>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 ffb3 	bl	8000aec <__aeabi_dcmplt>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1ec      	bne.n	8006b66 <in_L45+0x26e>

	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 8006b8c:	4b17      	ldr	r3, [pc, #92]	; (8006bec <in_L45+0x2f4>)
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <in_L45+0x2f8>)
 8006b96:	2203      	movs	r2, #3
 8006b98:	601a      	str	r2, [r3, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	d70a3d71 	.word	0xd70a3d71
 8006bac:	4031f0a3 	.word	0x4031f0a3
 8006bb0:	fc8b007a 	.word	0xfc8b007a
 8006bb4:	400921fa 	.word	0x400921fa
 8006bb8:	306f3395 	.word	0x306f3395
 8006bbc:	3fc41b2f 	.word	0x3fc41b2f
 8006bc0:	66666666 	.word	0x66666666
 8006bc4:	40428666 	.word	0x40428666
 8006bc8:	2000d224 	.word	0x2000d224
 8006bcc:	2000821c 	.word	0x2000821c
 8006bd0:	2000d210 	.word	0x2000d210
 8006bd4:	2000d1d8 	.word	0x2000d1d8
 8006bd8:	200004ec 	.word	0x200004ec
 8006bdc:	2000a16c 	.word	0x2000a16c
 8006be0:	2000d05c 	.word	0x2000d05c
 8006be4:	2000d198 	.word	0x2000d198
 8006be8:	20012398 	.word	0x20012398
 8006bec:	200123b8 	.word	0x200123b8
 8006bf0:	2000a170 	.word	0x2000a170
 8006bf4:	200002dc 	.word	0x200002dc
 8006bf8:	20008208 	.word	0x20008208
 8006bfc:	2000d22c 	.word	0x2000d22c
 8006c00:	20010454 	.word	0x20010454
 8006c04:	20002438 	.word	0x20002438
 8006c08:	2000f490 	.word	0x2000f490
 8006c0c:	2000f480 	.word	0x2000f480
 8006c10:	41700000 	.word	0x41700000
 8006c14:	2000d064 	.word	0x2000d064
 8006c18:	2001044c 	.word	0x2001044c
 8006c1c:	20008218 	.word	0x20008218
 8006c20:	439d1461 	.word	0x439d1461
 8006c24:	41490fd8 	.word	0x41490fd8
 8006c28:	40468000 	.word	0x40468000
 8006c2c:	40668000 	.word	0x40668000
 8006c30:	2000d43c 	.word	0x2000d43c
 8006c34:	3e20d97a 	.word	0x3e20d97a
 8006c38:	42340000 	.word	0x42340000
 8006c3c:	00000000 	.word	0x00000000

08006c40 <out_L45>:

void out_L45(){
 8006c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8006c48:	4b95      	ldr	r3, [pc, #596]	; (8006ea0 <out_L45+0x260>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8006c4e:	4b95      	ldr	r3, [pc, #596]	; (8006ea4 <out_L45+0x264>)
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	4b94      	ldr	r3, [pc, #592]	; (8006ea8 <out_L45+0x268>)
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8006c5e:	4b93      	ldr	r3, [pc, #588]	; (8006eac <out_L45+0x26c>)
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	4b92      	ldr	r3, [pc, #584]	; (8006eb0 <out_L45+0x270>)
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8006c74:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <out_L45+0x274>)
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	4b8e      	ldr	r3, [pc, #568]	; (8006eb8 <out_L45+0x278>)
 8006c7e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <out_L45+0x27c>)
 8006c86:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006c8a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8006c8c:	4b8c      	ldr	r3, [pc, #560]	; (8006ec0 <out_L45+0x280>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	771a      	strb	r2, [r3, #28]
 8006c92:	4b8c      	ldr	r3, [pc, #560]	; (8006ec4 <out_L45+0x284>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	819a      	strh	r2, [r3, #12]
 8006c98:	4b8b      	ldr	r3, [pc, #556]	; (8006ec8 <out_L45+0x288>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8006c9e:	4b8b      	ldr	r3, [pc, #556]	; (8006ecc <out_L45+0x28c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4b8a      	ldr	r3, [pc, #552]	; (8006ed0 <out_L45+0x290>)
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8006caa:	4b8a      	ldr	r3, [pc, #552]	; (8006ed4 <out_L45+0x294>)
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	4b89      	ldr	r3, [pc, #548]	; (8006ed8 <out_L45+0x298>)
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 34.48);
 8006cba:	bf00      	nop
 8006cbc:	4b83      	ldr	r3, [pc, #524]	; (8006ecc <out_L45+0x28c>)
 8006cbe:	ed93 7a00 	vldr	s14, [r3]
 8006cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cca:	ee17 0a90 	vmov	r0, s15
 8006cce:	f7f9 fc43 	bl	8000558 <__aeabi_f2d>
 8006cd2:	a36b      	add	r3, pc, #428	; (adr r3, 8006e80 <out_L45+0x240>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 ff08 	bl	8000aec <__aeabi_dcmplt>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ec      	bne.n	8006cbc <out_L45+0x7c>

	float local_degree = 0.0;	local_degree = tar_degree;
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	4b7c      	ldr	r3, [pc, #496]	; (8006edc <out_L45+0x29c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8006cee:	4b78      	ldr	r3, [pc, #480]	; (8006ed0 <out_L45+0x290>)
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	4b7a      	ldr	r3, [pc, #488]	; (8006ee0 <out_L45+0x2a0>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 8006cfa:	4b76      	ldr	r3, [pc, #472]	; (8006ed4 <out_L45+0x294>)
 8006cfc:	4a79      	ldr	r2, [pc, #484]	; (8006ee4 <out_L45+0x2a4>)
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	4b75      	ldr	r3, [pc, #468]	; (8006ed8 <out_L45+0x298>)
 8006d02:	4a79      	ldr	r2, [pc, #484]	; (8006ee8 <out_L45+0x2a8>)
 8006d04:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8006d06:	4b73      	ldr	r3, [pc, #460]	; (8006ed4 <out_L45+0x294>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	607b      	str	r3, [r7, #4]

	while(((45.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8006d0c:	bf00      	nop
 8006d0e:	4b73      	ldr	r3, [pc, #460]	; (8006edc <out_L45+0x29c>)
 8006d10:	ed93 7a00 	vldr	s14, [r3]
 8006d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1c:	ee17 0a90 	vmov	r0, s15
 8006d20:	f7f9 fc1a 	bl	8000558 <__aeabi_f2d>
 8006d24:	4603      	mov	r3, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	f04f 0000 	mov.w	r0, #0
 8006d30:	496e      	ldr	r1, [pc, #440]	; (8006eec <out_L45+0x2ac>)
 8006d32:	f7f9 fab1 	bl	8000298 <__aeabi_dsub>
 8006d36:	4603      	mov	r3, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	4625      	mov	r5, r4
 8006d3c:	461c      	mov	r4, r3
 8006d3e:	4b66      	ldr	r3, [pc, #408]	; (8006ed8 <out_L45+0x298>)
 8006d40:	ed93 7a00 	vldr	s14, [r3]
 8006d44:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <out_L45+0x298>)
 8006d46:	edd3 7a00 	vldr	s15, [r3]
 8006d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4e:	ee17 0a90 	vmov	r0, s15
 8006d52:	f7f9 fc01 	bl	8000558 <__aeabi_f2d>
 8006d56:	4680      	mov	r8, r0
 8006d58:	4689      	mov	r9, r1
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7f9 fbfc 	bl	8000558 <__aeabi_f2d>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	f7f9 fa9a 	bl	800029c <__adddf3>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	4649      	mov	r1, r9
 8006d70:	f7f9 fd74 	bl	800085c <__aeabi_ddiv>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	4b5b      	ldr	r3, [pc, #364]	; (8006ef0 <out_L45+0x2b0>)
 8006d82:	f7f9 fc41 	bl	8000608 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	a33e      	add	r3, pc, #248	; (adr r3, 8006e88 <out_L45+0x248>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fd62 	bl	800085c <__aeabi_ddiv>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fec2 	bl	8000b28 <__aeabi_dcmpgt>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1b1      	bne.n	8006d0e <out_L45+0xce>

	omega_accel = -omega_acc;
 8006daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dae:	eef1 7a67 	vneg.f32	s15, s15
 8006db2:	4b48      	ldr	r3, [pc, #288]	; (8006ed4 <out_L45+0x294>)
 8006db4:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 45.0 ){
 8006db8:	e014      	b.n	8006de4 <out_L45+0x1a4>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8006dba:	4b4e      	ldr	r3, [pc, #312]	; (8006ef4 <out_L45+0x2b4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 fbca 	bl	8000558 <__aeabi_f2d>
 8006dc4:	a332      	add	r3, pc, #200	; (adr r3, 8006e90 <out_L45+0x250>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fe8f 	bl	8000aec <__aeabi_dcmplt>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d100      	bne.n	8006dd6 <out_L45+0x196>
 8006dd4:	e006      	b.n	8006de4 <out_L45+0x1a4>
 8006dd6:	4b47      	ldr	r3, [pc, #284]	; (8006ef4 <out_L45+0x2b4>)
 8006dd8:	4a47      	ldr	r2, [pc, #284]	; (8006ef8 <out_L45+0x2b8>)
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <out_L45+0x294>)
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 45.0 ){
 8006de4:	4b3d      	ldr	r3, [pc, #244]	; (8006edc <out_L45+0x29c>)
 8006de6:	ed93 7a00 	vldr	s14, [r3]
 8006dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8006dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006efc <out_L45+0x2bc>
 8006df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfe:	d4dc      	bmi.n	8006dba <out_L45+0x17a>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8006e00:	4b32      	ldr	r3, [pc, #200]	; (8006ecc <out_L45+0x28c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <out_L45+0x290>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <out_L45+0x274>)
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <out_L45+0x278>)
 8006e16:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <out_L45+0x27c>)
 8006e1e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006e22:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8006e24:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <out_L45+0x294>)
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ed8 <out_L45+0x298>)
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	4b2f      	ldr	r3, [pc, #188]	; (8006ef4 <out_L45+0x2b4>)
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 15.3);
 8006e3c:	bf00      	nop
 8006e3e:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <out_L45+0x28c>)
 8006e40:	ed93 7a00 	vldr	s14, [r3]
 8006e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e4c:	ee17 0a90 	vmov	r0, s15
 8006e50:	f7f9 fb82 	bl	8000558 <__aeabi_f2d>
 8006e54:	a310      	add	r3, pc, #64	; (adr r3, 8006e98 <out_L45+0x258>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 fe47 	bl	8000aec <__aeabi_dcmplt>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ec      	bne.n	8006e3e <out_L45+0x1fe>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 8006e64:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <out_L45+0x28c>)
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	4b18      	ldr	r3, [pc, #96]	; (8006ed0 <out_L45+0x290>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e7c:	f3af 8000 	nop.w
 8006e80:	a3d70a3d 	.word	0xa3d70a3d
 8006e84:	40413d70 	.word	0x40413d70
 8006e88:	fc8b007a 	.word	0xfc8b007a
 8006e8c:	400921fa 	.word	0x400921fa
 8006e90:	306f3395 	.word	0x306f3395
 8006e94:	3fc41b2f 	.word	0x3fc41b2f
 8006e98:	9999999a 	.word	0x9999999a
 8006e9c:	402e9999 	.word	0x402e9999
 8006ea0:	2000d224 	.word	0x2000d224
 8006ea4:	2000821c 	.word	0x2000821c
 8006ea8:	2000d210 	.word	0x2000d210
 8006eac:	2000d1d8 	.word	0x2000d1d8
 8006eb0:	200004ec 	.word	0x200004ec
 8006eb4:	2000a16c 	.word	0x2000a16c
 8006eb8:	2000d05c 	.word	0x2000d05c
 8006ebc:	2000d198 	.word	0x2000d198
 8006ec0:	20012398 	.word	0x20012398
 8006ec4:	2000f480 	.word	0x2000f480
 8006ec8:	2000d064 	.word	0x2000d064
 8006ecc:	200123b8 	.word	0x200123b8
 8006ed0:	2000a170 	.word	0x2000a170
 8006ed4:	200002dc 	.word	0x200002dc
 8006ed8:	20008208 	.word	0x20008208
 8006edc:	2001044c 	.word	0x2001044c
 8006ee0:	20008218 	.word	0x20008218
 8006ee4:	437b53ce 	.word	0x437b53ce
 8006ee8:	41490fd8 	.word	0x41490fd8
 8006eec:	40468000 	.word	0x40468000
 8006ef0:	40668000 	.word	0x40668000
 8006ef4:	2000d43c 	.word	0x2000d43c
 8006ef8:	3e20d97a 	.word	0x3e20d97a
 8006efc:	42340000 	.word	0x42340000

08006f00 <in_R45>:

void in_R45(){
 8006f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8006f08:	4baf      	ldr	r3, [pc, #700]	; (80071c8 <in_R45+0x2c8>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8006f0e:	4baf      	ldr	r3, [pc, #700]	; (80071cc <in_R45+0x2cc>)
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	4bae      	ldr	r3, [pc, #696]	; (80071d0 <in_R45+0x2d0>)
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8006f1e:	4bad      	ldr	r3, [pc, #692]	; (80071d4 <in_R45+0x2d4>)
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	4bac      	ldr	r3, [pc, #688]	; (80071d8 <in_R45+0x2d8>)
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8006f34:	4ba9      	ldr	r3, [pc, #676]	; (80071dc <in_R45+0x2dc>)
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	4ba8      	ldr	r3, [pc, #672]	; (80071e0 <in_R45+0x2e0>)
 8006f3e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	4ba7      	ldr	r3, [pc, #668]	; (80071e4 <in_R45+0x2e4>)
 8006f46:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006f4a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;//	sen_r.cnt = 0;	sen_l.cnt = 0;
 8006f4c:	4ba6      	ldr	r3, [pc, #664]	; (80071e8 <in_R45+0x2e8>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8006f52:	4ba6      	ldr	r3, [pc, #664]	; (80071ec <in_R45+0x2ec>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	4ba5      	ldr	r3, [pc, #660]	; (80071f0 <in_R45+0x2f0>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8006f5e:	4ba5      	ldr	r3, [pc, #660]	; (80071f4 <in_R45+0x2f4>)
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	4ba4      	ldr	r3, [pc, #656]	; (80071f8 <in_R45+0x2f8>)
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8006f6e:	4ba3      	ldr	r3, [pc, #652]	; (80071fc <in_R45+0x2fc>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	4ba2      	ldr	r3, [pc, #648]	; (8007200 <in_R45+0x300>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	4ba2      	ldr	r3, [pc, #648]	; (8007204 <in_R45+0x304>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	4ba1      	ldr	r3, [pc, #644]	; (8007208 <in_R45+0x308>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	//while((len_mouse - local_length)< 15.3){
	while((len_mouse - local_length)< 17.94){
 8006f86:	e031      	b.n	8006fec <in_R45+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8006f88:	4ba0      	ldr	r3, [pc, #640]	; (800720c <in_R45+0x30c>)
 8006f8a:	7b9b      	ldrb	r3, [r3, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d110      	bne.n	8006fb2 <in_R45+0xb2>
 8006f90:	4b9a      	ldr	r3, [pc, #616]	; (80071fc <in_R45+0x2fc>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10c      	bne.n	8006fb2 <in_R45+0xb2>
 8006f98:	4b9a      	ldr	r3, [pc, #616]	; (8007204 <in_R45+0x304>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <in_R45+0xb2>
			local_length = 0.0;
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 8006fa6:	4b91      	ldr	r3, [pc, #580]	; (80071ec <in_R45+0x2ec>)
 8006fa8:	4a99      	ldr	r2, [pc, #612]	; (8007210 <in_R45+0x310>)
 8006faa:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 8006fac:	4b95      	ldr	r3, [pc, #596]	; (8007204 <in_R45+0x304>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 8006fb2:	4b98      	ldr	r3, [pc, #608]	; (8007214 <in_R45+0x314>)
 8006fb4:	7b9b      	ldrb	r3, [r3, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d110      	bne.n	8006fdc <in_R45+0xdc>
 8006fba:	4b91      	ldr	r3, [pc, #580]	; (8007200 <in_R45+0x300>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10c      	bne.n	8006fdc <in_R45+0xdc>
 8006fc2:	4b90      	ldr	r3, [pc, #576]	; (8007204 <in_R45+0x304>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d108      	bne.n	8006fdc <in_R45+0xdc>
	    	local_length = 0.0;
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8006fd0:	4b86      	ldr	r3, [pc, #536]	; (80071ec <in_R45+0x2ec>)
 8006fd2:	4a8f      	ldr	r2, [pc, #572]	; (8007210 <in_R45+0x310>)
 8006fd4:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 8006fd6:	4b8b      	ldr	r3, [pc, #556]	; (8007204 <in_R45+0x304>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 8006fdc:	4b8b      	ldr	r3, [pc, #556]	; (800720c <in_R45+0x30c>)
 8006fde:	7b9a      	ldrb	r2, [r3, #14]
 8006fe0:	4b86      	ldr	r3, [pc, #536]	; (80071fc <in_R45+0x2fc>)
 8006fe2:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 8006fe4:	4b8b      	ldr	r3, [pc, #556]	; (8007214 <in_R45+0x314>)
 8006fe6:	7b9a      	ldrb	r2, [r3, #14]
 8006fe8:	4b85      	ldr	r3, [pc, #532]	; (8007200 <in_R45+0x300>)
 8006fea:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 17.94){
 8006fec:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <in_R45+0x2ec>)
 8006fee:	ed93 7a00 	vldr	s14, [r3]
 8006ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ffa:	ee17 0a90 	vmov	r0, s15
 8006ffe:	f7f9 faab 	bl	8000558 <__aeabi_f2d>
 8007002:	a369      	add	r3, pc, #420	; (adr r3, 80071a8 <in_R45+0x2a8>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f7f9 fd70 	bl	8000aec <__aeabi_dcmplt>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ba      	bne.n	8006f88 <in_R45+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	4b7f      	ldr	r3, [pc, #508]	; (8007218 <in_R45+0x318>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 800701e:	4b74      	ldr	r3, [pc, #464]	; (80071f0 <in_R45+0x2f0>)
 8007020:	2202      	movs	r2, #2
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	4b7d      	ldr	r3, [pc, #500]	; (800721c <in_R45+0x31c>)
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
	omega_accel = -D45_TURN_ACCEL;; max_omega = -SLA_SEARCH_TURN_SPEED;
 800702a:	4b72      	ldr	r3, [pc, #456]	; (80071f4 <in_R45+0x2f4>)
 800702c:	4a7c      	ldr	r2, [pc, #496]	; (8007220 <in_R45+0x320>)
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	4b71      	ldr	r3, [pc, #452]	; (80071f8 <in_R45+0x2f8>)
 8007032:	4a7c      	ldr	r2, [pc, #496]	; (8007224 <in_R45+0x324>)
 8007034:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8007036:	4b6f      	ldr	r3, [pc, #444]	; (80071f4 <in_R45+0x2f4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	607b      	str	r3, [r7, #4]

	while(((-45.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 800703c:	bf00      	nop
 800703e:	4b76      	ldr	r3, [pc, #472]	; (8007218 <in_R45+0x318>)
 8007040:	ed93 7a00 	vldr	s14, [r3]
 8007044:	edd7 7a02 	vldr	s15, [r7, #8]
 8007048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800704c:	ee17 0a90 	vmov	r0, s15
 8007050:	f7f9 fa82 	bl	8000558 <__aeabi_f2d>
 8007054:	4603      	mov	r3, r0
 8007056:	460c      	mov	r4, r1
 8007058:	461a      	mov	r2, r3
 800705a:	4623      	mov	r3, r4
 800705c:	f04f 0000 	mov.w	r0, #0
 8007060:	4971      	ldr	r1, [pc, #452]	; (8007228 <in_R45+0x328>)
 8007062:	f7f9 f919 	bl	8000298 <__aeabi_dsub>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	4625      	mov	r5, r4
 800706c:	461c      	mov	r4, r3
 800706e:	4b62      	ldr	r3, [pc, #392]	; (80071f8 <in_R45+0x2f8>)
 8007070:	ed93 7a00 	vldr	s14, [r3]
 8007074:	4b60      	ldr	r3, [pc, #384]	; (80071f8 <in_R45+0x2f8>)
 8007076:	edd3 7a00 	vldr	s15, [r3]
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	ee17 0a90 	vmov	r0, s15
 8007082:	f7f9 fa69 	bl	8000558 <__aeabi_f2d>
 8007086:	4680      	mov	r8, r0
 8007088:	4689      	mov	r9, r1
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7f9 fa64 	bl	8000558 <__aeabi_f2d>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	f7f9 f902 	bl	800029c <__adddf3>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4640      	mov	r0, r8
 800709e:	4649      	mov	r1, r9
 80070a0:	f7f9 fbdc 	bl	800085c <__aeabi_ddiv>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4610      	mov	r0, r2
 80070aa:	4619      	mov	r1, r3
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	4b5e      	ldr	r3, [pc, #376]	; (800722c <in_R45+0x32c>)
 80070b2:	f7f9 faa9 	bl	8000608 <__aeabi_dmul>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	a33c      	add	r3, pc, #240	; (adr r3, 80071b0 <in_R45+0x2b0>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 fbca 	bl	800085c <__aeabi_ddiv>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1b1      	bne.n	800703e <in_R45+0x13e>

	omega_accel = D45_TURN_ACCEL;;
 80070da:	4b46      	ldr	r3, [pc, #280]	; (80071f4 <in_R45+0x2f4>)
 80070dc:	4a54      	ldr	r2, [pc, #336]	; (8007230 <in_R45+0x330>)
 80070de:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -45.0 ){
 80070e0:	e014      	b.n	800710c <in_R45+0x20c>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 80070e2:	4b54      	ldr	r3, [pc, #336]	; (8007234 <in_R45+0x334>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7f9 fa36 	bl	8000558 <__aeabi_f2d>
 80070ec:	a332      	add	r3, pc, #200	; (adr r3, 80071b8 <in_R45+0x2b8>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 fd19 	bl	8000b28 <__aeabi_dcmpgt>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d100      	bne.n	80070fe <in_R45+0x1fe>
 80070fc:	e006      	b.n	800710c <in_R45+0x20c>
 80070fe:	4b4d      	ldr	r3, [pc, #308]	; (8007234 <in_R45+0x334>)
 8007100:	4a4d      	ldr	r2, [pc, #308]	; (8007238 <in_R45+0x338>)
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	4b3b      	ldr	r3, [pc, #236]	; (80071f4 <in_R45+0x2f4>)
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -45.0 ){
 800710c:	4b42      	ldr	r3, [pc, #264]	; (8007218 <in_R45+0x318>)
 800710e:	ed93 7a00 	vldr	s14, [r3]
 8007112:	edd7 7a02 	vldr	s15, [r7, #8]
 8007116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800711a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800723c <in_R45+0x33c>
 800711e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	dcdc      	bgt.n	80070e2 <in_R45+0x1e2>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8007128:	4b30      	ldr	r3, [pc, #192]	; (80071ec <in_R45+0x2ec>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	4b30      	ldr	r3, [pc, #192]	; (80071f0 <in_R45+0x2f0>)
 8007130:	2203      	movs	r2, #3
 8007132:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <in_R45+0x2dc>)
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	4b28      	ldr	r3, [pc, #160]	; (80071e0 <in_R45+0x2e0>)
 800713e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <in_R45+0x2e4>)
 8007146:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800714a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800714c:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <in_R45+0x2f4>)
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <in_R45+0x2f8>)
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <in_R45+0x334>)
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 34.48);
	while((len_mouse - local_length)< 37.05);
 8007164:	bf00      	nop
 8007166:	4b21      	ldr	r3, [pc, #132]	; (80071ec <in_R45+0x2ec>)
 8007168:	ed93 7a00 	vldr	s14, [r3]
 800716c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007174:	ee17 0a90 	vmov	r0, s15
 8007178:	f7f9 f9ee 	bl	8000558 <__aeabi_f2d>
 800717c:	a310      	add	r3, pc, #64	; (adr r3, 80071c0 <in_R45+0x2c0>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f7f9 fcb3 	bl	8000aec <__aeabi_dcmplt>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ec      	bne.n	8007166 <in_R45+0x266>

	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 800718c:	4b17      	ldr	r3, [pc, #92]	; (80071ec <in_R45+0x2ec>)
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <in_R45+0x2f0>)
 8007196:	2203      	movs	r2, #3
 8007198:	601a      	str	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80071a4:	f3af 8000 	nop.w
 80071a8:	d70a3d71 	.word	0xd70a3d71
 80071ac:	4031f0a3 	.word	0x4031f0a3
 80071b0:	fc8b007a 	.word	0xfc8b007a
 80071b4:	400921fa 	.word	0x400921fa
 80071b8:	306f3395 	.word	0x306f3395
 80071bc:	bfc41b2f 	.word	0xbfc41b2f
 80071c0:	66666666 	.word	0x66666666
 80071c4:	40428666 	.word	0x40428666
 80071c8:	2000d224 	.word	0x2000d224
 80071cc:	2000821c 	.word	0x2000821c
 80071d0:	2000d210 	.word	0x2000d210
 80071d4:	2000d1d8 	.word	0x2000d1d8
 80071d8:	200004ec 	.word	0x200004ec
 80071dc:	2000a16c 	.word	0x2000a16c
 80071e0:	2000d05c 	.word	0x2000d05c
 80071e4:	2000d198 	.word	0x2000d198
 80071e8:	20012398 	.word	0x20012398
 80071ec:	200123b8 	.word	0x200123b8
 80071f0:	2000a170 	.word	0x2000a170
 80071f4:	200002dc 	.word	0x200002dc
 80071f8:	20008208 	.word	0x20008208
 80071fc:	2000d22c 	.word	0x2000d22c
 8007200:	20010454 	.word	0x20010454
 8007204:	20002438 	.word	0x20002438
 8007208:	2000f490 	.word	0x2000f490
 800720c:	2000f480 	.word	0x2000f480
 8007210:	41700000 	.word	0x41700000
 8007214:	2000d064 	.word	0x2000d064
 8007218:	2001044c 	.word	0x2001044c
 800721c:	20008218 	.word	0x20008218
 8007220:	c39d1461 	.word	0xc39d1461
 8007224:	c1490fd8 	.word	0xc1490fd8
 8007228:	c0468000 	.word	0xc0468000
 800722c:	40668000 	.word	0x40668000
 8007230:	439d1461 	.word	0x439d1461
 8007234:	2000d43c 	.word	0x2000d43c
 8007238:	be20d97a 	.word	0xbe20d97a
 800723c:	c2340000 	.word	0xc2340000

08007240 <out_R45>:

void out_R45(){
 8007240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8007248:	4b93      	ldr	r3, [pc, #588]	; (8007498 <out_R45+0x258>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 800724e:	4b93      	ldr	r3, [pc, #588]	; (800749c <out_R45+0x25c>)
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	4b92      	ldr	r3, [pc, #584]	; (80074a0 <out_R45+0x260>)
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 800725e:	4b91      	ldr	r3, [pc, #580]	; (80074a4 <out_R45+0x264>)
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	4b90      	ldr	r3, [pc, #576]	; (80074a8 <out_R45+0x268>)
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 800726e:	f04f 0300 	mov.w	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8007274:	4b8d      	ldr	r3, [pc, #564]	; (80074ac <out_R45+0x26c>)
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	4b8c      	ldr	r3, [pc, #560]	; (80074b0 <out_R45+0x270>)
 800727e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	4b8b      	ldr	r3, [pc, #556]	; (80074b4 <out_R45+0x274>)
 8007286:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800728a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 800728c:	4b8a      	ldr	r3, [pc, #552]	; (80074b8 <out_R45+0x278>)
 800728e:	2201      	movs	r2, #1
 8007290:	771a      	strb	r2, [r3, #28]
 8007292:	4b8a      	ldr	r3, [pc, #552]	; (80074bc <out_R45+0x27c>)
 8007294:	2200      	movs	r2, #0
 8007296:	819a      	strh	r2, [r3, #12]
 8007298:	4b89      	ldr	r3, [pc, #548]	; (80074c0 <out_R45+0x280>)
 800729a:	2200      	movs	r2, #0
 800729c:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 800729e:	4b89      	ldr	r3, [pc, #548]	; (80074c4 <out_R45+0x284>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	4b88      	ldr	r3, [pc, #544]	; (80074c8 <out_R45+0x288>)
 80072a6:	2203      	movs	r2, #3
 80072a8:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 80072aa:	4b88      	ldr	r3, [pc, #544]	; (80074cc <out_R45+0x28c>)
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	4b87      	ldr	r3, [pc, #540]	; (80074d0 <out_R45+0x290>)
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 34.48);
 80072ba:	bf00      	nop
 80072bc:	4b81      	ldr	r3, [pc, #516]	; (80074c4 <out_R45+0x284>)
 80072be:	ed93 7a00 	vldr	s14, [r3]
 80072c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072ca:	ee17 0a90 	vmov	r0, s15
 80072ce:	f7f9 f943 	bl	8000558 <__aeabi_f2d>
 80072d2:	a369      	add	r3, pc, #420	; (adr r3, 8007478 <out_R45+0x238>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f7f9 fc08 	bl	8000aec <__aeabi_dcmplt>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1ec      	bne.n	80072bc <out_R45+0x7c>

	float local_degree = 0.0;	local_degree = tar_degree;
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	4b7a      	ldr	r3, [pc, #488]	; (80074d4 <out_R45+0x294>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 80072ee:	4b76      	ldr	r3, [pc, #472]	; (80074c8 <out_R45+0x288>)
 80072f0:	2202      	movs	r2, #2
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	4b78      	ldr	r3, [pc, #480]	; (80074d8 <out_R45+0x298>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -SLA_SEARCH_TURN_SPEED;
 80072fa:	4b74      	ldr	r3, [pc, #464]	; (80074cc <out_R45+0x28c>)
 80072fc:	4a77      	ldr	r2, [pc, #476]	; (80074dc <out_R45+0x29c>)
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	4b73      	ldr	r3, [pc, #460]	; (80074d0 <out_R45+0x290>)
 8007302:	4a77      	ldr	r2, [pc, #476]	; (80074e0 <out_R45+0x2a0>)
 8007304:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8007306:	4b71      	ldr	r3, [pc, #452]	; (80074cc <out_R45+0x28c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

	while(((-45.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 800730c:	bf00      	nop
 800730e:	4b71      	ldr	r3, [pc, #452]	; (80074d4 <out_R45+0x294>)
 8007310:	ed93 7a00 	vldr	s14, [r3]
 8007314:	edd7 7a02 	vldr	s15, [r7, #8]
 8007318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800731c:	ee17 0a90 	vmov	r0, s15
 8007320:	f7f9 f91a 	bl	8000558 <__aeabi_f2d>
 8007324:	4603      	mov	r3, r0
 8007326:	460c      	mov	r4, r1
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	496c      	ldr	r1, [pc, #432]	; (80074e4 <out_R45+0x2a4>)
 8007332:	f7f8 ffb1 	bl	8000298 <__aeabi_dsub>
 8007336:	4603      	mov	r3, r0
 8007338:	460c      	mov	r4, r1
 800733a:	4625      	mov	r5, r4
 800733c:	461c      	mov	r4, r3
 800733e:	4b64      	ldr	r3, [pc, #400]	; (80074d0 <out_R45+0x290>)
 8007340:	ed93 7a00 	vldr	s14, [r3]
 8007344:	4b62      	ldr	r3, [pc, #392]	; (80074d0 <out_R45+0x290>)
 8007346:	edd3 7a00 	vldr	s15, [r3]
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	ee17 0a90 	vmov	r0, s15
 8007352:	f7f9 f901 	bl	8000558 <__aeabi_f2d>
 8007356:	4680      	mov	r8, r0
 8007358:	4689      	mov	r9, r1
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7f9 f8fc 	bl	8000558 <__aeabi_f2d>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	f7f8 ff9a 	bl	800029c <__adddf3>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4640      	mov	r0, r8
 800736e:	4649      	mov	r1, r9
 8007370:	f7f9 fa74 	bl	800085c <__aeabi_ddiv>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <out_R45+0x2a8>)
 8007382:	f7f9 f941 	bl	8000608 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	a33c      	add	r3, pc, #240	; (adr r3, 8007480 <out_R45+0x240>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f9 fa62 	bl	800085c <__aeabi_ddiv>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 fba4 	bl	8000aec <__aeabi_dcmplt>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1b1      	bne.n	800730e <out_R45+0xce>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 80073aa:	4b48      	ldr	r3, [pc, #288]	; (80074cc <out_R45+0x28c>)
 80073ac:	4a4f      	ldr	r2, [pc, #316]	; (80074ec <out_R45+0x2ac>)
 80073ae:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -45.0 ){
 80073b0:	e014      	b.n	80073dc <out_R45+0x19c>
		if(tar_omega > -0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 80073b2:	4b4f      	ldr	r3, [pc, #316]	; (80074f0 <out_R45+0x2b0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7f9 f8ce 	bl	8000558 <__aeabi_f2d>
 80073bc:	a332      	add	r3, pc, #200	; (adr r3, 8007488 <out_R45+0x248>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 fbb1 	bl	8000b28 <__aeabi_dcmpgt>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d100      	bne.n	80073ce <out_R45+0x18e>
 80073cc:	e006      	b.n	80073dc <out_R45+0x19c>
 80073ce:	4b48      	ldr	r3, [pc, #288]	; (80074f0 <out_R45+0x2b0>)
 80073d0:	4a48      	ldr	r2, [pc, #288]	; (80074f4 <out_R45+0x2b4>)
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	4b3d      	ldr	r3, [pc, #244]	; (80074cc <out_R45+0x28c>)
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -45.0 ){
 80073dc:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <out_R45+0x294>)
 80073de:	ed93 7a00 	vldr	s14, [r3]
 80073e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80073e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073ea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80074f8 <out_R45+0x2b8>
 80073ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	dcdc      	bgt.n	80073b2 <out_R45+0x172>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 80073f8:	4b32      	ldr	r3, [pc, #200]	; (80074c4 <out_R45+0x284>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <out_R45+0x288>)
 8007400:	2201      	movs	r2, #1
 8007402:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8007404:	4b29      	ldr	r3, [pc, #164]	; (80074ac <out_R45+0x26c>)
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	4b28      	ldr	r3, [pc, #160]	; (80074b0 <out_R45+0x270>)
 800740e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <out_R45+0x274>)
 8007416:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800741a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <out_R45+0x28c>)
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <out_R45+0x290>)
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	4b30      	ldr	r3, [pc, #192]	; (80074f0 <out_R45+0x2b0>)
 800742e:	f04f 0200 	mov.w	r2, #0
 8007432:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 15.3);
 8007434:	bf00      	nop
 8007436:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <out_R45+0x284>)
 8007438:	ed93 7a00 	vldr	s14, [r3]
 800743c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007444:	ee17 0a90 	vmov	r0, s15
 8007448:	f7f9 f886 	bl	8000558 <__aeabi_f2d>
 800744c:	a310      	add	r3, pc, #64	; (adr r3, 8007490 <out_R45+0x250>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f9 fb4b 	bl	8000aec <__aeabi_dcmplt>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1ec      	bne.n	8007436 <out_R45+0x1f6>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <out_R45+0x284>)
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <out_R45+0x288>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007474:	f3af 8000 	nop.w
 8007478:	a3d70a3d 	.word	0xa3d70a3d
 800747c:	40413d70 	.word	0x40413d70
 8007480:	fc8b007a 	.word	0xfc8b007a
 8007484:	400921fa 	.word	0x400921fa
 8007488:	306f3395 	.word	0x306f3395
 800748c:	bfc41b2f 	.word	0xbfc41b2f
 8007490:	9999999a 	.word	0x9999999a
 8007494:	402e9999 	.word	0x402e9999
 8007498:	2000d224 	.word	0x2000d224
 800749c:	2000821c 	.word	0x2000821c
 80074a0:	2000d210 	.word	0x2000d210
 80074a4:	2000d1d8 	.word	0x2000d1d8
 80074a8:	200004ec 	.word	0x200004ec
 80074ac:	2000a16c 	.word	0x2000a16c
 80074b0:	2000d05c 	.word	0x2000d05c
 80074b4:	2000d198 	.word	0x2000d198
 80074b8:	20012398 	.word	0x20012398
 80074bc:	2000f480 	.word	0x2000f480
 80074c0:	2000d064 	.word	0x2000d064
 80074c4:	200123b8 	.word	0x200123b8
 80074c8:	2000a170 	.word	0x2000a170
 80074cc:	200002dc 	.word	0x200002dc
 80074d0:	20008208 	.word	0x20008208
 80074d4:	2001044c 	.word	0x2001044c
 80074d8:	20008218 	.word	0x20008218
 80074dc:	c37b53ce 	.word	0xc37b53ce
 80074e0:	c1490fd8 	.word	0xc1490fd8
 80074e4:	c0468000 	.word	0xc0468000
 80074e8:	40668000 	.word	0x40668000
 80074ec:	437b53ce 	.word	0x437b53ce
 80074f0:	2000d43c 	.word	0x2000d43c
 80074f4:	be20d97a 	.word	0xbe20d97a
 80074f8:	c2340000 	.word	0xc2340000
 80074fc:	00000000 	.word	0x00000000

08007500 <in_R135>:

void in_R135(){
 8007500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8007508:	4bad      	ldr	r3, [pc, #692]	; (80077c0 <in_R135+0x2c0>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 800750e:	4bad      	ldr	r3, [pc, #692]	; (80077c4 <in_R135+0x2c4>)
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	4bac      	ldr	r3, [pc, #688]	; (80077c8 <in_R135+0x2c8>)
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 800751e:	4bab      	ldr	r3, [pc, #684]	; (80077cc <in_R135+0x2cc>)
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	4baa      	ldr	r3, [pc, #680]	; (80077d0 <in_R135+0x2d0>)
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8007534:	4ba7      	ldr	r3, [pc, #668]	; (80077d4 <in_R135+0x2d4>)
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	4ba6      	ldr	r3, [pc, #664]	; (80077d8 <in_R135+0x2d8>)
 800753e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	4ba5      	ldr	r3, [pc, #660]	; (80077dc <in_R135+0x2dc>)
 8007546:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800754a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	//sen_r.cnt = 0;	sen_l.cnt = 0;
 800754c:	4ba4      	ldr	r3, [pc, #656]	; (80077e0 <in_R135+0x2e0>)
 800754e:	2201      	movs	r2, #1
 8007550:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8007552:	4ba4      	ldr	r3, [pc, #656]	; (80077e4 <in_R135+0x2e4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	4ba3      	ldr	r3, [pc, #652]	; (80077e8 <in_R135+0x2e8>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 800755e:	4ba3      	ldr	r3, [pc, #652]	; (80077ec <in_R135+0x2ec>)
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	4ba2      	ldr	r3, [pc, #648]	; (80077f0 <in_R135+0x2f0>)
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 800756e:	4ba1      	ldr	r3, [pc, #644]	; (80077f4 <in_R135+0x2f4>)
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	4ba0      	ldr	r3, [pc, #640]	; (80077f8 <in_R135+0x2f8>)
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	4ba0      	ldr	r3, [pc, #640]	; (80077fc <in_R135+0x2fc>)
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	4b9f      	ldr	r3, [pc, #636]	; (8007800 <in_R135+0x300>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	//while((len_mouse - local_length)< 24.64){
	while((len_mouse - local_length)< 24.64){
 8007586:	e031      	b.n	80075ec <in_R135+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8007588:	4b9e      	ldr	r3, [pc, #632]	; (8007804 <in_R135+0x304>)
 800758a:	7b9b      	ldrb	r3, [r3, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d110      	bne.n	80075b2 <in_R135+0xb2>
 8007590:	4b98      	ldr	r3, [pc, #608]	; (80077f4 <in_R135+0x2f4>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d10c      	bne.n	80075b2 <in_R135+0xb2>
 8007598:	4b98      	ldr	r3, [pc, #608]	; (80077fc <in_R135+0x2fc>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <in_R135+0xb2>
			local_length = 0.0;
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 80075a6:	4b8f      	ldr	r3, [pc, #572]	; (80077e4 <in_R135+0x2e4>)
 80075a8:	4a97      	ldr	r2, [pc, #604]	; (8007808 <in_R135+0x308>)
 80075aa:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 80075ac:	4b93      	ldr	r3, [pc, #588]	; (80077fc <in_R135+0x2fc>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 80075b2:	4b96      	ldr	r3, [pc, #600]	; (800780c <in_R135+0x30c>)
 80075b4:	7b9b      	ldrb	r3, [r3, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d110      	bne.n	80075dc <in_R135+0xdc>
 80075ba:	4b8f      	ldr	r3, [pc, #572]	; (80077f8 <in_R135+0x2f8>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10c      	bne.n	80075dc <in_R135+0xdc>
 80075c2:	4b8e      	ldr	r3, [pc, #568]	; (80077fc <in_R135+0x2fc>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <in_R135+0xdc>
	    	local_length = 0.0;
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 80075d0:	4b84      	ldr	r3, [pc, #528]	; (80077e4 <in_R135+0x2e4>)
 80075d2:	4a8d      	ldr	r2, [pc, #564]	; (8007808 <in_R135+0x308>)
 80075d4:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 80075d6:	4b89      	ldr	r3, [pc, #548]	; (80077fc <in_R135+0x2fc>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 80075dc:	4b89      	ldr	r3, [pc, #548]	; (8007804 <in_R135+0x304>)
 80075de:	7b9a      	ldrb	r2, [r3, #14]
 80075e0:	4b84      	ldr	r3, [pc, #528]	; (80077f4 <in_R135+0x2f4>)
 80075e2:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 80075e4:	4b89      	ldr	r3, [pc, #548]	; (800780c <in_R135+0x30c>)
 80075e6:	7b9a      	ldrb	r2, [r3, #14]
 80075e8:	4b83      	ldr	r3, [pc, #524]	; (80077f8 <in_R135+0x2f8>)
 80075ea:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 24.64){
 80075ec:	4b7d      	ldr	r3, [pc, #500]	; (80077e4 <in_R135+0x2e4>)
 80075ee:	ed93 7a00 	vldr	s14, [r3]
 80075f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075fa:	ee17 0a90 	vmov	r0, s15
 80075fe:	f7f8 ffab 	bl	8000558 <__aeabi_f2d>
 8007602:	a367      	add	r3, pc, #412	; (adr r3, 80077a0 <in_R135+0x2a0>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f7f9 fa70 	bl	8000aec <__aeabi_dcmplt>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1ba      	bne.n	8007588 <in_R135+0x88>
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	4b7d      	ldr	r3, [pc, #500]	; (8007810 <in_R135+0x310>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 800761e:	4b72      	ldr	r3, [pc, #456]	; (80077e8 <in_R135+0x2e8>)
 8007620:	2202      	movs	r2, #2
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <in_R135+0x314>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -SLA_SEARCH_TURN_SPEED;
 800762a:	4b70      	ldr	r3, [pc, #448]	; (80077ec <in_R135+0x2ec>)
 800762c:	4a7a      	ldr	r2, [pc, #488]	; (8007818 <in_R135+0x318>)
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	4b6f      	ldr	r3, [pc, #444]	; (80077f0 <in_R135+0x2f0>)
 8007632:	4a7a      	ldr	r2, [pc, #488]	; (800781c <in_R135+0x31c>)
 8007634:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8007636:	4b6d      	ldr	r3, [pc, #436]	; (80077ec <in_R135+0x2ec>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	607b      	str	r3, [r7, #4]

	while(((-135.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 800763c:	bf00      	nop
 800763e:	4b74      	ldr	r3, [pc, #464]	; (8007810 <in_R135+0x310>)
 8007640:	ed93 7a00 	vldr	s14, [r3]
 8007644:	edd7 7a02 	vldr	s15, [r7, #8]
 8007648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800764c:	ee17 0a90 	vmov	r0, s15
 8007650:	f7f8 ff82 	bl	8000558 <__aeabi_f2d>
 8007654:	4603      	mov	r3, r0
 8007656:	460c      	mov	r4, r1
 8007658:	461a      	mov	r2, r3
 800765a:	4623      	mov	r3, r4
 800765c:	a152      	add	r1, pc, #328	; (adr r1, 80077a8 <in_R135+0x2a8>)
 800765e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007662:	f7f8 fe19 	bl	8000298 <__aeabi_dsub>
 8007666:	4603      	mov	r3, r0
 8007668:	460c      	mov	r4, r1
 800766a:	4625      	mov	r5, r4
 800766c:	461c      	mov	r4, r3
 800766e:	4b60      	ldr	r3, [pc, #384]	; (80077f0 <in_R135+0x2f0>)
 8007670:	ed93 7a00 	vldr	s14, [r3]
 8007674:	4b5e      	ldr	r3, [pc, #376]	; (80077f0 <in_R135+0x2f0>)
 8007676:	edd3 7a00 	vldr	s15, [r3]
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	ee17 0a90 	vmov	r0, s15
 8007682:	f7f8 ff69 	bl	8000558 <__aeabi_f2d>
 8007686:	4680      	mov	r8, r0
 8007688:	4689      	mov	r9, r1
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7f8 ff64 	bl	8000558 <__aeabi_f2d>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	f7f8 fe02 	bl	800029c <__adddf3>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f9 f8dc 	bl	800085c <__aeabi_ddiv>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	4b5b      	ldr	r3, [pc, #364]	; (8007820 <in_R135+0x320>)
 80076b2:	f7f8 ffa9 	bl	8000608 <__aeabi_dmul>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4610      	mov	r0, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	a33c      	add	r3, pc, #240	; (adr r3, 80077b0 <in_R135+0x2b0>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f7f9 f8ca 	bl	800085c <__aeabi_ddiv>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f9 fa0c 	bl	8000aec <__aeabi_dcmplt>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1b1      	bne.n	800763e <in_R135+0x13e>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 80076da:	4b44      	ldr	r3, [pc, #272]	; (80077ec <in_R135+0x2ec>)
 80076dc:	4a51      	ldr	r2, [pc, #324]	; (8007824 <in_R135+0x324>)
 80076de:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -135.0 ){
 80076e0:	e014      	b.n	800770c <in_R135+0x20c>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 80076e2:	4b51      	ldr	r3, [pc, #324]	; (8007828 <in_R135+0x328>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7f8 ff36 	bl	8000558 <__aeabi_f2d>
 80076ec:	a332      	add	r3, pc, #200	; (adr r3, 80077b8 <in_R135+0x2b8>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f9 fa19 	bl	8000b28 <__aeabi_dcmpgt>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d100      	bne.n	80076fe <in_R135+0x1fe>
 80076fc:	e006      	b.n	800770c <in_R135+0x20c>
 80076fe:	4b4a      	ldr	r3, [pc, #296]	; (8007828 <in_R135+0x328>)
 8007700:	4a4a      	ldr	r2, [pc, #296]	; (800782c <in_R135+0x32c>)
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	4b39      	ldr	r3, [pc, #228]	; (80077ec <in_R135+0x2ec>)
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -135.0 ){
 800770c:	4b40      	ldr	r3, [pc, #256]	; (8007810 <in_R135+0x310>)
 800770e:	ed93 7a00 	vldr	s14, [r3]
 8007712:	edd7 7a02 	vldr	s15, [r7, #8]
 8007716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800771a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8007830 <in_R135+0x330>
 800771e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	dcdc      	bgt.n	80076e2 <in_R135+0x1e2>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8007728:	4b2e      	ldr	r3, [pc, #184]	; (80077e4 <in_R135+0x2e4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <in_R135+0x2e8>)
 8007730:	2203      	movs	r2, #3
 8007732:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <in_R135+0x2d4>)
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <in_R135+0x2d8>)
 800773e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <in_R135+0x2dc>)
 8007746:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800774a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <in_R135+0x2ec>)
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <in_R135+0x2f0>)
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	4b32      	ldr	r3, [pc, #200]	; (8007828 <in_R135+0x328>)
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 16.75);
 8007764:	bf00      	nop
 8007766:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <in_R135+0x2e4>)
 8007768:	ed93 7a00 	vldr	s14, [r3]
 800776c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007774:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007834 <in_R135+0x334>
 8007778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007780:	d4f1      	bmi.n	8007766 <in_R135+0x266>

	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 8007782:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <in_R135+0x2e4>)
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <in_R135+0x2e8>)
 800778c:	2203      	movs	r2, #3
 800778e:	601a      	str	r2, [r3, #0]
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w
 80077a0:	0a3d70a4 	.word	0x0a3d70a4
 80077a4:	4038a3d7 	.word	0x4038a3d7
 80077a8:	00000000 	.word	0x00000000
 80077ac:	c060e000 	.word	0xc060e000
 80077b0:	fc8b007a 	.word	0xfc8b007a
 80077b4:	400921fa 	.word	0x400921fa
 80077b8:	306f3395 	.word	0x306f3395
 80077bc:	bfc41b2f 	.word	0xbfc41b2f
 80077c0:	2000d224 	.word	0x2000d224
 80077c4:	2000821c 	.word	0x2000821c
 80077c8:	2000d210 	.word	0x2000d210
 80077cc:	2000d1d8 	.word	0x2000d1d8
 80077d0:	200004ec 	.word	0x200004ec
 80077d4:	2000a16c 	.word	0x2000a16c
 80077d8:	2000d05c 	.word	0x2000d05c
 80077dc:	2000d198 	.word	0x2000d198
 80077e0:	20012398 	.word	0x20012398
 80077e4:	200123b8 	.word	0x200123b8
 80077e8:	2000a170 	.word	0x2000a170
 80077ec:	200002dc 	.word	0x200002dc
 80077f0:	20008208 	.word	0x20008208
 80077f4:	2000d22c 	.word	0x2000d22c
 80077f8:	20010454 	.word	0x20010454
 80077fc:	20002438 	.word	0x20002438
 8007800:	2000f490 	.word	0x2000f490
 8007804:	2000f480 	.word	0x2000f480
 8007808:	41700000 	.word	0x41700000
 800780c:	2000d064 	.word	0x2000d064
 8007810:	2001044c 	.word	0x2001044c
 8007814:	20008218 	.word	0x20008218
 8007818:	c37b53ce 	.word	0xc37b53ce
 800781c:	c1490fd8 	.word	0xc1490fd8
 8007820:	40668000 	.word	0x40668000
 8007824:	437b53ce 	.word	0x437b53ce
 8007828:	2000d43c 	.word	0x2000d43c
 800782c:	be20d97a 	.word	0xbe20d97a
 8007830:	c3070000 	.word	0xc3070000
 8007834:	41860000 	.word	0x41860000

08007838 <out_R135>:

void out_R135(){
 8007838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8007840:	4b91      	ldr	r3, [pc, #580]	; (8007a88 <out_R135+0x250>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8007846:	4b91      	ldr	r3, [pc, #580]	; (8007a8c <out_R135+0x254>)
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	4b90      	ldr	r3, [pc, #576]	; (8007a90 <out_R135+0x258>)
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8007856:	4b8f      	ldr	r3, [pc, #572]	; (8007a94 <out_R135+0x25c>)
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	4b8e      	ldr	r3, [pc, #568]	; (8007a98 <out_R135+0x260>)
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 800786c:	4b8b      	ldr	r3, [pc, #556]	; (8007a9c <out_R135+0x264>)
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	4b8a      	ldr	r3, [pc, #552]	; (8007aa0 <out_R135+0x268>)
 8007876:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	4b89      	ldr	r3, [pc, #548]	; (8007aa4 <out_R135+0x26c>)
 800787e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007882:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8007884:	4b88      	ldr	r3, [pc, #544]	; (8007aa8 <out_R135+0x270>)
 8007886:	2201      	movs	r2, #1
 8007888:	771a      	strb	r2, [r3, #28]
 800788a:	4b88      	ldr	r3, [pc, #544]	; (8007aac <out_R135+0x274>)
 800788c:	2200      	movs	r2, #0
 800788e:	819a      	strh	r2, [r3, #12]
 8007890:	4b87      	ldr	r3, [pc, #540]	; (8007ab0 <out_R135+0x278>)
 8007892:	2200      	movs	r2, #0
 8007894:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8007896:	4b87      	ldr	r3, [pc, #540]	; (8007ab4 <out_R135+0x27c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	4b86      	ldr	r3, [pc, #536]	; (8007ab8 <out_R135+0x280>)
 800789e:	2203      	movs	r2, #3
 80078a0:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 80078a2:	4b86      	ldr	r3, [pc, #536]	; (8007abc <out_R135+0x284>)
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	4b85      	ldr	r3, [pc, #532]	; (8007ac0 <out_R135+0x288>)
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 16.75);
 80078b2:	bf00      	nop
 80078b4:	4b7f      	ldr	r3, [pc, #508]	; (8007ab4 <out_R135+0x27c>)
 80078b6:	ed93 7a00 	vldr	s14, [r3]
 80078ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80078be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007ac4 <out_R135+0x28c>
 80078c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ce:	d4f1      	bmi.n	80078b4 <out_R135+0x7c>

	float local_degree = 0.0;	local_degree = tar_degree;
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	4b7c      	ldr	r3, [pc, #496]	; (8007ac8 <out_R135+0x290>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 80078dc:	4b76      	ldr	r3, [pc, #472]	; (8007ab8 <out_R135+0x280>)
 80078de:	2202      	movs	r2, #2
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	4b7a      	ldr	r3, [pc, #488]	; (8007acc <out_R135+0x294>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
	omega_accel = -SLA_SEARCH_TURN_ACCEL; max_omega = -SLA_SEARCH_TURN_SPEED;
 80078e8:	4b74      	ldr	r3, [pc, #464]	; (8007abc <out_R135+0x284>)
 80078ea:	4a79      	ldr	r2, [pc, #484]	; (8007ad0 <out_R135+0x298>)
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	4b74      	ldr	r3, [pc, #464]	; (8007ac0 <out_R135+0x288>)
 80078f0:	4a78      	ldr	r2, [pc, #480]	; (8007ad4 <out_R135+0x29c>)
 80078f2:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 80078f4:	4b71      	ldr	r3, [pc, #452]	; (8007abc <out_R135+0x284>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	607b      	str	r3, [r7, #4]

	while(((-135.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 80078fa:	bf00      	nop
 80078fc:	4b72      	ldr	r3, [pc, #456]	; (8007ac8 <out_R135+0x290>)
 80078fe:	ed93 7a00 	vldr	s14, [r3]
 8007902:	edd7 7a02 	vldr	s15, [r7, #8]
 8007906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800790a:	ee17 0a90 	vmov	r0, s15
 800790e:	f7f8 fe23 	bl	8000558 <__aeabi_f2d>
 8007912:	4603      	mov	r3, r0
 8007914:	460c      	mov	r4, r1
 8007916:	461a      	mov	r2, r3
 8007918:	4623      	mov	r3, r4
 800791a:	a153      	add	r1, pc, #332	; (adr r1, 8007a68 <out_R135+0x230>)
 800791c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007920:	f7f8 fcba 	bl	8000298 <__aeabi_dsub>
 8007924:	4603      	mov	r3, r0
 8007926:	460c      	mov	r4, r1
 8007928:	4625      	mov	r5, r4
 800792a:	461c      	mov	r4, r3
 800792c:	4b64      	ldr	r3, [pc, #400]	; (8007ac0 <out_R135+0x288>)
 800792e:	ed93 7a00 	vldr	s14, [r3]
 8007932:	4b63      	ldr	r3, [pc, #396]	; (8007ac0 <out_R135+0x288>)
 8007934:	edd3 7a00 	vldr	s15, [r3]
 8007938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793c:	ee17 0a90 	vmov	r0, s15
 8007940:	f7f8 fe0a 	bl	8000558 <__aeabi_f2d>
 8007944:	4680      	mov	r8, r0
 8007946:	4689      	mov	r9, r1
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7f8 fe05 	bl	8000558 <__aeabi_f2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	f7f8 fca3 	bl	800029c <__adddf3>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f8 ff7d 	bl	800085c <__aeabi_ddiv>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	4b5a      	ldr	r3, [pc, #360]	; (8007ad8 <out_R135+0x2a0>)
 8007970:	f7f8 fe4a 	bl	8000608 <__aeabi_dmul>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	a33c      	add	r3, pc, #240	; (adr r3, 8007a70 <out_R135+0x238>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 ff6b 	bl	800085c <__aeabi_ddiv>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4620      	mov	r0, r4
 800798c:	4629      	mov	r1, r5
 800798e:	f7f9 f8ad 	bl	8000aec <__aeabi_dcmplt>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1b1      	bne.n	80078fc <out_R135+0xc4>

	omega_accel = SLA_SEARCH_TURN_ACCEL;
 8007998:	4b48      	ldr	r3, [pc, #288]	; (8007abc <out_R135+0x284>)
 800799a:	4a50      	ldr	r2, [pc, #320]	; (8007adc <out_R135+0x2a4>)
 800799c:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -135.0 ){
 800799e:	e014      	b.n	80079ca <out_R135+0x192>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 80079a0:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <out_R135+0x2a8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7f8 fdd7 	bl	8000558 <__aeabi_f2d>
 80079aa:	a333      	add	r3, pc, #204	; (adr r3, 8007a78 <out_R135+0x240>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f9 f8ba 	bl	8000b28 <__aeabi_dcmpgt>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d100      	bne.n	80079bc <out_R135+0x184>
 80079ba:	e006      	b.n	80079ca <out_R135+0x192>
 80079bc:	4b48      	ldr	r3, [pc, #288]	; (8007ae0 <out_R135+0x2a8>)
 80079be:	4a49      	ldr	r2, [pc, #292]	; (8007ae4 <out_R135+0x2ac>)
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	4b3e      	ldr	r3, [pc, #248]	; (8007abc <out_R135+0x284>)
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -135.0 ){
 80079ca:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <out_R135+0x290>)
 80079cc:	ed93 7a00 	vldr	s14, [r3]
 80079d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80079d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007ae8 <out_R135+0x2b0>
 80079dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	dcdc      	bgt.n	80079a0 <out_R135+0x168>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 80079e6:	4b33      	ldr	r3, [pc, #204]	; (8007ab4 <out_R135+0x27c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	4b32      	ldr	r3, [pc, #200]	; (8007ab8 <out_R135+0x280>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 80079f2:	4b2a      	ldr	r3, [pc, #168]	; (8007a9c <out_R135+0x264>)
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <out_R135+0x268>)
 80079fc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <out_R135+0x26c>)
 8007a04:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007a08:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8007a0a:	4b2c      	ldr	r3, [pc, #176]	; (8007abc <out_R135+0x284>)
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <out_R135+0x288>)
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <out_R135+0x2a8>)
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 24.64);
 8007a22:	bf00      	nop
 8007a24:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <out_R135+0x27c>)
 8007a26:	ed93 7a00 	vldr	s14, [r3]
 8007a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a32:	ee17 0a90 	vmov	r0, s15
 8007a36:	f7f8 fd8f 	bl	8000558 <__aeabi_f2d>
 8007a3a:	a311      	add	r3, pc, #68	; (adr r3, 8007a80 <out_R135+0x248>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f9 f854 	bl	8000aec <__aeabi_dcmplt>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ec      	bne.n	8007a24 <out_R135+0x1ec>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <out_R135+0x27c>)
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <out_R135+0x280>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007a62:	bf00      	nop
 8007a64:	f3af 8000 	nop.w
 8007a68:	00000000 	.word	0x00000000
 8007a6c:	c060e000 	.word	0xc060e000
 8007a70:	fc8b007a 	.word	0xfc8b007a
 8007a74:	400921fa 	.word	0x400921fa
 8007a78:	306f3395 	.word	0x306f3395
 8007a7c:	bfc41b2f 	.word	0xbfc41b2f
 8007a80:	0a3d70a4 	.word	0x0a3d70a4
 8007a84:	4038a3d7 	.word	0x4038a3d7
 8007a88:	2000d224 	.word	0x2000d224
 8007a8c:	2000821c 	.word	0x2000821c
 8007a90:	2000d210 	.word	0x2000d210
 8007a94:	2000d1d8 	.word	0x2000d1d8
 8007a98:	200004ec 	.word	0x200004ec
 8007a9c:	2000a16c 	.word	0x2000a16c
 8007aa0:	2000d05c 	.word	0x2000d05c
 8007aa4:	2000d198 	.word	0x2000d198
 8007aa8:	20012398 	.word	0x20012398
 8007aac:	2000f480 	.word	0x2000f480
 8007ab0:	2000d064 	.word	0x2000d064
 8007ab4:	200123b8 	.word	0x200123b8
 8007ab8:	2000a170 	.word	0x2000a170
 8007abc:	200002dc 	.word	0x200002dc
 8007ac0:	20008208 	.word	0x20008208
 8007ac4:	41860000 	.word	0x41860000
 8007ac8:	2001044c 	.word	0x2001044c
 8007acc:	20008218 	.word	0x20008218
 8007ad0:	c37b53ce 	.word	0xc37b53ce
 8007ad4:	c1490fd8 	.word	0xc1490fd8
 8007ad8:	40668000 	.word	0x40668000
 8007adc:	437b53ce 	.word	0x437b53ce
 8007ae0:	2000d43c 	.word	0x2000d43c
 8007ae4:	be20d97a 	.word	0xbe20d97a
 8007ae8:	c3070000 	.word	0xc3070000
 8007aec:	00000000 	.word	0x00000000

08007af0 <in_L135>:

void in_L135(){
 8007af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8007af8:	4baf      	ldr	r3, [pc, #700]	; (8007db8 <in_L135+0x2c8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8007afe:	4baf      	ldr	r3, [pc, #700]	; (8007dbc <in_L135+0x2cc>)
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	4bae      	ldr	r3, [pc, #696]	; (8007dc0 <in_L135+0x2d0>)
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8007b0e:	4bad      	ldr	r3, [pc, #692]	; (8007dc4 <in_L135+0x2d4>)
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	4bac      	ldr	r3, [pc, #688]	; (8007dc8 <in_L135+0x2d8>)
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8007b24:	4ba9      	ldr	r3, [pc, #676]	; (8007dcc <in_L135+0x2dc>)
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	4ba8      	ldr	r3, [pc, #672]	; (8007dd0 <in_L135+0x2e0>)
 8007b2e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	4ba7      	ldr	r3, [pc, #668]	; (8007dd4 <in_L135+0x2e4>)
 8007b36:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007b3a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;//	sen_r.cnt = 0;	sen_l.cnt = 0;
 8007b3c:	4ba6      	ldr	r3, [pc, #664]	; (8007dd8 <in_L135+0x2e8>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	771a      	strb	r2, [r3, #28]

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8007b42:	4ba6      	ldr	r3, [pc, #664]	; (8007ddc <in_L135+0x2ec>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	4ba5      	ldr	r3, [pc, #660]	; (8007de0 <in_L135+0x2f0>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8007b4e:	4ba5      	ldr	r3, [pc, #660]	; (8007de4 <in_L135+0x2f4>)
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	4ba4      	ldr	r3, [pc, #656]	; (8007de8 <in_L135+0x2f8>)
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	r_wall_check=0, l_wall_check=0, hosei_f=0; hosei_led_cnt = 0;
 8007b5e:	4ba3      	ldr	r3, [pc, #652]	; (8007dec <in_L135+0x2fc>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	4ba2      	ldr	r3, [pc, #648]	; (8007df0 <in_L135+0x300>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	4ba2      	ldr	r3, [pc, #648]	; (8007df4 <in_L135+0x304>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
 8007b70:	4ba1      	ldr	r3, [pc, #644]	; (8007df8 <in_L135+0x308>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	//while((len_mouse - local_length)< 24.64){
	while((len_mouse - local_length)< 24.64){
 8007b76:	e031      	b.n	8007bdc <in_L135+0xec>
		if((sen_r.is_wall==false) && (r_wall_check==true) && (hosei_f==0)){
 8007b78:	4ba0      	ldr	r3, [pc, #640]	; (8007dfc <in_L135+0x30c>)
 8007b7a:	7b9b      	ldrb	r3, [r3, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d110      	bne.n	8007ba2 <in_L135+0xb2>
 8007b80:	4b9a      	ldr	r3, [pc, #616]	; (8007dec <in_L135+0x2fc>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d10c      	bne.n	8007ba2 <in_L135+0xb2>
 8007b88:	4b9a      	ldr	r3, [pc, #616]	; (8007df4 <in_L135+0x304>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d108      	bne.n	8007ba2 <in_L135+0xb2>
			local_length = 0.0;
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
			len_mouse = 15.0;//(len_mouse+56.0)/2;
 8007b96:	4b91      	ldr	r3, [pc, #580]	; (8007ddc <in_L135+0x2ec>)
 8007b98:	4a99      	ldr	r2, [pc, #612]	; (8007e00 <in_L135+0x310>)
 8007b9a:	601a      	str	r2, [r3, #0]
			hosei_f=1;
 8007b9c:	4b95      	ldr	r3, [pc, #596]	; (8007df4 <in_L135+0x304>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	701a      	strb	r2, [r3, #0]
	    }
	    if((sen_l.is_wall==false) && (l_wall_check==true) && (hosei_f==0)){
 8007ba2:	4b98      	ldr	r3, [pc, #608]	; (8007e04 <in_L135+0x314>)
 8007ba4:	7b9b      	ldrb	r3, [r3, #14]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d110      	bne.n	8007bcc <in_L135+0xdc>
 8007baa:	4b91      	ldr	r3, [pc, #580]	; (8007df0 <in_L135+0x300>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10c      	bne.n	8007bcc <in_L135+0xdc>
 8007bb2:	4b90      	ldr	r3, [pc, #576]	; (8007df4 <in_L135+0x304>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d108      	bne.n	8007bcc <in_L135+0xdc>
	    	local_length = 0.0;
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
	    	len_mouse = 15.0;//(len_mouse+56.0)/2;
 8007bc0:	4b86      	ldr	r3, [pc, #536]	; (8007ddc <in_L135+0x2ec>)
 8007bc2:	4a8f      	ldr	r2, [pc, #572]	; (8007e00 <in_L135+0x310>)
 8007bc4:	601a      	str	r2, [r3, #0]
	    	hosei_f=1;
 8007bc6:	4b8b      	ldr	r3, [pc, #556]	; (8007df4 <in_L135+0x304>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]
	    }
		r_wall_check = sen_r.is_wall;
 8007bcc:	4b8b      	ldr	r3, [pc, #556]	; (8007dfc <in_L135+0x30c>)
 8007bce:	7b9a      	ldrb	r2, [r3, #14]
 8007bd0:	4b86      	ldr	r3, [pc, #536]	; (8007dec <in_L135+0x2fc>)
 8007bd2:	701a      	strb	r2, [r3, #0]
		l_wall_check = sen_l.is_wall;
 8007bd4:	4b8b      	ldr	r3, [pc, #556]	; (8007e04 <in_L135+0x314>)
 8007bd6:	7b9a      	ldrb	r2, [r3, #14]
 8007bd8:	4b85      	ldr	r3, [pc, #532]	; (8007df0 <in_L135+0x300>)
 8007bda:	701a      	strb	r2, [r3, #0]
	while((len_mouse - local_length)< 24.64){
 8007bdc:	4b7f      	ldr	r3, [pc, #508]	; (8007ddc <in_L135+0x2ec>)
 8007bde:	ed93 7a00 	vldr	s14, [r3]
 8007be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bea:	ee17 0a90 	vmov	r0, s15
 8007bee:	f7f8 fcb3 	bl	8000558 <__aeabi_f2d>
 8007bf2:	a369      	add	r3, pc, #420	; (adr r3, 8007d98 <in_L135+0x2a8>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 ff78 	bl	8000aec <__aeabi_dcmplt>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1ba      	bne.n	8007b78 <in_L135+0x88>
	}


	float local_degree = 0.0;	local_degree = tar_degree;
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	4b7f      	ldr	r3, [pc, #508]	; (8007e08 <in_L135+0x318>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8007c0e:	4b74      	ldr	r3, [pc, #464]	; (8007de0 <in_L135+0x2f0>)
 8007c10:	2202      	movs	r2, #2
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	4b7d      	ldr	r3, [pc, #500]	; (8007e0c <in_L135+0x31c>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 8007c1a:	4b72      	ldr	r3, [pc, #456]	; (8007de4 <in_L135+0x2f4>)
 8007c1c:	4a7c      	ldr	r2, [pc, #496]	; (8007e10 <in_L135+0x320>)
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	4b71      	ldr	r3, [pc, #452]	; (8007de8 <in_L135+0x2f8>)
 8007c22:	4a7c      	ldr	r2, [pc, #496]	; (8007e14 <in_L135+0x324>)
 8007c24:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8007c26:	4b6f      	ldr	r3, [pc, #444]	; (8007de4 <in_L135+0x2f4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	607b      	str	r3, [r7, #4]

	while(((135.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8007c2c:	bf00      	nop
 8007c2e:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <in_L135+0x318>)
 8007c30:	ed93 7a00 	vldr	s14, [r3]
 8007c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c3c:	ee17 0a90 	vmov	r0, s15
 8007c40:	f7f8 fc8a 	bl	8000558 <__aeabi_f2d>
 8007c44:	4603      	mov	r3, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	a154      	add	r1, pc, #336	; (adr r1, 8007da0 <in_L135+0x2b0>)
 8007c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c52:	f7f8 fb21 	bl	8000298 <__aeabi_dsub>
 8007c56:	4603      	mov	r3, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	4625      	mov	r5, r4
 8007c5c:	461c      	mov	r4, r3
 8007c5e:	4b62      	ldr	r3, [pc, #392]	; (8007de8 <in_L135+0x2f8>)
 8007c60:	ed93 7a00 	vldr	s14, [r3]
 8007c64:	4b60      	ldr	r3, [pc, #384]	; (8007de8 <in_L135+0x2f8>)
 8007c66:	edd3 7a00 	vldr	s15, [r3]
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	ee17 0a90 	vmov	r0, s15
 8007c72:	f7f8 fc71 	bl	8000558 <__aeabi_f2d>
 8007c76:	4680      	mov	r8, r0
 8007c78:	4689      	mov	r9, r1
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7f8 fc6c 	bl	8000558 <__aeabi_f2d>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	f7f8 fb0a 	bl	800029c <__adddf3>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fde4 	bl	800085c <__aeabi_ddiv>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	4b5d      	ldr	r3, [pc, #372]	; (8007e18 <in_L135+0x328>)
 8007ca2:	f7f8 fcb1 	bl	8000608 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	a33e      	add	r3, pc, #248	; (adr r3, 8007da8 <in_L135+0x2b8>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fdd2 	bl	800085c <__aeabi_ddiv>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 ff32 	bl	8000b28 <__aeabi_dcmpgt>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1b1      	bne.n	8007c2e <in_L135+0x13e>

	omega_accel = -omega_acc;
 8007cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8007cce:	eef1 7a67 	vneg.f32	s15, s15
 8007cd2:	4b44      	ldr	r3, [pc, #272]	; (8007de4 <in_L135+0x2f4>)
 8007cd4:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 135.0 ){
 8007cd8:	e014      	b.n	8007d04 <in_L135+0x214>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8007cda:	4b50      	ldr	r3, [pc, #320]	; (8007e1c <in_L135+0x32c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7f8 fc3a 	bl	8000558 <__aeabi_f2d>
 8007ce4:	a332      	add	r3, pc, #200	; (adr r3, 8007db0 <in_L135+0x2c0>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 feff 	bl	8000aec <__aeabi_dcmplt>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d100      	bne.n	8007cf6 <in_L135+0x206>
 8007cf4:	e006      	b.n	8007d04 <in_L135+0x214>
 8007cf6:	4b49      	ldr	r3, [pc, #292]	; (8007e1c <in_L135+0x32c>)
 8007cf8:	4a49      	ldr	r2, [pc, #292]	; (8007e20 <in_L135+0x330>)
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	4b39      	ldr	r3, [pc, #228]	; (8007de4 <in_L135+0x2f4>)
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 135.0 ){
 8007d04:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <in_L135+0x318>)
 8007d06:	ed93 7a00 	vldr	s14, [r3]
 8007d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d12:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007e24 <in_L135+0x334>
 8007d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1e:	d4dc      	bmi.n	8007cda <in_L135+0x1ea>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8007d20:	4b2e      	ldr	r3, [pc, #184]	; (8007ddc <in_L135+0x2ec>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <in_L135+0x2f0>)
 8007d28:	2203      	movs	r2, #3
 8007d2a:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <in_L135+0x2dc>)
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <in_L135+0x2e0>)
 8007d36:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <in_L135+0x2e4>)
 8007d3e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007d42:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8007d44:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <in_L135+0x2f4>)
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	4b26      	ldr	r3, [pc, #152]	; (8007de8 <in_L135+0x2f8>)
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	4b31      	ldr	r3, [pc, #196]	; (8007e1c <in_L135+0x32c>)
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 16.75);
 8007d5c:	bf00      	nop
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <in_L135+0x2ec>)
 8007d60:	ed93 7a00 	vldr	s14, [r3]
 8007d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007e28 <in_L135+0x338>
 8007d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d78:	d4f1      	bmi.n	8007d5e <in_L135+0x26e>

	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 8007d7a:	4b18      	ldr	r3, [pc, #96]	; (8007ddc <in_L135+0x2ec>)
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	4b17      	ldr	r3, [pc, #92]	; (8007de0 <in_L135+0x2f0>)
 8007d84:	2203      	movs	r2, #3
 8007d86:	601a      	str	r2, [r3, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d92:	bf00      	nop
 8007d94:	f3af 8000 	nop.w
 8007d98:	0a3d70a4 	.word	0x0a3d70a4
 8007d9c:	4038a3d7 	.word	0x4038a3d7
 8007da0:	00000000 	.word	0x00000000
 8007da4:	4060e000 	.word	0x4060e000
 8007da8:	fc8b007a 	.word	0xfc8b007a
 8007dac:	400921fa 	.word	0x400921fa
 8007db0:	306f3395 	.word	0x306f3395
 8007db4:	3fc41b2f 	.word	0x3fc41b2f
 8007db8:	2000d224 	.word	0x2000d224
 8007dbc:	2000821c 	.word	0x2000821c
 8007dc0:	2000d210 	.word	0x2000d210
 8007dc4:	2000d1d8 	.word	0x2000d1d8
 8007dc8:	200004ec 	.word	0x200004ec
 8007dcc:	2000a16c 	.word	0x2000a16c
 8007dd0:	2000d05c 	.word	0x2000d05c
 8007dd4:	2000d198 	.word	0x2000d198
 8007dd8:	20012398 	.word	0x20012398
 8007ddc:	200123b8 	.word	0x200123b8
 8007de0:	2000a170 	.word	0x2000a170
 8007de4:	200002dc 	.word	0x200002dc
 8007de8:	20008208 	.word	0x20008208
 8007dec:	2000d22c 	.word	0x2000d22c
 8007df0:	20010454 	.word	0x20010454
 8007df4:	20002438 	.word	0x20002438
 8007df8:	2000f490 	.word	0x2000f490
 8007dfc:	2000f480 	.word	0x2000f480
 8007e00:	41700000 	.word	0x41700000
 8007e04:	2000d064 	.word	0x2000d064
 8007e08:	2001044c 	.word	0x2001044c
 8007e0c:	20008218 	.word	0x20008218
 8007e10:	437b53ce 	.word	0x437b53ce
 8007e14:	41490fd8 	.word	0x41490fd8
 8007e18:	40668000 	.word	0x40668000
 8007e1c:	2000d43c 	.word	0x2000d43c
 8007e20:	3e20d97a 	.word	0x3e20d97a
 8007e24:	43070000 	.word	0x43070000
 8007e28:	41860000 	.word	0x41860000
 8007e2c:	00000000 	.word	0x00000000

08007e30 <out_L135>:

void out_L135(){
 8007e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8007e38:	4b93      	ldr	r3, [pc, #588]	; (8008088 <out_L135+0x258>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8007e3e:	4b93      	ldr	r3, [pc, #588]	; (800808c <out_L135+0x25c>)
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	4b92      	ldr	r3, [pc, #584]	; (8008090 <out_L135+0x260>)
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8007e4e:	4b91      	ldr	r3, [pc, #580]	; (8008094 <out_L135+0x264>)
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <out_L135+0x268>)
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 8007e64:	4b8d      	ldr	r3, [pc, #564]	; (800809c <out_L135+0x26c>)
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	4b8c      	ldr	r3, [pc, #560]	; (80080a0 <out_L135+0x270>)
 8007e6e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	4b8b      	ldr	r3, [pc, #556]	; (80080a4 <out_L135+0x274>)
 8007e76:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007e7a:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8007e7c:	4b8a      	ldr	r3, [pc, #552]	; (80080a8 <out_L135+0x278>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	771a      	strb	r2, [r3, #28]
 8007e82:	4b8a      	ldr	r3, [pc, #552]	; (80080ac <out_L135+0x27c>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	819a      	strh	r2, [r3, #12]
 8007e88:	4b89      	ldr	r3, [pc, #548]	; (80080b0 <out_L135+0x280>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8007e8e:	4b89      	ldr	r3, [pc, #548]	; (80080b4 <out_L135+0x284>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	4b88      	ldr	r3, [pc, #544]	; (80080b8 <out_L135+0x288>)
 8007e96:	2203      	movs	r2, #3
 8007e98:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8007e9a:	4b88      	ldr	r3, [pc, #544]	; (80080bc <out_L135+0x28c>)
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	4b87      	ldr	r3, [pc, #540]	; (80080c0 <out_L135+0x290>)
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 16.75);
 8007eaa:	bf00      	nop
 8007eac:	4b81      	ldr	r3, [pc, #516]	; (80080b4 <out_L135+0x284>)
 8007eae:	ed93 7a00 	vldr	s14, [r3]
 8007eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eba:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80080c4 <out_L135+0x294>
 8007ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	d4f1      	bmi.n	8007eac <out_L135+0x7c>

	float local_degree = 0.0;	local_degree = tar_degree;
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	4b7e      	ldr	r3, [pc, #504]	; (80080c8 <out_L135+0x298>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8007ed4:	4b78      	ldr	r3, [pc, #480]	; (80080b8 <out_L135+0x288>)
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	4b7c      	ldr	r3, [pc, #496]	; (80080cc <out_L135+0x29c>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
	omega_accel = SLA_SEARCH_TURN_ACCEL; max_omega = SLA_SEARCH_TURN_SPEED;
 8007ee0:	4b76      	ldr	r3, [pc, #472]	; (80080bc <out_L135+0x28c>)
 8007ee2:	4a7b      	ldr	r2, [pc, #492]	; (80080d0 <out_L135+0x2a0>)
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	4b76      	ldr	r3, [pc, #472]	; (80080c0 <out_L135+0x290>)
 8007ee8:	4a7a      	ldr	r2, [pc, #488]	; (80080d4 <out_L135+0x2a4>)
 8007eea:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 8007eec:	4b73      	ldr	r3, [pc, #460]	; (80080bc <out_L135+0x28c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	607b      	str	r3, [r7, #4]

	while(((135.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8007ef2:	bf00      	nop
 8007ef4:	4b74      	ldr	r3, [pc, #464]	; (80080c8 <out_L135+0x298>)
 8007ef6:	ed93 7a00 	vldr	s14, [r3]
 8007efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8007efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f02:	ee17 0a90 	vmov	r0, s15
 8007f06:	f7f8 fb27 	bl	8000558 <__aeabi_f2d>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4623      	mov	r3, r4
 8007f12:	a155      	add	r1, pc, #340	; (adr r1, 8008068 <out_L135+0x238>)
 8007f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f18:	f7f8 f9be 	bl	8000298 <__aeabi_dsub>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	4625      	mov	r5, r4
 8007f22:	461c      	mov	r4, r3
 8007f24:	4b66      	ldr	r3, [pc, #408]	; (80080c0 <out_L135+0x290>)
 8007f26:	ed93 7a00 	vldr	s14, [r3]
 8007f2a:	4b65      	ldr	r3, [pc, #404]	; (80080c0 <out_L135+0x290>)
 8007f2c:	edd3 7a00 	vldr	s15, [r3]
 8007f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f34:	ee17 0a90 	vmov	r0, s15
 8007f38:	f7f8 fb0e 	bl	8000558 <__aeabi_f2d>
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	4689      	mov	r9, r1
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f8 fb09 	bl	8000558 <__aeabi_f2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	f7f8 f9a7 	bl	800029c <__adddf3>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 fc81 	bl	800085c <__aeabi_ddiv>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4619      	mov	r1, r3
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	4b5c      	ldr	r3, [pc, #368]	; (80080d8 <out_L135+0x2a8>)
 8007f68:	f7f8 fb4e 	bl	8000608 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	a33e      	add	r3, pc, #248	; (adr r3, 8008070 <out_L135+0x240>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 fc6f 	bl	800085c <__aeabi_ddiv>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1b1      	bne.n	8007ef4 <out_L135+0xc4>

	omega_accel = -omega_acc;
 8007f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f94:	eef1 7a67 	vneg.f32	s15, s15
 8007f98:	4b48      	ldr	r3, [pc, #288]	; (80080bc <out_L135+0x28c>)
 8007f9a:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 135.0 ){
 8007f9e:	e014      	b.n	8007fca <out_L135+0x19a>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8007fa0:	4b4e      	ldr	r3, [pc, #312]	; (80080dc <out_L135+0x2ac>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7f8 fad7 	bl	8000558 <__aeabi_f2d>
 8007faa:	a333      	add	r3, pc, #204	; (adr r3, 8008078 <out_L135+0x248>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 fd9c 	bl	8000aec <__aeabi_dcmplt>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d100      	bne.n	8007fbc <out_L135+0x18c>
 8007fba:	e006      	b.n	8007fca <out_L135+0x19a>
 8007fbc:	4b47      	ldr	r3, [pc, #284]	; (80080dc <out_L135+0x2ac>)
 8007fbe:	4a48      	ldr	r2, [pc, #288]	; (80080e0 <out_L135+0x2b0>)
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	4b3e      	ldr	r3, [pc, #248]	; (80080bc <out_L135+0x28c>)
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 135.0 ){
 8007fca:	4b3f      	ldr	r3, [pc, #252]	; (80080c8 <out_L135+0x298>)
 8007fcc:	ed93 7a00 	vldr	s14, [r3]
 8007fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fd8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80080e4 <out_L135+0x2b4>
 8007fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	d4dc      	bmi.n	8007fa0 <out_L135+0x170>
	}

	local_length = len_mouse;	run_mode = STRAIGHT_MODE;
 8007fe6:	4b33      	ldr	r3, [pc, #204]	; (80080b4 <out_L135+0x284>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <out_L135+0x288>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	; (800809c <out_L135+0x26c>)
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <out_L135+0x270>)
 8007ffc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	4b28      	ldr	r3, [pc, #160]	; (80080a4 <out_L135+0x274>)
 8008004:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008008:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800800a:	4b2c      	ldr	r3, [pc, #176]	; (80080bc <out_L135+0x28c>)
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <out_L135+0x290>)
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	4b30      	ldr	r3, [pc, #192]	; (80080dc <out_L135+0x2ac>)
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

	while((len_mouse - local_length)< 24.64);
 8008022:	bf00      	nop
 8008024:	4b23      	ldr	r3, [pc, #140]	; (80080b4 <out_L135+0x284>)
 8008026:	ed93 7a00 	vldr	s14, [r3]
 800802a:	edd7 7a03 	vldr	s15, [r7, #12]
 800802e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008032:	ee17 0a90 	vmov	r0, s15
 8008036:	f7f8 fa8f 	bl	8000558 <__aeabi_f2d>
 800803a:	a311      	add	r3, pc, #68	; (adr r3, 8008080 <out_L135+0x250>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fd54 	bl	8000aec <__aeabi_dcmplt>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1ec      	bne.n	8008024 <out_L135+0x1f4>

	len_mouse = 0.0;	run_mode = STRAIGHT_MODE;
 800804a:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <out_L135+0x284>)
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <out_L135+0x288>)
 8008054:	2201      	movs	r2, #1
 8008056:	601a      	str	r2, [r3, #0]
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	00000000 	.word	0x00000000
 800806c:	4060e000 	.word	0x4060e000
 8008070:	fc8b007a 	.word	0xfc8b007a
 8008074:	400921fa 	.word	0x400921fa
 8008078:	306f3395 	.word	0x306f3395
 800807c:	3fc41b2f 	.word	0x3fc41b2f
 8008080:	0a3d70a4 	.word	0x0a3d70a4
 8008084:	4038a3d7 	.word	0x4038a3d7
 8008088:	2000d224 	.word	0x2000d224
 800808c:	2000821c 	.word	0x2000821c
 8008090:	2000d210 	.word	0x2000d210
 8008094:	2000d1d8 	.word	0x2000d1d8
 8008098:	200004ec 	.word	0x200004ec
 800809c:	2000a16c 	.word	0x2000a16c
 80080a0:	2000d05c 	.word	0x2000d05c
 80080a4:	2000d198 	.word	0x2000d198
 80080a8:	20012398 	.word	0x20012398
 80080ac:	2000f480 	.word	0x2000f480
 80080b0:	2000d064 	.word	0x2000d064
 80080b4:	200123b8 	.word	0x200123b8
 80080b8:	2000a170 	.word	0x2000a170
 80080bc:	200002dc 	.word	0x200002dc
 80080c0:	20008208 	.word	0x20008208
 80080c4:	41860000 	.word	0x41860000
 80080c8:	2001044c 	.word	0x2001044c
 80080cc:	20008218 	.word	0x20008218
 80080d0:	437b53ce 	.word	0x437b53ce
 80080d4:	41490fd8 	.word	0x41490fd8
 80080d8:	40668000 	.word	0x40668000
 80080dc:	2000d43c 	.word	0x2000d43c
 80080e0:	3e20d97a 	.word	0x3e20d97a
 80080e4:	43070000 	.word	0x43070000

080080e8 <v_R90>:

void v_R90(){
 80080e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
	error_cnt = 0;
 80080f0:	4bad      	ldr	r3, [pc, #692]	; (80083a8 <v_R90+0x2c0>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 80080f6:	4bad      	ldr	r3, [pc, #692]	; (80083ac <v_R90+0x2c4>)
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	4bac      	ldr	r3, [pc, #688]	; (80083b0 <v_R90+0x2c8>)
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8008106:	4bab      	ldr	r3, [pc, #684]	; (80083b4 <v_R90+0x2cc>)
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	4baa      	ldr	r3, [pc, #680]	; (80083b8 <v_R90+0x2d0>)
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 800811c:	4ba7      	ldr	r3, [pc, #668]	; (80083bc <v_R90+0x2d4>)
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	4ba6      	ldr	r3, [pc, #664]	; (80083c0 <v_R90+0x2d8>)
 8008126:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	4ba5      	ldr	r3, [pc, #660]	; (80083c4 <v_R90+0x2dc>)
 800812e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008132:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8008134:	4ba4      	ldr	r3, [pc, #656]	; (80083c8 <v_R90+0x2e0>)
 8008136:	2201      	movs	r2, #1
 8008138:	771a      	strb	r2, [r3, #28]
 800813a:	4ba4      	ldr	r3, [pc, #656]	; (80083cc <v_R90+0x2e4>)
 800813c:	2200      	movs	r2, #0
 800813e:	819a      	strh	r2, [r3, #12]
 8008140:	4ba3      	ldr	r3, [pc, #652]	; (80083d0 <v_R90+0x2e8>)
 8008142:	2200      	movs	r2, #0
 8008144:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = TURN_MODE;
 8008146:	4ba3      	ldr	r3, [pc, #652]	; (80083d4 <v_R90+0x2ec>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	4ba2      	ldr	r3, [pc, #648]	; (80083d8 <v_R90+0x2f0>)
 800814e:	2202      	movs	r2, #2
 8008150:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8008152:	4ba2      	ldr	r3, [pc, #648]	; (80083dc <v_R90+0x2f4>)
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	4ba1      	ldr	r3, [pc, #644]	; (80083e0 <v_R90+0x2f8>)
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
	int log_cnt = 0;	int flag = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
	//while((len_mouse - local_length)< 10.74);
	while((len_mouse - local_length)< 10.74+7.5){
 800816a:	e02f      	b.n	80081cc <v_R90+0xe4>
		if(sen_fl.value > STOP_SEN_V90_FL) break;
 800816c:	4b9d      	ldr	r3, [pc, #628]	; (80083e4 <v_R90+0x2fc>)
 800816e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008172:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008176:	4293      	cmp	r3, r2
 8008178:	dc3c      	bgt.n	80081f4 <v_R90+0x10c>
		if(log_cnt > CORRECTION_CNT && sen_r.cnt == 0 && flag == 0){
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b14      	cmp	r3, #20
 800817e:	dd0f      	ble.n	80081a0 <v_R90+0xb8>
 8008180:	4b92      	ldr	r3, [pc, #584]	; (80083cc <v_R90+0x2e4>)
 8008182:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <v_R90+0xb8>
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <v_R90+0xb8>
			local_length = 0.0;len_mouse =  V90_STOP_SS; flag = 1;
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
 8008196:	4b8f      	ldr	r3, [pc, #572]	; (80083d4 <v_R90+0x2ec>)
 8008198:	4a93      	ldr	r2, [pc, #588]	; (80083e8 <v_R90+0x300>)
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	2301      	movs	r3, #1
 800819e:	613b      	str	r3, [r7, #16]
		}
		if((len_mouse - local_length) > 15.5 && flag == 0 && sen_r.is_wall == false) break;
 80081a0:	4b8c      	ldr	r3, [pc, #560]	; (80083d4 <v_R90+0x2ec>)
 80081a2:	ed93 7a00 	vldr	s14, [r3]
 80081a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80081aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081ae:	eeb2 7a0f 	vmov.f32	s14, #47	; 0x41780000  15.5
 80081b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ba:	dc00      	bgt.n	80081be <v_R90+0xd6>
 80081bc:	e006      	b.n	80081cc <v_R90+0xe4>
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <v_R90+0xe4>
 80081c4:	4b81      	ldr	r3, [pc, #516]	; (80083cc <v_R90+0x2e4>)
 80081c6:	7b9b      	ldrb	r3, [r3, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <v_R90+0x110>
	while((len_mouse - local_length)< 10.74+7.5){
 80081cc:	4b81      	ldr	r3, [pc, #516]	; (80083d4 <v_R90+0x2ec>)
 80081ce:	ed93 7a00 	vldr	s14, [r3]
 80081d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80081d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081da:	ee17 0a90 	vmov	r0, s15
 80081de:	f7f8 f9bb 	bl	8000558 <__aeabi_f2d>
 80081e2:	a36b      	add	r3, pc, #428	; (adr r3, 8008390 <v_R90+0x2a8>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 fc80 	bl	8000aec <__aeabi_dcmplt>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1bc      	bne.n	800816c <v_R90+0x84>
 80081f2:	e002      	b.n	80081fa <v_R90+0x112>
		if(sen_fl.value > STOP_SEN_V90_FL) break;
 80081f4:	bf00      	nop
 80081f6:	e000      	b.n	80081fa <v_R90+0x112>
		if((len_mouse - local_length) > 15.5 && flag == 0 && sen_r.is_wall == false) break;
 80081f8:	bf00      	nop
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 80081fa:	f04f 0300 	mov.w	r3, #0
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	4b7a      	ldr	r3, [pc, #488]	; (80083ec <v_R90+0x304>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;		turn_dir = RIGHT;
 8008206:	4b74      	ldr	r3, [pc, #464]	; (80083d8 <v_R90+0x2f0>)
 8008208:	2202      	movs	r2, #2
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	4b78      	ldr	r3, [pc, #480]	; (80083f0 <v_R90+0x308>)
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
	omega_accel = -V90_TURN_ACCEL; max_omega = -V90_TURN_SPEED;
 8008212:	4b72      	ldr	r3, [pc, #456]	; (80083dc <v_R90+0x2f4>)
 8008214:	4a77      	ldr	r2, [pc, #476]	; (80083f4 <v_R90+0x30c>)
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	4b71      	ldr	r3, [pc, #452]	; (80083e0 <v_R90+0x2f8>)
 800821a:	4a77      	ldr	r2, [pc, #476]	; (80083f8 <v_R90+0x310>)
 800821c:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 800821e:	4b6f      	ldr	r3, [pc, #444]	; (80083dc <v_R90+0x2f4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	607b      	str	r3, [r7, #4]

	while(((-90.0+SLA_L90_ERR) - (tar_degree - local_degree)) < (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8008224:	bf00      	nop
 8008226:	4b71      	ldr	r3, [pc, #452]	; (80083ec <v_R90+0x304>)
 8008228:	ed93 7a00 	vldr	s14, [r3]
 800822c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008234:	ee17 0a90 	vmov	r0, s15
 8008238:	f7f8 f98e 	bl	8000558 <__aeabi_f2d>
 800823c:	4603      	mov	r3, r0
 800823e:	460c      	mov	r4, r1
 8008240:	461a      	mov	r2, r3
 8008242:	4623      	mov	r3, r4
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	496c      	ldr	r1, [pc, #432]	; (80083fc <v_R90+0x314>)
 800824a:	f7f8 f825 	bl	8000298 <__aeabi_dsub>
 800824e:	4603      	mov	r3, r0
 8008250:	460c      	mov	r4, r1
 8008252:	4625      	mov	r5, r4
 8008254:	461c      	mov	r4, r3
 8008256:	4b62      	ldr	r3, [pc, #392]	; (80083e0 <v_R90+0x2f8>)
 8008258:	ed93 7a00 	vldr	s14, [r3]
 800825c:	4b60      	ldr	r3, [pc, #384]	; (80083e0 <v_R90+0x2f8>)
 800825e:	edd3 7a00 	vldr	s15, [r3]
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	ee17 0a90 	vmov	r0, s15
 800826a:	f7f8 f975 	bl	8000558 <__aeabi_f2d>
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7f8 f970 	bl	8000558 <__aeabi_f2d>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	f7f8 f80e 	bl	800029c <__adddf3>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fae8 	bl	800085c <__aeabi_ddiv>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	4b59      	ldr	r3, [pc, #356]	; (8008400 <v_R90+0x318>)
 800829a:	f7f8 f9b5 	bl	8000608 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4610      	mov	r0, r2
 80082a4:	4619      	mov	r1, r3
 80082a6:	a33c      	add	r3, pc, #240	; (adr r3, 8008398 <v_R90+0x2b0>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f8 fad6 	bl	800085c <__aeabi_ddiv>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 fc18 	bl	8000aec <__aeabi_dcmplt>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1b1      	bne.n	8008226 <v_R90+0x13e>

	omega_accel = V90_TURN_ACCEL;
 80082c2:	4b46      	ldr	r3, [pc, #280]	; (80083dc <v_R90+0x2f4>)
 80082c4:	4a4f      	ldr	r2, [pc, #316]	; (8008404 <v_R90+0x31c>)
 80082c6:	601a      	str	r2, [r3, #0]

	while((tar_degree - local_degree) > -90.0 ){
 80082c8:	e014      	b.n	80082f4 <v_R90+0x20c>
		if(tar_omega >- 0.05*PI) {	tar_omega = -0.05*PI;	omega_accel = 0.0;	}
 80082ca:	4b4f      	ldr	r3, [pc, #316]	; (8008408 <v_R90+0x320>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 f942 	bl	8000558 <__aeabi_f2d>
 80082d4:	a332      	add	r3, pc, #200	; (adr r3, 80083a0 <v_R90+0x2b8>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f8 fc25 	bl	8000b28 <__aeabi_dcmpgt>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d100      	bne.n	80082e6 <v_R90+0x1fe>
 80082e4:	e006      	b.n	80082f4 <v_R90+0x20c>
 80082e6:	4b48      	ldr	r3, [pc, #288]	; (8008408 <v_R90+0x320>)
 80082e8:	4a48      	ldr	r2, [pc, #288]	; (800840c <v_R90+0x324>)
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	4b3b      	ldr	r3, [pc, #236]	; (80083dc <v_R90+0x2f4>)
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) > -90.0 ){
 80082f4:	4b3d      	ldr	r3, [pc, #244]	; (80083ec <v_R90+0x304>)
 80082f6:	ed93 7a00 	vldr	s14, [r3]
 80082fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80082fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008302:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008410 <v_R90+0x328>
 8008306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	dcdc      	bgt.n	80082ca <v_R90+0x1e2>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8008310:	4b30      	ldr	r3, [pc, #192]	; (80083d4 <v_R90+0x2ec>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <v_R90+0x2f0>)
 8008318:	2203      	movs	r2, #3
 800831a:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 800831c:	4b27      	ldr	r3, [pc, #156]	; (80083bc <v_R90+0x2d4>)
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	4b26      	ldr	r3, [pc, #152]	; (80083c0 <v_R90+0x2d8>)
 8008326:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <v_R90+0x2dc>)
 800832e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008332:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 8008334:	4b29      	ldr	r3, [pc, #164]	; (80083dc <v_R90+0x2f4>)
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <v_R90+0x2f8>)
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	4b30      	ldr	r3, [pc, #192]	; (8008408 <v_R90+0x320>)
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 10.74);
	while((len_mouse - local_length)< 10.74+7.5);
 800834c:	bf00      	nop
 800834e:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <v_R90+0x2ec>)
 8008350:	ed93 7a00 	vldr	s14, [r3]
 8008354:	edd7 7a05 	vldr	s15, [r7, #20]
 8008358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800835c:	ee17 0a90 	vmov	r0, s15
 8008360:	f7f8 f8fa 	bl	8000558 <__aeabi_f2d>
 8008364:	a30a      	add	r3, pc, #40	; (adr r3, 8008390 <v_R90+0x2a8>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f7f8 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1ec      	bne.n	800834e <v_R90+0x266>
	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 8008374:	4b17      	ldr	r3, [pc, #92]	; (80083d4 <v_R90+0x2ec>)
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <v_R90+0x2f0>)
 800837e:	2203      	movs	r2, #3
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	bf00      	nop
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800838c:	f3af 8000 	nop.w
 8008390:	a3d70a3e 	.word	0xa3d70a3e
 8008394:	40323d70 	.word	0x40323d70
 8008398:	fc8b007a 	.word	0xfc8b007a
 800839c:	400921fa 	.word	0x400921fa
 80083a0:	306f3395 	.word	0x306f3395
 80083a4:	bfc41b2f 	.word	0xbfc41b2f
 80083a8:	2000d224 	.word	0x2000d224
 80083ac:	2000821c 	.word	0x2000821c
 80083b0:	2000d210 	.word	0x2000d210
 80083b4:	2000d1d8 	.word	0x2000d1d8
 80083b8:	200004ec 	.word	0x200004ec
 80083bc:	2000a16c 	.word	0x2000a16c
 80083c0:	2000d05c 	.word	0x2000d05c
 80083c4:	2000d198 	.word	0x2000d198
 80083c8:	20012398 	.word	0x20012398
 80083cc:	2000f480 	.word	0x2000f480
 80083d0:	2000d064 	.word	0x2000d064
 80083d4:	200123b8 	.word	0x200123b8
 80083d8:	2000a170 	.word	0x2000a170
 80083dc:	200002dc 	.word	0x200002dc
 80083e0:	20008208 	.word	0x20008208
 80083e4:	2000d1c8 	.word	0x2000d1c8
 80083e8:	41700000 	.word	0x41700000
 80083ec:	2001044c 	.word	0x2001044c
 80083f0:	20008218 	.word	0x20008218
 80083f4:	c39d1461 	.word	0xc39d1461
 80083f8:	c17b53ce 	.word	0xc17b53ce
 80083fc:	c0568000 	.word	0xc0568000
 8008400:	40668000 	.word	0x40668000
 8008404:	439d1461 	.word	0x439d1461
 8008408:	2000d43c 	.word	0x2000d43c
 800840c:	be20d97a 	.word	0xbe20d97a
 8008410:	c2b40000 	.word	0xc2b40000
 8008414:	00000000 	.word	0x00000000

08008418 <v_L90>:

void v_L90(){
 8008418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
	error_cnt = 0;
 8008420:	4baf      	ldr	r3, [pc, #700]	; (80086e0 <v_L90+0x2c8>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

	I_omega = 0.0;I_tar_omega = 0.0;
 8008426:	4baf      	ldr	r3, [pc, #700]	; (80086e4 <v_L90+0x2cc>)
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	4bae      	ldr	r3, [pc, #696]	; (80086e8 <v_L90+0x2d0>)
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8008436:	4bad      	ldr	r3, [pc, #692]	; (80086ec <v_L90+0x2d4>)
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	4bac      	ldr	r3, [pc, #688]	; (80086f0 <v_L90+0x2d8>)
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	601a      	str	r2, [r3, #0]

	float local_length = 0.0;
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
	accel = 0.0;	max_speed = 0.5; 	tar_speed = 0.5;
 800844c:	4ba9      	ldr	r3, [pc, #676]	; (80086f4 <v_L90+0x2dc>)
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	4ba8      	ldr	r3, [pc, #672]	; (80086f8 <v_L90+0x2e0>)
 8008456:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	4ba7      	ldr	r3, [pc, #668]	; (80086fc <v_L90+0x2e4>)
 800845e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008462:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;	sen_r.cnt = 0;	sen_l.cnt = 0;
 8008464:	4ba6      	ldr	r3, [pc, #664]	; (8008700 <v_L90+0x2e8>)
 8008466:	2201      	movs	r2, #1
 8008468:	771a      	strb	r2, [r3, #28]
 800846a:	4ba6      	ldr	r3, [pc, #664]	; (8008704 <v_L90+0x2ec>)
 800846c:	2200      	movs	r2, #0
 800846e:	819a      	strh	r2, [r3, #12]
 8008470:	4ba5      	ldr	r3, [pc, #660]	; (8008708 <v_L90+0x2f0>)
 8008472:	2200      	movs	r2, #0
 8008474:	819a      	strh	r2, [r3, #12]

	local_length = len_mouse;	run_mode = TURN_MODE;
 8008476:	4ba5      	ldr	r3, [pc, #660]	; (800870c <v_L90+0x2f4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	4ba4      	ldr	r3, [pc, #656]	; (8008710 <v_L90+0x2f8>)
 800847e:	2202      	movs	r2, #2
 8008480:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 			max_omega = 0.0;
 8008482:	4ba4      	ldr	r3, [pc, #656]	; (8008714 <v_L90+0x2fc>)
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	4ba3      	ldr	r3, [pc, #652]	; (8008718 <v_L90+0x300>)
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
	int log_cnt = 0;	int flag = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]
	//while((len_mouse - local_length)< 10.74);
	while((len_mouse - local_length)< 10.74+7.5){
 800849a:	e02f      	b.n	80084fc <v_L90+0xe4>
		if(sen_fr.value > STOP_SEN_V90_FR) break;
 800849c:	4b9f      	ldr	r3, [pc, #636]	; (800871c <v_L90+0x304>)
 800849e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80084a6:	4293      	cmp	r3, r2
 80084a8:	dc3c      	bgt.n	8008524 <v_L90+0x10c>
		if(log_cnt > CORRECTION_CNT && sen_l.cnt == 0 && flag == 0){
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b14      	cmp	r3, #20
 80084ae:	dd0f      	ble.n	80084d0 <v_L90+0xb8>
 80084b0:	4b95      	ldr	r3, [pc, #596]	; (8008708 <v_L90+0x2f0>)
 80084b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <v_L90+0xb8>
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <v_L90+0xb8>
			local_length = 0.0;len_mouse =  V90_STOP_SS; flag = 1;
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	4b91      	ldr	r3, [pc, #580]	; (800870c <v_L90+0x2f4>)
 80084c8:	4a95      	ldr	r2, [pc, #596]	; (8008720 <v_L90+0x308>)
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	2301      	movs	r3, #1
 80084ce:	613b      	str	r3, [r7, #16]
		}
		if((len_mouse - local_length) > 15.5 && flag == 0 && sen_l.is_wall == false) break;
 80084d0:	4b8e      	ldr	r3, [pc, #568]	; (800870c <v_L90+0x2f4>)
 80084d2:	ed93 7a00 	vldr	s14, [r3]
 80084d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80084da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084de:	eeb2 7a0f 	vmov.f32	s14, #47	; 0x41780000  15.5
 80084e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	dc00      	bgt.n	80084ee <v_L90+0xd6>
 80084ec:	e006      	b.n	80084fc <v_L90+0xe4>
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <v_L90+0xe4>
 80084f4:	4b84      	ldr	r3, [pc, #528]	; (8008708 <v_L90+0x2f0>)
 80084f6:	7b9b      	ldrb	r3, [r3, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d015      	beq.n	8008528 <v_L90+0x110>
	while((len_mouse - local_length)< 10.74+7.5){
 80084fc:	4b83      	ldr	r3, [pc, #524]	; (800870c <v_L90+0x2f4>)
 80084fe:	ed93 7a00 	vldr	s14, [r3]
 8008502:	edd7 7a05 	vldr	s15, [r7, #20]
 8008506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800850a:	ee17 0a90 	vmov	r0, s15
 800850e:	f7f8 f823 	bl	8000558 <__aeabi_f2d>
 8008512:	a36d      	add	r3, pc, #436	; (adr r3, 80086c8 <v_L90+0x2b0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f8 fae8 	bl	8000aec <__aeabi_dcmplt>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1bc      	bne.n	800849c <v_L90+0x84>
 8008522:	e002      	b.n	800852a <v_L90+0x112>
		if(sen_fr.value > STOP_SEN_V90_FR) break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <v_L90+0x112>
		if((len_mouse - local_length) > 15.5 && flag == 0 && sen_l.is_wall == false) break;
 8008528:	bf00      	nop
	}

	float local_degree = 0.0;	local_degree = tar_degree;
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	60bb      	str	r3, [r7, #8]
 8008530:	4b7c      	ldr	r3, [pc, #496]	; (8008724 <v_L90+0x30c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60bb      	str	r3, [r7, #8]
	run_mode = TURN_MODE;	turn_dir = LEFT;
 8008536:	4b76      	ldr	r3, [pc, #472]	; (8008710 <v_L90+0x2f8>)
 8008538:	2202      	movs	r2, #2
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	4b7a      	ldr	r3, [pc, #488]	; (8008728 <v_L90+0x310>)
 800853e:	2201      	movs	r2, #1
 8008540:	601a      	str	r2, [r3, #0]
	omega_accel = V90_TURN_ACCEL; max_omega = V90_TURN_SPEED;
 8008542:	4b74      	ldr	r3, [pc, #464]	; (8008714 <v_L90+0x2fc>)
 8008544:	4a79      	ldr	r2, [pc, #484]	; (800872c <v_L90+0x314>)
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	4b73      	ldr	r3, [pc, #460]	; (8008718 <v_L90+0x300>)
 800854a:	4a79      	ldr	r2, [pc, #484]	; (8008730 <v_L90+0x318>)
 800854c:	601a      	str	r2, [r3, #0]

	float omega_acc = omega_accel;
 800854e:	4b71      	ldr	r3, [pc, #452]	; (8008714 <v_L90+0x2fc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	607b      	str	r3, [r7, #4]

	while(((90.0+SLA_L90_ERR) - (tar_degree - local_degree)) > (max_omega*max_omega)/(2.0*omega_acc)*180.0/PI);
 8008554:	bf00      	nop
 8008556:	4b73      	ldr	r3, [pc, #460]	; (8008724 <v_L90+0x30c>)
 8008558:	ed93 7a00 	vldr	s14, [r3]
 800855c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008564:	ee17 0a90 	vmov	r0, s15
 8008568:	f7f7 fff6 	bl	8000558 <__aeabi_f2d>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	461a      	mov	r2, r3
 8008572:	4623      	mov	r3, r4
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	496e      	ldr	r1, [pc, #440]	; (8008734 <v_L90+0x31c>)
 800857a:	f7f7 fe8d 	bl	8000298 <__aeabi_dsub>
 800857e:	4603      	mov	r3, r0
 8008580:	460c      	mov	r4, r1
 8008582:	4625      	mov	r5, r4
 8008584:	461c      	mov	r4, r3
 8008586:	4b64      	ldr	r3, [pc, #400]	; (8008718 <v_L90+0x300>)
 8008588:	ed93 7a00 	vldr	s14, [r3]
 800858c:	4b62      	ldr	r3, [pc, #392]	; (8008718 <v_L90+0x300>)
 800858e:	edd3 7a00 	vldr	s15, [r3]
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	ee17 0a90 	vmov	r0, s15
 800859a:	f7f7 ffdd 	bl	8000558 <__aeabi_f2d>
 800859e:	4680      	mov	r8, r0
 80085a0:	4689      	mov	r9, r1
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7f7 ffd8 	bl	8000558 <__aeabi_f2d>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	f7f7 fe76 	bl	800029c <__adddf3>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f8 f950 	bl	800085c <__aeabi_ddiv>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4610      	mov	r0, r2
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	4b5b      	ldr	r3, [pc, #364]	; (8008738 <v_L90+0x320>)
 80085ca:	f7f8 f81d 	bl	8000608 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4610      	mov	r0, r2
 80085d4:	4619      	mov	r1, r3
 80085d6:	a33e      	add	r3, pc, #248	; (adr r3, 80086d0 <v_L90+0x2b8>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f7f8 f93e 	bl	800085c <__aeabi_ddiv>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f8 fa9e 	bl	8000b28 <__aeabi_dcmpgt>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1b1      	bne.n	8008556 <v_L90+0x13e>

	omega_accel = -omega_acc;
 80085f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80085f6:	eef1 7a67 	vneg.f32	s15, s15
 80085fa:	4b46      	ldr	r3, [pc, #280]	; (8008714 <v_L90+0x2fc>)
 80085fc:	edc3 7a00 	vstr	s15, [r3]

	while((tar_degree - local_degree) < 90.0 ){
 8008600:	e014      	b.n	800862c <v_L90+0x214>
		if(tar_omega < 0.05*PI) {	tar_omega = 0.05*PI;	omega_accel = 0.0;	}
 8008602:	4b4e      	ldr	r3, [pc, #312]	; (800873c <v_L90+0x324>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7f7 ffa6 	bl	8000558 <__aeabi_f2d>
 800860c:	a332      	add	r3, pc, #200	; (adr r3, 80086d8 <v_L90+0x2c0>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f8 fa6b 	bl	8000aec <__aeabi_dcmplt>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d100      	bne.n	800861e <v_L90+0x206>
 800861c:	e006      	b.n	800862c <v_L90+0x214>
 800861e:	4b47      	ldr	r3, [pc, #284]	; (800873c <v_L90+0x324>)
 8008620:	4a47      	ldr	r2, [pc, #284]	; (8008740 <v_L90+0x328>)
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <v_L90+0x2fc>)
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
	while((tar_degree - local_degree) < 90.0 ){
 800862c:	4b3d      	ldr	r3, [pc, #244]	; (8008724 <v_L90+0x30c>)
 800862e:	ed93 7a00 	vldr	s14, [r3]
 8008632:	edd7 7a02 	vldr	s15, [r7, #8]
 8008636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800863a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8008744 <v_L90+0x32c>
 800863e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	d4dc      	bmi.n	8008602 <v_L90+0x1ea>
	}

	local_length = len_mouse;	run_mode = DIALOG_MODE;
 8008648:	4b30      	ldr	r3, [pc, #192]	; (800870c <v_L90+0x2f4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	617b      	str	r3, [r7, #20]
 800864e:	4b30      	ldr	r3, [pc, #192]	; (8008710 <v_L90+0x2f8>)
 8008650:	2203      	movs	r2, #3
 8008652:	601a      	str	r2, [r3, #0]

	accel = 0.0; 		max_speed = 0.5;		tar_speed = 0.5;
 8008654:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <v_L90+0x2dc>)
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	4b26      	ldr	r3, [pc, #152]	; (80086f8 <v_L90+0x2e0>)
 800865e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	4b25      	ldr	r3, [pc, #148]	; (80086fc <v_L90+0x2e4>)
 8008666:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800866a:	601a      	str	r2, [r3, #0]
	omega_accel = 0.0; 	max_omega = 0.0; 		tar_omega = 0.0;
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <v_L90+0x2fc>)
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	4b28      	ldr	r3, [pc, #160]	; (8008718 <v_L90+0x300>)
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	4b2f      	ldr	r3, [pc, #188]	; (800873c <v_L90+0x324>)
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	601a      	str	r2, [r3, #0]

	//while((len_mouse - local_length)< 10.74);
	while((len_mouse - local_length)< 10.74+7.5);
 8008684:	bf00      	nop
 8008686:	4b21      	ldr	r3, [pc, #132]	; (800870c <v_L90+0x2f4>)
 8008688:	ed93 7a00 	vldr	s14, [r3]
 800868c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008694:	ee17 0a90 	vmov	r0, s15
 8008698:	f7f7 ff5e 	bl	8000558 <__aeabi_f2d>
 800869c:	a30a      	add	r3, pc, #40	; (adr r3, 80086c8 <v_L90+0x2b0>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f8 fa23 	bl	8000aec <__aeabi_dcmplt>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ec      	bne.n	8008686 <v_L90+0x26e>
	len_mouse = 0.0;	run_mode = DIALOG_MODE;
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <v_L90+0x2f4>)
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	4b16      	ldr	r3, [pc, #88]	; (8008710 <v_L90+0x2f8>)
 80086b6:	2203      	movs	r2, #3
 80086b8:	601a      	str	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80086c4:	f3af 8000 	nop.w
 80086c8:	a3d70a3e 	.word	0xa3d70a3e
 80086cc:	40323d70 	.word	0x40323d70
 80086d0:	fc8b007a 	.word	0xfc8b007a
 80086d4:	400921fa 	.word	0x400921fa
 80086d8:	306f3395 	.word	0x306f3395
 80086dc:	3fc41b2f 	.word	0x3fc41b2f
 80086e0:	2000d224 	.word	0x2000d224
 80086e4:	2000821c 	.word	0x2000821c
 80086e8:	2000d210 	.word	0x2000d210
 80086ec:	2000d1d8 	.word	0x2000d1d8
 80086f0:	200004ec 	.word	0x200004ec
 80086f4:	2000a16c 	.word	0x2000a16c
 80086f8:	2000d05c 	.word	0x2000d05c
 80086fc:	2000d198 	.word	0x2000d198
 8008700:	20012398 	.word	0x20012398
 8008704:	2000f480 	.word	0x2000f480
 8008708:	2000d064 	.word	0x2000d064
 800870c:	200123b8 	.word	0x200123b8
 8008710:	2000a170 	.word	0x2000a170
 8008714:	200002dc 	.word	0x200002dc
 8008718:	20008208 	.word	0x20008208
 800871c:	2000d1b8 	.word	0x2000d1b8
 8008720:	41700000 	.word	0x41700000
 8008724:	2001044c 	.word	0x2001044c
 8008728:	20008218 	.word	0x20008218
 800872c:	439d1461 	.word	0x439d1461
 8008730:	417b53ce 	.word	0x417b53ce
 8008734:	40568000 	.word	0x40568000
 8008738:	40668000 	.word	0x40668000
 800873c:	2000d43c 	.word	0x2000d43c
 8008740:	3e20d97a 	.word	0x3e20d97a
 8008744:	42b40000 	.word	0x42b40000

08008748 <diagonal>:
void diagonal(float acc,float max_sp,float end_sp){
 8008748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	ed87 0a03 	vstr	s0, [r7, #12]
 8008754:	edc7 0a02 	vstr	s1, [r7, #8]
 8008758:	ed87 1a01 	vstr	s2, [r7, #4]
	error_cnt = 0;
 800875c:	4baa      	ldr	r3, [pc, #680]	; (8008a08 <diagonal+0x2c0>)
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	con_wall.enable = true;
 8008762:	4baa      	ldr	r3, [pc, #680]	; (8008a0c <diagonal+0x2c4>)
 8008764:	2201      	movs	r2, #1
 8008766:	771a      	strb	r2, [r3, #28]
	I_omega = 0.0;I_tar_omega = 0.0;
 8008768:	4ba9      	ldr	r3, [pc, #676]	; (8008a10 <diagonal+0x2c8>)
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	4ba8      	ldr	r3, [pc, #672]	; (8008a14 <diagonal+0x2cc>)
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
	I_speed = 0.0;I_tar_speed = 0.0;
 8008778:	4ba7      	ldr	r3, [pc, #668]	; (8008a18 <diagonal+0x2d0>)
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	4ba6      	ldr	r3, [pc, #664]	; (8008a1c <diagonal+0x2d4>)
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
	float len_target = DIAG_SECTION;
 8008788:	4ba5      	ldr	r3, [pc, #660]	; (8008a20 <diagonal+0x2d8>)
 800878a:	617b      	str	r3, [r7, #20]
	tar_omega = 0.0;omega_accel = 0.0;
 800878c:	4ba5      	ldr	r3, [pc, #660]	; (8008a24 <diagonal+0x2dc>)
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	4ba4      	ldr	r3, [pc, #656]	; (8008a28 <diagonal+0x2e0>)
 8008796:	f04f 0200 	mov.w	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

	run_mode = DIALOG_MODE;
 800879c:	4ba3      	ldr	r3, [pc, #652]	; (8008a2c <diagonal+0x2e4>)
 800879e:	2203      	movs	r2, #3
 80087a0:	601a      	str	r2, [r3, #0]
	if(end_sp == 0.0){
 80087a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80087a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	f040 8099 	bne.w	80088e4 <diagonal+0x19c>

		max_speed = max_sp;accel = acc;
 80087b2:	4a9f      	ldr	r2, [pc, #636]	; (8008a30 <diagonal+0x2e8>)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	4a9e      	ldr	r2, [pc, #632]	; (8008a34 <diagonal+0x2ec>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6013      	str	r3, [r2, #0]

		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp)/(2.0*acc)){
 80087be:	e00f      	b.n	80087e0 <diagonal+0x98>
			if(tar_speed >= max_speed){		accel = 0.0;	}
 80087c0:	4b9d      	ldr	r3, [pc, #628]	; (8008a38 <diagonal+0x2f0>)
 80087c2:	ed93 7a00 	vldr	s14, [r3]
 80087c6:	4b9a      	ldr	r3, [pc, #616]	; (8008a30 <diagonal+0x2e8>)
 80087c8:	edd3 7a00 	vldr	s15, [r3]
 80087cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d4:	da00      	bge.n	80087d8 <diagonal+0x90>
 80087d6:	e003      	b.n	80087e0 <diagonal+0x98>
 80087d8:	4b96      	ldr	r3, [pc, #600]	; (8008a34 <diagonal+0x2ec>)
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp)/(2.0*acc)){
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f7f7 feb9 	bl	8000558 <__aeabi_f2d>
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	4b94      	ldr	r3, [pc, #592]	; (8008a3c <diagonal+0x2f4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 feb2 	bl	8000558 <__aeabi_f2d>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4620      	mov	r0, r4
 80087fa:	4629      	mov	r1, r5
 80087fc:	f7f7 fd4c 	bl	8000298 <__aeabi_dsub>
 8008800:	4603      	mov	r3, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4625      	mov	r5, r4
 8008806:	461c      	mov	r4, r3
 8008808:	ed97 7a02 	vldr	s14, [r7, #8]
 800880c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008814:	ee17 0a90 	vmov	r0, s15
 8008818:	f7f7 fe9e 	bl	8000558 <__aeabi_f2d>
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	4b87      	ldr	r3, [pc, #540]	; (8008a40 <diagonal+0x2f8>)
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4690      	mov	r8, r2
 800882c:	4699      	mov	r9, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7f7 fe92 	bl	8000558 <__aeabi_f2d>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	f7f7 fd30 	bl	800029c <__adddf3>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f8 f80a 	bl	800085c <__aeabi_ddiv>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f8 f96a 	bl	8000b28 <__aeabi_dcmpgt>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1b2      	bne.n	80087c0 <diagonal+0x78>
		}
		accel = -acc;
 800885a:	edd7 7a03 	vldr	s15, [r7, #12]
 800885e:	eef1 7a67 	vneg.f32	s15, s15
 8008862:	4b74      	ldr	r3, [pc, #464]	; (8008a34 <diagonal+0x2ec>)
 8008864:	edc3 7a00 	vstr	s15, [r3]
		while(len_mouse < len_target - 1.0){
 8008868:	e014      	b.n	8008894 <diagonal+0x14c>
			if(tar_speed < 0.05){	accel = 0.0;	tar_speed = 0.05;	}
 800886a:	4b73      	ldr	r3, [pc, #460]	; (8008a38 <diagonal+0x2f0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f7f7 fe72 	bl	8000558 <__aeabi_f2d>
 8008874:	a362      	add	r3, pc, #392	; (adr r3, 8008a00 <diagonal+0x2b8>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f8 f937 	bl	8000aec <__aeabi_dcmplt>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d100      	bne.n	8008886 <diagonal+0x13e>
 8008884:	e006      	b.n	8008894 <diagonal+0x14c>
 8008886:	4b6b      	ldr	r3, [pc, #428]	; (8008a34 <diagonal+0x2ec>)
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	4b6a      	ldr	r3, [pc, #424]	; (8008a38 <diagonal+0x2f0>)
 8008890:	4a6c      	ldr	r2, [pc, #432]	; (8008a44 <diagonal+0x2fc>)
 8008892:	601a      	str	r2, [r3, #0]
		while(len_mouse < len_target - 1.0){
 8008894:	4b69      	ldr	r3, [pc, #420]	; (8008a3c <diagonal+0x2f4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f7f7 fe5d 	bl	8000558 <__aeabi_f2d>
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	6978      	ldr	r0, [r7, #20]
 80088a4:	f7f7 fe58 	bl	8000558 <__aeabi_f2d>
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	4b66      	ldr	r3, [pc, #408]	; (8008a48 <diagonal+0x300>)
 80088ae:	f7f7 fcf3 	bl	8000298 <__aeabi_dsub>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f8 f917 	bl	8000aec <__aeabi_dcmplt>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1d2      	bne.n	800886a <diagonal+0x122>
		}
		accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 80088c4:	4b5b      	ldr	r3, [pc, #364]	; (8008a34 <diagonal+0x2ec>)
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	4b58      	ldr	r3, [pc, #352]	; (8008a30 <diagonal+0x2e8>)
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	4b58      	ldr	r3, [pc, #352]	; (8008a38 <diagonal+0x2f0>)
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80088dc:	2064      	movs	r0, #100	; 0x64
 80088de:	f005 f915 	bl	800db0c <HAL_Delay>
 80088e2:	e07f      	b.n	80089e4 <diagonal+0x29c>

	}else{
		//MY_LED(0x10);
		accel = acc;
 80088e4:	4a53      	ldr	r2, [pc, #332]	; (8008a34 <diagonal+0x2ec>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6013      	str	r3, [r2, #0]
		max_speed = max_sp;
 80088ea:	4a51      	ldr	r2, [pc, #324]	; (8008a30 <diagonal+0x2e8>)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6013      	str	r3, [r2, #0]

		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp - end_sp*end_sp)/(2.0*acc)){
 80088f0:	e00f      	b.n	8008912 <diagonal+0x1ca>
			if(tar_speed >= max_speed){		accel = 0.0;	}
 80088f2:	4b51      	ldr	r3, [pc, #324]	; (8008a38 <diagonal+0x2f0>)
 80088f4:	ed93 7a00 	vldr	s14, [r3]
 80088f8:	4b4d      	ldr	r3, [pc, #308]	; (8008a30 <diagonal+0x2e8>)
 80088fa:	edd3 7a00 	vldr	s15, [r3]
 80088fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008906:	da00      	bge.n	800890a <diagonal+0x1c2>
 8008908:	e003      	b.n	8008912 <diagonal+0x1ca>
 800890a:	4b4a      	ldr	r3, [pc, #296]	; (8008a34 <diagonal+0x2ec>)
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
		while((len_target-0.0)-len_mouse > 1000.0*(max_sp*max_sp - end_sp*end_sp)/(2.0*acc)){
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f7f7 fe20 	bl	8000558 <__aeabi_f2d>
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <diagonal+0x2f4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7f7 fe19 	bl	8000558 <__aeabi_f2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fcb3 	bl	8000298 <__aeabi_dsub>
 8008932:	4603      	mov	r3, r0
 8008934:	460c      	mov	r4, r1
 8008936:	4625      	mov	r5, r4
 8008938:	461c      	mov	r4, r3
 800893a:	ed97 7a02 	vldr	s14, [r7, #8]
 800893e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008946:	edd7 6a01 	vldr	s13, [r7, #4]
 800894a:	edd7 7a01 	vldr	s15, [r7, #4]
 800894e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008956:	ee17 0a90 	vmov	r0, s15
 800895a:	f7f7 fdfd 	bl	8000558 <__aeabi_f2d>
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	4b37      	ldr	r3, [pc, #220]	; (8008a40 <diagonal+0x2f8>)
 8008964:	f7f7 fe50 	bl	8000608 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4690      	mov	r8, r2
 800896e:	4699      	mov	r9, r3
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7f7 fdf1 	bl	8000558 <__aeabi_f2d>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	f7f7 fc8f 	bl	800029c <__adddf3>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f7 ff69 	bl	800085c <__aeabi_ddiv>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f8c9 	bl	8000b28 <__aeabi_dcmpgt>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1aa      	bne.n	80088f2 <diagonal+0x1aa>
		}
		accel = -acc;
 800899c:	edd7 7a03 	vldr	s15, [r7, #12]
 80089a0:	eef1 7a67 	vneg.f32	s15, s15
 80089a4:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <diagonal+0x2ec>)
 80089a6:	edc3 7a00 	vstr	s15, [r3]
		while(len_mouse < len_target){
 80089aa:	e011      	b.n	80089d0 <diagonal+0x288>
			if(tar_speed <= end_sp){	tar_speed = end_sp; accel = 0.0;	}
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <diagonal+0x2f0>)
 80089ae:	edd3 7a00 	vldr	s15, [r3]
 80089b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80089b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	da00      	bge.n	80089c2 <diagonal+0x27a>
 80089c0:	e006      	b.n	80089d0 <diagonal+0x288>
 80089c2:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <diagonal+0x2f0>)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <diagonal+0x2ec>)
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
		while(len_mouse < len_target){
 80089d0:	4b1a      	ldr	r3, [pc, #104]	; (8008a3c <diagonal+0x2f4>)
 80089d2:	edd3 7a00 	vldr	s15, [r3]
 80089d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80089da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e2:	dce3      	bgt.n	80089ac <diagonal+0x264>
		}

	}

	accel = 0.0;	len_mouse = 0.0;
 80089e4:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <diagonal+0x2ec>)
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <diagonal+0x2f4>)
 80089ee:	f04f 0200 	mov.w	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80089fe:	bf00      	nop
 8008a00:	9999999a 	.word	0x9999999a
 8008a04:	3fa99999 	.word	0x3fa99999
 8008a08:	2000d224 	.word	0x2000d224
 8008a0c:	20012398 	.word	0x20012398
 8008a10:	2000821c 	.word	0x2000821c
 8008a14:	2000d210 	.word	0x2000d210
 8008a18:	2000d1d8 	.word	0x2000d1d8
 8008a1c:	200004ec 	.word	0x200004ec
 8008a20:	427e8f5c 	.word	0x427e8f5c
 8008a24:	2000d43c 	.word	0x2000d43c
 8008a28:	200002dc 	.word	0x200002dc
 8008a2c:	2000a170 	.word	0x2000a170
 8008a30:	2000d05c 	.word	0x2000d05c
 8008a34:	2000a16c 	.word	0x2000a16c
 8008a38:	2000d198 	.word	0x2000d198
 8008a3c:	200123b8 	.word	0x200123b8
 8008a40:	408f4000 	.word	0x408f4000
 8008a44:	3d4ccccd 	.word	0x3d4ccccd
 8008a48:	3ff00000 	.word	0x3ff00000

08008a4c <init_maze>:
int get_nextdir_zenmen(int *x, int *y,int goal_size ,int mask, t_direction *dir);			//次に行く方向の取得
//void search_adachi(int gx,int gy,int size);		//足立法
int end_search = 0;

//迷路の初期化
void init_maze(){
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e052      	b.n	8008afe <init_maze+0xb2>
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	e049      	b.n	8008af2 <init_maze+0xa6>
			wall[i][j].north = wall[i][j].east = wall[i][j].south = wall[i][j].west = UNKNOWN;
 8008a5e:	4a50      	ldr	r2, [pc, #320]	; (8008ba0 <init_maze+0x154>)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	441a      	add	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	441a      	add	r2, r3
 8008a6a:	7813      	ldrb	r3, [r2, #0]
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	f361 1387 	bfi	r3, r1, #6, #2
 8008a72:	7013      	strb	r3, [r2, #0]
 8008a74:	4a4a      	ldr	r2, [pc, #296]	; (8008ba0 <init_maze+0x154>)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	441a      	add	r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	4413      	add	r3, r2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008a86:	b2d9      	uxtb	r1, r3
 8008a88:	4a45      	ldr	r2, [pc, #276]	; (8008ba0 <init_maze+0x154>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	441a      	add	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	441a      	add	r2, r3
 8008a94:	7813      	ldrb	r3, [r2, #0]
 8008a96:	f361 1305 	bfi	r3, r1, #4, #2
 8008a9a:	7013      	strb	r3, [r2, #0]
 8008a9c:	4a40      	ldr	r2, [pc, #256]	; (8008ba0 <init_maze+0x154>)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	441a      	add	r2, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008aae:	b2d9      	uxtb	r1, r3
 8008ab0:	4a3b      	ldr	r2, [pc, #236]	; (8008ba0 <init_maze+0x154>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	441a      	add	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	441a      	add	r2, r3
 8008abc:	7813      	ldrb	r3, [r2, #0]
 8008abe:	f361 0383 	bfi	r3, r1, #2, #2
 8008ac2:	7013      	strb	r3, [r2, #0]
 8008ac4:	4a36      	ldr	r2, [pc, #216]	; (8008ba0 <init_maze+0x154>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	441a      	add	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4413      	add	r3, r2
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ad6:	b2d9      	uxtb	r1, r3
 8008ad8:	4a31      	ldr	r2, [pc, #196]	; (8008ba0 <init_maze+0x154>)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	441a      	add	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	441a      	add	r2, r3
 8008ae4:	7813      	ldrb	r3, [r2, #0]
 8008ae6:	f361 0301 	bfi	r3, r1, #0, #2
 8008aea:	7013      	strb	r3, [r2, #0]
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60bb      	str	r3, [r7, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b0f      	cmp	r3, #15
 8008af6:	ddb2      	ble.n	8008a5e <init_maze+0x12>
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b0f      	cmp	r3, #15
 8008b02:	dda9      	ble.n	8008a58 <init_maze+0xc>
		}
	}

	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 8008b04:	2300      	movs	r3, #0
 8008b06:	607b      	str	r3, [r7, #4]
 8008b08:	e016      	b.n	8008b38 <init_maze+0xec>
		wall[i][0].south = WALL;				//南側の壁を追加する
 8008b0a:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <init_maze+0x154>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	441a      	add	r2, r3
 8008b12:	7813      	ldrb	r3, [r2, #0]
 8008b14:	2101      	movs	r1, #1
 8008b16:	f361 1305 	bfi	r3, r1, #4, #2
 8008b1a:	7013      	strb	r3, [r2, #0]
		wall[i][MAZE_SIZE_Y - 1].north = WALL;	//北側の壁を追加する
 8008b1c:	4a20      	ldr	r2, [pc, #128]	; (8008ba0 <init_maze+0x154>)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	4413      	add	r3, r2
 8008b24:	f103 020f 	add.w	r2, r3, #15
 8008b28:	7813      	ldrb	r3, [r2, #0]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	f361 0301 	bfi	r3, r1, #0, #2
 8008b30:	7013      	strb	r3, [r2, #0]
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3301      	adds	r3, #1
 8008b36:	607b      	str	r3, [r7, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b0f      	cmp	r3, #15
 8008b3c:	dde5      	ble.n	8008b0a <init_maze+0xbe>
	}

	for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008b3e:	2300      	movs	r3, #0
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	e014      	b.n	8008b6e <init_maze+0x122>
		wall[0][j].west = WALL;					//西側の壁を追加する
 8008b44:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <init_maze+0x154>)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	441a      	add	r2, r3
 8008b4a:	7813      	ldrb	r3, [r2, #0]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	f361 1387 	bfi	r3, r1, #6, #2
 8008b52:	7013      	strb	r3, [r2, #0]
		wall[MAZE_SIZE_X - 1][j].east = WALL;	//東側の壁を追加する
 8008b54:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <init_maze+0x154>)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8008b5e:	7813      	ldrb	r3, [r2, #0]
 8008b60:	2101      	movs	r1, #1
 8008b62:	f361 0383 	bfi	r3, r1, #2, #2
 8008b66:	7013      	strb	r3, [r2, #0]
	for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b0f      	cmp	r3, #15
 8008b72:	dde7      	ble.n	8008b44 <init_maze+0xf8>
	}

	wall[0][0].east = wall[1][0].west = WALL;				//スタートの東側の壁を追加
 8008b74:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <init_maze+0x154>)
 8008b76:	7c13      	ldrb	r3, [r2, #16]
 8008b78:	2101      	movs	r1, #1
 8008b7a:	f361 1387 	bfi	r3, r1, #6, #2
 8008b7e:	7413      	strb	r3, [r2, #16]
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <init_maze+0x154>)
 8008b82:	7c1b      	ldrb	r3, [r3, #16]
 8008b84:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008b88:	b2d9      	uxtb	r1, r3
 8008b8a:	4a05      	ldr	r2, [pc, #20]	; (8008ba0 <init_maze+0x154>)
 8008b8c:	7813      	ldrb	r3, [r2, #0]
 8008b8e:	f361 0383 	bfi	r3, r1, #2, #2
 8008b92:	7013      	strb	r3, [r2, #0]

}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	2000d440 	.word	0x2000d440

08008ba4 <init_map>:

void init_map(int *x, int *y,int goal_size){
 8008ba4:	b480      	push	{r7}
 8008ba6:	b089      	sub	sp, #36	; 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
	for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	e014      	b.n	8008be0 <init_map+0x3c>
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	e00b      	b.n	8008bd4 <init_map+0x30>
			map[i][j] = 999;
 8008bbc:	491f      	ldr	r1, [pc, #124]	; (8008c3c <init_map+0x98>)
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	011a      	lsls	r2, r3, #4
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008bca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	ddf0      	ble.n	8008bbc <init_map+0x18>
	for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b0f      	cmp	r3, #15
 8008be4:	dde7      	ble.n	8008bb6 <init_map+0x12>
		}
	}

	for(int i = 0;i < goal_size;i++){
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e01c      	b.n	8008c26 <init_map+0x82>
		for(int j = 0;j < goal_size;j++){
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	e012      	b.n	8008c18 <init_map+0x74>
			map[x[i]][y[j]] = 0;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	440b      	add	r3, r1
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	490d      	ldr	r1, [pc, #52]	; (8008c3c <init_map+0x98>)
 8008c08:	0112      	lsls	r2, r2, #4
 8008c0a:	4413      	add	r3, r2
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0;j < goal_size;j++){
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	3301      	adds	r3, #1
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	dbe8      	blt.n	8008bf2 <init_map+0x4e>
	for(int i = 0;i < goal_size;i++){
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	3301      	adds	r3, #1
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	dbde      	blt.n	8008bec <init_map+0x48>
		}
	}

}
 8008c2e:	bf00      	nop
 8008c30:	3724      	adds	r7, #36	; 0x24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	200002e4 	.word	0x200002e4

08008c40 <init_map_zenmen>:

void init_map_zenmen(int *x, int *y,int goal_size){
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	; 0x28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
	if(end_search == 1){
 8008c4c:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <init_map_zenmen+0xf4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d13f      	bne.n	8008cd4 <init_map_zenmen+0x94>
		for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008c54:	2300      	movs	r3, #0
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
 8008c58:	e014      	b.n	8008c84 <init_map_zenmen+0x44>
			for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	e00b      	b.n	8008c78 <init_map_zenmen+0x38>
				map[i][j] = 999;
 8008c60:	4935      	ldr	r1, [pc, #212]	; (8008d38 <init_map_zenmen+0xf8>)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	011a      	lsls	r2, r3, #4
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008c6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	3301      	adds	r3, #1
 8008c76:	623b      	str	r3, [r7, #32]
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	ddf0      	ble.n	8008c60 <init_map_zenmen+0x20>
		for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	3301      	adds	r3, #1
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	dde7      	ble.n	8008c5a <init_map_zenmen+0x1a>
			}
		}
		for(int i = 0;i < goal_size;i++){
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	e01c      	b.n	8008cca <init_map_zenmen+0x8a>
			for(int j = 0;j < goal_size;j++){
 8008c90:	2300      	movs	r3, #0
 8008c92:	61bb      	str	r3, [r7, #24]
 8008c94:	e012      	b.n	8008cbc <init_map_zenmen+0x7c>
				map[x[i]][y[j]] = 0;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	440b      	add	r3, r1
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4923      	ldr	r1, [pc, #140]	; (8008d38 <init_map_zenmen+0xf8>)
 8008cac:	0112      	lsls	r2, r2, #4
 8008cae:	4413      	add	r3, r2
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0;j < goal_size;j++){
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	dbe8      	blt.n	8008c96 <init_map_zenmen+0x56>
		for(int i = 0;i < goal_size;i++){
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	dbde      	blt.n	8008c90 <init_map_zenmen+0x50>
				else							map[i][j] = 999;
			}
		}
	}

}
 8008cd2:	e02a      	b.n	8008d2a <init_map_zenmen+0xea>
		for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	e024      	b.n	8008d24 <init_map_zenmen+0xe4>
			for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008cda:	2300      	movs	r3, #0
 8008cdc:	613b      	str	r3, [r7, #16]
 8008cde:	e01b      	b.n	8008d18 <init_map_zenmen+0xd8>
				if( is_unknown(i,j) == true)	map[i][j] = 0;
 8008ce0:	6939      	ldr	r1, [r7, #16]
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f000 f964 	bl	8008fb0 <is_unknown>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d108      	bne.n	8008d00 <init_map_zenmen+0xc0>
 8008cee:	4912      	ldr	r1, [pc, #72]	; (8008d38 <init_map_zenmen+0xf8>)
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	011a      	lsls	r2, r3, #4
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8008cfe:	e008      	b.n	8008d12 <init_map_zenmen+0xd2>
				else							map[i][j] = 999;
 8008d00:	490d      	ldr	r1, [pc, #52]	; (8008d38 <init_map_zenmen+0xf8>)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	011a      	lsls	r2, r3, #4
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	dde0      	ble.n	8008ce0 <init_map_zenmen+0xa0>
		for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	ddd7      	ble.n	8008cda <init_map_zenmen+0x9a>
}
 8008d2a:	bf00      	nop
 8008d2c:	3728      	adds	r7, #40	; 0x28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000220 	.word	0x20000220
 8008d38:	200002e4 	.word	0x200002e4

08008d3c <i_am_goal>:

t_bool i_am_goal(int x,int y,int *gx,int *gy,int goal_size){
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	; 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
	t_bool flag = false;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < goal_size;i++){
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	e01e      	b.n	8008d92 <i_am_goal+0x56>
		for(int j = 0; j < goal_size;j++){
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e014      	b.n	8008d84 <i_am_goal+0x48>
			if(x == gx[i] && y == gy[j]) flag = true;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d109      	bne.n	8008d7e <i_am_goal+0x42>
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4413      	add	r3, r2
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d101      	bne.n	8008d7e <i_am_goal+0x42>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	77fb      	strb	r3, [r7, #31]
		for(int j = 0; j < goal_size;j++){
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	3301      	adds	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	dbe6      	blt.n	8008d5a <i_am_goal+0x1e>
	for (int i = 0; i < goal_size;i++){
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	429a      	cmp	r2, r3
 8008d98:	dbdc      	blt.n	8008d54 <i_am_goal+0x18>
		}
	}
	return flag;
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3724      	adds	r7, #36	; 0x24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <make_map>:

void make_map(int *x, int *y,int size,int mask)	//歩数マップを作成する
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
//座標x,yをゴールとした歩数Mapを作成する。
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	t_bool change_flag;			//Map作成終了を見極めるためのフラグ
    init_map(x,y,size);				//Mapを初期化する
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff fef2 	bl	8008ba4 <init_map>

	do
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	77fb      	strb	r3, [r7, #31]
		for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e0e2      	b.n	8008f90 <make_map+0x1e8>
		{
			for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	e0d8      	b.n	8008f82 <make_map+0x1da>
			{
				if(map[i][j] == 999)		//999の場合は次へ
 8008dd0:	4975      	ldr	r1, [pc, #468]	; (8008fa8 <make_map+0x200>)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	011a      	lsls	r2, r3, #4
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008dde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008de2:	4293      	cmp	r3, r2
 8008de4:	f000 80c9 	beq.w	8008f7a <make_map+0x1d2>
				{
					continue;
				}

				if(j < MAZE_SIZE_Y-1)					//範囲チェック
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b0e      	cmp	r3, #14
 8008dec:	dc2e      	bgt.n	8008e4c <make_map+0xa4>
				{
					if( (wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 8008dee:	4a6f      	ldr	r2, [pc, #444]	; (8008fac <make_map+0x204>)
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	441a      	add	r2, r3
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	4413      	add	r3, r2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	461a      	mov	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d11f      	bne.n	8008e4c <make_map+0xa4>
					{
						if(map[i][j+1] == 999)			//まだ値が入っていなければ
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	4965      	ldr	r1, [pc, #404]	; (8008fa8 <make_map+0x200>)
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0112      	lsls	r2, r2, #4
 8008e16:	4413      	add	r3, r2
 8008e18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d113      	bne.n	8008e4c <make_map+0xa4>
						{
							map[i][j+1] = map[i][j] + 1;	//値を代入
 8008e24:	4960      	ldr	r1, [pc, #384]	; (8008fa8 <make_map+0x200>)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	011a      	lsls	r2, r3, #4
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	3301      	adds	r3, #1
 8008e36:	3201      	adds	r2, #1
 8008e38:	b290      	uxth	r0, r2
 8008e3a:	495b      	ldr	r1, [pc, #364]	; (8008fa8 <make_map+0x200>)
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	0112      	lsls	r2, r2, #4
 8008e40:	4413      	add	r3, r2
 8008e42:	4602      	mov	r2, r0
 8008e44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8008e48:	2301      	movs	r3, #1
 8008e4a:	77fb      	strb	r3, [r7, #31]
						}
					}
				}

				if(i < MAZE_SIZE_X-1)					//範囲チェック
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b0e      	cmp	r3, #14
 8008e50:	dc2e      	bgt.n	8008eb0 <make_map+0x108>
				{
					if( (wall[i][j].east & mask) == NOWALL)		//壁がなければ
 8008e52:	4a56      	ldr	r2, [pc, #344]	; (8008fac <make_map+0x204>)
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	441a      	add	r2, r3
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11f      	bne.n	8008eb0 <make_map+0x108>
					{
						if(map[i+1][j] == 999)			//値が入っていなければ
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	3301      	adds	r3, #1
 8008e74:	494c      	ldr	r1, [pc, #304]	; (8008fa8 <make_map+0x200>)
 8008e76:	011a      	lsls	r2, r3, #4
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d113      	bne.n	8008eb0 <make_map+0x108>
						{
							map[i+1][j] = map[i][j] + 1;	//値を代入
 8008e88:	4947      	ldr	r1, [pc, #284]	; (8008fa8 <make_map+0x200>)
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	011a      	lsls	r2, r3, #4
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	3201      	adds	r2, #1
 8008e9c:	b290      	uxth	r0, r2
 8008e9e:	4942      	ldr	r1, [pc, #264]	; (8008fa8 <make_map+0x200>)
 8008ea0:	011a      	lsls	r2, r3, #4
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8008eac:	2301      	movs	r3, #1
 8008eae:	77fb      	strb	r3, [r7, #31]
						}
					}
				}

				if(j > 0)						//範囲チェック
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dd2e      	ble.n	8008f14 <make_map+0x16c>
				{
					if( (wall[i][j].south & mask) == NOWALL)	//壁がなければ
 8008eb6:	4a3d      	ldr	r2, [pc, #244]	; (8008fac <make_map+0x204>)
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	441a      	add	r2, r3
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11f      	bne.n	8008f14 <make_map+0x16c>
					{
						if(map[i][j-1] == 999)			//値が入っていなければ
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	4933      	ldr	r1, [pc, #204]	; (8008fa8 <make_map+0x200>)
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	0112      	lsls	r2, r2, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d113      	bne.n	8008f14 <make_map+0x16c>
						{
							map[i][j-1] = map[i][j] + 1;	//値を代入
 8008eec:	492e      	ldr	r1, [pc, #184]	; (8008fa8 <make_map+0x200>)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	011a      	lsls	r2, r3, #4
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	3201      	adds	r2, #1
 8008f00:	b290      	uxth	r0, r2
 8008f02:	4929      	ldr	r1, [pc, #164]	; (8008fa8 <make_map+0x200>)
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	0112      	lsls	r2, r2, #4
 8008f08:	4413      	add	r3, r2
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8008f10:	2301      	movs	r3, #1
 8008f12:	77fb      	strb	r3, [r7, #31]
						}
					}
				}

				if(i > 0)						//範囲チェック
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dd30      	ble.n	8008f7c <make_map+0x1d4>
				{
					if( (wall[i][j].west & mask) == NOWALL)		//壁がなければ
 8008f1a:	4a24      	ldr	r2, [pc, #144]	; (8008fac <make_map+0x204>)
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	441a      	add	r2, r3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	4413      	add	r3, r2
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	4013      	ands	r3, r2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d121      	bne.n	8008f7c <make_map+0x1d4>
					{
						if(map[i-1][j] == 999)			//値が入っていなければ
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	491a      	ldr	r1, [pc, #104]	; (8008fa8 <make_map+0x200>)
 8008f3e:	011a      	lsls	r2, r3, #4
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	4413      	add	r3, r2
 8008f44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d115      	bne.n	8008f7c <make_map+0x1d4>
						{
							map[i-1][j] = map[i][j] + 1;	//値を代入
 8008f50:	4915      	ldr	r1, [pc, #84]	; (8008fa8 <make_map+0x200>)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	011a      	lsls	r2, r3, #4
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	3201      	adds	r2, #1
 8008f64:	b290      	uxth	r0, r2
 8008f66:	4910      	ldr	r1, [pc, #64]	; (8008fa8 <make_map+0x200>)
 8008f68:	011a      	lsls	r2, r3, #4
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8008f74:	2301      	movs	r3, #1
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e000      	b.n	8008f7c <make_map+0x1d4>
					continue;
 8008f7a:	bf00      	nop
			for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	f77f af23 	ble.w	8008dd0 <make_map+0x28>
		for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	61bb      	str	r3, [r7, #24]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	f77f af19 	ble.w	8008dca <make_map+0x22>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 8008f98:	7ffb      	ldrb	r3, [r7, #31]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	f43f af10 	beq.w	8008dc0 <make_map+0x18>

}
 8008fa0:	bf00      	nop
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	200002e4 	.word	0x200002e4
 8008fac:	2000d440 	.word	0x2000d440

08008fb0 <is_unknown>:

t_bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((wall[x][y].north == UNKNOWN) || (wall[x][y].east == UNKNOWN) || (wall[x][y].south == UNKNOWN) || (wall[x][y].west == UNKNOWN))
 8008fba:	4a1c      	ldr	r2, [pc, #112]	; (800902c <is_unknown+0x7c>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	441a      	add	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d023      	beq.n	800901a <is_unknown+0x6a>
 8008fd2:	4a16      	ldr	r2, [pc, #88]	; (800902c <is_unknown+0x7c>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	441a      	add	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	4413      	add	r3, r2
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d017      	beq.n	800901a <is_unknown+0x6a>
 8008fea:	4a10      	ldr	r2, [pc, #64]	; (800902c <is_unknown+0x7c>)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	441a      	add	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d00b      	beq.n	800901a <is_unknown+0x6a>
 8009002:	4a0a      	ldr	r2, [pc, #40]	; (800902c <is_unknown+0x7c>)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	441a      	add	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	4413      	add	r3, r2
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d101      	bne.n	800901e <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 800901e:	2300      	movs	r3, #0
	}
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	2000d440 	.word	0x2000d440

08009030 <set_wall>:

void set_wall(int x, int y)	//壁情報を記録
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
//引数の座標x,yに壁情報を書き込む
	int n_write,s_write,e_write,w_write;
	n_write = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]
	s_write = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
    e_write = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
    w_write = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
	//自分の方向に応じて書き込むデータを生成
	//CONV_SEN2WALL()はmacro.hを参照
	switch(mypos.dir){
 800904a:	4b89      	ldr	r3, [pc, #548]	; (8009270 <set_wall+0x240>)
 800904c:	791b      	ldrb	r3, [r3, #4]
 800904e:	2b03      	cmp	r3, #3
 8009050:	f200 8088 	bhi.w	8009164 <set_wall+0x134>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <set_wall+0x2c>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	0800906d 	.word	0x0800906d
 8009060:	080090ab 	.word	0x080090ab
 8009064:	080090e9 	.word	0x080090e9
 8009068:	08009127 	.word	0x08009127
		case north:	//北を向いている時

			n_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//　前壁の有無を判断
 800906c:	4b81      	ldr	r3, [pc, #516]	; (8009274 <set_wall+0x244>)
 800906e:	7b9b      	ldrb	r3, [r3, #14]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <set_wall+0x4c>
 8009074:	4b80      	ldr	r3, [pc, #512]	; (8009278 <set_wall+0x248>)
 8009076:	7b9b      	ldrb	r3, [r3, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <set_wall+0x50>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <set_wall+0x52>
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
			e_write = CONV_SEN2WALL(sen_r.is_wall);				//右の有無を判断
 8009084:	4b7d      	ldr	r3, [pc, #500]	; (800927c <set_wall+0x24c>)
 8009086:	7b9b      	ldrb	r3, [r3, #14]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bf14      	ite	ne
 800908c:	2301      	movne	r3, #1
 800908e:	2300      	moveq	r3, #0
 8009090:	b2db      	uxtb	r3, r3
 8009092:	60fb      	str	r3, [r7, #12]
			w_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 8009094:	4b7a      	ldr	r3, [pc, #488]	; (8009280 <set_wall+0x250>)
 8009096:	7b9b      	ldrb	r3, [r3, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bf14      	ite	ne
 800909c:	2301      	movne	r3, #1
 800909e:	2300      	moveq	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	60bb      	str	r3, [r7, #8]
			s_write = NOWALL;						//後ろは必ず壁がない
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]

			break;
 80090a8:	e05c      	b.n	8009164 <set_wall+0x134>

		case east:	//東を向いているとき

			e_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 80090aa:	4b72      	ldr	r3, [pc, #456]	; (8009274 <set_wall+0x244>)
 80090ac:	7b9b      	ldrb	r3, [r3, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <set_wall+0x8a>
 80090b2:	4b71      	ldr	r3, [pc, #452]	; (8009278 <set_wall+0x248>)
 80090b4:	7b9b      	ldrb	r3, [r3, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <set_wall+0x8e>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <set_wall+0x90>
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
			s_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 80090c2:	4b6e      	ldr	r3, [pc, #440]	; (800927c <set_wall+0x24c>)
 80090c4:	7b9b      	ldrb	r3, [r3, #14]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bf14      	ite	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	2300      	moveq	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	613b      	str	r3, [r7, #16]
			n_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 80090d2:	4b6b      	ldr	r3, [pc, #428]	; (8009280 <set_wall+0x250>)
 80090d4:	7b9b      	ldrb	r3, [r3, #14]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bf14      	ite	ne
 80090da:	2301      	movne	r3, #1
 80090dc:	2300      	moveq	r3, #0
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	617b      	str	r3, [r7, #20]
			w_write = NOWALL;						//後ろは必ず壁がない
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]

			break;
 80090e6:	e03d      	b.n	8009164 <set_wall+0x134>

		case south:	//南を向いているとき

			s_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 80090e8:	4b62      	ldr	r3, [pc, #392]	; (8009274 <set_wall+0x244>)
 80090ea:	7b9b      	ldrb	r3, [r3, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <set_wall+0xc8>
 80090f0:	4b61      	ldr	r3, [pc, #388]	; (8009278 <set_wall+0x248>)
 80090f2:	7b9b      	ldrb	r3, [r3, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <set_wall+0xcc>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <set_wall+0xce>
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
			w_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 8009100:	4b5e      	ldr	r3, [pc, #376]	; (800927c <set_wall+0x24c>)
 8009102:	7b9b      	ldrb	r3, [r3, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	60bb      	str	r3, [r7, #8]
			e_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 8009110:	4b5b      	ldr	r3, [pc, #364]	; (8009280 <set_wall+0x250>)
 8009112:	7b9b      	ldrb	r3, [r3, #14]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf14      	ite	ne
 8009118:	2301      	movne	r3, #1
 800911a:	2300      	moveq	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	60fb      	str	r3, [r7, #12]
			n_write = NOWALL;						//後ろは必ず壁がない
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]

			break;
 8009124:	e01e      	b.n	8009164 <set_wall+0x134>

		case west:	//西を向いているとき

			w_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 8009126:	4b53      	ldr	r3, [pc, #332]	; (8009274 <set_wall+0x244>)
 8009128:	7b9b      	ldrb	r3, [r3, #14]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d103      	bne.n	8009136 <set_wall+0x106>
 800912e:	4b52      	ldr	r3, [pc, #328]	; (8009278 <set_wall+0x248>)
 8009130:	7b9b      	ldrb	r3, [r3, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <set_wall+0x10a>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <set_wall+0x10c>
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
			n_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 800913e:	4b4f      	ldr	r3, [pc, #316]	; (800927c <set_wall+0x24c>)
 8009140:	7b9b      	ldrb	r3, [r3, #14]
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf14      	ite	ne
 8009146:	2301      	movne	r3, #1
 8009148:	2300      	moveq	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	617b      	str	r3, [r7, #20]
			s_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 800914e:	4b4c      	ldr	r3, [pc, #304]	; (8009280 <set_wall+0x250>)
 8009150:	7b9b      	ldrb	r3, [r3, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	613b      	str	r3, [r7, #16]
			e_write = NOWALL;						//後ろは必ず壁がない
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]

			break;
 8009162:	bf00      	nop


	}

	wall[x][y].north = n_write;	//実際に壁情報を書き込み
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	b2d9      	uxtb	r1, r3
 800916c:	4a45      	ldr	r2, [pc, #276]	; (8009284 <set_wall+0x254>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	441a      	add	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	441a      	add	r2, r3
 8009178:	7813      	ldrb	r3, [r2, #0]
 800917a:	f361 0301 	bfi	r3, r1, #0, #2
 800917e:	7013      	strb	r3, [r2, #0]
	wall[x][y].south = s_write;	//実際に壁情報を書き込み
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	b2d9      	uxtb	r1, r3
 8009188:	4a3e      	ldr	r2, [pc, #248]	; (8009284 <set_wall+0x254>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	441a      	add	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	441a      	add	r2, r3
 8009194:	7813      	ldrb	r3, [r2, #0]
 8009196:	f361 1305 	bfi	r3, r1, #4, #2
 800919a:	7013      	strb	r3, [r2, #0]
	wall[x][y].east  = e_write;	//実際に壁情報を書き込み
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	b2d9      	uxtb	r1, r3
 80091a4:	4a37      	ldr	r2, [pc, #220]	; (8009284 <set_wall+0x254>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	441a      	add	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	441a      	add	r2, r3
 80091b0:	7813      	ldrb	r3, [r2, #0]
 80091b2:	f361 0383 	bfi	r3, r1, #2, #2
 80091b6:	7013      	strb	r3, [r2, #0]
	wall[x][y].west  = w_write;	//実際に壁情報を書き込み
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	b2d9      	uxtb	r1, r3
 80091c0:	4a30      	ldr	r2, [pc, #192]	; (8009284 <set_wall+0x254>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	441a      	add	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	441a      	add	r2, r3
 80091cc:	7813      	ldrb	r3, [r2, #0]
 80091ce:	f361 1387 	bfi	r3, r1, #6, #2
 80091d2:	7013      	strb	r3, [r2, #0]

	if(y < MAZE_SIZE_Y-1)	//範囲チェック
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b0e      	cmp	r3, #14
 80091d8:	dc0e      	bgt.n	80091f8 <set_wall+0x1c8>
	{
		wall[x][y+1].south = n_write;	//反対側から見た壁を書き込み
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	3301      	adds	r3, #1
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	f002 0203 	and.w	r2, r2, #3
 80091e4:	b2d1      	uxtb	r1, r2
 80091e6:	4827      	ldr	r0, [pc, #156]	; (8009284 <set_wall+0x254>)
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	0112      	lsls	r2, r2, #4
 80091ec:	4402      	add	r2, r0
 80091ee:	441a      	add	r2, r3
 80091f0:	7813      	ldrb	r3, [r2, #0]
 80091f2:	f361 1305 	bfi	r3, r1, #4, #2
 80091f6:	7013      	strb	r3, [r2, #0]
	}

	if(x < MAZE_SIZE_X-1)	//範囲チェック
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b0e      	cmp	r3, #14
 80091fc:	dc0e      	bgt.n	800921c <set_wall+0x1ec>
	{
		wall[x+1][y].west = e_write;	//反対側から見た壁を書き込み
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3301      	adds	r3, #1
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	f002 0203 	and.w	r2, r2, #3
 8009208:	b2d1      	uxtb	r1, r2
 800920a:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <set_wall+0x254>)
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	441a      	add	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	441a      	add	r2, r3
 8009214:	7813      	ldrb	r3, [r2, #0]
 8009216:	f361 1387 	bfi	r3, r1, #6, #2
 800921a:	7013      	strb	r3, [r2, #0]
	}

	if(y > 0)	//範囲チェック
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd0e      	ble.n	8009240 <set_wall+0x210>
	{
        wall[x][y-1].north = s_write;	//反対側から見た壁を書き込み
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	3b01      	subs	r3, #1
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	f002 0203 	and.w	r2, r2, #3
 800922c:	b2d1      	uxtb	r1, r2
 800922e:	4815      	ldr	r0, [pc, #84]	; (8009284 <set_wall+0x254>)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	0112      	lsls	r2, r2, #4
 8009234:	4402      	add	r2, r0
 8009236:	441a      	add	r2, r3
 8009238:	7813      	ldrb	r3, [r2, #0]
 800923a:	f361 0301 	bfi	r3, r1, #0, #2
 800923e:	7013      	strb	r3, [r2, #0]
	}

	if(x > 0)	//範囲チェック
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd0e      	ble.n	8009264 <set_wall+0x234>
	{
		wall[x-1][y].east = w_write;	//反対側から見た壁を書き込み
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3b01      	subs	r3, #1
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	f002 0203 	and.w	r2, r2, #3
 8009250:	b2d1      	uxtb	r1, r2
 8009252:	4a0c      	ldr	r2, [pc, #48]	; (8009284 <set_wall+0x254>)
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	441a      	add	r2, r3
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	441a      	add	r2, r3
 800925c:	7813      	ldrb	r3, [r2, #0]
 800925e:	f361 0383 	bfi	r3, r1, #2, #2
 8009262:	7013      	strb	r3, [r2, #0]
	}

}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	20004380 	.word	0x20004380
 8009274:	2000d1b8 	.word	0x2000d1b8
 8009278:	2000d1c8 	.word	0x2000d1c8
 800927c:	2000f480 	.word	0x2000f480
 8009280:	2000d064 	.word	0x2000d064
 8009284:	2000d440 	.word	0x2000d440

08009288 <get_priority>:

int get_priority(int x, int y, t_direction dir){	//そのマスの情報から、優先度を算出する
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	71fb      	strb	r3, [r7, #7]

	int priority;	//優先度を記録する変数
	priority = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]

	if(mypos.dir == dir){				//行きたい方向が現在の進行方向と同じ場合
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <get_priority+0x68>)
 800929c:	791b      	ldrb	r3, [r3, #4]
 800929e:	79fa      	ldrb	r2, [r7, #7]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d102      	bne.n	80092aa <get_priority+0x22>
		priority = 2;
 80092a4:	2302      	movs	r3, #2
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	e012      	b.n	80092d0 <get_priority+0x48>
	}else if( ((4+mypos.dir-dir)%4) == 2){		//行きたい方向が現在の進行方向と逆の場合
 80092aa:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <get_priority+0x68>)
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	1d1a      	adds	r2, r3, #4
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	425a      	negs	r2, r3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	f002 0203 	and.w	r2, r2, #3
 80092be:	bf58      	it	pl
 80092c0:	4253      	negpl	r3, r2
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d102      	bne.n	80092cc <get_priority+0x44>
		priority = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e001      	b.n	80092d0 <get_priority+0x48>
	}else{						//それ以外(左右どちらか)の場合
		priority = 1;
 80092cc:	2301      	movs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
	}

	if(is_unknown(x,y) == true){
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff fe6c 	bl	8008fb0 <is_unknown>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d102      	bne.n	80092e4 <get_priority+0x5c>
		priority += 4;				//未探索の場合優先度をさらに付加
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	3304      	adds	r3, #4
 80092e2:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 80092e4:	697b      	ldr	r3, [r7, #20]

}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20004380 	.word	0x20004380

080092f4 <get_nextdir>:

int get_nextdir(int *x, int *y,int goal_size ,int mask, t_direction *dir){
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
    int little,priority,tmp_priority;

    make_map(x,y,goal_size,mask);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fd4d 	bl	8008da8 <make_map>

    little = 999;
 800930e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009312:	61fb      	str	r3, [r7, #28]

    priority = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]

    if((wall[mypos.x][mypos.y].north & mask) == NOWALL){
 8009318:	4bb3      	ldr	r3, [pc, #716]	; (80095e8 <get_nextdir+0x2f4>)
 800931a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800931e:	4618      	mov	r0, r3
 8009320:	4bb1      	ldr	r3, [pc, #708]	; (80095e8 <get_nextdir+0x2f4>)
 8009322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009326:	4619      	mov	r1, r3
 8009328:	4ab0      	ldr	r2, [pc, #704]	; (80095ec <get_nextdir+0x2f8>)
 800932a:	0103      	lsls	r3, r0, #4
 800932c:	4413      	add	r3, r2
 800932e:	440b      	add	r3, r1
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009336:	b2db      	uxtb	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d14b      	bne.n	80093da <get_nextdir+0xe6>
        tmp_priority = get_priority(mypos.x,mypos.y + 1,north);
 8009342:	4ba9      	ldr	r3, [pc, #676]	; (80095e8 <get_nextdir+0x2f4>)
 8009344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009348:	4618      	mov	r0, r3
 800934a:	4ba7      	ldr	r3, [pc, #668]	; (80095e8 <get_nextdir+0x2f4>)
 800934c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009350:	3301      	adds	r3, #1
 8009352:	2200      	movs	r2, #0
 8009354:	4619      	mov	r1, r3
 8009356:	f7ff ff97 	bl	8009288 <get_priority>
 800935a:	6178      	str	r0, [r7, #20]
        if(map[mypos.x][mypos.y+1] < little){
 800935c:	4ba2      	ldr	r3, [pc, #648]	; (80095e8 <get_nextdir+0x2f4>)
 800935e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009362:	461a      	mov	r2, r3
 8009364:	4ba0      	ldr	r3, [pc, #640]	; (80095e8 <get_nextdir+0x2f4>)
 8009366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800936a:	3301      	adds	r3, #1
 800936c:	49a0      	ldr	r1, [pc, #640]	; (80095f0 <get_nextdir+0x2fc>)
 800936e:	0112      	lsls	r2, r2, #4
 8009370:	4413      	add	r3, r2
 8009372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009376:	461a      	mov	r2, r3
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4293      	cmp	r3, r2
 800937c:	dd13      	ble.n	80093a6 <get_nextdir+0xb2>
            little = map[mypos.x][mypos.y+1];
 800937e:	4b9a      	ldr	r3, [pc, #616]	; (80095e8 <get_nextdir+0x2f4>)
 8009380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009384:	461a      	mov	r2, r3
 8009386:	4b98      	ldr	r3, [pc, #608]	; (80095e8 <get_nextdir+0x2f4>)
 8009388:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800938c:	3301      	adds	r3, #1
 800938e:	4998      	ldr	r1, [pc, #608]	; (80095f0 <get_nextdir+0x2fc>)
 8009390:	0112      	lsls	r2, r2, #4
 8009392:	4413      	add	r3, r2
 8009394:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009398:	61fb      	str	r3, [r7, #28]
            *dir = north;
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e019      	b.n	80093da <get_nextdir+0xe6>
        }else if(map[mypos.x][mypos.y+1] == little){
 80093a6:	4b90      	ldr	r3, [pc, #576]	; (80095e8 <get_nextdir+0x2f4>)
 80093a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093ac:	461a      	mov	r2, r3
 80093ae:	4b8e      	ldr	r3, [pc, #568]	; (80095e8 <get_nextdir+0x2f4>)
 80093b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80093b4:	3301      	adds	r3, #1
 80093b6:	498e      	ldr	r1, [pc, #568]	; (80095f0 <get_nextdir+0x2fc>)
 80093b8:	0112      	lsls	r2, r2, #4
 80093ba:	4413      	add	r3, r2
 80093bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80093c0:	461a      	mov	r2, r3
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d108      	bne.n	80093da <get_nextdir+0xe6>
            if(priority < tmp_priority){
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	da04      	bge.n	80093da <get_nextdir+0xe6>
                *dir = north;
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].east & mask) == NOWALL){
 80093da:	4b83      	ldr	r3, [pc, #524]	; (80095e8 <get_nextdir+0x2f4>)
 80093dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093e0:	4618      	mov	r0, r3
 80093e2:	4b81      	ldr	r3, [pc, #516]	; (80095e8 <get_nextdir+0x2f4>)
 80093e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80093e8:	4619      	mov	r1, r3
 80093ea:	4a80      	ldr	r2, [pc, #512]	; (80095ec <get_nextdir+0x2f8>)
 80093ec:	0103      	lsls	r3, r0, #4
 80093ee:	4413      	add	r3, r2
 80093f0:	440b      	add	r3, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	4013      	ands	r3, r2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d14a      	bne.n	800949a <get_nextdir+0x1a6>
        tmp_priority = get_priority(mypos.x + 1,mypos.y,east);
 8009404:	4b78      	ldr	r3, [pc, #480]	; (80095e8 <get_nextdir+0x2f4>)
 8009406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800940a:	1c58      	adds	r0, r3, #1
 800940c:	4b76      	ldr	r3, [pc, #472]	; (80095e8 <get_nextdir+0x2f4>)
 800940e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009412:	2201      	movs	r2, #1
 8009414:	4619      	mov	r1, r3
 8009416:	f7ff ff37 	bl	8009288 <get_priority>
 800941a:	6178      	str	r0, [r7, #20]
        if(map[mypos.x + 1][mypos.y] < little){
 800941c:	4b72      	ldr	r3, [pc, #456]	; (80095e8 <get_nextdir+0x2f4>)
 800941e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009422:	3301      	adds	r3, #1
 8009424:	4a70      	ldr	r2, [pc, #448]	; (80095e8 <get_nextdir+0x2f4>)
 8009426:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800942a:	4611      	mov	r1, r2
 800942c:	4a70      	ldr	r2, [pc, #448]	; (80095f0 <get_nextdir+0x2fc>)
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	440b      	add	r3, r1
 8009432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009436:	461a      	mov	r2, r3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4293      	cmp	r3, r2
 800943c:	dd13      	ble.n	8009466 <get_nextdir+0x172>
            little = map[mypos.x+1][mypos.y];
 800943e:	4b6a      	ldr	r3, [pc, #424]	; (80095e8 <get_nextdir+0x2f4>)
 8009440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009444:	3301      	adds	r3, #1
 8009446:	4a68      	ldr	r2, [pc, #416]	; (80095e8 <get_nextdir+0x2f4>)
 8009448:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800944c:	4611      	mov	r1, r2
 800944e:	4a68      	ldr	r2, [pc, #416]	; (80095f0 <get_nextdir+0x2fc>)
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	440b      	add	r3, r1
 8009454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009458:	61fb      	str	r3, [r7, #28]
            *dir = east;
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	2201      	movs	r2, #1
 800945e:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	61bb      	str	r3, [r7, #24]
 8009464:	e019      	b.n	800949a <get_nextdir+0x1a6>
        }else if(map[mypos.x + 1][mypos.y] == little){
 8009466:	4b60      	ldr	r3, [pc, #384]	; (80095e8 <get_nextdir+0x2f4>)
 8009468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800946c:	3301      	adds	r3, #1
 800946e:	4a5e      	ldr	r2, [pc, #376]	; (80095e8 <get_nextdir+0x2f4>)
 8009470:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009474:	4611      	mov	r1, r2
 8009476:	4a5e      	ldr	r2, [pc, #376]	; (80095f0 <get_nextdir+0x2fc>)
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	440b      	add	r3, r1
 800947c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009480:	461a      	mov	r2, r3
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4293      	cmp	r3, r2
 8009486:	d108      	bne.n	800949a <get_nextdir+0x1a6>
            if(priority < tmp_priority){
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	429a      	cmp	r2, r3
 800948e:	da04      	bge.n	800949a <get_nextdir+0x1a6>
                *dir = east;
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	2201      	movs	r2, #1
 8009494:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].south & mask) == NOWALL){
 800949a:	4b53      	ldr	r3, [pc, #332]	; (80095e8 <get_nextdir+0x2f4>)
 800949c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094a0:	4618      	mov	r0, r3
 80094a2:	4b51      	ldr	r3, [pc, #324]	; (80095e8 <get_nextdir+0x2f4>)
 80094a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094a8:	4619      	mov	r1, r3
 80094aa:	4a50      	ldr	r2, [pc, #320]	; (80095ec <get_nextdir+0x2f8>)
 80094ac:	0103      	lsls	r3, r0, #4
 80094ae:	4413      	add	r3, r2
 80094b0:	440b      	add	r3, r1
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	461a      	mov	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d14b      	bne.n	800955c <get_nextdir+0x268>
        tmp_priority = get_priority(mypos.x,mypos.y-1,south);
 80094c4:	4b48      	ldr	r3, [pc, #288]	; (80095e8 <get_nextdir+0x2f4>)
 80094c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ca:	4618      	mov	r0, r3
 80094cc:	4b46      	ldr	r3, [pc, #280]	; (80095e8 <get_nextdir+0x2f4>)
 80094ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2202      	movs	r2, #2
 80094d6:	4619      	mov	r1, r3
 80094d8:	f7ff fed6 	bl	8009288 <get_priority>
 80094dc:	6178      	str	r0, [r7, #20]
        if(map[mypos.x][mypos.y-1] < little){
 80094de:	4b42      	ldr	r3, [pc, #264]	; (80095e8 <get_nextdir+0x2f4>)
 80094e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094e4:	461a      	mov	r2, r3
 80094e6:	4b40      	ldr	r3, [pc, #256]	; (80095e8 <get_nextdir+0x2f4>)
 80094e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4940      	ldr	r1, [pc, #256]	; (80095f0 <get_nextdir+0x2fc>)
 80094f0:	0112      	lsls	r2, r2, #4
 80094f2:	4413      	add	r3, r2
 80094f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80094f8:	461a      	mov	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	dd13      	ble.n	8009528 <get_nextdir+0x234>
            little = map[mypos.x][mypos.y-1];
 8009500:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <get_nextdir+0x2f4>)
 8009502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009506:	461a      	mov	r2, r3
 8009508:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <get_nextdir+0x2f4>)
 800950a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800950e:	3b01      	subs	r3, #1
 8009510:	4937      	ldr	r1, [pc, #220]	; (80095f0 <get_nextdir+0x2fc>)
 8009512:	0112      	lsls	r2, r2, #4
 8009514:	4413      	add	r3, r2
 8009516:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800951a:	61fb      	str	r3, [r7, #28]
            *dir = south;
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2202      	movs	r2, #2
 8009520:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	e019      	b.n	800955c <get_nextdir+0x268>
        }else if(map[mypos.x][mypos.y-1] == little){
 8009528:	4b2f      	ldr	r3, [pc, #188]	; (80095e8 <get_nextdir+0x2f4>)
 800952a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800952e:	461a      	mov	r2, r3
 8009530:	4b2d      	ldr	r3, [pc, #180]	; (80095e8 <get_nextdir+0x2f4>)
 8009532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009536:	3b01      	subs	r3, #1
 8009538:	492d      	ldr	r1, [pc, #180]	; (80095f0 <get_nextdir+0x2fc>)
 800953a:	0112      	lsls	r2, r2, #4
 800953c:	4413      	add	r3, r2
 800953e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009542:	461a      	mov	r2, r3
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	4293      	cmp	r3, r2
 8009548:	d108      	bne.n	800955c <get_nextdir+0x268>
            if(priority < tmp_priority){
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	429a      	cmp	r2, r3
 8009550:	da04      	bge.n	800955c <get_nextdir+0x268>
                *dir = south;
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	2202      	movs	r2, #2
 8009556:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].west & mask) == NOWALL){
 800955c:	4b22      	ldr	r3, [pc, #136]	; (80095e8 <get_nextdir+0x2f4>)
 800955e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009562:	4618      	mov	r0, r3
 8009564:	4b20      	ldr	r3, [pc, #128]	; (80095e8 <get_nextdir+0x2f4>)
 8009566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800956a:	4619      	mov	r1, r3
 800956c:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <get_nextdir+0x2f8>)
 800956e:	0103      	lsls	r3, r0, #4
 8009570:	4413      	add	r3, r2
 8009572:	440b      	add	r3, r1
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800957a:	b2db      	uxtb	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	4013      	ands	r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d150      	bne.n	8009628 <get_nextdir+0x334>
        tmp_priority = get_priority(mypos.x-1,mypos.y,west);
 8009586:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <get_nextdir+0x2f4>)
 8009588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800958c:	1e58      	subs	r0, r3, #1
 800958e:	4b16      	ldr	r3, [pc, #88]	; (80095e8 <get_nextdir+0x2f4>)
 8009590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009594:	2203      	movs	r2, #3
 8009596:	4619      	mov	r1, r3
 8009598:	f7ff fe76 	bl	8009288 <get_priority>
 800959c:	6178      	str	r0, [r7, #20]
        if(map[mypos.x-1][mypos.y] < little){
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <get_nextdir+0x2f4>)
 80095a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	4a10      	ldr	r2, [pc, #64]	; (80095e8 <get_nextdir+0x2f4>)
 80095a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4a10      	ldr	r2, [pc, #64]	; (80095f0 <get_nextdir+0x2fc>)
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	440b      	add	r3, r1
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	461a      	mov	r2, r3
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	4293      	cmp	r3, r2
 80095be:	dd19      	ble.n	80095f4 <get_nextdir+0x300>
            little = map[mypos.x-1][mypos.y];
 80095c0:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <get_nextdir+0x2f4>)
 80095c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4a07      	ldr	r2, [pc, #28]	; (80095e8 <get_nextdir+0x2f4>)
 80095ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4a07      	ldr	r2, [pc, #28]	; (80095f0 <get_nextdir+0x2fc>)
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	440b      	add	r3, r1
 80095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095da:	61fb      	str	r3, [r7, #28]
            *dir = west;
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	2203      	movs	r2, #3
 80095e0:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e01f      	b.n	8009628 <get_nextdir+0x334>
 80095e8:	20004380 	.word	0x20004380
 80095ec:	2000d440 	.word	0x2000d440
 80095f0:	200002e4 	.word	0x200002e4
        }else if(map[mypos.x-1][mypos.y] == little){
 80095f4:	4b15      	ldr	r3, [pc, #84]	; (800964c <get_nextdir+0x358>)
 80095f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	4a13      	ldr	r2, [pc, #76]	; (800964c <get_nextdir+0x358>)
 80095fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009602:	4611      	mov	r1, r2
 8009604:	4a12      	ldr	r2, [pc, #72]	; (8009650 <get_nextdir+0x35c>)
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	440b      	add	r3, r1
 800960a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960e:	461a      	mov	r2, r3
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4293      	cmp	r3, r2
 8009614:	d108      	bne.n	8009628 <get_nextdir+0x334>
            if(priority < tmp_priority){
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	429a      	cmp	r2, r3
 800961c:	da04      	bge.n	8009628 <get_nextdir+0x334>
                *dir = west;
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	2203      	movs	r2, #3
 8009622:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    return ((int)((4+*dir - mypos.dir)%4));
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	3304      	adds	r3, #4
 800962e:	4a07      	ldr	r2, [pc, #28]	; (800964c <get_nextdir+0x358>)
 8009630:	7912      	ldrb	r2, [r2, #4]
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	425a      	negs	r2, r3
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	f002 0203 	and.w	r2, r2, #3
 800963e:	bf58      	it	pl
 8009640:	4253      	negpl	r3, r2
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20004380 	.word	0x20004380
 8009650:	200002e4 	.word	0x200002e4

08009654 <search_adachi>:

void search_adachi(int *gx,int *gy,int goal_size){
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
    t_direction glob_nextdir;
    int direction = get_nextdir(gx,gy,goal_size,MASK_SEARCH,&glob_nextdir);
 8009660:	f107 0313 	add.w	r3, r7, #19
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	2301      	movs	r3, #1
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff fe41 	bl	80092f4 <get_nextdir>
 8009672:	6178      	str	r0, [r7, #20]

    mypos.dir = glob_nextdir;
 8009674:	7cfa      	ldrb	r2, [r7, #19]
 8009676:	4bbf      	ldr	r3, [pc, #764]	; (8009974 <search_adachi+0x320>)
 8009678:	711a      	strb	r2, [r3, #4]
    switch(mypos.dir){
 800967a:	4bbe      	ldr	r3, [pc, #760]	; (8009974 <search_adachi+0x320>)
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	2b03      	cmp	r3, #3
 8009680:	d832      	bhi.n	80096e8 <search_adachi+0x94>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <search_adachi+0x34>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	08009699 	.word	0x08009699
 800968c:	080096ad 	.word	0x080096ad
 8009690:	080096c1 	.word	0x080096c1
 8009694:	080096d5 	.word	0x080096d5
        case north:
            mypos.y++;
 8009698:	4bb6      	ldr	r3, [pc, #728]	; (8009974 <search_adachi+0x320>)
 800969a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	3301      	adds	r3, #1
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21a      	sxth	r2, r3
 80096a6:	4bb3      	ldr	r3, [pc, #716]	; (8009974 <search_adachi+0x320>)
 80096a8:	805a      	strh	r2, [r3, #2]
            break;
 80096aa:	e01d      	b.n	80096e8 <search_adachi+0x94>
        case east:
            mypos.x++;
 80096ac:	4bb1      	ldr	r3, [pc, #708]	; (8009974 <search_adachi+0x320>)
 80096ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3301      	adds	r3, #1
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b21a      	sxth	r2, r3
 80096ba:	4bae      	ldr	r3, [pc, #696]	; (8009974 <search_adachi+0x320>)
 80096bc:	801a      	strh	r2, [r3, #0]
            break;
 80096be:	e013      	b.n	80096e8 <search_adachi+0x94>
        case south:
            mypos.y--;
 80096c0:	4bac      	ldr	r3, [pc, #688]	; (8009974 <search_adachi+0x320>)
 80096c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	4ba9      	ldr	r3, [pc, #676]	; (8009974 <search_adachi+0x320>)
 80096d0:	805a      	strh	r2, [r3, #2]
            break;
 80096d2:	e009      	b.n	80096e8 <search_adachi+0x94>
        case west:
            mypos.x--;
 80096d4:	4ba7      	ldr	r3, [pc, #668]	; (8009974 <search_adachi+0x320>)
 80096d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29b      	uxth	r3, r3
 80096e0:	b21a      	sxth	r2, r3
 80096e2:	4ba4      	ldr	r3, [pc, #656]	; (8009974 <search_adachi+0x320>)
 80096e4:	801a      	strh	r2, [r3, #0]
            break;
 80096e6:	bf00      	nop
    }

    switch(direction){
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	f200 811a 	bhi.w	8009924 <search_adachi+0x2d0>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <search_adachi+0xa4>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009709 	.word	0x08009709
 80096fc:	0800971f 	.word	0x0800971f
 8009700:	08009763 	.word	0x08009763
 8009704:	08009741 	.word	0x08009741
        case front:
            straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 8009708:	eddf 1aa3 	vldr	s3, [pc, #652]	; 8009998 <search_adachi+0x344>
 800970c:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8009998 <search_adachi+0x344>
 8009710:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8009714:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800999c <search_adachi+0x348>
 8009718:	f7fa feb6 	bl	8004488 <straight>
            break;
 800971c:	e032      	b.n	8009784 <search_adachi+0x130>
        case right:
		    turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//右に曲がる
 800971e:	eddf 0a96 	vldr	s1, [pc, #600]	; 8009978 <search_adachi+0x324>
 8009722:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800997c <search_adachi+0x328>
 8009726:	f7fb fb37 	bl	8004d98 <turn_R90>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800972a:	eddf 1a9b 	vldr	s3, [pc, #620]	; 8009998 <search_adachi+0x344>
 800972e:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8009998 <search_adachi+0x344>
 8009732:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8009736:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800999c <search_adachi+0x348>
 800973a:	f7fa fea5 	bl	8004488 <straight>
            break;
 800973e:	e021      	b.n	8009784 <search_adachi+0x130>
        case left:
		    turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//左に曲がる
 8009740:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8009978 <search_adachi+0x324>
 8009744:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800997c <search_adachi+0x328>
 8009748:	f7fb fc46 	bl	8004fd8 <turn_L90>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800974c:	eddf 1a92 	vldr	s3, [pc, #584]	; 8009998 <search_adachi+0x344>
 8009750:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8009998 <search_adachi+0x344>
 8009754:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8009758:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800999c <search_adachi+0x348>
 800975c:	f7fa fe94 	bl	8004488 <straight>
            break;
 8009760:	e010      	b.n	8009784 <search_adachi+0x130>
        case rear:
		    turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//左に曲がる
 8009762:	eddf 0a85 	vldr	s1, [pc, #532]	; 8009978 <search_adachi+0x324>
 8009766:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800997c <search_adachi+0x328>
 800976a:	f7fb fd4d 	bl	8005208 <turn_L180>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800976e:	eddf 1a8a 	vldr	s3, [pc, #552]	; 8009998 <search_adachi+0x344>
 8009772:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8009998 <search_adachi+0x344>
 8009776:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800977a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800999c <search_adachi+0x348>
 800977e:	f7fa fe83 	bl	8004488 <straight>
		    break;
 8009782:	bf00      	nop
    }


    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8009784:	e0ce      	b.n	8009924 <search_adachi+0x2d0>
    	set_wall(mypos.x,mypos.y);
 8009786:	4b7b      	ldr	r3, [pc, #492]	; (8009974 <search_adachi+0x320>)
 8009788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800978c:	461a      	mov	r2, r3
 800978e:	4b79      	ldr	r3, [pc, #484]	; (8009974 <search_adachi+0x320>)
 8009790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7ff fc4a 	bl	8009030 <set_wall>
        direction = get_nextdir(gx,gy,goal_size,MASK_SEARCH,&glob_nextdir);
 800979c:	f107 0313 	add.w	r3, r7, #19
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2301      	movs	r3, #1
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff fda3 	bl	80092f4 <get_nextdir>
 80097ae:	6178      	str	r0, [r7, #20]

        mypos.dir = glob_nextdir;
 80097b0:	7cfa      	ldrb	r2, [r7, #19]
 80097b2:	4b70      	ldr	r3, [pc, #448]	; (8009974 <search_adachi+0x320>)
 80097b4:	711a      	strb	r2, [r3, #4]

        switch(mypos.dir){
 80097b6:	4b6f      	ldr	r3, [pc, #444]	; (8009974 <search_adachi+0x320>)
 80097b8:	791b      	ldrb	r3, [r3, #4]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d832      	bhi.n	8009824 <search_adachi+0x1d0>
 80097be:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <search_adachi+0x170>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	080097d5 	.word	0x080097d5
 80097c8:	080097e9 	.word	0x080097e9
 80097cc:	080097fd 	.word	0x080097fd
 80097d0:	08009811 	.word	0x08009811
            case north:
                mypos.y++;
 80097d4:	4b67      	ldr	r3, [pc, #412]	; (8009974 <search_adachi+0x320>)
 80097d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3301      	adds	r3, #1
 80097de:	b29b      	uxth	r3, r3
 80097e0:	b21a      	sxth	r2, r3
 80097e2:	4b64      	ldr	r3, [pc, #400]	; (8009974 <search_adachi+0x320>)
 80097e4:	805a      	strh	r2, [r3, #2]
                break;
 80097e6:	e01d      	b.n	8009824 <search_adachi+0x1d0>
            case east:
                mypos.x++;
 80097e8:	4b62      	ldr	r3, [pc, #392]	; (8009974 <search_adachi+0x320>)
 80097ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3301      	adds	r3, #1
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	b21a      	sxth	r2, r3
 80097f6:	4b5f      	ldr	r3, [pc, #380]	; (8009974 <search_adachi+0x320>)
 80097f8:	801a      	strh	r2, [r3, #0]
                break;
 80097fa:	e013      	b.n	8009824 <search_adachi+0x1d0>
            case south:
                mypos.y--;
 80097fc:	4b5d      	ldr	r3, [pc, #372]	; (8009974 <search_adachi+0x320>)
 80097fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29b      	uxth	r3, r3
 8009808:	b21a      	sxth	r2, r3
 800980a:	4b5a      	ldr	r3, [pc, #360]	; (8009974 <search_adachi+0x320>)
 800980c:	805a      	strh	r2, [r3, #2]
                break;
 800980e:	e009      	b.n	8009824 <search_adachi+0x1d0>
            case west:
                mypos.x--;
 8009810:	4b58      	ldr	r3, [pc, #352]	; (8009974 <search_adachi+0x320>)
 8009812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009816:	b29b      	uxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	b29b      	uxth	r3, r3
 800981c:	b21a      	sxth	r2, r3
 800981e:	4b55      	ldr	r3, [pc, #340]	; (8009974 <search_adachi+0x320>)
 8009820:	801a      	strh	r2, [r3, #0]
                break;
 8009822:	bf00      	nop
        }

        switch(direction){
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b03      	cmp	r3, #3
 8009828:	d87c      	bhi.n	8009924 <search_adachi+0x2d0>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <search_adachi+0x1dc>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009841 	.word	0x08009841
 8009834:	08009857 	.word	0x08009857
 8009838:	08009863 	.word	0x08009863
 800983c:	0800985d 	.word	0x0800985d
            case front:
            	 straight(SECTION,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 8009840:	eddf 1a55 	vldr	s3, [pc, #340]	; 8009998 <search_adachi+0x344>
 8009844:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8009998 <search_adachi+0x344>
 8009848:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800984c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8009980 <search_adachi+0x32c>
 8009850:	f7fa fe1a 	bl	8004488 <straight>
            	 break;
 8009854:	e066      	b.n	8009924 <search_adachi+0x2d0>
            case right:
            	sla_R90();
 8009856:	f7fb ffcf 	bl	80057f8 <sla_R90>
            	break;
 800985a:	e063      	b.n	8009924 <search_adachi+0x2d0>
            case left:
            	sla_L90();
 800985c:	f7fb fde8 	bl	8005430 <sla_L90>
            	break;
 8009860:	e060      	b.n	8009924 <search_adachi+0x2d0>
            case rear:
            	if(sen_fr.is_wall == true || sen_fl.is_wall == true){
 8009862:	4b48      	ldr	r3, [pc, #288]	; (8009984 <search_adachi+0x330>)
 8009864:	7b9b      	ldrb	r3, [r3, #14]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d003      	beq.n	8009872 <search_adachi+0x21e>
 800986a:	4b47      	ldr	r3, [pc, #284]	; (8009988 <search_adachi+0x334>)
 800986c:	7b9b      	ldrb	r3, [r3, #14]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d13d      	bne.n	80098ee <search_adachi+0x29a>
            		if(sen_l.is_wall == true){
 8009872:	4b46      	ldr	r3, [pc, #280]	; (800998c <search_adachi+0x338>)
 8009874:	7b9b      	ldrb	r3, [r3, #14]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d114      	bne.n	80098a4 <search_adachi+0x250>
            			STOP_WALL();
 800987a:	f7fb f825 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 800987e:	2064      	movs	r0, #100	; 0x64
 8009880:	f7fb f8da 	bl	8004a38 <STOP_WALL2>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 8009884:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8009978 <search_adachi+0x324>
 8009888:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800997c <search_adachi+0x328>
 800988c:	f7fb fba4 	bl	8004fd8 <turn_L90>
            			STOP_WALL2(200);
 8009890:	20c8      	movs	r0, #200	; 0xc8
 8009892:	f7fb f8d1 	bl	8004a38 <STOP_WALL2>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 8009896:	eddf 0a38 	vldr	s1, [pc, #224]	; 8009978 <search_adachi+0x324>
 800989a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800997c <search_adachi+0x328>
 800989e:	f7fb fb9b 	bl	8004fd8 <turn_L90>
            		if(sen_l.is_wall == true){
 80098a2:	e034      	b.n	800990e <search_adachi+0x2ba>
            		}else if(sen_r.is_wall == true){
 80098a4:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <search_adachi+0x33c>)
 80098a6:	7b9b      	ldrb	r3, [r3, #14]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d114      	bne.n	80098d6 <search_adachi+0x282>
            			STOP_WALL();
 80098ac:	f7fb f80c 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 80098b0:	2064      	movs	r0, #100	; 0x64
 80098b2:	f7fb f8c1 	bl	8004a38 <STOP_WALL2>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80098b6:	eddf 0a30 	vldr	s1, [pc, #192]	; 8009978 <search_adachi+0x324>
 80098ba:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800997c <search_adachi+0x328>
 80098be:	f7fb fa6b 	bl	8004d98 <turn_R90>
            			STOP_WALL2(200);
 80098c2:	20c8      	movs	r0, #200	; 0xc8
 80098c4:	f7fb f8b8 	bl	8004a38 <STOP_WALL2>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80098c8:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8009978 <search_adachi+0x324>
 80098cc:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800997c <search_adachi+0x328>
 80098d0:	f7fb fa62 	bl	8004d98 <turn_R90>
            		if(sen_l.is_wall == true){
 80098d4:	e01b      	b.n	800990e <search_adachi+0x2ba>
            		}else{
            			STOP_WALL();
 80098d6:	f7fa fff7 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 80098da:	2064      	movs	r0, #100	; 0x64
 80098dc:	f7fb f8ac 	bl	8004a38 <STOP_WALL2>
            			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 80098e0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8009978 <search_adachi+0x324>
 80098e4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800997c <search_adachi+0x328>
 80098e8:	f7fb fc8e 	bl	8005208 <turn_L180>
            		if(sen_l.is_wall == true){
 80098ec:	e00f      	b.n	800990e <search_adachi+0x2ba>
            		}
            	}else	{
            		straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);				//半区画進む
 80098ee:	eddf 1a29 	vldr	s3, [pc, #164]	; 8009994 <search_adachi+0x340>
 80098f2:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8009998 <search_adachi+0x344>
 80098f6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80098fa:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800999c <search_adachi+0x348>
 80098fe:	f7fa fdc3 	bl	8004488 <straight>
        		    turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//左に曲がる
 8009902:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009978 <search_adachi+0x324>
 8009906:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800997c <search_adachi+0x328>
 800990a:	f7fb fc7d 	bl	8005208 <turn_L180>
            	}
            	straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800990e:	eddf 1a22 	vldr	s3, [pc, #136]	; 8009998 <search_adachi+0x344>
 8009912:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009998 <search_adachi+0x344>
 8009916:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800991a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800999c <search_adachi+0x348>
 800991e:	f7fa fdb3 	bl	8004488 <straight>
                break;
 8009922:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8009924:	4b13      	ldr	r3, [pc, #76]	; (8009974 <search_adachi+0x320>)
 8009926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800992a:	4618      	mov	r0, r3
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <search_adachi+0x320>)
 800992e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009932:	4619      	mov	r1, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	f7ff f9fe 	bl	8008d3c <i_am_goal>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	f43f af1f 	beq.w	8009786 <search_adachi+0x132>
        }

    }
    set_wall(mypos.x,mypos.y);		//壁をセット
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <search_adachi+0x320>)
 800994a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800994e:	461a      	mov	r2, r3
 8009950:	4b08      	ldr	r3, [pc, #32]	; (8009974 <search_adachi+0x320>)
 8009952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7ff fb69 	bl	8009030 <set_wall>
    if(sen_fr.is_wall == true || sen_fl.is_wall == true ) STOP_WALL();
 800995e:	4b09      	ldr	r3, [pc, #36]	; (8009984 <search_adachi+0x330>)
 8009960:	7b9b      	ldrb	r3, [r3, #14]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d003      	beq.n	800996e <search_adachi+0x31a>
 8009966:	4b08      	ldr	r3, [pc, #32]	; (8009988 <search_adachi+0x334>)
 8009968:	7b9b      	ldrb	r3, [r3, #14]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d118      	bne.n	80099a0 <search_adachi+0x34c>
 800996e:	f7fa ffab 	bl	80048c8 <STOP_WALL>
 8009972:	e01f      	b.n	80099b4 <search_adachi+0x360>
 8009974:	20004380 	.word	0x20004380
 8009978:	41490fd8 	.word	0x41490fd8
 800997c:	437b53ce 	.word	0x437b53ce
 8009980:	42b40000 	.word	0x42b40000
 8009984:	2000d1b8 	.word	0x2000d1b8
 8009988:	2000d1c8 	.word	0x2000d1c8
 800998c:	2000d064 	.word	0x2000d064
 8009990:	2000f480 	.word	0x2000f480
 8009994:	00000000 	.word	0x00000000
 8009998:	3e99999a 	.word	0x3e99999a
 800999c:	42340000 	.word	0x42340000
    else	straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
 80099a0:	ed5f 1a04 	vldr	s3, [pc, #-16]	; 8009994 <search_adachi+0x340>
 80099a4:	ed1f 1a04 	vldr	s2, [pc, #-16]	; 8009998 <search_adachi+0x344>
 80099a8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80099ac:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 800999c <search_adachi+0x348>
 80099b0:	f7fa fd6a 	bl	8004488 <straight>
    run_mode = NON_CON_MODE;
 80099b4:	4b03      	ldr	r3, [pc, #12]	; (80099c4 <search_adachi+0x370>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
}
 80099ba:	bf00      	nop
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	2000a170 	.word	0x2000a170

080099c8 <make_map_zenmen>:
    else	straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
    run_mode = NON_CON_MODE;
}

void make_map_zenmen(int *x, int *y,int size,int mask)	//歩数マップを作成する
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08e      	sub	sp, #56	; 0x38
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
//座標x,yをゴールとした歩数Mapを作成する。
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	t_bool change_flag;			//Map作成終了を見極めるためのフラグ
    init_map_zenmen(x,y,size);				//Mapを初期化する
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff f930 	bl	8008c40 <init_map_zenmen>
	int known = 0;	int update = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
 80099e4:	2300      	movs	r3, #0
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	do
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 80099ee:	2300      	movs	r3, #0
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f2:	e0f1      	b.n	8009bd8 <make_map_zenmen+0x210>
		{
			for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 80099f4:	2300      	movs	r3, #0
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
 80099f8:	e0e7      	b.n	8009bca <make_map_zenmen+0x202>
			{
				if( is_unknown(i,j) != true)
 80099fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fe:	f7ff fad7 	bl	8008fb0 <is_unknown>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d002      	beq.n	8009a0e <make_map_zenmen+0x46>
				{
					known++;
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(map[i][j] == 999)		//999の場合は次へ
 8009a0e:	4993      	ldr	r1, [pc, #588]	; (8009c5c <make_map_zenmen+0x294>)
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	011a      	lsls	r2, r3, #4
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	4413      	add	r3, r2
 8009a18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d103      	bne.n	8009a2c <make_map_zenmen+0x64>
				{
					update++;
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	3301      	adds	r3, #1
 8009a28:	62fb      	str	r3, [r7, #44]	; 0x2c
					continue;
 8009a2a:	e0cb      	b.n	8009bc4 <make_map_zenmen+0x1fc>
				}

				if(j < MAZE_SIZE_Y-1)					//範囲チェック
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	2b0e      	cmp	r3, #14
 8009a30:	dc2f      	bgt.n	8009a92 <make_map_zenmen+0xca>
				{
					if( (wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 8009a32:	4a8b      	ldr	r2, [pc, #556]	; (8009c60 <make_map_zenmen+0x298>)
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	441a      	add	r2, r3
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	4413      	add	r3, r2
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d120      	bne.n	8009a92 <make_map_zenmen+0xca>
					{
						if(map[i][j+1] == 999)			//まだ値が入っていなければ
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	3301      	adds	r3, #1
 8009a54:	4981      	ldr	r1, [pc, #516]	; (8009c5c <make_map_zenmen+0x294>)
 8009a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a58:	0112      	lsls	r2, r2, #4
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d114      	bne.n	8009a92 <make_map_zenmen+0xca>
						{
							map[i][j+1] = map[i][j] + 1;	//値を代入
 8009a68:	497c      	ldr	r1, [pc, #496]	; (8009c5c <make_map_zenmen+0x294>)
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	011a      	lsls	r2, r3, #4
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	4413      	add	r3, r2
 8009a72:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	3301      	adds	r3, #1
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	b290      	uxth	r0, r2
 8009a7e:	4977      	ldr	r1, [pc, #476]	; (8009c5c <make_map_zenmen+0x294>)
 8009a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a82:	0112      	lsls	r2, r2, #4
 8009a84:	4413      	add	r3, r2
 8009a86:	4602      	mov	r2, r0
 8009a88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						}
					}
				}

				if(i < MAZE_SIZE_X-1)					//範囲チェック
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	2b0e      	cmp	r3, #14
 8009a96:	dc2f      	bgt.n	8009af8 <make_map_zenmen+0x130>
				{
					if( (wall[i][j].east & mask) == NOWALL)		//壁がなければ
 8009a98:	4a71      	ldr	r2, [pc, #452]	; (8009c60 <make_map_zenmen+0x298>)
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	011b      	lsls	r3, r3, #4
 8009a9e:	441a      	add	r2, r3
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	4413      	add	r3, r2
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d120      	bne.n	8009af8 <make_map_zenmen+0x130>
					{
						if(map[i+1][j] == 999)			//値が入っていなければ
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	3301      	adds	r3, #1
 8009aba:	4968      	ldr	r1, [pc, #416]	; (8009c5c <make_map_zenmen+0x294>)
 8009abc:	011a      	lsls	r2, r3, #4
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d114      	bne.n	8009af8 <make_map_zenmen+0x130>
						{
							map[i+1][j] = map[i][j] + 1;	//値を代入
 8009ace:	4963      	ldr	r1, [pc, #396]	; (8009c5c <make_map_zenmen+0x294>)
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	011a      	lsls	r2, r3, #4
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	3301      	adds	r3, #1
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	b290      	uxth	r0, r2
 8009ae4:	495d      	ldr	r1, [pc, #372]	; (8009c5c <make_map_zenmen+0x294>)
 8009ae6:	011a      	lsls	r2, r3, #4
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	4413      	add	r3, r2
 8009aec:	4602      	mov	r2, r0
 8009aee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						}
					}
				}

				if(j > 0)						//範囲チェック
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd2f      	ble.n	8009b5e <make_map_zenmen+0x196>
				{
					if( (wall[i][j].south & mask) == NOWALL)	//壁がなければ
 8009afe:	4a58      	ldr	r2, [pc, #352]	; (8009c60 <make_map_zenmen+0x298>)
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	441a      	add	r2, r3
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	4413      	add	r3, r2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	461a      	mov	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d120      	bne.n	8009b5e <make_map_zenmen+0x196>
					{
						if(map[i][j-1] == 999)			//値が入っていなければ
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	494e      	ldr	r1, [pc, #312]	; (8009c5c <make_map_zenmen+0x294>)
 8009b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b24:	0112      	lsls	r2, r2, #4
 8009b26:	4413      	add	r3, r2
 8009b28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d114      	bne.n	8009b5e <make_map_zenmen+0x196>
						{
							map[i][j-1] = map[i][j] + 1;	//値を代入
 8009b34:	4949      	ldr	r1, [pc, #292]	; (8009c5c <make_map_zenmen+0x294>)
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	011a      	lsls	r2, r3, #4
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	3b01      	subs	r3, #1
 8009b46:	3201      	adds	r2, #1
 8009b48:	b290      	uxth	r0, r2
 8009b4a:	4944      	ldr	r1, [pc, #272]	; (8009c5c <make_map_zenmen+0x294>)
 8009b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b4e:	0112      	lsls	r2, r2, #4
 8009b50:	4413      	add	r3, r2
 8009b52:	4602      	mov	r2, r0
 8009b54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						}
					}
				}

				if(i > 0)						//範囲チェック
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dd2f      	ble.n	8009bc4 <make_map_zenmen+0x1fc>
				{
					if( (wall[i][j].west & mask) == NOWALL)		//壁がなければ
 8009b64:	4a3e      	ldr	r2, [pc, #248]	; (8009c60 <make_map_zenmen+0x298>)
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	441a      	add	r2, r3
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d120      	bne.n	8009bc4 <make_map_zenmen+0x1fc>
					{
						if(map[i-1][j] == 999)			//値が入っていなければ
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	3b01      	subs	r3, #1
 8009b86:	4935      	ldr	r1, [pc, #212]	; (8009c5c <make_map_zenmen+0x294>)
 8009b88:	011a      	lsls	r2, r3, #4
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009b92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d114      	bne.n	8009bc4 <make_map_zenmen+0x1fc>
						{
							map[i-1][j] = map[i][j] + 1;	//値を代入
 8009b9a:	4930      	ldr	r1, [pc, #192]	; (8009c5c <make_map_zenmen+0x294>)
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	011a      	lsls	r2, r3, #4
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	3b01      	subs	r3, #1
 8009bac:	3201      	adds	r2, #1
 8009bae:	b290      	uxth	r0, r2
 8009bb0:	492a      	ldr	r1, [pc, #168]	; (8009c5c <make_map_zenmen+0x294>)
 8009bb2:	011a      	lsls	r2, r3, #4
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	4413      	add	r3, r2
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	2b0f      	cmp	r3, #15
 8009bce:	f77f af14 	ble.w	80099fa <make_map_zenmen+0x32>
		for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	2b0f      	cmp	r3, #15
 8009bdc:	f77f af0a 	ble.w	80099f4 <make_map_zenmen+0x2c>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 8009be0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	f43f aeff 	beq.w	80099e8 <make_map_zenmen+0x20>


	if(update == known &&end_search == 0 ){
 8009bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f040 8119 	bne.w	8009e26 <make_map_zenmen+0x45e>
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <make_map_zenmen+0x29c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 8114 	bne.w	8009e26 <make_map_zenmen+0x45e>
		end_search = 1;
 8009bfe:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <make_map_zenmen+0x29c>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
	    init_map_zenmen(x,y,size);				//Mapを初期化する
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff f819 	bl	8008c40 <init_map_zenmen>
		int known = 0;	int update = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	623b      	str	r3, [r7, #32]
 8009c12:	2300      	movs	r3, #0
 8009c14:	61fb      	str	r3, [r7, #28]

		do
		{
			change_flag = false;				//変更がなかった場合にはループを抜ける
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
 8009c20:	e0f8      	b.n	8009e14 <make_map_zenmen+0x44c>
			{
				for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 8009c22:	2300      	movs	r3, #0
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e0ee      	b.n	8009e06 <make_map_zenmen+0x43e>
				{
					if( is_unknown(i,j) != true)
 8009c28:	6979      	ldr	r1, [r7, #20]
 8009c2a:	69b8      	ldr	r0, [r7, #24]
 8009c2c:	f7ff f9c0 	bl	8008fb0 <is_unknown>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d002      	beq.n	8009c3c <make_map_zenmen+0x274>
					{
						known++;
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	623b      	str	r3, [r7, #32]
					}
					if(map[i][j] == 999)		//999の場合は次へ
 8009c3c:	4907      	ldr	r1, [pc, #28]	; (8009c5c <make_map_zenmen+0x294>)
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	011a      	lsls	r2, r3, #4
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	4413      	add	r3, r2
 8009c46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009c4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d10a      	bne.n	8009c68 <make_map_zenmen+0x2a0>
					{
						update++;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3301      	adds	r3, #1
 8009c56:	61fb      	str	r3, [r7, #28]
						continue;
 8009c58:	e0d2      	b.n	8009e00 <make_map_zenmen+0x438>
 8009c5a:	bf00      	nop
 8009c5c:	200002e4 	.word	0x200002e4
 8009c60:	2000d440 	.word	0x2000d440
 8009c64:	20000220 	.word	0x20000220
					}

					if(j < MAZE_SIZE_Y-1)					//範囲チェック
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b0e      	cmp	r3, #14
 8009c6c:	dc2f      	bgt.n	8009cce <make_map_zenmen+0x306>
					{
						if( (wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 8009c6e:	4a70      	ldr	r2, [pc, #448]	; (8009e30 <make_map_zenmen+0x468>)
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	441a      	add	r2, r3
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d120      	bne.n	8009cce <make_map_zenmen+0x306>
						{
							if(map[i][j+1] == 999)			//まだ値が入っていなければ
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	4968      	ldr	r1, [pc, #416]	; (8009e34 <make_map_zenmen+0x46c>)
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	0112      	lsls	r2, r2, #4
 8009c96:	4413      	add	r3, r2
 8009c98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d114      	bne.n	8009cce <make_map_zenmen+0x306>
							{
								map[i][j+1] = map[i][j] + 1;	//値を代入
 8009ca4:	4963      	ldr	r1, [pc, #396]	; (8009e34 <make_map_zenmen+0x46c>)
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	011a      	lsls	r2, r3, #4
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	4413      	add	r3, r2
 8009cae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	3201      	adds	r2, #1
 8009cb8:	b290      	uxth	r0, r2
 8009cba:	495e      	ldr	r1, [pc, #376]	; (8009e34 <make_map_zenmen+0x46c>)
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	0112      	lsls	r2, r2, #4
 8009cc0:	4413      	add	r3, r2
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								change_flag = true;		//値が更新されたことを示す
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							}
						}
					}

					if(i < MAZE_SIZE_X-1)					//範囲チェック
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b0e      	cmp	r3, #14
 8009cd2:	dc2f      	bgt.n	8009d34 <make_map_zenmen+0x36c>
					{
						if( (wall[i][j].east & mask) == NOWALL)		//壁がなければ
 8009cd4:	4a56      	ldr	r2, [pc, #344]	; (8009e30 <make_map_zenmen+0x468>)
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	441a      	add	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d120      	bne.n	8009d34 <make_map_zenmen+0x36c>
						{
							if(map[i+1][j] == 999)			//値が入っていなければ
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	494f      	ldr	r1, [pc, #316]	; (8009e34 <make_map_zenmen+0x46c>)
 8009cf8:	011a      	lsls	r2, r3, #4
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d114      	bne.n	8009d34 <make_map_zenmen+0x36c>
							{
								map[i+1][j] = map[i][j] + 1;	//値を代入
 8009d0a:	494a      	ldr	r1, [pc, #296]	; (8009e34 <make_map_zenmen+0x46c>)
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	011a      	lsls	r2, r3, #4
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	4413      	add	r3, r2
 8009d14:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	b290      	uxth	r0, r2
 8009d20:	4944      	ldr	r1, [pc, #272]	; (8009e34 <make_map_zenmen+0x46c>)
 8009d22:	011a      	lsls	r2, r3, #4
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	4413      	add	r3, r2
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								change_flag = true;		//値が更新されたことを示す
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							}
						}
					}

					if(j > 0)						//範囲チェック
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd2f      	ble.n	8009d9a <make_map_zenmen+0x3d2>
					{
						if( (wall[i][j].south & mask) == NOWALL)	//壁がなければ
 8009d3a:	4a3d      	ldr	r2, [pc, #244]	; (8009e30 <make_map_zenmen+0x468>)
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	441a      	add	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	4413      	add	r3, r2
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	4013      	ands	r3, r2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d120      	bne.n	8009d9a <make_map_zenmen+0x3d2>
						{
							if(map[i][j-1] == 999)			//値が入っていなければ
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4935      	ldr	r1, [pc, #212]	; (8009e34 <make_map_zenmen+0x46c>)
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	0112      	lsls	r2, r2, #4
 8009d62:	4413      	add	r3, r2
 8009d64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d114      	bne.n	8009d9a <make_map_zenmen+0x3d2>
							{
								map[i][j-1] = map[i][j] + 1;	//値を代入
 8009d70:	4930      	ldr	r1, [pc, #192]	; (8009e34 <make_map_zenmen+0x46c>)
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	011a      	lsls	r2, r3, #4
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	3201      	adds	r2, #1
 8009d84:	b290      	uxth	r0, r2
 8009d86:	492b      	ldr	r1, [pc, #172]	; (8009e34 <make_map_zenmen+0x46c>)
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	0112      	lsls	r2, r2, #4
 8009d8c:	4413      	add	r3, r2
 8009d8e:	4602      	mov	r2, r0
 8009d90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								change_flag = true;		//値が更新されたことを示す
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							}
						}
					}

					if(i > 0)						//範囲チェック
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd2f      	ble.n	8009e00 <make_map_zenmen+0x438>
					{
						if( (wall[i][j].west & mask) == NOWALL)		//壁がなければ
 8009da0:	4a23      	ldr	r2, [pc, #140]	; (8009e30 <make_map_zenmen+0x468>)
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	441a      	add	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	4013      	ands	r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d120      	bne.n	8009e00 <make_map_zenmen+0x438>
						{
							if(map[i-1][j] == 999)			//値が入っていなければ
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	491c      	ldr	r1, [pc, #112]	; (8009e34 <make_map_zenmen+0x46c>)
 8009dc4:	011a      	lsls	r2, r3, #4
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d114      	bne.n	8009e00 <make_map_zenmen+0x438>
							{
								map[i-1][j] = map[i][j] + 1;	//値を代入
 8009dd6:	4917      	ldr	r1, [pc, #92]	; (8009e34 <make_map_zenmen+0x46c>)
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	011a      	lsls	r2, r3, #4
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	4413      	add	r3, r2
 8009de0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	3201      	adds	r2, #1
 8009dea:	b290      	uxth	r0, r2
 8009dec:	4911      	ldr	r1, [pc, #68]	; (8009e34 <make_map_zenmen+0x46c>)
 8009dee:	011a      	lsls	r2, r3, #4
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4413      	add	r3, r2
 8009df4:	4602      	mov	r2, r0
 8009df6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								change_flag = true;		//値が更新されたことを示す
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				for(int j = 0; j < MAZE_SIZE_Y; j++)		//迷路の大きさ分ループ(y座標)
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	3301      	adds	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	f77f af0d 	ble.w	8009c28 <make_map_zenmen+0x260>
			for(int i = 0; i < MAZE_SIZE_X; i++)			//迷路の大きさ分ループ(x座標)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	3301      	adds	r3, #1
 8009e12:	61bb      	str	r3, [r7, #24]
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	f77f af03 	ble.w	8009c22 <make_map_zenmen+0x25a>

				}

			}

		}while(change_flag == true);	//全体を作り終わるまで待つ
 8009e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	f43f aef8 	beq.w	8009c16 <make_map_zenmen+0x24e>
	}
}
 8009e26:	bf00      	nop
 8009e28:	3738      	adds	r7, #56	; 0x38
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	2000d440 	.word	0x2000d440
 8009e34:	200002e4 	.word	0x200002e4

08009e38 <get_nextdir_zenmen>:

int get_nextdir_zenmen(int *x, int *y,int goal_size ,int mask, t_direction *dir){
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
    int little,priority,tmp_priority;

    make_map_zenmen(x,y,goal_size,mask);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff fdbb 	bl	80099c8 <make_map_zenmen>

    little = 999;
 8009e52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009e56:	61fb      	str	r3, [r7, #28]

    priority = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	61bb      	str	r3, [r7, #24]

    if((wall[mypos.x][mypos.y].north & mask) == NOWALL){
 8009e5c:	4bb3      	ldr	r3, [pc, #716]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e62:	4618      	mov	r0, r3
 8009e64:	4bb1      	ldr	r3, [pc, #708]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4ab0      	ldr	r2, [pc, #704]	; (800a130 <get_nextdir_zenmen+0x2f8>)
 8009e6e:	0103      	lsls	r3, r0, #4
 8009e70:	4413      	add	r3, r2
 8009e72:	440b      	add	r3, r1
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d14b      	bne.n	8009f1e <get_nextdir_zenmen+0xe6>
        tmp_priority = get_priority(mypos.x,mypos.y + 1,north);
 8009e86:	4ba9      	ldr	r3, [pc, #676]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	4ba7      	ldr	r3, [pc, #668]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009e90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e94:	3301      	adds	r3, #1
 8009e96:	2200      	movs	r2, #0
 8009e98:	4619      	mov	r1, r3
 8009e9a:	f7ff f9f5 	bl	8009288 <get_priority>
 8009e9e:	6178      	str	r0, [r7, #20]
        if(map[mypos.x][mypos.y+1] < little){
 8009ea0:	4ba2      	ldr	r3, [pc, #648]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4ba0      	ldr	r3, [pc, #640]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009eaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	49a0      	ldr	r1, [pc, #640]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009eb2:	0112      	lsls	r2, r2, #4
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	dd13      	ble.n	8009eea <get_nextdir_zenmen+0xb2>
            little = map[mypos.x][mypos.y+1];
 8009ec2:	4b9a      	ldr	r3, [pc, #616]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4b98      	ldr	r3, [pc, #608]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4998      	ldr	r1, [pc, #608]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009ed4:	0112      	lsls	r2, r2, #4
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009edc:	61fb      	str	r3, [r7, #28]
            *dir = north;
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	61bb      	str	r3, [r7, #24]
 8009ee8:	e019      	b.n	8009f1e <get_nextdir_zenmen+0xe6>
        }else if(map[mypos.x][mypos.y+1] == little){
 8009eea:	4b90      	ldr	r3, [pc, #576]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4b8e      	ldr	r3, [pc, #568]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009ef4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	498e      	ldr	r1, [pc, #568]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009efc:	0112      	lsls	r2, r2, #4
 8009efe:	4413      	add	r3, r2
 8009f00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009f04:	461a      	mov	r2, r3
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d108      	bne.n	8009f1e <get_nextdir_zenmen+0xe6>
            if(priority < tmp_priority){
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	da04      	bge.n	8009f1e <get_nextdir_zenmen+0xe6>
                *dir = north;
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	2200      	movs	r2, #0
 8009f18:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].east & mask) == NOWALL){
 8009f1e:	4b83      	ldr	r3, [pc, #524]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f24:	4618      	mov	r0, r3
 8009f26:	4b81      	ldr	r3, [pc, #516]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4a80      	ldr	r2, [pc, #512]	; (800a130 <get_nextdir_zenmen+0x2f8>)
 8009f30:	0103      	lsls	r3, r0, #4
 8009f32:	4413      	add	r3, r2
 8009f34:	440b      	add	r3, r1
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	4013      	ands	r3, r2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d14a      	bne.n	8009fde <get_nextdir_zenmen+0x1a6>
        tmp_priority = get_priority(mypos.x + 1,mypos.y,east);
 8009f48:	4b78      	ldr	r3, [pc, #480]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f4e:	1c58      	adds	r0, r3, #1
 8009f50:	4b76      	ldr	r3, [pc, #472]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009f56:	2201      	movs	r2, #1
 8009f58:	4619      	mov	r1, r3
 8009f5a:	f7ff f995 	bl	8009288 <get_priority>
 8009f5e:	6178      	str	r0, [r7, #20]
        if(map[mypos.x + 1][mypos.y] < little){
 8009f60:	4b72      	ldr	r3, [pc, #456]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f66:	3301      	adds	r3, #1
 8009f68:	4a70      	ldr	r2, [pc, #448]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f6a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4a70      	ldr	r2, [pc, #448]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	440b      	add	r3, r1
 8009f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	dd13      	ble.n	8009faa <get_nextdir_zenmen+0x172>
            little = map[mypos.x+1][mypos.y];
 8009f82:	4b6a      	ldr	r3, [pc, #424]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	4a68      	ldr	r2, [pc, #416]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009f8c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4a68      	ldr	r2, [pc, #416]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	440b      	add	r3, r1
 8009f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9c:	61fb      	str	r3, [r7, #28]
            *dir = east;
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	61bb      	str	r3, [r7, #24]
 8009fa8:	e019      	b.n	8009fde <get_nextdir_zenmen+0x1a6>
        }else if(map[mypos.x + 1][mypos.y] == little){
 8009faa:	4b60      	ldr	r3, [pc, #384]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	4a5e      	ldr	r2, [pc, #376]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009fb4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4a5e      	ldr	r2, [pc, #376]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	440b      	add	r3, r1
 8009fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d108      	bne.n	8009fde <get_nextdir_zenmen+0x1a6>
            if(priority < tmp_priority){
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	da04      	bge.n	8009fde <get_nextdir_zenmen+0x1a6>
                *dir = east;
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].south & mask) == NOWALL){
 8009fde:	4b53      	ldr	r3, [pc, #332]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	4b51      	ldr	r3, [pc, #324]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 8009fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009fec:	4619      	mov	r1, r3
 8009fee:	4a50      	ldr	r2, [pc, #320]	; (800a130 <get_nextdir_zenmen+0x2f8>)
 8009ff0:	0103      	lsls	r3, r0, #4
 8009ff2:	4413      	add	r3, r2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d14b      	bne.n	800a0a0 <get_nextdir_zenmen+0x268>
        tmp_priority = get_priority(mypos.x,mypos.y-1,south);
 800a008:	4b48      	ldr	r3, [pc, #288]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a00a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a00e:	4618      	mov	r0, r3
 800a010:	4b46      	ldr	r3, [pc, #280]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a016:	3b01      	subs	r3, #1
 800a018:	2202      	movs	r2, #2
 800a01a:	4619      	mov	r1, r3
 800a01c:	f7ff f934 	bl	8009288 <get_priority>
 800a020:	6178      	str	r0, [r7, #20]
        if(map[mypos.x][mypos.y-1] < little){
 800a022:	4b42      	ldr	r3, [pc, #264]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a024:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a028:	461a      	mov	r2, r3
 800a02a:	4b40      	ldr	r3, [pc, #256]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a02c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a030:	3b01      	subs	r3, #1
 800a032:	4940      	ldr	r1, [pc, #256]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 800a034:	0112      	lsls	r2, r2, #4
 800a036:	4413      	add	r3, r2
 800a038:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a03c:	461a      	mov	r2, r3
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4293      	cmp	r3, r2
 800a042:	dd13      	ble.n	800a06c <get_nextdir_zenmen+0x234>
            little = map[mypos.x][mypos.y-1];
 800a044:	4b39      	ldr	r3, [pc, #228]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a04a:	461a      	mov	r2, r3
 800a04c:	4b37      	ldr	r3, [pc, #220]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a04e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a052:	3b01      	subs	r3, #1
 800a054:	4937      	ldr	r1, [pc, #220]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 800a056:	0112      	lsls	r2, r2, #4
 800a058:	4413      	add	r3, r2
 800a05a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a05e:	61fb      	str	r3, [r7, #28]
            *dir = south;
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	2202      	movs	r2, #2
 800a064:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	e019      	b.n	800a0a0 <get_nextdir_zenmen+0x268>
        }else if(map[mypos.x][mypos.y-1] == little){
 800a06c:	4b2f      	ldr	r3, [pc, #188]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a06e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a072:	461a      	mov	r2, r3
 800a074:	4b2d      	ldr	r3, [pc, #180]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	492d      	ldr	r1, [pc, #180]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 800a07e:	0112      	lsls	r2, r2, #4
 800a080:	4413      	add	r3, r2
 800a082:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a086:	461a      	mov	r2, r3
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d108      	bne.n	800a0a0 <get_nextdir_zenmen+0x268>
            if(priority < tmp_priority){
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	429a      	cmp	r2, r3
 800a094:	da04      	bge.n	800a0a0 <get_nextdir_zenmen+0x268>
                *dir = south;
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	2202      	movs	r2, #2
 800a09a:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[mypos.x][mypos.y].west & mask) == NOWALL){
 800a0a0:	4b22      	ldr	r3, [pc, #136]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	4b20      	ldr	r3, [pc, #128]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4a1f      	ldr	r2, [pc, #124]	; (800a130 <get_nextdir_zenmen+0x2f8>)
 800a0b2:	0103      	lsls	r3, r0, #4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d150      	bne.n	800a16c <get_nextdir_zenmen+0x334>
        tmp_priority = get_priority(mypos.x-1,mypos.y,west);
 800a0ca:	4b18      	ldr	r3, [pc, #96]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0d0:	1e58      	subs	r0, r3, #1
 800a0d2:	4b16      	ldr	r3, [pc, #88]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f7ff f8d4 	bl	8009288 <get_priority>
 800a0e0:	6178      	str	r0, [r7, #20]
        if(map[mypos.x-1][mypos.y] < little){
 800a0e2:	4b12      	ldr	r3, [pc, #72]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	4a10      	ldr	r2, [pc, #64]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a0ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4a10      	ldr	r2, [pc, #64]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4293      	cmp	r3, r2
 800a102:	dd19      	ble.n	800a138 <get_nextdir_zenmen+0x300>
            little = map[mypos.x-1][mypos.y];
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4a07      	ldr	r2, [pc, #28]	; (800a12c <get_nextdir_zenmen+0x2f4>)
 800a10e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a112:	4611      	mov	r1, r2
 800a114:	4a07      	ldr	r2, [pc, #28]	; (800a134 <get_nextdir_zenmen+0x2fc>)
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	440b      	add	r3, r1
 800a11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11e:	61fb      	str	r3, [r7, #28]
            *dir = west;
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	2203      	movs	r2, #3
 800a124:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e01f      	b.n	800a16c <get_nextdir_zenmen+0x334>
 800a12c:	20004380 	.word	0x20004380
 800a130:	2000d440 	.word	0x2000d440
 800a134:	200002e4 	.word	0x200002e4
        }else if(map[mypos.x-1][mypos.y] == little){
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <get_nextdir_zenmen+0x358>)
 800a13a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a13e:	3b01      	subs	r3, #1
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <get_nextdir_zenmen+0x358>)
 800a142:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a146:	4611      	mov	r1, r2
 800a148:	4a12      	ldr	r2, [pc, #72]	; (800a194 <get_nextdir_zenmen+0x35c>)
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	440b      	add	r3, r1
 800a14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a152:	461a      	mov	r2, r3
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	4293      	cmp	r3, r2
 800a158:	d108      	bne.n	800a16c <get_nextdir_zenmen+0x334>
            if(priority < tmp_priority){
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	429a      	cmp	r2, r3
 800a160:	da04      	bge.n	800a16c <get_nextdir_zenmen+0x334>
                *dir = west;
 800a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a164:	2203      	movs	r2, #3
 800a166:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    return ((int)((4+*dir - mypos.dir)%4));
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	3304      	adds	r3, #4
 800a172:	4a07      	ldr	r2, [pc, #28]	; (800a190 <get_nextdir_zenmen+0x358>)
 800a174:	7912      	ldrb	r2, [r2, #4]
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	425a      	negs	r2, r3
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	f002 0203 	and.w	r2, r2, #3
 800a182:	bf58      	it	pl
 800a184:	4253      	negpl	r3, r2
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20004380 	.word	0x20004380
 800a194:	200002e4 	.word	0x200002e4

0800a198 <search_adachi_zenmen2>:
    if(sen_fr.is_wall == true || sen_fl.is_wall == true ) STOP_WALL();
    else	straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
    run_mode = NON_CON_MODE;
}

void search_adachi_zenmen2(int *gx,int *gy,int goal_size){
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b08b      	sub	sp, #44	; 0x2c
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
    t_direction glob_nextdir;
    int direction = get_nextdir_zenmen(gx,gy,goal_size,MASK_SEARCH,&glob_nextdir);
 800a1a4:	f107 0313 	add.w	r3, r7, #19
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fe41 	bl	8009e38 <get_nextdir_zenmen>
 800a1b6:	6178      	str	r0, [r7, #20]

    switch(direction){
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d848      	bhi.n	800a250 <search_adachi_zenmen2+0xb8>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <search_adachi_zenmen2+0x2c>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1d5 	.word	0x0800a1d5
 800a1c8:	0800a1eb 	.word	0x0800a1eb
 800a1cc:	0800a22f 	.word	0x0800a22f
 800a1d0:	0800a20d 	.word	0x0800a20d
        case front:
            straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 800a1d4:	eddf 1abb 	vldr	s3, [pc, #748]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a1d8:	ed9f 1aba 	vldr	s2, [pc, #744]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a1dc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a1e0:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a4c8 <search_adachi_zenmen2+0x330>
 800a1e4:	f7fa f950 	bl	8004488 <straight>
            break;
 800a1e8:	e032      	b.n	800a250 <search_adachi_zenmen2+0xb8>
        case right:
		    turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//右に曲がる
 800a1ea:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800a4cc <search_adachi_zenmen2+0x334>
 800a1ee:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800a4d0 <search_adachi_zenmen2+0x338>
 800a1f2:	f7fa fdd1 	bl	8004d98 <turn_R90>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800a1f6:	eddf 1ab3 	vldr	s3, [pc, #716]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a1fa:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a1fe:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a202:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 800a4c8 <search_adachi_zenmen2+0x330>
 800a206:	f7fa f93f 	bl	8004488 <straight>
            break;
 800a20a:	e021      	b.n	800a250 <search_adachi_zenmen2+0xb8>
        case left:
		    turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//左に曲がる
 800a20c:	eddf 0aaf 	vldr	s1, [pc, #700]	; 800a4cc <search_adachi_zenmen2+0x334>
 800a210:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800a4d0 <search_adachi_zenmen2+0x338>
 800a214:	f7fa fee0 	bl	8004fd8 <turn_L90>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800a218:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a21c:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a220:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a224:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800a4c8 <search_adachi_zenmen2+0x330>
 800a228:	f7fa f92e 	bl	8004488 <straight>
            break;
 800a22c:	e010      	b.n	800a250 <search_adachi_zenmen2+0xb8>
        case rear:
		    turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);						//左に曲がる
 800a22e:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800a4cc <search_adachi_zenmen2+0x334>
 800a232:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 800a4d0 <search_adachi_zenmen2+0x338>
 800a236:	f7fa ffe7 	bl	8005208 <turn_L180>
		    straight(HALF_SECTION, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800a23a:	eddf 1aa2 	vldr	s3, [pc, #648]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a23e:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a242:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a246:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800a4c8 <search_adachi_zenmen2+0x330>
 800a24a:	f7fa f91d 	bl	8004488 <straight>
		    break;
 800a24e:	bf00      	nop
    }

    mypos.dir = glob_nextdir;
 800a250:	7cfa      	ldrb	r2, [r7, #19]
 800a252:	4ba0      	ldr	r3, [pc, #640]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a254:	711a      	strb	r2, [r3, #4]
    switch(mypos.dir){
 800a256:	4b9f      	ldr	r3, [pc, #636]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d832      	bhi.n	800a2c4 <search_adachi_zenmen2+0x12c>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <search_adachi_zenmen2+0xcc>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a289 	.word	0x0800a289
 800a26c:	0800a29d 	.word	0x0800a29d
 800a270:	0800a2b1 	.word	0x0800a2b1
        case north:
            mypos.y++;
 800a274:	4b97      	ldr	r3, [pc, #604]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3301      	adds	r3, #1
 800a27e:	b29b      	uxth	r3, r3
 800a280:	b21a      	sxth	r2, r3
 800a282:	4b94      	ldr	r3, [pc, #592]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a284:	805a      	strh	r2, [r3, #2]
            break;
 800a286:	e01d      	b.n	800a2c4 <search_adachi_zenmen2+0x12c>
        case east:
            mypos.x++;
 800a288:	4b92      	ldr	r3, [pc, #584]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a28a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3301      	adds	r3, #1
 800a292:	b29b      	uxth	r3, r3
 800a294:	b21a      	sxth	r2, r3
 800a296:	4b8f      	ldr	r3, [pc, #572]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a298:	801a      	strh	r2, [r3, #0]
            break;
 800a29a:	e013      	b.n	800a2c4 <search_adachi_zenmen2+0x12c>
        case south:
            mypos.y--;
 800a29c:	4b8d      	ldr	r3, [pc, #564]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a29e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	b21a      	sxth	r2, r3
 800a2aa:	4b8a      	ldr	r3, [pc, #552]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a2ac:	805a      	strh	r2, [r3, #2]
            break;
 800a2ae:	e009      	b.n	800a2c4 <search_adachi_zenmen2+0x12c>
        case west:
            mypos.x--;
 800a2b0:	4b88      	ldr	r3, [pc, #544]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a2b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b21a      	sxth	r2, r3
 800a2be:	4b85      	ldr	r3, [pc, #532]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a2c0:	801a      	strh	r2, [r3, #0]
            break;
 800a2c2:	bf00      	nop
    }

    set_wall(mypos.x,mypos.y);
 800a2c4:	4b83      	ldr	r3, [pc, #524]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a2c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4b81      	ldr	r3, [pc, #516]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a2ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f7fe feab 	bl	8009030 <set_wall>

    int accel_cnt = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]

    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800a2de:	e20e      	b.n	800a6fe <search_adachi_zenmen2+0x566>

        direction = get_nextdir_zenmen(gx,gy,goal_size,MASK_SEARCH,&glob_nextdir);
 800a2e0:	f107 0313 	add.w	r3, r7, #19
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fda3 	bl	8009e38 <get_nextdir_zenmen>
 800a2f2:	6178      	str	r0, [r7, #20]

        int next_is_unknown = 0x00;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
        switch(glob_nextdir){
 800a2f8:	7cfb      	ldrb	r3, [r7, #19]
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d857      	bhi.n	800a3ae <search_adachi_zenmen2+0x216>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <search_adachi_zenmen2+0x16c>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a339 	.word	0x0800a339
 800a30c:	0800a35b 	.word	0x0800a35b
 800a310:	0800a37f 	.word	0x0800a37f
            case north:
            	if(is_unknown(mypos.x,mypos.y+1) == false)
 800a314:	4b6f      	ldr	r3, [pc, #444]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a31a:	461a      	mov	r2, r3
 800a31c:	4b6d      	ldr	r3, [pc, #436]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a31e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a322:	3301      	adds	r3, #1
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f7fe fe42 	bl	8008fb0 <is_unknown>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d136      	bne.n	800a3a0 <search_adachi_zenmen2+0x208>
            		next_is_unknown = 0x80;
 800a332:	2380      	movs	r3, #128	; 0x80
 800a334:	61bb      	str	r3, [r7, #24]
                break;
 800a336:	e033      	b.n	800a3a0 <search_adachi_zenmen2+0x208>
            case east:
            	if(is_unknown(mypos.x+1,mypos.y) == false)
 800a338:	4b66      	ldr	r3, [pc, #408]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a33a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	4b64      	ldr	r3, [pc, #400]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a346:	4619      	mov	r1, r3
 800a348:	4610      	mov	r0, r2
 800a34a:	f7fe fe31 	bl	8008fb0 <is_unknown>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d127      	bne.n	800a3a4 <search_adachi_zenmen2+0x20c>
            		next_is_unknown = 0x80;
 800a354:	2380      	movs	r3, #128	; 0x80
 800a356:	61bb      	str	r3, [r7, #24]
                break;
 800a358:	e024      	b.n	800a3a4 <search_adachi_zenmen2+0x20c>
            case south:
            	if(is_unknown(mypos.x,mypos.y-1) == false)
 800a35a:	4b5e      	ldr	r3, [pc, #376]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a360:	461a      	mov	r2, r3
 800a362:	4b5c      	ldr	r3, [pc, #368]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a364:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a368:	3b01      	subs	r3, #1
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f7fe fe1f 	bl	8008fb0 <is_unknown>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d117      	bne.n	800a3a8 <search_adachi_zenmen2+0x210>
            		next_is_unknown = 0x80;
 800a378:	2380      	movs	r3, #128	; 0x80
 800a37a:	61bb      	str	r3, [r7, #24]
                break;
 800a37c:	e014      	b.n	800a3a8 <search_adachi_zenmen2+0x210>
            case west:
            	if(is_unknown(mypos.x-1,mypos.y) == false)
 800a37e:	4b55      	ldr	r3, [pc, #340]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a380:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a384:	1e5a      	subs	r2, r3, #1
 800a386:	4b53      	ldr	r3, [pc, #332]	; (800a4d4 <search_adachi_zenmen2+0x33c>)
 800a388:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a38c:	4619      	mov	r1, r3
 800a38e:	4610      	mov	r0, r2
 800a390:	f7fe fe0e 	bl	8008fb0 <is_unknown>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d108      	bne.n	800a3ac <search_adachi_zenmen2+0x214>
            		next_is_unknown = 0x80;
 800a39a:	2380      	movs	r3, #128	; 0x80
 800a39c:	61bb      	str	r3, [r7, #24]
                break;
 800a39e:	e005      	b.n	800a3ac <search_adachi_zenmen2+0x214>
                break;
 800a3a0:	bf00      	nop
 800a3a2:	e004      	b.n	800a3ae <search_adachi_zenmen2+0x216>
                break;
 800a3a4:	bf00      	nop
 800a3a6:	e002      	b.n	800a3ae <search_adachi_zenmen2+0x216>
                break;
 800a3a8:	bf00      	nop
 800a3aa:	e000      	b.n	800a3ae <search_adachi_zenmen2+0x216>
                break;
 800a3ac:	bf00      	nop
        }


        switch(direction|next_is_unknown){
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d064      	beq.n	800a482 <search_adachi_zenmen2+0x2ea>
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	dc07      	bgt.n	800a3cc <search_adachi_zenmen2+0x234>
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d03f      	beq.n	800a440 <search_adachi_zenmen2+0x2a8>
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	f300 808d 	bgt.w	800a4e0 <search_adachi_zenmen2+0x348>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d011      	beq.n	800a3ee <search_adachi_zenmen2+0x256>
 800a3ca:	e144      	b.n	800a656 <search_adachi_zenmen2+0x4be>
 800a3cc:	2b81      	cmp	r3, #129	; 0x81
 800a3ce:	d037      	beq.n	800a440 <search_adachi_zenmen2+0x2a8>
 800a3d0:	2b81      	cmp	r3, #129	; 0x81
 800a3d2:	dc02      	bgt.n	800a3da <search_adachi_zenmen2+0x242>
 800a3d4:	2b80      	cmp	r3, #128	; 0x80
 800a3d6:	d006      	beq.n	800a3e6 <search_adachi_zenmen2+0x24e>
 800a3d8:	e13d      	b.n	800a656 <search_adachi_zenmen2+0x4be>
 800a3da:	2b82      	cmp	r3, #130	; 0x82
 800a3dc:	f000 8080 	beq.w	800a4e0 <search_adachi_zenmen2+0x348>
 800a3e0:	2b83      	cmp	r3, #131	; 0x83
 800a3e2:	d04e      	beq.n	800a482 <search_adachi_zenmen2+0x2ea>
 800a3e4:	e137      	b.n	800a656 <search_adachi_zenmen2+0x4be>
            case front|0x80:
            	accel_cnt++;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	61fb      	str	r3, [r7, #28]
            	break;
 800a3ec:	e133      	b.n	800a656 <search_adachi_zenmen2+0x4be>
            case front:
        		if(accel_cnt > 0){
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dd1a      	ble.n	800a42a <search_adachi_zenmen2+0x292>
        			straight(SECTION*accel_cnt,SEARCH_ACCEL*1.5,0.5,SEARCH_SPEED);
 800a3f4:	69f8      	ldr	r0, [r7, #28]
 800a3f6:	f7f6 f89d 	bl	8000534 <__aeabi_i2d>
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	4b36      	ldr	r3, [pc, #216]	; (800a4d8 <search_adachi_zenmen2+0x340>)
 800a400:	f7f6 f902 	bl	8000608 <__aeabi_dmul>
 800a404:	4603      	mov	r3, r0
 800a406:	460c      	mov	r4, r1
 800a408:	4618      	mov	r0, r3
 800a40a:	4621      	mov	r1, r4
 800a40c:	f7f6 fbd4 	bl	8000bb8 <__aeabi_d2f>
 800a410:	4603      	mov	r3, r0
 800a412:	eddf 1a2c 	vldr	s3, [pc, #176]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a416:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a41a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800a41e:	ee00 3a10 	vmov	s0, r3
 800a422:	f7fa f831 	bl	8004488 <straight>
        			accel_cnt = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	61fb      	str	r3, [r7, #28]
        		}
        		straight(SECTION,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 800a42a:	eddf 1a26 	vldr	s3, [pc, #152]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a42e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a432:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a436:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800a4dc <search_adachi_zenmen2+0x344>
 800a43a:	f7fa f825 	bl	8004488 <straight>
            	break;
 800a43e:	e10a      	b.n	800a656 <search_adachi_zenmen2+0x4be>
            case right|0x80:
            case right:
        		if(accel_cnt > 0){
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	2b00      	cmp	r3, #0
 800a444:	dd1a      	ble.n	800a47c <search_adachi_zenmen2+0x2e4>
        			straight(SECTION*accel_cnt,SEARCH_ACCEL*1.5,0.5,SEARCH_SPEED);
 800a446:	69f8      	ldr	r0, [r7, #28]
 800a448:	f7f6 f874 	bl	8000534 <__aeabi_i2d>
 800a44c:	f04f 0200 	mov.w	r2, #0
 800a450:	4b21      	ldr	r3, [pc, #132]	; (800a4d8 <search_adachi_zenmen2+0x340>)
 800a452:	f7f6 f8d9 	bl	8000608 <__aeabi_dmul>
 800a456:	4603      	mov	r3, r0
 800a458:	460c      	mov	r4, r1
 800a45a:	4618      	mov	r0, r3
 800a45c:	4621      	mov	r1, r4
 800a45e:	f7f6 fbab 	bl	8000bb8 <__aeabi_d2f>
 800a462:	4603      	mov	r3, r0
 800a464:	eddf 1a17 	vldr	s3, [pc, #92]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a468:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a46c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800a470:	ee00 3a10 	vmov	s0, r3
 800a474:	f7fa f808 	bl	8004488 <straight>
        			accel_cnt = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	61fb      	str	r3, [r7, #28]
        		}
            	sla_R90();
 800a47c:	f7fb f9bc 	bl	80057f8 <sla_R90>
            	break;
 800a480:	e0e9      	b.n	800a656 <search_adachi_zenmen2+0x4be>
            case left|0x80:
            case left:
        		if(accel_cnt > 0){
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dd1a      	ble.n	800a4be <search_adachi_zenmen2+0x326>
        			straight(SECTION*accel_cnt,SEARCH_ACCEL*1.5,0.5,SEARCH_SPEED);
 800a488:	69f8      	ldr	r0, [r7, #28]
 800a48a:	f7f6 f853 	bl	8000534 <__aeabi_i2d>
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <search_adachi_zenmen2+0x340>)
 800a494:	f7f6 f8b8 	bl	8000608 <__aeabi_dmul>
 800a498:	4603      	mov	r3, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	4618      	mov	r0, r3
 800a49e:	4621      	mov	r1, r4
 800a4a0:	f7f6 fb8a 	bl	8000bb8 <__aeabi_d2f>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	eddf 1a07 	vldr	s3, [pc, #28]	; 800a4c4 <search_adachi_zenmen2+0x32c>
 800a4aa:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a4ae:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800a4b2:	ee00 3a10 	vmov	s0, r3
 800a4b6:	f7f9 ffe7 	bl	8004488 <straight>
        			accel_cnt = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
        		}
            	sla_L90();
 800a4be:	f7fa ffb7 	bl	8005430 <sla_L90>
            	break;
 800a4c2:	e0c8      	b.n	800a656 <search_adachi_zenmen2+0x4be>
 800a4c4:	3e99999a 	.word	0x3e99999a
 800a4c8:	42340000 	.word	0x42340000
 800a4cc:	41490fd8 	.word	0x41490fd8
 800a4d0:	437b53ce 	.word	0x437b53ce
 800a4d4:	20004380 	.word	0x20004380
 800a4d8:	40568000 	.word	0x40568000
 800a4dc:	42b40000 	.word	0x42b40000
            case rear|0x80:
            case rear:
        		if(accel_cnt > 0){
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd1a      	ble.n	800a51c <search_adachi_zenmen2+0x384>
        			straight(SECTION*accel_cnt,SEARCH_ACCEL*1.5,0.5,SEARCH_SPEED);
 800a4e6:	69f8      	ldr	r0, [r7, #28]
 800a4e8:	f7f6 f824 	bl	8000534 <__aeabi_i2d>
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	4ba9      	ldr	r3, [pc, #676]	; (800a798 <search_adachi_zenmen2+0x600>)
 800a4f2:	f7f6 f889 	bl	8000608 <__aeabi_dmul>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f7f6 fb5b 	bl	8000bb8 <__aeabi_d2f>
 800a502:	4603      	mov	r3, r0
 800a504:	eddf 1aa5 	vldr	s3, [pc, #660]	; 800a79c <search_adachi_zenmen2+0x604>
 800a508:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a50c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800a510:	ee00 3a10 	vmov	s0, r3
 800a514:	f7f9 ffb8 	bl	8004488 <straight>
        			accel_cnt = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	61fb      	str	r3, [r7, #28]
        		}
            	if(sen_fr.is_wall == true || sen_fl.is_wall == true){
 800a51c:	4ba0      	ldr	r3, [pc, #640]	; (800a7a0 <search_adachi_zenmen2+0x608>)
 800a51e:	7b9b      	ldrb	r3, [r3, #14]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d003      	beq.n	800a52c <search_adachi_zenmen2+0x394>
 800a524:	4b9f      	ldr	r3, [pc, #636]	; (800a7a4 <search_adachi_zenmen2+0x60c>)
 800a526:	7b9b      	ldrb	r3, [r3, #14]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d13d      	bne.n	800a5a8 <search_adachi_zenmen2+0x410>
            		if(sen_l.is_wall == true){
 800a52c:	4b9e      	ldr	r3, [pc, #632]	; (800a7a8 <search_adachi_zenmen2+0x610>)
 800a52e:	7b9b      	ldrb	r3, [r3, #14]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d114      	bne.n	800a55e <search_adachi_zenmen2+0x3c6>
            			STOP_WALL();
 800a534:	f7fa f9c8 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 800a538:	2064      	movs	r0, #100	; 0x64
 800a53a:	f7fa fa7d 	bl	8004a38 <STOP_WALL2>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a53e:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a542:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a546:	f7fa fd47 	bl	8004fd8 <turn_L90>
            			STOP_WALL2(200);
 800a54a:	20c8      	movs	r0, #200	; 0xc8
 800a54c:	f7fa fa74 	bl	8004a38 <STOP_WALL2>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a550:	eddf 0a96 	vldr	s1, [pc, #600]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a554:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a558:	f7fa fd3e 	bl	8004fd8 <turn_L90>
            		if(sen_l.is_wall == true){
 800a55c:	e070      	b.n	800a640 <search_adachi_zenmen2+0x4a8>
            		}else if(sen_r.is_wall == true){
 800a55e:	4b95      	ldr	r3, [pc, #596]	; (800a7b4 <search_adachi_zenmen2+0x61c>)
 800a560:	7b9b      	ldrb	r3, [r3, #14]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d114      	bne.n	800a590 <search_adachi_zenmen2+0x3f8>
            			STOP_WALL();
 800a566:	f7fa f9af 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 800a56a:	2064      	movs	r0, #100	; 0x64
 800a56c:	f7fa fa64 	bl	8004a38 <STOP_WALL2>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a570:	eddf 0a8e 	vldr	s1, [pc, #568]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a574:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a578:	f7fa fc0e 	bl	8004d98 <turn_R90>
            			STOP_WALL2(200);
 800a57c:	20c8      	movs	r0, #200	; 0xc8
 800a57e:	f7fa fa5b 	bl	8004a38 <STOP_WALL2>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a582:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a586:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a58a:	f7fa fc05 	bl	8004d98 <turn_R90>
            		if(sen_l.is_wall == true){
 800a58e:	e057      	b.n	800a640 <search_adachi_zenmen2+0x4a8>
            		}else{
            			STOP_WALL();
 800a590:	f7fa f99a 	bl	80048c8 <STOP_WALL>
            			STOP_WALL2(100);
 800a594:	2064      	movs	r0, #100	; 0x64
 800a596:	f7fa fa4f 	bl	8004a38 <STOP_WALL2>
            			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a59a:	eddf 0a84 	vldr	s1, [pc, #528]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a59e:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a5a2:	f7fa fe31 	bl	8005208 <turn_L180>
            		if(sen_l.is_wall == true){
 800a5a6:	e04b      	b.n	800a640 <search_adachi_zenmen2+0x4a8>
            		}
            	}else	{
            		if(sen_l.is_wall == true){
 800a5a8:	4b7f      	ldr	r3, [pc, #508]	; (800a7a8 <search_adachi_zenmen2+0x610>)
 800a5aa:	7b9b      	ldrb	r3, [r3, #14]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d119      	bne.n	800a5e4 <search_adachi_zenmen2+0x44c>
            			straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
 800a5b0:	eddf 1a81 	vldr	s3, [pc, #516]	; 800a7b8 <search_adachi_zenmen2+0x620>
 800a5b4:	ed9f 1a79 	vldr	s2, [pc, #484]	; 800a79c <search_adachi_zenmen2+0x604>
 800a5b8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a5bc:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800a7bc <search_adachi_zenmen2+0x624>
 800a5c0:	f7f9 ff62 	bl	8004488 <straight>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a5c4:	eddf 0a79 	vldr	s1, [pc, #484]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a5c8:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a5cc:	f7fa fd04 	bl	8004fd8 <turn_L90>
            			STOP_WALL2(200);
 800a5d0:	20c8      	movs	r0, #200	; 0xc8
 800a5d2:	f7fa fa31 	bl	8004a38 <STOP_WALL2>
            			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a5d6:	eddf 0a75 	vldr	s1, [pc, #468]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a5da:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a5de:	f7fa fcfb 	bl	8004fd8 <turn_L90>
 800a5e2:	e02d      	b.n	800a640 <search_adachi_zenmen2+0x4a8>
            		}else if(sen_r.is_wall == true){
 800a5e4:	4b73      	ldr	r3, [pc, #460]	; (800a7b4 <search_adachi_zenmen2+0x61c>)
 800a5e6:	7b9b      	ldrb	r3, [r3, #14]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d119      	bne.n	800a620 <search_adachi_zenmen2+0x488>
            			straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
 800a5ec:	eddf 1a72 	vldr	s3, [pc, #456]	; 800a7b8 <search_adachi_zenmen2+0x620>
 800a5f0:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 800a79c <search_adachi_zenmen2+0x604>
 800a5f4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a5f8:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800a7bc <search_adachi_zenmen2+0x624>
 800a5fc:	f7f9 ff44 	bl	8004488 <straight>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a600:	eddf 0a6a 	vldr	s1, [pc, #424]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a604:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a608:	f7fa fbc6 	bl	8004d98 <turn_R90>
            			STOP_WALL2(200);
 800a60c:	20c8      	movs	r0, #200	; 0xc8
 800a60e:	f7fa fa13 	bl	8004a38 <STOP_WALL2>
            			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a612:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a616:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a61a:	f7fa fbbd 	bl	8004d98 <turn_R90>
 800a61e:	e00f      	b.n	800a640 <search_adachi_zenmen2+0x4a8>
            		}else{
            			straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
 800a620:	eddf 1a65 	vldr	s3, [pc, #404]	; 800a7b8 <search_adachi_zenmen2+0x620>
 800a624:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800a79c <search_adachi_zenmen2+0x604>
 800a628:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a62c:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800a7bc <search_adachi_zenmen2+0x624>
 800a630:	f7f9 ff2a 	bl	8004488 <straight>
            			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);
 800a634:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800a7ac <search_adachi_zenmen2+0x614>
 800a638:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800a7b0 <search_adachi_zenmen2+0x618>
 800a63c:	f7fa fde4 	bl	8005208 <turn_L180>
            		}
            	}
            	straight(HALF_SECTION-10, SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);	    //半区画進む
 800a640:	eddf 1a56 	vldr	s3, [pc, #344]	; 800a79c <search_adachi_zenmen2+0x604>
 800a644:	ed9f 1a55 	vldr	s2, [pc, #340]	; 800a79c <search_adachi_zenmen2+0x604>
 800a648:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a64c:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800a7c0 <search_adachi_zenmen2+0x628>
 800a650:	f7f9 ff1a 	bl	8004488 <straight>
                break;
 800a654:	bf00      	nop
        }

        mypos.dir = glob_nextdir;
 800a656:	7cfa      	ldrb	r2, [r7, #19]
 800a658:	4b5a      	ldr	r3, [pc, #360]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a65a:	711a      	strb	r2, [r3, #4]

        switch(mypos.dir){
 800a65c:	4b59      	ldr	r3, [pc, #356]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a65e:	791b      	ldrb	r3, [r3, #4]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d833      	bhi.n	800a6cc <search_adachi_zenmen2+0x534>
 800a664:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <search_adachi_zenmen2+0x4d4>)
 800a666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66a:	bf00      	nop
 800a66c:	0800a67d 	.word	0x0800a67d
 800a670:	0800a691 	.word	0x0800a691
 800a674:	0800a6a5 	.word	0x0800a6a5
 800a678:	0800a6b9 	.word	0x0800a6b9
            case north:
                mypos.y++;
 800a67c:	4b51      	ldr	r3, [pc, #324]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a67e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a682:	b29b      	uxth	r3, r3
 800a684:	3301      	adds	r3, #1
 800a686:	b29b      	uxth	r3, r3
 800a688:	b21a      	sxth	r2, r3
 800a68a:	4b4e      	ldr	r3, [pc, #312]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a68c:	805a      	strh	r2, [r3, #2]
                break;
 800a68e:	e01d      	b.n	800a6cc <search_adachi_zenmen2+0x534>
            case east:
                mypos.x++;
 800a690:	4b4c      	ldr	r3, [pc, #304]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a692:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a696:	b29b      	uxth	r3, r3
 800a698:	3301      	adds	r3, #1
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b21a      	sxth	r2, r3
 800a69e:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6a0:	801a      	strh	r2, [r3, #0]
                break;
 800a6a2:	e013      	b.n	800a6cc <search_adachi_zenmen2+0x534>
            case south:
                mypos.y--;
 800a6a4:	4b47      	ldr	r3, [pc, #284]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	b21a      	sxth	r2, r3
 800a6b2:	4b44      	ldr	r3, [pc, #272]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6b4:	805a      	strh	r2, [r3, #2]
                break;
 800a6b6:	e009      	b.n	800a6cc <search_adachi_zenmen2+0x534>
            case west:
                mypos.x--;
 800a6b8:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	b21a      	sxth	r2, r3
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6c8:	801a      	strh	r2, [r3, #0]
                break;
 800a6ca:	bf00      	nop
        }

        if(is_unknown(mypos.x,mypos.y) == true){
 800a6cc:	4b3d      	ldr	r3, [pc, #244]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4b3b      	ldr	r3, [pc, #236]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f7fe fc67 	bl	8008fb0 <is_unknown>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d10a      	bne.n	800a6fe <search_adachi_zenmen2+0x566>
        	set_wall(mypos.x,mypos.y);
 800a6e8:	4b36      	ldr	r3, [pc, #216]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	4b34      	ldr	r3, [pc, #208]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a6f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7fe fc99 	bl	8009030 <set_wall>
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800a6fe:	4b31      	ldr	r3, [pc, #196]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a700:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a704:	4618      	mov	r0, r3
 800a706:	4b2f      	ldr	r3, [pc, #188]	; (800a7c4 <search_adachi_zenmen2+0x62c>)
 800a708:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a70c:	4619      	mov	r1, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	f7fe fb11 	bl	8008d3c <i_am_goal>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f43f addf 	beq.w	800a2e0 <search_adachi_zenmen2+0x148>
        }

    }
	if(accel_cnt > 0){
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	dd1a      	ble.n	800a75e <search_adachi_zenmen2+0x5c6>
		straight(SECTION*accel_cnt,SEARCH_ACCEL*1.5,0.5,SEARCH_SPEED);
 800a728:	69f8      	ldr	r0, [r7, #28]
 800a72a:	f7f5 ff03 	bl	8000534 <__aeabi_i2d>
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	4b19      	ldr	r3, [pc, #100]	; (800a798 <search_adachi_zenmen2+0x600>)
 800a734:	f7f5 ff68 	bl	8000608 <__aeabi_dmul>
 800a738:	4603      	mov	r3, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4618      	mov	r0, r3
 800a73e:	4621      	mov	r1, r4
 800a740:	f7f6 fa3a 	bl	8000bb8 <__aeabi_d2f>
 800a744:	4603      	mov	r3, r0
 800a746:	eddf 1a15 	vldr	s3, [pc, #84]	; 800a79c <search_adachi_zenmen2+0x604>
 800a74a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a74e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800a752:	ee00 3a10 	vmov	s0, r3
 800a756:	f7f9 fe97 	bl	8004488 <straight>
		accel_cnt = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
	}
    if(sen_fr.is_wall == true || sen_fl.is_wall == true ) STOP_WALL();
 800a75e:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <search_adachi_zenmen2+0x608>)
 800a760:	7b9b      	ldrb	r3, [r3, #14]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d003      	beq.n	800a76e <search_adachi_zenmen2+0x5d6>
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <search_adachi_zenmen2+0x60c>)
 800a768:	7b9b      	ldrb	r3, [r3, #14]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d102      	bne.n	800a774 <search_adachi_zenmen2+0x5dc>
 800a76e:	f7fa f8ab 	bl	80048c8 <STOP_WALL>
 800a772:	e009      	b.n	800a788 <search_adachi_zenmen2+0x5f0>
    else	straight(HALF_SECTION,SEARCH_ACCEL,SEARCH_SPEED,0.0);
 800a774:	eddf 1a10 	vldr	s3, [pc, #64]	; 800a7b8 <search_adachi_zenmen2+0x620>
 800a778:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800a79c <search_adachi_zenmen2+0x604>
 800a77c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800a780:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a7bc <search_adachi_zenmen2+0x624>
 800a784:	f7f9 fe80 	bl	8004488 <straight>
    run_mode = NON_CON_MODE;
 800a788:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <search_adachi_zenmen2+0x630>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
}
 800a78e:	bf00      	nop
 800a790:	3724      	adds	r7, #36	; 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}
 800a796:	bf00      	nop
 800a798:	40568000 	.word	0x40568000
 800a79c:	3e99999a 	.word	0x3e99999a
 800a7a0:	2000d1b8 	.word	0x2000d1b8
 800a7a4:	2000d1c8 	.word	0x2000d1c8
 800a7a8:	2000d064 	.word	0x2000d064
 800a7ac:	41490fd8 	.word	0x41490fd8
 800a7b0:	437b53ce 	.word	0x437b53ce
 800a7b4:	2000f480 	.word	0x2000f480
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	42340000 	.word	0x42340000
 800a7c0:	420c0000 	.word	0x420c0000
 800a7c4:	20004380 	.word	0x20004380
 800a7c8:	2000a170 	.word	0x2000a170

0800a7cc <saitan3>:

    }

}

void saitan3(int *gx,int *gy,int goal_size){
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af02      	add	r7, sp, #8
 800a7d6:	f107 0320 	add.w	r3, r7, #32
 800a7da:	3b14      	subs	r3, #20
 800a7dc:	6018      	str	r0, [r3, #0]
 800a7de:	f107 0320 	add.w	r3, r7, #32
 800a7e2:	3b18      	subs	r3, #24
 800a7e4:	6019      	str	r1, [r3, #0]
 800a7e6:	f107 0320 	add.w	r3, r7, #32
 800a7ea:	3b1c      	subs	r3, #28
 800a7ec:	601a      	str	r2, [r3, #0]
	int run_pattern[MAZE_SIZE_X*MAZE_SIZE_Y*4];
	int run_cnt = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800a7f4:	f102 021c 	add.w	r2, r2, #28
 800a7f8:	6013      	str	r3, [r2, #0]

    t_direction glob_nextdir;
    int direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800a7fa:	f107 0220 	add.w	r2, r7, #32
 800a7fe:	3a1c      	subs	r2, #28
 800a800:	f107 0120 	add.w	r1, r7, #32
 800a804:	3918      	subs	r1, #24
 800a806:	f107 0020 	add.w	r0, r7, #32
 800a80a:	3814      	subs	r0, #20
 800a80c:	f107 0320 	add.w	r3, r7, #32
 800a810:	3b0d      	subs	r3, #13
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	2303      	movs	r3, #3
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	6809      	ldr	r1, [r1, #0]
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	f7fe fd6a 	bl	80092f4 <get_nextdir>
 800a820:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a824:	f103 0314 	add.w	r3, r3, #20
 800a828:	6018      	str	r0, [r3, #0]

    mypos.dir = glob_nextdir;
 800a82a:	f107 0320 	add.w	r3, r7, #32
 800a82e:	3b0d      	subs	r3, #13
 800a830:	781a      	ldrb	r2, [r3, #0]
 800a832:	4bc1      	ldr	r3, [pc, #772]	; (800ab38 <saitan3+0x36c>)
 800a834:	711a      	strb	r2, [r3, #4]
    switch(mypos.dir){
 800a836:	4bc0      	ldr	r3, [pc, #768]	; (800ab38 <saitan3+0x36c>)
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d832      	bhi.n	800a8a4 <saitan3+0xd8>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <saitan3+0x78>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a855 	.word	0x0800a855
 800a848:	0800a869 	.word	0x0800a869
 800a84c:	0800a87d 	.word	0x0800a87d
 800a850:	0800a891 	.word	0x0800a891
        case north:
            mypos.y++;
 800a854:	4bb8      	ldr	r3, [pc, #736]	; (800ab38 <saitan3+0x36c>)
 800a856:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	3301      	adds	r3, #1
 800a85e:	b29b      	uxth	r3, r3
 800a860:	b21a      	sxth	r2, r3
 800a862:	4bb5      	ldr	r3, [pc, #724]	; (800ab38 <saitan3+0x36c>)
 800a864:	805a      	strh	r2, [r3, #2]
            break;
 800a866:	e01d      	b.n	800a8a4 <saitan3+0xd8>
        case east:
            mypos.x++;
 800a868:	4bb3      	ldr	r3, [pc, #716]	; (800ab38 <saitan3+0x36c>)
 800a86a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3301      	adds	r3, #1
 800a872:	b29b      	uxth	r3, r3
 800a874:	b21a      	sxth	r2, r3
 800a876:	4bb0      	ldr	r3, [pc, #704]	; (800ab38 <saitan3+0x36c>)
 800a878:	801a      	strh	r2, [r3, #0]
            break;
 800a87a:	e013      	b.n	800a8a4 <saitan3+0xd8>
        case south:
            mypos.y--;
 800a87c:	4bae      	ldr	r3, [pc, #696]	; (800ab38 <saitan3+0x36c>)
 800a87e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	b29b      	uxth	r3, r3
 800a888:	b21a      	sxth	r2, r3
 800a88a:	4bab      	ldr	r3, [pc, #684]	; (800ab38 <saitan3+0x36c>)
 800a88c:	805a      	strh	r2, [r3, #2]
            break;
 800a88e:	e009      	b.n	800a8a4 <saitan3+0xd8>
        case west:
            mypos.x--;
 800a890:	4ba9      	ldr	r3, [pc, #676]	; (800ab38 <saitan3+0x36c>)
 800a892:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a896:	b29b      	uxth	r3, r3
 800a898:	3b01      	subs	r3, #1
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	b21a      	sxth	r2, r3
 800a89e:	4ba6      	ldr	r3, [pc, #664]	; (800ab38 <saitan3+0x36c>)
 800a8a0:	801a      	strh	r2, [r3, #0]
            break;
 800a8a2:	bf00      	nop
    }

    switch(direction){
 800a8a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a8a8:	f103 0314 	add.w	r3, r3, #20
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	f200 81c8 	bhi.w	800ac44 <saitan3+0x478>
 800a8b4:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <saitan3+0xf0>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8cd 	.word	0x0800a8cd
 800a8c0:	0800a8f1 	.word	0x0800a8f1
 800a8c4:	0800a97d 	.word	0x0800a97d
 800a8c8:	0800a937 	.word	0x0800a937
        case front:
            run_pattern[run_cnt++] = straight_HSTEP;
 800a8cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a8d0:	f103 031c 	add.w	r3, r3, #28
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	1c53      	adds	r3, r2, #1
 800a8d8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a8dc:	f101 011c 	add.w	r1, r1, #28
 800a8e0:	600b      	str	r3, [r1, #0]
 800a8e2:	f107 0320 	add.w	r3, r7, #32
 800a8e6:	3b0c      	subs	r3, #12
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800a8ee:	e068      	b.n	800a9c2 <saitan3+0x1f6>
        case right:
            run_pattern[run_cnt++] = spin_r90;
 800a8f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a8f4:	f103 031c 	add.w	r3, r3, #28
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	1c53      	adds	r3, r2, #1
 800a8fc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a900:	f101 011c 	add.w	r1, r1, #28
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	f107 0320 	add.w	r3, r7, #32
 800a90a:	3b0c      	subs	r3, #12
 800a90c:	2111      	movs	r1, #17
 800a90e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800a912:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a916:	f103 031c 	add.w	r3, r3, #28
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	1c53      	adds	r3, r2, #1
 800a91e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a922:	f101 011c 	add.w	r1, r1, #28
 800a926:	600b      	str	r3, [r1, #0]
 800a928:	f107 0320 	add.w	r3, r7, #32
 800a92c:	3b0c      	subs	r3, #12
 800a92e:	2101      	movs	r1, #1
 800a930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   		    break;
 800a934:	e045      	b.n	800a9c2 <saitan3+0x1f6>
        case left:
            run_pattern[run_cnt++] = spin_l90;
 800a936:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a93a:	f103 031c 	add.w	r3, r3, #28
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	1c53      	adds	r3, r2, #1
 800a942:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a946:	f101 011c 	add.w	r1, r1, #28
 800a94a:	600b      	str	r3, [r1, #0]
 800a94c:	f107 0320 	add.w	r3, r7, #32
 800a950:	3b0c      	subs	r3, #12
 800a952:	2112      	movs	r1, #18
 800a954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800a958:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a95c:	f103 031c 	add.w	r3, r3, #28
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	1c53      	adds	r3, r2, #1
 800a964:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a968:	f101 011c 	add.w	r1, r1, #28
 800a96c:	600b      	str	r3, [r1, #0]
 800a96e:	f107 0320 	add.w	r3, r7, #32
 800a972:	3b0c      	subs	r3, #12
 800a974:	2101      	movs	r1, #1
 800a976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		    break;
 800a97a:	e022      	b.n	800a9c2 <saitan3+0x1f6>
        case rear:
            run_pattern[run_cnt++] = turn_l180;
 800a97c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a980:	f103 031c 	add.w	r3, r3, #28
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	1c53      	adds	r3, r2, #1
 800a988:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a98c:	f101 011c 	add.w	r1, r1, #28
 800a990:	600b      	str	r3, [r1, #0]
 800a992:	f107 0320 	add.w	r3, r7, #32
 800a996:	3b0c      	subs	r3, #12
 800a998:	2103      	movs	r1, #3
 800a99a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800a99e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a9a2:	f103 031c 	add.w	r3, r3, #28
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	1c53      	adds	r3, r2, #1
 800a9aa:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800a9ae:	f101 011c 	add.w	r1, r1, #28
 800a9b2:	600b      	str	r3, [r1, #0]
 800a9b4:	f107 0320 	add.w	r3, r7, #32
 800a9b8:	3b0c      	subs	r3, #12
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800a9c0:	bf00      	nop
    }


    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800a9c2:	e13f      	b.n	800ac44 <saitan3+0x478>
        direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800a9c4:	f107 0220 	add.w	r2, r7, #32
 800a9c8:	3a1c      	subs	r2, #28
 800a9ca:	f107 0120 	add.w	r1, r7, #32
 800a9ce:	3918      	subs	r1, #24
 800a9d0:	f107 0020 	add.w	r0, r7, #32
 800a9d4:	3814      	subs	r0, #20
 800a9d6:	f107 0320 	add.w	r3, r7, #32
 800a9da:	3b0d      	subs	r3, #13
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	2303      	movs	r3, #3
 800a9e0:	6812      	ldr	r2, [r2, #0]
 800a9e2:	6809      	ldr	r1, [r1, #0]
 800a9e4:	6800      	ldr	r0, [r0, #0]
 800a9e6:	f7fe fc85 	bl	80092f4 <get_nextdir>
 800a9ea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a9ee:	f103 0314 	add.w	r3, r3, #20
 800a9f2:	6018      	str	r0, [r3, #0]
        mypos.dir = glob_nextdir;
 800a9f4:	f107 0320 	add.w	r3, r7, #32
 800a9f8:	3b0d      	subs	r3, #13
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	4b4e      	ldr	r3, [pc, #312]	; (800ab38 <saitan3+0x36c>)
 800a9fe:	711a      	strb	r2, [r3, #4]

        switch(mypos.dir){
 800aa00:	4b4d      	ldr	r3, [pc, #308]	; (800ab38 <saitan3+0x36c>)
 800aa02:	791b      	ldrb	r3, [r3, #4]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d833      	bhi.n	800aa70 <saitan3+0x2a4>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <saitan3+0x244>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa35 	.word	0x0800aa35
 800aa18:	0800aa49 	.word	0x0800aa49
 800aa1c:	0800aa5d 	.word	0x0800aa5d
            case north:
                mypos.y++;
 800aa20:	4b45      	ldr	r3, [pc, #276]	; (800ab38 <saitan3+0x36c>)
 800aa22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	b21a      	sxth	r2, r3
 800aa2e:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <saitan3+0x36c>)
 800aa30:	805a      	strh	r2, [r3, #2]
                break;
 800aa32:	e01d      	b.n	800aa70 <saitan3+0x2a4>
            case east:
                mypos.x++;
 800aa34:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <saitan3+0x36c>)
 800aa36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	b21a      	sxth	r2, r3
 800aa42:	4b3d      	ldr	r3, [pc, #244]	; (800ab38 <saitan3+0x36c>)
 800aa44:	801a      	strh	r2, [r3, #0]
                break;
 800aa46:	e013      	b.n	800aa70 <saitan3+0x2a4>
            case south:
                mypos.y--;
 800aa48:	4b3b      	ldr	r3, [pc, #236]	; (800ab38 <saitan3+0x36c>)
 800aa4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	b21a      	sxth	r2, r3
 800aa56:	4b38      	ldr	r3, [pc, #224]	; (800ab38 <saitan3+0x36c>)
 800aa58:	805a      	strh	r2, [r3, #2]
                break;
 800aa5a:	e009      	b.n	800aa70 <saitan3+0x2a4>
            case west:
                mypos.x--;
 800aa5c:	4b36      	ldr	r3, [pc, #216]	; (800ab38 <saitan3+0x36c>)
 800aa5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	b21a      	sxth	r2, r3
 800aa6a:	4b33      	ldr	r3, [pc, #204]	; (800ab38 <saitan3+0x36c>)
 800aa6c:	801a      	strh	r2, [r3, #0]
                break;
 800aa6e:	bf00      	nop
        }

        switch(direction){
 800aa70:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aa74:	f103 0314 	add.w	r3, r3, #20
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f200 80e2 	bhi.w	800ac44 <saitan3+0x478>
 800aa80:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <saitan3+0x2bc>)
 800aa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa86:	bf00      	nop
 800aa88:	0800aa99 	.word	0x0800aa99
 800aa8c:	0800aadf 	.word	0x0800aadf
 800aa90:	0800abdd 	.word	0x0800abdd
 800aa94:	0800ab61 	.word	0x0800ab61
            case front:
                run_pattern[run_cnt++] = straight_HSTEP;
 800aa98:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aa9c:	f103 031c 	add.w	r3, r3, #28
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	1c53      	adds	r3, r2, #1
 800aaa4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800aaa8:	f101 011c 	add.w	r1, r1, #28
 800aaac:	600b      	str	r3, [r1, #0]
 800aaae:	f107 0320 	add.w	r3, r7, #32
 800aab2:	3b0c      	subs	r3, #12
 800aab4:	2101      	movs	r1, #1
 800aab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                run_pattern[run_cnt++] = straight_HSTEP;
 800aaba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aabe:	f103 031c 	add.w	r3, r3, #28
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	1c53      	adds	r3, r2, #1
 800aac6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800aaca:	f101 011c 	add.w	r1, r1, #28
 800aace:	600b      	str	r3, [r1, #0]
 800aad0:	f107 0320 	add.w	r3, r7, #32
 800aad4:	3b0c      	subs	r3, #12
 800aad6:	2101      	movs	r1, #1
 800aad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	break;
 800aadc:	e0b2      	b.n	800ac44 <saitan3+0x478>
            case right:
            	if( run_pattern[run_cnt-1] == turn_l90 || run_pattern[run_cnt-1] == diagonal_l ){
 800aade:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aae2:	f103 031c 	add.w	r3, r3, #28
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	f107 0320 	add.w	r3, r7, #32
 800aaee:	3b0c      	subs	r3, #12
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d00c      	beq.n	800ab12 <saitan3+0x346>
 800aaf8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aafc:	f103 031c 	add.w	r3, r3, #28
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	1e5a      	subs	r2, r3, #1
 800ab04:	f107 0320 	add.w	r3, r7, #32
 800ab08:	3b0c      	subs	r3, #12
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	2b06      	cmp	r3, #6
 800ab10:	d114      	bne.n	800ab3c <saitan3+0x370>
            		run_pattern[run_cnt++] = diagonal_r;
 800ab12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ab16:	f103 031c 	add.w	r3, r3, #28
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	1c53      	adds	r3, r2, #1
 800ab1e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800ab22:	f101 011c 	add.w	r1, r1, #28
 800ab26:	600b      	str	r3, [r1, #0]
 800ab28:	f107 0320 	add.w	r3, r7, #32
 800ab2c:	3b0c      	subs	r3, #12
 800ab2e:	2105      	movs	r1, #5
 800ab30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab34:	e013      	b.n	800ab5e <saitan3+0x392>
 800ab36:	bf00      	nop
 800ab38:	20004380 	.word	0x20004380
            	}else{
            		run_pattern[run_cnt++] = turn_r90;
 800ab3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ab40:	f103 031c 	add.w	r3, r3, #28
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	1c53      	adds	r3, r2, #1
 800ab48:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800ab4c:	f101 011c 	add.w	r1, r1, #28
 800ab50:	600b      	str	r3, [r1, #0]
 800ab52:	f107 0320 	add.w	r3, r7, #32
 800ab56:	3b0c      	subs	r3, #12
 800ab58:	2102      	movs	r1, #2
 800ab5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	}
            	break;
 800ab5e:	e071      	b.n	800ac44 <saitan3+0x478>
            case left:
            	if( run_pattern[run_cnt-1] == turn_r90 || run_pattern[run_cnt-1] == diagonal_r ){
 800ab60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ab64:	f103 031c 	add.w	r3, r3, #28
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	1e5a      	subs	r2, r3, #1
 800ab6c:	f107 0320 	add.w	r3, r7, #32
 800ab70:	3b0c      	subs	r3, #12
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d00c      	beq.n	800ab94 <saitan3+0x3c8>
 800ab7a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ab7e:	f103 031c 	add.w	r3, r3, #28
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	1e5a      	subs	r2, r3, #1
 800ab86:	f107 0320 	add.w	r3, r7, #32
 800ab8a:	3b0c      	subs	r3, #12
 800ab8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab90:	2b05      	cmp	r3, #5
 800ab92:	d111      	bne.n	800abb8 <saitan3+0x3ec>
            		run_pattern[run_cnt++] = diagonal_l;
 800ab94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ab98:	f103 031c 	add.w	r3, r3, #28
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	1c53      	adds	r3, r2, #1
 800aba0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800aba4:	f101 011c 	add.w	r1, r1, #28
 800aba8:	600b      	str	r3, [r1, #0]
 800abaa:	f107 0320 	add.w	r3, r7, #32
 800abae:	3b0c      	subs	r3, #12
 800abb0:	2106      	movs	r1, #6
 800abb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800abb6:	e010      	b.n	800abda <saitan3+0x40e>
            	}else{
            		run_pattern[run_cnt++] = turn_l90;
 800abb8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800abbc:	f103 031c 	add.w	r3, r3, #28
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	1c53      	adds	r3, r2, #1
 800abc4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800abc8:	f101 011c 	add.w	r1, r1, #28
 800abcc:	600b      	str	r3, [r1, #0]
 800abce:	f107 0320 	add.w	r3, r7, #32
 800abd2:	3b0c      	subs	r3, #12
 800abd4:	2104      	movs	r1, #4
 800abd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	}
            	break;
 800abda:	e033      	b.n	800ac44 <saitan3+0x478>
            case rear:
            	run_pattern[run_cnt++] = straight_HSTEP;
 800abdc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800abe0:	f103 031c 	add.w	r3, r3, #28
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	1c53      	adds	r3, r2, #1
 800abe8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800abec:	f101 011c 	add.w	r1, r1, #28
 800abf0:	600b      	str	r3, [r1, #0]
 800abf2:	f107 0320 	add.w	r3, r7, #32
 800abf6:	3b0c      	subs	r3, #12
 800abf8:	2101      	movs	r1, #1
 800abfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = turn_l180;
 800abfe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ac02:	f103 031c 	add.w	r3, r3, #28
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	1c53      	adds	r3, r2, #1
 800ac0a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800ac0e:	f101 011c 	add.w	r1, r1, #28
 800ac12:	600b      	str	r3, [r1, #0]
 800ac14:	f107 0320 	add.w	r3, r7, #32
 800ac18:	3b0c      	subs	r3, #12
 800ac1a:	2103      	movs	r1, #3
 800ac1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = straight_HSTEP;
 800ac20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ac24:	f103 031c 	add.w	r3, r3, #28
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	1c53      	adds	r3, r2, #1
 800ac2c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800ac30:	f101 011c 	add.w	r1, r1, #28
 800ac34:	600b      	str	r3, [r1, #0]
 800ac36:	f107 0320 	add.w	r3, r7, #32
 800ac3a:	3b0c      	subs	r3, #12
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                break;
 800ac42:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800ac44:	4bc6      	ldr	r3, [pc, #792]	; (800af60 <saitan3+0x794>)
 800ac46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	4bc4      	ldr	r3, [pc, #784]	; (800af60 <saitan3+0x794>)
 800ac4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac52:	461c      	mov	r4, r3
 800ac54:	f107 0320 	add.w	r3, r7, #32
 800ac58:	3b18      	subs	r3, #24
 800ac5a:	f107 0220 	add.w	r2, r7, #32
 800ac5e:	3a14      	subs	r2, #20
 800ac60:	f107 0120 	add.w	r1, r7, #32
 800ac64:	391c      	subs	r1, #28
 800ac66:	6809      	ldr	r1, [r1, #0]
 800ac68:	9100      	str	r1, [sp, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6812      	ldr	r2, [r2, #0]
 800ac6e:	4621      	mov	r1, r4
 800ac70:	f7fe f864 	bl	8008d3c <i_am_goal>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f43f aea4 	beq.w	800a9c4 <saitan3+0x1f8>
        }

    }

    run_pattern[run_cnt++] = straight_HSTEP;
 800ac7c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ac80:	f103 031c 	add.w	r3, r3, #28
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	1c53      	adds	r3, r2, #1
 800ac88:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800ac8c:	f101 011c 	add.w	r1, r1, #28
 800ac90:	600b      	str	r3, [r1, #0]
 800ac92:	f107 0320 	add.w	r3, r7, #32
 800ac96:	3b0c      	subs	r3, #12
 800ac98:	2101      	movs	r1, #1
 800ac9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    run_pattern[run_cnt] = goal;
 800ac9e:	f107 0320 	add.w	r3, r7, #32
 800aca2:	3b0c      	subs	r3, #12
 800aca4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800aca8:	f102 021c 	add.w	r2, r2, #28
 800acac:	6812      	ldr	r2, [r2, #0]
 800acae:	21ff      	movs	r1, #255	; 0xff
 800acb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if(goal_size >1)	straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 800acb4:	f107 0320 	add.w	r3, r7, #32
 800acb8:	3b1c      	subs	r3, #28
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	dd09      	ble.n	800acd4 <saitan3+0x508>
 800acc0:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800af64 <saitan3+0x798>
 800acc4:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800af64 <saitan3+0x798>
 800acc8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800accc:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800acd0:	f7f9 fbda 	bl	8004488 <straight>
    int cnt = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800acda:	f102 0218 	add.w	r2, r2, #24
 800acde:	6013      	str	r3, [r2, #0]
    while(run_pattern[cnt] != goal){
 800ace0:	e318      	b.n	800b314 <saitan3+0xb48>
    	switch(run_pattern[cnt]){
 800ace2:	f107 0320 	add.w	r3, r7, #32
 800ace6:	3b0c      	subs	r3, #12
 800ace8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800acec:	f102 0218 	add.w	r2, r2, #24
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	2b11      	cmp	r3, #17
 800acfa:	f200 830b 	bhi.w	800b314 <saitan3+0xb48>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <saitan3+0x538>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad4d 	.word	0x0800ad4d
 800ad08:	0800b075 	.word	0x0800b075
 800ad0c:	0800b0ad 	.word	0x0800b0ad
 800ad10:	0800b091 	.word	0x0800b091
 800ad14:	0800b0d1 	.word	0x0800b0d1
 800ad18:	0800b1cf 	.word	0x0800b1cf
 800ad1c:	0800b315 	.word	0x0800b315
 800ad20:	0800b315 	.word	0x0800b315
 800ad24:	0800b315 	.word	0x0800b315
 800ad28:	0800b315 	.word	0x0800b315
 800ad2c:	0800b315 	.word	0x0800b315
 800ad30:	0800b315 	.word	0x0800b315
 800ad34:	0800b315 	.word	0x0800b315
 800ad38:	0800b315 	.word	0x0800b315
 800ad3c:	0800b315 	.word	0x0800b315
 800ad40:	0800b315 	.word	0x0800b315
 800ad44:	0800b2cd 	.word	0x0800b2cd
 800ad48:	0800b2f1 	.word	0x0800b2f1
    		case straight_HSTEP:
    			if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == diagonal_l){
 800ad4c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ad50:	f103 0318 	add.w	r3, r3, #24
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	f107 0320 	add.w	r3, r7, #32
 800ad5c:	3b0c      	subs	r3, #12
 800ad5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d11a      	bne.n	800ad9c <saitan3+0x5d0>
 800ad66:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ad6a:	f103 0318 	add.w	r3, r3, #24
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	1c9a      	adds	r2, r3, #2
 800ad72:	f107 0320 	add.w	r3, r7, #32
 800ad76:	3b0c      	subs	r3, #12
 800ad78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7c:	2b06      	cmp	r3, #6
 800ad7e:	d10d      	bne.n	800ad9c <saitan3+0x5d0>
    				in_R45();	cnt = cnt + 2;
 800ad80:	f7fc f8be 	bl	8006f00 <in_R45>
 800ad84:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ad88:	f103 0318 	add.w	r3, r3, #24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3302      	adds	r3, #2
 800ad90:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800ad94:	f102 0218 	add.w	r2, r2, #24
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	e16a      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == diagonal_r){
 800ad9c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ada0:	f103 0318 	add.w	r3, r3, #24
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	f107 0320 	add.w	r3, r7, #32
 800adac:	3b0c      	subs	r3, #12
 800adae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d11a      	bne.n	800adec <saitan3+0x620>
 800adb6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800adba:	f103 0318 	add.w	r3, r3, #24
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	1c9a      	adds	r2, r3, #2
 800adc2:	f107 0320 	add.w	r3, r7, #32
 800adc6:	3b0c      	subs	r3, #12
 800adc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adcc:	2b05      	cmp	r3, #5
 800adce:	d10d      	bne.n	800adec <saitan3+0x620>
    				in_L45();	cnt = cnt + 2;
 800add0:	f7fb fd92 	bl	80068f8 <in_L45>
 800add4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800add8:	f103 0318 	add.w	r3, r3, #24
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	3302      	adds	r3, #2
 800ade0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800ade4:	f102 0218 	add.w	r2, r2, #24
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	e142      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == straight_HSTEP){
 800adec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800adf0:	f103 0318 	add.w	r3, r3, #24
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	f107 0320 	add.w	r3, r7, #32
 800adfc:	3b0c      	subs	r3, #12
 800adfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d11a      	bne.n	800ae3c <saitan3+0x670>
 800ae06:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae0a:	f103 0318 	add.w	r3, r3, #24
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	1c9a      	adds	r2, r3, #2
 800ae12:	f107 0320 	add.w	r3, r7, #32
 800ae16:	3b0c      	subs	r3, #12
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10d      	bne.n	800ae3c <saitan3+0x670>
    				long_turn_R90();cnt = cnt + 3;
 800ae20:	f7fa fed6 	bl	8005bd0 <long_turn_R90>
 800ae24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae28:	f103 0318 	add.w	r3, r3, #24
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3303      	adds	r3, #3
 800ae30:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800ae34:	f102 0218 	add.w	r2, r2, #24
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	e11a      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == straight_HSTEP){
 800ae3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae40:	f103 0318 	add.w	r3, r3, #24
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	f107 0320 	add.w	r3, r7, #32
 800ae4c:	3b0c      	subs	r3, #12
 800ae4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d11a      	bne.n	800ae8c <saitan3+0x6c0>
 800ae56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae5a:	f103 0318 	add.w	r3, r3, #24
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	1c9a      	adds	r2, r3, #2
 800ae62:	f107 0320 	add.w	r3, r7, #32
 800ae66:	3b0c      	subs	r3, #12
 800ae68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d10d      	bne.n	800ae8c <saitan3+0x6c0>
    				long_turn_L90();cnt = cnt + 3;
 800ae70:	f7fb f852 	bl	8005f18 <long_turn_L90>
 800ae74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae78:	f103 0318 	add.w	r3, r3, #24
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3303      	adds	r3, #3
 800ae80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800ae84:	f102 0218 	add.w	r2, r2, #24
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e0f2      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == turn_r90 && run_pattern[cnt+3] == straight_HSTEP){
 800ae8c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ae90:	f103 0318 	add.w	r3, r3, #24
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	f107 0320 	add.w	r3, r7, #32
 800ae9c:	3b0c      	subs	r3, #12
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d127      	bne.n	800aef6 <saitan3+0x72a>
 800aea6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aeaa:	f103 0318 	add.w	r3, r3, #24
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	1c9a      	adds	r2, r3, #2
 800aeb2:	f107 0320 	add.w	r3, r7, #32
 800aeb6:	3b0c      	subs	r3, #12
 800aeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d11a      	bne.n	800aef6 <saitan3+0x72a>
 800aec0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aec4:	f103 0318 	add.w	r3, r3, #24
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	1cda      	adds	r2, r3, #3
 800aecc:	f107 0320 	add.w	r3, r7, #32
 800aed0:	3b0c      	subs	r3, #12
 800aed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d10d      	bne.n	800aef6 <saitan3+0x72a>
    				long_turn_R180();cnt = cnt + 4;
 800aeda:	f7fb f9c5 	bl	8006268 <long_turn_R180>
 800aede:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aee2:	f103 0318 	add.w	r3, r3, #24
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3304      	adds	r3, #4
 800aeea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800aeee:	f102 0218 	add.w	r2, r2, #24
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	e0bd      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == turn_l90 && run_pattern[cnt+3] == straight_HSTEP){
 800aef6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800aefa:	f103 0318 	add.w	r3, r3, #24
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	f107 0320 	add.w	r3, r7, #32
 800af06:	3b0c      	subs	r3, #12
 800af08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d131      	bne.n	800af74 <saitan3+0x7a8>
 800af10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800af14:	f103 0318 	add.w	r3, r3, #24
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	1c9a      	adds	r2, r3, #2
 800af1c:	f107 0320 	add.w	r3, r7, #32
 800af20:	3b0c      	subs	r3, #12
 800af22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af26:	2b04      	cmp	r3, #4
 800af28:	d124      	bne.n	800af74 <saitan3+0x7a8>
 800af2a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800af2e:	f103 0318 	add.w	r3, r3, #24
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	1cda      	adds	r2, r3, #3
 800af36:	f107 0320 	add.w	r3, r7, #32
 800af3a:	3b0c      	subs	r3, #12
 800af3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d117      	bne.n	800af74 <saitan3+0x7a8>
    				long_turn_L180();cnt = cnt + 4;
 800af44:	f7fb fb34 	bl	80065b0 <long_turn_L180>
 800af48:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800af4c:	f103 0318 	add.w	r3, r3, #24
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3304      	adds	r3, #4
 800af54:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800af58:	f102 0218 	add.w	r2, r2, #24
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	e088      	b.n	800b072 <saitan3+0x8a6>
 800af60:	20004380 	.word	0x20004380
 800af64:	3e99999a 	.word	0x3e99999a
 800af68:	42340000 	.word	0x42340000
 800af6c:	437b53ce 	.word	0x437b53ce
 800af70:	41490fd8 	.word	0x41490fd8
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == turn_r90 && run_pattern[cnt+3] == diagonal_l){
 800af74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800af78:	f103 0318 	add.w	r3, r3, #24
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	f107 0320 	add.w	r3, r7, #32
 800af84:	3b0c      	subs	r3, #12
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d127      	bne.n	800afde <saitan3+0x812>
 800af8e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800af92:	f103 0318 	add.w	r3, r3, #24
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	1c9a      	adds	r2, r3, #2
 800af9a:	f107 0320 	add.w	r3, r7, #32
 800af9e:	3b0c      	subs	r3, #12
 800afa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d11a      	bne.n	800afde <saitan3+0x812>
 800afa8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800afac:	f103 0318 	add.w	r3, r3, #24
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	1cda      	adds	r2, r3, #3
 800afb4:	f107 0320 	add.w	r3, r7, #32
 800afb8:	3b0c      	subs	r3, #12
 800afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d10d      	bne.n	800afde <saitan3+0x812>
    				in_R135(); 	cnt = cnt + 3;
 800afc2:	f7fc fa9d 	bl	8007500 <in_R135>
 800afc6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800afca:	f103 0318 	add.w	r3, r3, #24
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3303      	adds	r3, #3
 800afd2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800afd6:	f102 0218 	add.w	r2, r2, #24
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	e049      	b.n	800b072 <saitan3+0x8a6>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == turn_l90 && run_pattern[cnt+3] == diagonal_r){
 800afde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800afe2:	f103 0318 	add.w	r3, r3, #24
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	f107 0320 	add.w	r3, r7, #32
 800afee:	3b0c      	subs	r3, #12
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d127      	bne.n	800b048 <saitan3+0x87c>
 800aff8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800affc:	f103 0318 	add.w	r3, r3, #24
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	1c9a      	adds	r2, r3, #2
 800b004:	f107 0320 	add.w	r3, r7, #32
 800b008:	3b0c      	subs	r3, #12
 800b00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d11a      	bne.n	800b048 <saitan3+0x87c>
 800b012:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b016:	f103 0318 	add.w	r3, r3, #24
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	1cda      	adds	r2, r3, #3
 800b01e:	f107 0320 	add.w	r3, r7, #32
 800b022:	3b0c      	subs	r3, #12
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	2b05      	cmp	r3, #5
 800b02a:	d10d      	bne.n	800b048 <saitan3+0x87c>
    				in_L135(); 	cnt = cnt + 3;
 800b02c:	f7fc fd60 	bl	8007af0 <in_L135>
 800b030:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b034:	f103 0318 	add.w	r3, r3, #24
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3303      	adds	r3, #3
 800b03c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b040:	f102 0218 	add.w	r2, r2, #24
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	e014      	b.n	800b072 <saitan3+0x8a6>
    			}else{
    				straight(HALF_SECTION,SEARCH_ACCEL,0.5,0.5);	cnt = cnt + 1;
 800b048:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800b04c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b050:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b054:	ed1f 0a3c 	vldr	s0, [pc, #-240]	; 800af68 <saitan3+0x79c>
 800b058:	f7f9 fa16 	bl	8004488 <straight>
 800b05c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b060:	f103 0318 	add.w	r3, r3, #24
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b06c:	f102 0218 	add.w	r2, r2, #24
 800b070:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800b072:	e14f      	b.n	800b314 <saitan3+0xb48>
    		case turn_r90:
    			sla_R90();	cnt = cnt + 1;
 800b074:	f7fa fbc0 	bl	80057f8 <sla_R90>
 800b078:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b07c:	f103 0318 	add.w	r3, r3, #24
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3301      	adds	r3, #1
 800b084:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b088:	f102 0218 	add.w	r2, r2, #24
 800b08c:	6013      	str	r3, [r2, #0]
    			break;
 800b08e:	e141      	b.n	800b314 <saitan3+0xb48>
    		case turn_l90:
    			sla_L90();	cnt = cnt + 1;
 800b090:	f7fa f9ce 	bl	8005430 <sla_L90>
 800b094:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b098:	f103 0318 	add.w	r3, r3, #24
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0a4:	f102 0218 	add.w	r2, r2, #24
 800b0a8:	6013      	str	r3, [r2, #0]
    			break;
 800b0aa:	e133      	b.n	800b314 <saitan3+0xb48>
    		case turn_l180:
    			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800b0ac:	ed5f 0a50 	vldr	s1, [pc, #-320]	; 800af70 <saitan3+0x7a4>
 800b0b0:	ed1f 0a52 	vldr	s0, [pc, #-328]	; 800af6c <saitan3+0x7a0>
 800b0b4:	f7fa f8a8 	bl	8005208 <turn_L180>
 800b0b8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b0bc:	f103 0318 	add.w	r3, r3, #24
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0c8:	f102 0218 	add.w	r2, r2, #24
 800b0cc:	6013      	str	r3, [r2, #0]
    			break;
 800b0ce:	e121      	b.n	800b314 <saitan3+0xb48>
    		case diagonal_r:
    			if(run_pattern[cnt+1] == straight_HSTEP ){
 800b0d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b0d4:	f103 0318 	add.w	r3, r3, #24
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	f107 0320 	add.w	r3, r7, #32
 800b0e0:	3b0c      	subs	r3, #12
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d10d      	bne.n	800b106 <saitan3+0x93a>
    				out_R45();	cnt = cnt + 2;
 800b0ea:	f7fc f8a9 	bl	8007240 <out_R45>
 800b0ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b0f2:	f103 0318 	add.w	r3, r3, #24
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b0fe:	f102 0218 	add.w	r2, r2, #24
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	e106      	b.n	800b314 <saitan3+0xb48>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == straight_HSTEP){
 800b106:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b10a:	f103 0318 	add.w	r3, r3, #24
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	f107 0320 	add.w	r3, r7, #32
 800b116:	3b0c      	subs	r3, #12
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d11a      	bne.n	800b156 <saitan3+0x98a>
 800b120:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b124:	f103 0318 	add.w	r3, r3, #24
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	1c9a      	adds	r2, r3, #2
 800b12c:	f107 0320 	add.w	r3, r7, #32
 800b130:	3b0c      	subs	r3, #12
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d10d      	bne.n	800b156 <saitan3+0x98a>
    				out_R135();	cnt = cnt + 3;
 800b13a:	f7fc fb7d 	bl	8007838 <out_R135>
 800b13e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b142:	f103 0318 	add.w	r3, r3, #24
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3303      	adds	r3, #3
 800b14a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b14e:	f102 0218 	add.w	r2, r2, #24
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	e03a      	b.n	800b1cc <saitan3+0xa00>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == diagonal_l){
 800b156:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b15a:	f103 0318 	add.w	r3, r3, #24
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	f107 0320 	add.w	r3, r7, #32
 800b166:	3b0c      	subs	r3, #12
 800b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d11a      	bne.n	800b1a6 <saitan3+0x9da>
 800b170:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b174:	f103 0318 	add.w	r3, r3, #24
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	1c9a      	adds	r2, r3, #2
 800b17c:	f107 0320 	add.w	r3, r7, #32
 800b180:	3b0c      	subs	r3, #12
 800b182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b186:	2b06      	cmp	r3, #6
 800b188:	d10d      	bne.n	800b1a6 <saitan3+0x9da>
    				v_R90();	cnt = cnt + 2;
 800b18a:	f7fc ffad 	bl	80080e8 <v_R90>
 800b18e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b192:	f103 0318 	add.w	r3, r3, #24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3302      	adds	r3, #2
 800b19a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b19e:	f102 0218 	add.w	r2, r2, #24
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	e012      	b.n	800b1cc <saitan3+0xa00>
    			}else{
    				diagonal(SEARCH_ACCEL,0.5,0.5);	cnt = cnt + 1;
 800b1a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b1aa:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b1ae:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800b1b2:	f7fd fac9 	bl	8008748 <diagonal>
 800b1b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b1ba:	f103 0318 	add.w	r3, r3, #24
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b1c6:	f102 0218 	add.w	r2, r2, #24
 800b1ca:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800b1cc:	e0a2      	b.n	800b314 <saitan3+0xb48>
    		case diagonal_l:
    			if(run_pattern[cnt+1] == straight_HSTEP ){
 800b1ce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b1d2:	f103 0318 	add.w	r3, r3, #24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	f107 0320 	add.w	r3, r7, #32
 800b1de:	3b0c      	subs	r3, #12
 800b1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d10d      	bne.n	800b204 <saitan3+0xa38>
    				out_L45();	cnt = cnt + 2;
 800b1e8:	f7fb fd2a 	bl	8006c40 <out_L45>
 800b1ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b1f0:	f103 0318 	add.w	r3, r3, #24
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b1fc:	f102 0218 	add.w	r2, r2, #24
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e087      	b.n	800b314 <saitan3+0xb48>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == straight_HSTEP){
 800b204:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b208:	f103 0318 	add.w	r3, r3, #24
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	f107 0320 	add.w	r3, r7, #32
 800b214:	3b0c      	subs	r3, #12
 800b216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d11a      	bne.n	800b254 <saitan3+0xa88>
 800b21e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b222:	f103 0318 	add.w	r3, r3, #24
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	1c9a      	adds	r2, r3, #2
 800b22a:	f107 0320 	add.w	r3, r7, #32
 800b22e:	3b0c      	subs	r3, #12
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d10d      	bne.n	800b254 <saitan3+0xa88>
    				out_L135();	cnt = cnt + 3;
 800b238:	f7fc fdfa 	bl	8007e30 <out_L135>
 800b23c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b240:	f103 0318 	add.w	r3, r3, #24
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3303      	adds	r3, #3
 800b248:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b24c:	f102 0218 	add.w	r2, r2, #24
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e03a      	b.n	800b2ca <saitan3+0xafe>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == diagonal_r){
 800b254:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b258:	f103 0318 	add.w	r3, r3, #24
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	f107 0320 	add.w	r3, r7, #32
 800b264:	3b0c      	subs	r3, #12
 800b266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d11a      	bne.n	800b2a4 <saitan3+0xad8>
 800b26e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b272:	f103 0318 	add.w	r3, r3, #24
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	1c9a      	adds	r2, r3, #2
 800b27a:	f107 0320 	add.w	r3, r7, #32
 800b27e:	3b0c      	subs	r3, #12
 800b280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b284:	2b05      	cmp	r3, #5
 800b286:	d10d      	bne.n	800b2a4 <saitan3+0xad8>
    				v_L90();	cnt = cnt + 2;
 800b288:	f7fd f8c6 	bl	8008418 <v_L90>
 800b28c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b290:	f103 0318 	add.w	r3, r3, #24
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3302      	adds	r3, #2
 800b298:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b29c:	f102 0218 	add.w	r2, r2, #24
 800b2a0:	6013      	str	r3, [r2, #0]
 800b2a2:	e012      	b.n	800b2ca <saitan3+0xafe>
    			}else{
    				diagonal(SEARCH_ACCEL,0.5,0.5);	cnt = cnt + 1;
 800b2a4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b2a8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b2ac:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800b2b0:	f7fd fa4a 	bl	8008748 <diagonal>
 800b2b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b2b8:	f103 0318 	add.w	r3, r3, #24
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b2c4:	f102 0218 	add.w	r2, r2, #24
 800b2c8:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800b2ca:	e023      	b.n	800b314 <saitan3+0xb48>
    		case spin_r90:
    			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800b2cc:	ed5f 0ad8 	vldr	s1, [pc, #-864]	; 800af70 <saitan3+0x7a4>
 800b2d0:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800b3f0 <saitan3+0xc24>
 800b2d4:	f7f9 fd60 	bl	8004d98 <turn_R90>
 800b2d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b2dc:	f103 0318 	add.w	r3, r3, #24
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b2e8:	f102 0218 	add.w	r2, r2, #24
 800b2ec:	6013      	str	r3, [r2, #0]
    			break;
 800b2ee:	e011      	b.n	800b314 <saitan3+0xb48>
    		case spin_l90:
    			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800b2f0:	eddf 0a40 	vldr	s1, [pc, #256]	; 800b3f4 <saitan3+0xc28>
 800b2f4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800b3f0 <saitan3+0xc24>
 800b2f8:	f7f9 fe6e 	bl	8004fd8 <turn_L90>
 800b2fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b300:	f103 0318 	add.w	r3, r3, #24
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b30c:	f102 0218 	add.w	r2, r2, #24
 800b310:	6013      	str	r3, [r2, #0]
    			break;
 800b312:	bf00      	nop
    while(run_pattern[cnt] != goal){
 800b314:	f107 0320 	add.w	r3, r7, #32
 800b318:	3b0c      	subs	r3, #12
 800b31a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b31e:	f102 0218 	add.w	r2, r2, #24
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b328:	2bff      	cmp	r3, #255	; 0xff
 800b32a:	f47f acda 	bne.w	800ace2 <saitan3+0x516>
    	}
    }
    if(goal_size > 1){
 800b32e:	f107 0320 	add.w	r3, r7, #32
 800b332:	3b1c      	subs	r3, #28
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b01      	cmp	r3, #1
 800b338:	dd40      	ble.n	800b3bc <saitan3+0xbf0>
		straight(SECTION,SEARCH_ACCEL,0.5,0.0);
 800b33a:	eddf 1a2f 	vldr	s3, [pc, #188]	; 800b3f8 <saitan3+0xc2c>
 800b33e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b342:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b346:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800b3fc <saitan3+0xc30>
 800b34a:	f7f9 f89d 	bl	8004488 <straight>
		switch(mypos.dir){
 800b34e:	4b2c      	ldr	r3, [pc, #176]	; (800b400 <saitan3+0xc34>)
 800b350:	791b      	ldrb	r3, [r3, #4]
 800b352:	2b03      	cmp	r3, #3
 800b354:	d832      	bhi.n	800b3bc <saitan3+0xbf0>
 800b356:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <saitan3+0xb90>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b36d 	.word	0x0800b36d
 800b360:	0800b381 	.word	0x0800b381
 800b364:	0800b395 	.word	0x0800b395
 800b368:	0800b3a9 	.word	0x0800b3a9
			case north:
				mypos.y++;
 800b36c:	4b24      	ldr	r3, [pc, #144]	; (800b400 <saitan3+0xc34>)
 800b36e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b372:	b29b      	uxth	r3, r3
 800b374:	3301      	adds	r3, #1
 800b376:	b29b      	uxth	r3, r3
 800b378:	b21a      	sxth	r2, r3
 800b37a:	4b21      	ldr	r3, [pc, #132]	; (800b400 <saitan3+0xc34>)
 800b37c:	805a      	strh	r2, [r3, #2]
				break;
 800b37e:	e01d      	b.n	800b3bc <saitan3+0xbf0>
			case east:
				mypos.x++;
 800b380:	4b1f      	ldr	r3, [pc, #124]	; (800b400 <saitan3+0xc34>)
 800b382:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b386:	b29b      	uxth	r3, r3
 800b388:	3301      	adds	r3, #1
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	b21a      	sxth	r2, r3
 800b38e:	4b1c      	ldr	r3, [pc, #112]	; (800b400 <saitan3+0xc34>)
 800b390:	801a      	strh	r2, [r3, #0]
				break;
 800b392:	e013      	b.n	800b3bc <saitan3+0xbf0>
			case south:
				mypos.y--;
 800b394:	4b1a      	ldr	r3, [pc, #104]	; (800b400 <saitan3+0xc34>)
 800b396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	b21a      	sxth	r2, r3
 800b3a2:	4b17      	ldr	r3, [pc, #92]	; (800b400 <saitan3+0xc34>)
 800b3a4:	805a      	strh	r2, [r3, #2]
				break;
 800b3a6:	e009      	b.n	800b3bc <saitan3+0xbf0>
			case west:
				mypos.x--;
 800b3a8:	4b15      	ldr	r3, [pc, #84]	; (800b400 <saitan3+0xc34>)
 800b3aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	b21a      	sxth	r2, r3
 800b3b6:	4b12      	ldr	r3, [pc, #72]	; (800b400 <saitan3+0xc34>)
 800b3b8:	801a      	strh	r2, [r3, #0]
				break;
 800b3ba:	bf00      	nop
		}
    }
	accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 800b3bc:	4b11      	ldr	r3, [pc, #68]	; (800b404 <saitan3+0xc38>)
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	4b10      	ldr	r3, [pc, #64]	; (800b408 <saitan3+0xc3c>)
 800b3c6:	f04f 0200 	mov.w	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <saitan3+0xc40>)
 800b3ce:	f04f 0200 	mov.w	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
	HAL_Delay(300);
 800b3d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b3d8:	f002 fb98 	bl	800db0c <HAL_Delay>

    run_mode = NON_CON_MODE;
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <saitan3+0xc44>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800b3e8:	3704      	adds	r7, #4
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd90      	pop	{r4, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	437b53ce 	.word	0x437b53ce
 800b3f4:	41490fd8 	.word	0x41490fd8
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	42b40000 	.word	0x42b40000
 800b400:	20004380 	.word	0x20004380
 800b404:	2000a16c 	.word	0x2000a16c
 800b408:	2000d05c 	.word	0x2000d05c
 800b40c:	2000d198 	.word	0x2000d198
 800b410:	2000a170 	.word	0x2000a170

0800b414 <saitan4>:

void saitan4(int *gx,int *gy,int goal_size){ 	//only straigh accel
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800b41a:	b085      	sub	sp, #20
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b422:	3b1c      	subs	r3, #28
 800b424:	6018      	str	r0, [r3, #0]
 800b426:	f107 0308 	add.w	r3, r7, #8
 800b42a:	6019      	str	r1, [r3, #0]
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	3b04      	subs	r3, #4
 800b432:	601a      	str	r2, [r3, #0]
	int run_pattern[MAZE_SIZE_X*MAZE_SIZE_Y*4];
	int run_cnt = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800b43a:	f102 0204 	add.w	r2, r2, #4
 800b43e:	6013      	str	r3, [r2, #0]

    t_direction glob_nextdir;
    int direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800b440:	f107 0208 	add.w	r2, r7, #8
 800b444:	3a04      	subs	r2, #4
 800b446:	f107 0108 	add.w	r1, r7, #8
 800b44a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b44e:	381c      	subs	r0, #28
 800b450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b454:	3b11      	subs	r3, #17
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2303      	movs	r3, #3
 800b45a:	6812      	ldr	r2, [r2, #0]
 800b45c:	6809      	ldr	r1, [r1, #0]
 800b45e:	6800      	ldr	r0, [r0, #0]
 800b460:	f7fd ff48 	bl	80092f4 <get_nextdir>
 800b464:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b468:	f103 0318 	add.w	r3, r3, #24
 800b46c:	6018      	str	r0, [r3, #0]

    mypos.dir = glob_nextdir;
 800b46e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b472:	3b11      	subs	r3, #17
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	4bbc      	ldr	r3, [pc, #752]	; (800b768 <saitan4+0x354>)
 800b478:	711a      	strb	r2, [r3, #4]
    switch(mypos.dir){
 800b47a:	4bbb      	ldr	r3, [pc, #748]	; (800b768 <saitan4+0x354>)
 800b47c:	791b      	ldrb	r3, [r3, #4]
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d832      	bhi.n	800b4e8 <saitan4+0xd4>
 800b482:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <saitan4+0x74>)
 800b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b488:	0800b499 	.word	0x0800b499
 800b48c:	0800b4ad 	.word	0x0800b4ad
 800b490:	0800b4c1 	.word	0x0800b4c1
 800b494:	0800b4d5 	.word	0x0800b4d5
        case north:
            mypos.y++;
 800b498:	4bb3      	ldr	r3, [pc, #716]	; (800b768 <saitan4+0x354>)
 800b49a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	b21a      	sxth	r2, r3
 800b4a6:	4bb0      	ldr	r3, [pc, #704]	; (800b768 <saitan4+0x354>)
 800b4a8:	805a      	strh	r2, [r3, #2]
            break;
 800b4aa:	e01d      	b.n	800b4e8 <saitan4+0xd4>
        case east:
            mypos.x++;
 800b4ac:	4bae      	ldr	r3, [pc, #696]	; (800b768 <saitan4+0x354>)
 800b4ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	b21a      	sxth	r2, r3
 800b4ba:	4bab      	ldr	r3, [pc, #684]	; (800b768 <saitan4+0x354>)
 800b4bc:	801a      	strh	r2, [r3, #0]
            break;
 800b4be:	e013      	b.n	800b4e8 <saitan4+0xd4>
        case south:
            mypos.y--;
 800b4c0:	4ba9      	ldr	r3, [pc, #676]	; (800b768 <saitan4+0x354>)
 800b4c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	b21a      	sxth	r2, r3
 800b4ce:	4ba6      	ldr	r3, [pc, #664]	; (800b768 <saitan4+0x354>)
 800b4d0:	805a      	strh	r2, [r3, #2]
            break;
 800b4d2:	e009      	b.n	800b4e8 <saitan4+0xd4>
        case west:
            mypos.x--;
 800b4d4:	4ba4      	ldr	r3, [pc, #656]	; (800b768 <saitan4+0x354>)
 800b4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	b21a      	sxth	r2, r3
 800b4e2:	4ba1      	ldr	r3, [pc, #644]	; (800b768 <saitan4+0x354>)
 800b4e4:	801a      	strh	r2, [r3, #0]
            break;
 800b4e6:	bf00      	nop
    }

    switch(direction){
 800b4e8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b4ec:	f103 0318 	add.w	r3, r3, #24
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	f200 816e 	bhi.w	800b7d4 <saitan4+0x3c0>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <saitan4+0xec>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b511 	.word	0x0800b511
 800b504:	0800b535 	.word	0x0800b535
 800b508:	0800b5c1 	.word	0x0800b5c1
 800b50c:	0800b57b 	.word	0x0800b57b
        case front:
            run_pattern[run_cnt++] = straight_HSTEP;
 800b510:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b514:	f103 0304 	add.w	r3, r3, #4
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	1c53      	adds	r3, r2, #1
 800b51c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b520:	f101 0104 	add.w	r1, r1, #4
 800b524:	600b      	str	r3, [r1, #0]
 800b526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b52a:	3b10      	subs	r3, #16
 800b52c:	2101      	movs	r1, #1
 800b52e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800b532:	e068      	b.n	800b606 <saitan4+0x1f2>
        case right:
            run_pattern[run_cnt++] = spin_r90;
 800b534:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b538:	f103 0304 	add.w	r3, r3, #4
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	1c53      	adds	r3, r2, #1
 800b540:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b544:	f101 0104 	add.w	r1, r1, #4
 800b548:	600b      	str	r3, [r1, #0]
 800b54a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b54e:	3b10      	subs	r3, #16
 800b550:	2111      	movs	r1, #17
 800b552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800b556:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b55a:	f103 0304 	add.w	r3, r3, #4
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	1c53      	adds	r3, r2, #1
 800b562:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b566:	f101 0104 	add.w	r1, r1, #4
 800b56a:	600b      	str	r3, [r1, #0]
 800b56c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b570:	3b10      	subs	r3, #16
 800b572:	2101      	movs	r1, #1
 800b574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   		    break;
 800b578:	e045      	b.n	800b606 <saitan4+0x1f2>
        case left:
            run_pattern[run_cnt++] = spin_l90;
 800b57a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b57e:	f103 0304 	add.w	r3, r3, #4
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	1c53      	adds	r3, r2, #1
 800b586:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b58a:	f101 0104 	add.w	r1, r1, #4
 800b58e:	600b      	str	r3, [r1, #0]
 800b590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b594:	3b10      	subs	r3, #16
 800b596:	2112      	movs	r1, #18
 800b598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800b59c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b5a0:	f103 0304 	add.w	r3, r3, #4
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	1c53      	adds	r3, r2, #1
 800b5a8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b5ac:	f101 0104 	add.w	r1, r1, #4
 800b5b0:	600b      	str	r3, [r1, #0]
 800b5b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5b6:	3b10      	subs	r3, #16
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		    break;
 800b5be:	e022      	b.n	800b606 <saitan4+0x1f2>
        case rear:
            run_pattern[run_cnt++] = turn_l180;
 800b5c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b5c4:	f103 0304 	add.w	r3, r3, #4
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	1c53      	adds	r3, r2, #1
 800b5cc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b5d0:	f101 0104 	add.w	r1, r1, #4
 800b5d4:	600b      	str	r3, [r1, #0]
 800b5d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5da:	3b10      	subs	r3, #16
 800b5dc:	2103      	movs	r1, #3
 800b5de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800b5e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b5e6:	f103 0304 	add.w	r3, r3, #4
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	1c53      	adds	r3, r2, #1
 800b5ee:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b5f2:	f101 0104 	add.w	r1, r1, #4
 800b5f6:	600b      	str	r3, [r1, #0]
 800b5f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5fc:	3b10      	subs	r3, #16
 800b5fe:	2101      	movs	r1, #1
 800b600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800b604:	bf00      	nop
    }


    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800b606:	e0e5      	b.n	800b7d4 <saitan4+0x3c0>
        direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800b608:	f107 0208 	add.w	r2, r7, #8
 800b60c:	3a04      	subs	r2, #4
 800b60e:	f107 0108 	add.w	r1, r7, #8
 800b612:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b616:	381c      	subs	r0, #28
 800b618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b61c:	3b11      	subs	r3, #17
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	2303      	movs	r3, #3
 800b622:	6812      	ldr	r2, [r2, #0]
 800b624:	6809      	ldr	r1, [r1, #0]
 800b626:	6800      	ldr	r0, [r0, #0]
 800b628:	f7fd fe64 	bl	80092f4 <get_nextdir>
 800b62c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b630:	f103 0318 	add.w	r3, r3, #24
 800b634:	6018      	str	r0, [r3, #0]
        mypos.dir = glob_nextdir;
 800b636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b63a:	3b11      	subs	r3, #17
 800b63c:	781a      	ldrb	r2, [r3, #0]
 800b63e:	4b4a      	ldr	r3, [pc, #296]	; (800b768 <saitan4+0x354>)
 800b640:	711a      	strb	r2, [r3, #4]

        switch(mypos.dir){
 800b642:	4b49      	ldr	r3, [pc, #292]	; (800b768 <saitan4+0x354>)
 800b644:	791b      	ldrb	r3, [r3, #4]
 800b646:	2b03      	cmp	r3, #3
 800b648:	d832      	bhi.n	800b6b0 <saitan4+0x29c>
 800b64a:	a201      	add	r2, pc, #4	; (adr r2, 800b650 <saitan4+0x23c>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b675 	.word	0x0800b675
 800b658:	0800b689 	.word	0x0800b689
 800b65c:	0800b69d 	.word	0x0800b69d
            case north:
                mypos.y++;
 800b660:	4b41      	ldr	r3, [pc, #260]	; (800b768 <saitan4+0x354>)
 800b662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b666:	b29b      	uxth	r3, r3
 800b668:	3301      	adds	r3, #1
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	b21a      	sxth	r2, r3
 800b66e:	4b3e      	ldr	r3, [pc, #248]	; (800b768 <saitan4+0x354>)
 800b670:	805a      	strh	r2, [r3, #2]
                break;
 800b672:	e01d      	b.n	800b6b0 <saitan4+0x29c>
            case east:
                mypos.x++;
 800b674:	4b3c      	ldr	r3, [pc, #240]	; (800b768 <saitan4+0x354>)
 800b676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3301      	adds	r3, #1
 800b67e:	b29b      	uxth	r3, r3
 800b680:	b21a      	sxth	r2, r3
 800b682:	4b39      	ldr	r3, [pc, #228]	; (800b768 <saitan4+0x354>)
 800b684:	801a      	strh	r2, [r3, #0]
                break;
 800b686:	e013      	b.n	800b6b0 <saitan4+0x29c>
            case south:
                mypos.y--;
 800b688:	4b37      	ldr	r3, [pc, #220]	; (800b768 <saitan4+0x354>)
 800b68a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	3b01      	subs	r3, #1
 800b692:	b29b      	uxth	r3, r3
 800b694:	b21a      	sxth	r2, r3
 800b696:	4b34      	ldr	r3, [pc, #208]	; (800b768 <saitan4+0x354>)
 800b698:	805a      	strh	r2, [r3, #2]
                break;
 800b69a:	e009      	b.n	800b6b0 <saitan4+0x29c>
            case west:
                mypos.x--;
 800b69c:	4b32      	ldr	r3, [pc, #200]	; (800b768 <saitan4+0x354>)
 800b69e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	b21a      	sxth	r2, r3
 800b6aa:	4b2f      	ldr	r3, [pc, #188]	; (800b768 <saitan4+0x354>)
 800b6ac:	801a      	strh	r2, [r3, #0]
                break;
 800b6ae:	bf00      	nop
        }

        switch(direction){
 800b6b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b6b4:	f103 0318 	add.w	r3, r3, #24
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	f200 808a 	bhi.w	800b7d4 <saitan4+0x3c0>
 800b6c0:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <saitan4+0x2b4>)
 800b6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c6:	bf00      	nop
 800b6c8:	0800b6d9 	.word	0x0800b6d9
 800b6cc:	0800b71f 	.word	0x0800b71f
 800b6d0:	0800b76d 	.word	0x0800b76d
 800b6d4:	0800b743 	.word	0x0800b743
            case front:
                run_pattern[run_cnt++] = straight_HSTEP;
 800b6d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b6dc:	f103 0304 	add.w	r3, r3, #4
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	1c53      	adds	r3, r2, #1
 800b6e4:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b6e8:	f101 0104 	add.w	r1, r1, #4
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6f2:	3b10      	subs	r3, #16
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                run_pattern[run_cnt++] = straight_HSTEP;
 800b6fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b6fe:	f103 0304 	add.w	r3, r3, #4
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	1c53      	adds	r3, r2, #1
 800b706:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b70a:	f101 0104 	add.w	r1, r1, #4
 800b70e:	600b      	str	r3, [r1, #0]
 800b710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b714:	3b10      	subs	r3, #16
 800b716:	2101      	movs	r1, #1
 800b718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	break;
 800b71c:	e05a      	b.n	800b7d4 <saitan4+0x3c0>
            case right:
            	run_pattern[run_cnt++] = turn_r90;
 800b71e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b722:	f103 0304 	add.w	r3, r3, #4
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	1c53      	adds	r3, r2, #1
 800b72a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b72e:	f101 0104 	add.w	r1, r1, #4
 800b732:	600b      	str	r3, [r1, #0]
 800b734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b738:	3b10      	subs	r3, #16
 800b73a:	2102      	movs	r1, #2
 800b73c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	break;
 800b740:	e048      	b.n	800b7d4 <saitan4+0x3c0>
            case left:
            	run_pattern[run_cnt++] = turn_l90;
 800b742:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b746:	f103 0304 	add.w	r3, r3, #4
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	1c53      	adds	r3, r2, #1
 800b74e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b752:	f101 0104 	add.w	r1, r1, #4
 800b756:	600b      	str	r3, [r1, #0]
 800b758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b75c:	3b10      	subs	r3, #16
 800b75e:	2104      	movs	r1, #4
 800b760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	break;
 800b764:	e036      	b.n	800b7d4 <saitan4+0x3c0>
 800b766:	bf00      	nop
 800b768:	20004380 	.word	0x20004380
            case rear:
            	run_pattern[run_cnt++] = straight_HSTEP;
 800b76c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b770:	f103 0304 	add.w	r3, r3, #4
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	1c53      	adds	r3, r2, #1
 800b778:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b77c:	f101 0104 	add.w	r1, r1, #4
 800b780:	600b      	str	r3, [r1, #0]
 800b782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b786:	3b10      	subs	r3, #16
 800b788:	2101      	movs	r1, #1
 800b78a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = turn_l180;
 800b78e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b792:	f103 0304 	add.w	r3, r3, #4
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	1c53      	adds	r3, r2, #1
 800b79a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b79e:	f101 0104 	add.w	r1, r1, #4
 800b7a2:	600b      	str	r3, [r1, #0]
 800b7a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7a8:	3b10      	subs	r3, #16
 800b7aa:	2103      	movs	r1, #3
 800b7ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = straight_HSTEP;
 800b7b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b7b4:	f103 0304 	add.w	r3, r3, #4
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	1c53      	adds	r3, r2, #1
 800b7bc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b7c0:	f101 0104 	add.w	r1, r1, #4
 800b7c4:	600b      	str	r3, [r1, #0]
 800b7c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7ca:	3b10      	subs	r3, #16
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                break;
 800b7d2:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800b7d4:	4bcd      	ldr	r3, [pc, #820]	; (800bb0c <saitan4+0x6f8>)
 800b7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	4bcb      	ldr	r3, [pc, #812]	; (800bb0c <saitan4+0x6f8>)
 800b7de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7e2:	461c      	mov	r4, r3
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7ec:	3a1c      	subs	r2, #28
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	3b04      	subs	r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	680b      	ldr	r3, [r1, #0]
 800b7fa:	6812      	ldr	r2, [r2, #0]
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f7fd fa9d 	bl	8008d3c <i_am_goal>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	f43f aeff 	beq.w	800b608 <saitan4+0x1f4>
        }

    }

    run_pattern[run_cnt++] = straight_HSTEP;
 800b80a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b80e:	f103 0304 	add.w	r3, r3, #4
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	1c53      	adds	r3, r2, #1
 800b816:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b81a:	f101 0104 	add.w	r1, r1, #4
 800b81e:	600b      	str	r3, [r1, #0]
 800b820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b824:	3b10      	subs	r3, #16
 800b826:	2101      	movs	r1, #1
 800b828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    run_pattern[run_cnt++] = goal;
 800b82c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b830:	f103 0304 	add.w	r3, r3, #4
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	1c53      	adds	r3, r2, #1
 800b838:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800b83c:	f101 0104 	add.w	r1, r1, #4
 800b840:	600b      	str	r3, [r1, #0]
 800b842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b846:	3b10      	subs	r3, #16
 800b848:	21ff      	movs	r1, #255	; 0xff
 800b84a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    int cnt = 0;int accel_cnt = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b85c:	f102 021c 	add.w	r2, r2, #28
 800b860:	6013      	str	r3, [r2, #0]
    if(goal_size >1)	straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	3b04      	subs	r3, #4
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	f340 8139 	ble.w	800bae2 <saitan4+0x6ce>
 800b870:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800bb10 <saitan4+0x6fc>
 800b874:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 800bb10 <saitan4+0x6fc>
 800b878:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b87c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800b880:	f7f8 fe02 	bl	8004488 <straight>
    while(run_pattern[cnt] != goal ){
 800b884:	e12d      	b.n	800bae2 <saitan4+0x6ce>
    	switch(run_pattern[cnt]){
 800b886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b88a:	3b10      	subs	r3, #16
 800b88c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800b890:	6812      	ldr	r2, [r2, #0]
 800b892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b896:	3b01      	subs	r3, #1
 800b898:	2b11      	cmp	r3, #17
 800b89a:	f200 8122 	bhi.w	800bae2 <saitan4+0x6ce>
 800b89e:	a201      	add	r2, pc, #4	; (adr r2, 800b8a4 <saitan4+0x490>)
 800b8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a4:	0800b8ed 	.word	0x0800b8ed
 800b8a8:	0800ba67 	.word	0x0800ba67
 800b8ac:	0800ba8f 	.word	0x0800ba8f
 800b8b0:	0800ba7b 	.word	0x0800ba7b
 800b8b4:	0800bae3 	.word	0x0800bae3
 800b8b8:	0800bae3 	.word	0x0800bae3
 800b8bc:	0800bae3 	.word	0x0800bae3
 800b8c0:	0800bae3 	.word	0x0800bae3
 800b8c4:	0800bae3 	.word	0x0800bae3
 800b8c8:	0800bae3 	.word	0x0800bae3
 800b8cc:	0800bae3 	.word	0x0800bae3
 800b8d0:	0800bae3 	.word	0x0800bae3
 800b8d4:	0800bae3 	.word	0x0800bae3
 800b8d8:	0800bae3 	.word	0x0800bae3
 800b8dc:	0800bae3 	.word	0x0800bae3
 800b8e0:	0800bae3 	.word	0x0800bae3
 800b8e4:	0800baab 	.word	0x0800baab
 800b8e8:	0800bac7 	.word	0x0800bac7
    		case straight_HSTEP:
    			accel_cnt++;
 800b8ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b8f0:	f103 031c 	add.w	r3, r3, #28
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800b8fc:	f102 021c 	add.w	r2, r2, #28
 800b900:	6013      	str	r3, [r2, #0]
    			if(run_pattern[cnt+1] != straight_HSTEP){
 800b902:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b90e:	3b10      	subs	r3, #16
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	2b01      	cmp	r3, #1
 800b916:	f000 809e 	beq.w	800ba56 <saitan4+0x642>
    				if(run_pattern[cnt+1] == goal){
 800b91a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b926:	3b10      	subs	r3, #16
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	2bff      	cmp	r3, #255	; 0xff
 800b92e:	d142      	bne.n	800b9b6 <saitan4+0x5a2>
    					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.0);
 800b930:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b934:	f103 031c 	add.w	r3, r3, #28
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	dd1d      	ble.n	800b97a <saitan4+0x566>
 800b93e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b942:	f103 031c 	add.w	r3, r3, #28
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	f7f4 fdf4 	bl	8000534 <__aeabi_i2d>
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	4b70      	ldr	r3, [pc, #448]	; (800bb14 <saitan4+0x700>)
 800b952:	f7f4 fe59 	bl	8000608 <__aeabi_dmul>
 800b956:	4603      	mov	r3, r0
 800b958:	460c      	mov	r4, r1
 800b95a:	4618      	mov	r0, r3
 800b95c:	4621      	mov	r1, r4
 800b95e:	f7f5 f92b 	bl	8000bb8 <__aeabi_d2f>
 800b962:	4603      	mov	r3, r0
 800b964:	eddf 1a6c 	vldr	s3, [pc, #432]	; 800bb18 <saitan4+0x704>
 800b968:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b96c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800b970:	ee00 3a10 	vmov	s0, r3
 800b974:	f7f8 fd88 	bl	8004488 <straight>
 800b978:	e05f      	b.n	800ba3a <saitan4+0x626>
    					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.3,0.0);
 800b97a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b97e:	f103 031c 	add.w	r3, r3, #28
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	f7f4 fdd6 	bl	8000534 <__aeabi_i2d>
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	4b61      	ldr	r3, [pc, #388]	; (800bb14 <saitan4+0x700>)
 800b98e:	f7f4 fe3b 	bl	8000608 <__aeabi_dmul>
 800b992:	4603      	mov	r3, r0
 800b994:	460c      	mov	r4, r1
 800b996:	4618      	mov	r0, r3
 800b998:	4621      	mov	r1, r4
 800b99a:	f7f5 f90d 	bl	8000bb8 <__aeabi_d2f>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800bb18 <saitan4+0x704>
 800b9a4:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800bb10 <saitan4+0x6fc>
 800b9a8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b9ac:	ee00 3a10 	vmov	s0, r3
 800b9b0:	f7f8 fd6a 	bl	8004488 <straight>
 800b9b4:	e041      	b.n	800ba3a <saitan4+0x626>
    				}else{
    					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.3);
 800b9b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b9ba:	f103 031c 	add.w	r3, r3, #28
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	dd1d      	ble.n	800ba00 <saitan4+0x5ec>
 800b9c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800b9c8:	f103 031c 	add.w	r3, r3, #28
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	f7f4 fdb1 	bl	8000534 <__aeabi_i2d>
 800b9d2:	f04f 0200 	mov.w	r2, #0
 800b9d6:	4b4f      	ldr	r3, [pc, #316]	; (800bb14 <saitan4+0x700>)
 800b9d8:	f7f4 fe16 	bl	8000608 <__aeabi_dmul>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	f7f5 f8e8 	bl	8000bb8 <__aeabi_d2f>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	eddf 1a49 	vldr	s3, [pc, #292]	; 800bb10 <saitan4+0x6fc>
 800b9ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b9f2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800b9f6:	ee00 3a10 	vmov	s0, r3
 800b9fa:	f7f8 fd45 	bl	8004488 <straight>
 800b9fe:	e01c      	b.n	800ba3a <saitan4+0x626>
    					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.3,0.3);
 800ba00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ba04:	f103 031c 	add.w	r3, r3, #28
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7f4 fd93 	bl	8000534 <__aeabi_i2d>
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	4b40      	ldr	r3, [pc, #256]	; (800bb14 <saitan4+0x700>)
 800ba14:	f7f4 fdf8 	bl	8000608 <__aeabi_dmul>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	4621      	mov	r1, r4
 800ba20:	f7f5 f8ca 	bl	8000bb8 <__aeabi_d2f>
 800ba24:	4603      	mov	r3, r0
 800ba26:	eddf 1a3a 	vldr	s3, [pc, #232]	; 800bb10 <saitan4+0x6fc>
 800ba2a:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800bb10 <saitan4+0x6fc>
 800ba2e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800ba32:	ee00 3a10 	vmov	s0, r3
 800ba36:	f7f8 fd27 	bl	8004488 <straight>
    				}
    				accel_cnt = 0;cnt = cnt + 1;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800ba40:	f102 021c 	add.w	r2, r2, #28
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ba52:	6013      	str	r3, [r2, #0]
 800ba54:	e045      	b.n	800bae2 <saitan4+0x6ce>
       			}else{
    				cnt = cnt + 1;
 800ba56:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ba62:	6013      	str	r3, [r2, #0]
    			}
    			//straight(HALF_SECTION,SEARCH_ACCEL,0.3,0.3);cnt = cnt + 1;
    			break;
 800ba64:	e03d      	b.n	800bae2 <saitan4+0x6ce>
    		case turn_r90:
    			sla_R90();	cnt = cnt + 1;
 800ba66:	f7f9 fec7 	bl	80057f8 <sla_R90>
 800ba6a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ba76:	6013      	str	r3, [r2, #0]
    			break;
 800ba78:	e033      	b.n	800bae2 <saitan4+0x6ce>
    		case turn_l90:
    			sla_L90();	cnt = cnt + 1;
 800ba7a:	f7f9 fcd9 	bl	8005430 <sla_L90>
 800ba7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ba8a:	6013      	str	r3, [r2, #0]
    			break;
 800ba8c:	e029      	b.n	800bae2 <saitan4+0x6ce>
    		case turn_l180:
    			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800ba8e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800bb1c <saitan4+0x708>
 800ba92:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800bb20 <saitan4+0x70c>
 800ba96:	f7f9 fbb7 	bl	8005208 <turn_L180>
 800ba9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800baa6:	6013      	str	r3, [r2, #0]
    			break;
 800baa8:	e01b      	b.n	800bae2 <saitan4+0x6ce>
    		case spin_r90:
    			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800baaa:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800bb1c <saitan4+0x708>
 800baae:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800bb20 <saitan4+0x70c>
 800bab2:	f7f9 f971 	bl	8004d98 <turn_R90>
 800bab6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800bac2:	6013      	str	r3, [r2, #0]
    			break;
 800bac4:	e00d      	b.n	800bae2 <saitan4+0x6ce>
    		case spin_l90:
    			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;
 800bac6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800bb1c <saitan4+0x708>
 800baca:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bb20 <saitan4+0x70c>
 800bace:	f7f9 fa83 	bl	8004fd8 <turn_L90>
 800bad2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800bade:	6013      	str	r3, [r2, #0]
    			break;
 800bae0:	bf00      	nop
    while(run_pattern[cnt] != goal ){
 800bae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bae6:	3b10      	subs	r3, #16
 800bae8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800baec:	6812      	ldr	r2, [r2, #0]
 800baee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf2:	2bff      	cmp	r3, #255	; 0xff
 800baf4:	f47f aec7 	bne.w	800b886 <saitan4+0x472>
    	}
    }
    //straight(HALF_SECTION,SEARCH_ACCEL,0.3,0.0);
    run_mode = NON_CON_MODE;
 800baf8:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <saitan4+0x710>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
}
 800bafe:	bf00      	nop
 800bb00:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20004380 	.word	0x20004380
 800bb10:	3e99999a 	.word	0x3e99999a
 800bb14:	40468000 	.word	0x40468000
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	41490fd8 	.word	0x41490fd8
 800bb20:	437b53ce 	.word	0x437b53ce
 800bb24:	2000a170 	.word	0x2000a170

0800bb28 <saitan5>:

void saitan5(int *gx,int *gy,int goal_size){
 800bb28:	b590      	push	{r4, r7, lr}
 800bb2a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb36:	3b1c      	subs	r3, #28
 800bb38:	6018      	str	r0, [r3, #0]
 800bb3a:	f107 0308 	add.w	r3, r7, #8
 800bb3e:	6019      	str	r1, [r3, #0]
 800bb40:	f107 0308 	add.w	r3, r7, #8
 800bb44:	3b04      	subs	r3, #4
 800bb46:	601a      	str	r2, [r3, #0]
	int run_pattern[MAZE_SIZE_X*MAZE_SIZE_Y*4];
	int run_cnt = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800bb4e:	f102 0204 	add.w	r2, r2, #4
 800bb52:	6013      	str	r3, [r2, #0]

    t_direction glob_nextdir;
    int direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800bb54:	f107 0208 	add.w	r2, r7, #8
 800bb58:	3a04      	subs	r2, #4
 800bb5a:	f107 0108 	add.w	r1, r7, #8
 800bb5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bb62:	381c      	subs	r0, #28
 800bb64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb68:	3b11      	subs	r3, #17
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	6812      	ldr	r2, [r2, #0]
 800bb70:	6809      	ldr	r1, [r1, #0]
 800bb72:	6800      	ldr	r0, [r0, #0]
 800bb74:	f7fd fbbe 	bl	80092f4 <get_nextdir>
 800bb78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800bb7c:	f103 0318 	add.w	r3, r3, #24
 800bb80:	6018      	str	r0, [r3, #0]

    mypos.dir = glob_nextdir;
 800bb82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb86:	3b11      	subs	r3, #17
 800bb88:	781a      	ldrb	r2, [r3, #0]
 800bb8a:	4bc0      	ldr	r3, [pc, #768]	; (800be8c <saitan5+0x364>)
 800bb8c:	711a      	strb	r2, [r3, #4]
    switch(mypos.dir){
 800bb8e:	4bbf      	ldr	r3, [pc, #764]	; (800be8c <saitan5+0x364>)
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d832      	bhi.n	800bbfc <saitan5+0xd4>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <saitan5+0x74>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800bbc1 	.word	0x0800bbc1
 800bba4:	0800bbd5 	.word	0x0800bbd5
 800bba8:	0800bbe9 	.word	0x0800bbe9
        case north:
            mypos.y++;
 800bbac:	4bb7      	ldr	r3, [pc, #732]	; (800be8c <saitan5+0x364>)
 800bbae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	b21a      	sxth	r2, r3
 800bbba:	4bb4      	ldr	r3, [pc, #720]	; (800be8c <saitan5+0x364>)
 800bbbc:	805a      	strh	r2, [r3, #2]
            break;
 800bbbe:	e01d      	b.n	800bbfc <saitan5+0xd4>
        case east:
            mypos.x++;
 800bbc0:	4bb2      	ldr	r3, [pc, #712]	; (800be8c <saitan5+0x364>)
 800bbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	3301      	adds	r3, #1
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b21a      	sxth	r2, r3
 800bbce:	4baf      	ldr	r3, [pc, #700]	; (800be8c <saitan5+0x364>)
 800bbd0:	801a      	strh	r2, [r3, #0]
            break;
 800bbd2:	e013      	b.n	800bbfc <saitan5+0xd4>
        case south:
            mypos.y--;
 800bbd4:	4bad      	ldr	r3, [pc, #692]	; (800be8c <saitan5+0x364>)
 800bbd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	b21a      	sxth	r2, r3
 800bbe2:	4baa      	ldr	r3, [pc, #680]	; (800be8c <saitan5+0x364>)
 800bbe4:	805a      	strh	r2, [r3, #2]
            break;
 800bbe6:	e009      	b.n	800bbfc <saitan5+0xd4>
        case west:
            mypos.x--;
 800bbe8:	4ba8      	ldr	r3, [pc, #672]	; (800be8c <saitan5+0x364>)
 800bbea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	b21a      	sxth	r2, r3
 800bbf6:	4ba5      	ldr	r3, [pc, #660]	; (800be8c <saitan5+0x364>)
 800bbf8:	801a      	strh	r2, [r3, #0]
            break;
 800bbfa:	bf00      	nop
    }

    switch(direction){
 800bbfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800bc00:	f103 0318 	add.w	r3, r3, #24
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	f200 81c6 	bhi.w	800bf98 <saitan5+0x470>
 800bc0c:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <saitan5+0xec>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc49 	.word	0x0800bc49
 800bc1c:	0800bcd5 	.word	0x0800bcd5
 800bc20:	0800bc8f 	.word	0x0800bc8f
        case front:
            run_pattern[run_cnt++] = straight_HSTEP;
 800bc24:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bc28:	f103 0304 	add.w	r3, r3, #4
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	1c53      	adds	r3, r2, #1
 800bc30:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bc34:	f101 0104 	add.w	r1, r1, #4
 800bc38:	600b      	str	r3, [r1, #0]
 800bc3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc3e:	3b10      	subs	r3, #16
 800bc40:	2101      	movs	r1, #1
 800bc42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800bc46:	e068      	b.n	800bd1a <saitan5+0x1f2>
        case right:
            run_pattern[run_cnt++] = spin_r90;
 800bc48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bc4c:	f103 0304 	add.w	r3, r3, #4
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	1c53      	adds	r3, r2, #1
 800bc54:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bc58:	f101 0104 	add.w	r1, r1, #4
 800bc5c:	600b      	str	r3, [r1, #0]
 800bc5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc62:	3b10      	subs	r3, #16
 800bc64:	2111      	movs	r1, #17
 800bc66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800bc6a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bc6e:	f103 0304 	add.w	r3, r3, #4
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	1c53      	adds	r3, r2, #1
 800bc76:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bc7a:	f101 0104 	add.w	r1, r1, #4
 800bc7e:	600b      	str	r3, [r1, #0]
 800bc80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc84:	3b10      	subs	r3, #16
 800bc86:	2101      	movs	r1, #1
 800bc88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   		    break;
 800bc8c:	e045      	b.n	800bd1a <saitan5+0x1f2>
        case left:
            run_pattern[run_cnt++] = spin_l90;
 800bc8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bc92:	f103 0304 	add.w	r3, r3, #4
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	1c53      	adds	r3, r2, #1
 800bc9a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bc9e:	f101 0104 	add.w	r1, r1, #4
 800bca2:	600b      	str	r3, [r1, #0]
 800bca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bca8:	3b10      	subs	r3, #16
 800bcaa:	2112      	movs	r1, #18
 800bcac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800bcb0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bcb4:	f103 0304 	add.w	r3, r3, #4
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	1c53      	adds	r3, r2, #1
 800bcbc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bcc0:	f101 0104 	add.w	r1, r1, #4
 800bcc4:	600b      	str	r3, [r1, #0]
 800bcc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcca:	3b10      	subs	r3, #16
 800bccc:	2101      	movs	r1, #1
 800bcce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		    break;
 800bcd2:	e022      	b.n	800bd1a <saitan5+0x1f2>
        case rear:
            run_pattern[run_cnt++] = turn_l180;
 800bcd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bcd8:	f103 0304 	add.w	r3, r3, #4
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	1c53      	adds	r3, r2, #1
 800bce0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bce4:	f101 0104 	add.w	r1, r1, #4
 800bce8:	600b      	str	r3, [r1, #0]
 800bcea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcee:	3b10      	subs	r3, #16
 800bcf0:	2103      	movs	r1, #3
 800bcf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            run_pattern[run_cnt++] = straight_HSTEP;
 800bcf6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bcfa:	f103 0304 	add.w	r3, r3, #4
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	1c53      	adds	r3, r2, #1
 800bd02:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bd06:	f101 0104 	add.w	r1, r1, #4
 800bd0a:	600b      	str	r3, [r1, #0]
 800bd0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd10:	3b10      	subs	r3, #16
 800bd12:	2101      	movs	r1, #1
 800bd14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	break;
 800bd18:	bf00      	nop
    }


    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800bd1a:	e13d      	b.n	800bf98 <saitan5+0x470>
        direction = get_nextdir(gx,gy,goal_size,0x03,&glob_nextdir);
 800bd1c:	f107 0208 	add.w	r2, r7, #8
 800bd20:	3a04      	subs	r2, #4
 800bd22:	f107 0108 	add.w	r1, r7, #8
 800bd26:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bd2a:	381c      	subs	r0, #28
 800bd2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd30:	3b11      	subs	r3, #17
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	2303      	movs	r3, #3
 800bd36:	6812      	ldr	r2, [r2, #0]
 800bd38:	6809      	ldr	r1, [r1, #0]
 800bd3a:	6800      	ldr	r0, [r0, #0]
 800bd3c:	f7fd fada 	bl	80092f4 <get_nextdir>
 800bd40:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800bd44:	f103 0318 	add.w	r3, r3, #24
 800bd48:	6018      	str	r0, [r3, #0]
        mypos.dir = glob_nextdir;
 800bd4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd4e:	3b11      	subs	r3, #17
 800bd50:	781a      	ldrb	r2, [r3, #0]
 800bd52:	4b4e      	ldr	r3, [pc, #312]	; (800be8c <saitan5+0x364>)
 800bd54:	711a      	strb	r2, [r3, #4]

        switch(mypos.dir){
 800bd56:	4b4d      	ldr	r3, [pc, #308]	; (800be8c <saitan5+0x364>)
 800bd58:	791b      	ldrb	r3, [r3, #4]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d832      	bhi.n	800bdc4 <saitan5+0x29c>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <saitan5+0x23c>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bd89 	.word	0x0800bd89
 800bd6c:	0800bd9d 	.word	0x0800bd9d
 800bd70:	0800bdb1 	.word	0x0800bdb1
            case north:
                mypos.y++;
 800bd74:	4b45      	ldr	r3, [pc, #276]	; (800be8c <saitan5+0x364>)
 800bd76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	b21a      	sxth	r2, r3
 800bd82:	4b42      	ldr	r3, [pc, #264]	; (800be8c <saitan5+0x364>)
 800bd84:	805a      	strh	r2, [r3, #2]
                break;
 800bd86:	e01d      	b.n	800bdc4 <saitan5+0x29c>
            case east:
                mypos.x++;
 800bd88:	4b40      	ldr	r3, [pc, #256]	; (800be8c <saitan5+0x364>)
 800bd8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	3301      	adds	r3, #1
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	b21a      	sxth	r2, r3
 800bd96:	4b3d      	ldr	r3, [pc, #244]	; (800be8c <saitan5+0x364>)
 800bd98:	801a      	strh	r2, [r3, #0]
                break;
 800bd9a:	e013      	b.n	800bdc4 <saitan5+0x29c>
            case south:
                mypos.y--;
 800bd9c:	4b3b      	ldr	r3, [pc, #236]	; (800be8c <saitan5+0x364>)
 800bd9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	b21a      	sxth	r2, r3
 800bdaa:	4b38      	ldr	r3, [pc, #224]	; (800be8c <saitan5+0x364>)
 800bdac:	805a      	strh	r2, [r3, #2]
                break;
 800bdae:	e009      	b.n	800bdc4 <saitan5+0x29c>
            case west:
                mypos.x--;
 800bdb0:	4b36      	ldr	r3, [pc, #216]	; (800be8c <saitan5+0x364>)
 800bdb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	b21a      	sxth	r2, r3
 800bdbe:	4b33      	ldr	r3, [pc, #204]	; (800be8c <saitan5+0x364>)
 800bdc0:	801a      	strh	r2, [r3, #0]
                break;
 800bdc2:	bf00      	nop
        }

        switch(direction){
 800bdc4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800bdc8:	f103 0318 	add.w	r3, r3, #24
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	f200 80e2 	bhi.w	800bf98 <saitan5+0x470>
 800bdd4:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <saitan5+0x2b4>)
 800bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdda:	bf00      	nop
 800bddc:	0800bded 	.word	0x0800bded
 800bde0:	0800be33 	.word	0x0800be33
 800bde4:	0800bf31 	.word	0x0800bf31
 800bde8:	0800beb5 	.word	0x0800beb5
            case front:
                run_pattern[run_cnt++] = straight_HSTEP;
 800bdec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bdf0:	f103 0304 	add.w	r3, r3, #4
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	1c53      	adds	r3, r2, #1
 800bdf8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bdfc:	f101 0104 	add.w	r1, r1, #4
 800be00:	600b      	str	r3, [r1, #0]
 800be02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be06:	3b10      	subs	r3, #16
 800be08:	2101      	movs	r1, #1
 800be0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                run_pattern[run_cnt++] = straight_HSTEP;
 800be0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800be12:	f103 0304 	add.w	r3, r3, #4
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	1c53      	adds	r3, r2, #1
 800be1a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800be1e:	f101 0104 	add.w	r1, r1, #4
 800be22:	600b      	str	r3, [r1, #0]
 800be24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be28:	3b10      	subs	r3, #16
 800be2a:	2101      	movs	r1, #1
 800be2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	break;
 800be30:	e0b2      	b.n	800bf98 <saitan5+0x470>
            case right:
            	if( run_pattern[run_cnt-1] == turn_l90 || run_pattern[run_cnt-1] == diagonal_l ){
 800be32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800be36:	f103 0304 	add.w	r3, r3, #4
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	1e5a      	subs	r2, r3, #1
 800be3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be42:	3b10      	subs	r3, #16
 800be44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be48:	2b04      	cmp	r3, #4
 800be4a:	d00c      	beq.n	800be66 <saitan5+0x33e>
 800be4c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800be50:	f103 0304 	add.w	r3, r3, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	1e5a      	subs	r2, r3, #1
 800be58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be5c:	3b10      	subs	r3, #16
 800be5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be62:	2b06      	cmp	r3, #6
 800be64:	d114      	bne.n	800be90 <saitan5+0x368>
            		run_pattern[run_cnt++] = diagonal_r;
 800be66:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800be6a:	f103 0304 	add.w	r3, r3, #4
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	1c53      	adds	r3, r2, #1
 800be72:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800be76:	f101 0104 	add.w	r1, r1, #4
 800be7a:	600b      	str	r3, [r1, #0]
 800be7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be80:	3b10      	subs	r3, #16
 800be82:	2105      	movs	r1, #5
 800be84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be88:	e013      	b.n	800beb2 <saitan5+0x38a>
 800be8a:	bf00      	nop
 800be8c:	20004380 	.word	0x20004380
            	}else{
            		run_pattern[run_cnt++] = turn_r90;
 800be90:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800be94:	f103 0304 	add.w	r3, r3, #4
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	1c53      	adds	r3, r2, #1
 800be9c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bea0:	f101 0104 	add.w	r1, r1, #4
 800bea4:	600b      	str	r3, [r1, #0]
 800bea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800beaa:	3b10      	subs	r3, #16
 800beac:	2102      	movs	r1, #2
 800beae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	}
            	break;
 800beb2:	e071      	b.n	800bf98 <saitan5+0x470>
            case left:
            	if( run_pattern[run_cnt-1] == turn_r90 || run_pattern[run_cnt-1] == diagonal_r ){
 800beb4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800beb8:	f103 0304 	add.w	r3, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	1e5a      	subs	r2, r3, #1
 800bec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bec4:	3b10      	subs	r3, #16
 800bec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d00c      	beq.n	800bee8 <saitan5+0x3c0>
 800bece:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bed2:	f103 0304 	add.w	r3, r3, #4
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	1e5a      	subs	r2, r3, #1
 800beda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bede:	3b10      	subs	r3, #16
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	2b05      	cmp	r3, #5
 800bee6:	d111      	bne.n	800bf0c <saitan5+0x3e4>
            		run_pattern[run_cnt++] = diagonal_l;
 800bee8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800beec:	f103 0304 	add.w	r3, r3, #4
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	1c53      	adds	r3, r2, #1
 800bef4:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bef8:	f101 0104 	add.w	r1, r1, #4
 800befc:	600b      	str	r3, [r1, #0]
 800befe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf02:	3b10      	subs	r3, #16
 800bf04:	2106      	movs	r1, #6
 800bf06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf0a:	e010      	b.n	800bf2e <saitan5+0x406>
            	}else{
            		run_pattern[run_cnt++] = turn_l90;
 800bf0c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bf10:	f103 0304 	add.w	r3, r3, #4
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	1c53      	adds	r3, r2, #1
 800bf18:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bf1c:	f101 0104 	add.w	r1, r1, #4
 800bf20:	600b      	str	r3, [r1, #0]
 800bf22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf26:	3b10      	subs	r3, #16
 800bf28:	2104      	movs	r1, #4
 800bf2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	}
            	break;
 800bf2e:	e033      	b.n	800bf98 <saitan5+0x470>
            case rear:
            	run_pattern[run_cnt++] = straight_HSTEP;
 800bf30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bf34:	f103 0304 	add.w	r3, r3, #4
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	1c53      	adds	r3, r2, #1
 800bf3c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bf40:	f101 0104 	add.w	r1, r1, #4
 800bf44:	600b      	str	r3, [r1, #0]
 800bf46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf4a:	3b10      	subs	r3, #16
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = turn_l180;
 800bf52:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bf56:	f103 0304 	add.w	r3, r3, #4
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	1c53      	adds	r3, r2, #1
 800bf5e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bf62:	f101 0104 	add.w	r1, r1, #4
 800bf66:	600b      	str	r3, [r1, #0]
 800bf68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf6c:	3b10      	subs	r3, #16
 800bf6e:	2103      	movs	r1, #3
 800bf70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            	run_pattern[run_cnt++] = straight_HSTEP;
 800bf74:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bf78:	f103 0304 	add.w	r3, r3, #4
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	1c53      	adds	r3, r2, #1
 800bf80:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bf84:	f101 0104 	add.w	r1, r1, #4
 800bf88:	600b      	str	r3, [r1, #0]
 800bf8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf8e:	3b10      	subs	r3, #16
 800bf90:	2101      	movs	r1, #1
 800bf92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                break;
 800bf96:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 800bf98:	4bc8      	ldr	r3, [pc, #800]	; (800c2bc <saitan5+0x794>)
 800bf9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	4bc6      	ldr	r3, [pc, #792]	; (800c2bc <saitan5+0x794>)
 800bfa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bfa6:	461c      	mov	r4, r3
 800bfa8:	f107 0108 	add.w	r1, r7, #8
 800bfac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bfb0:	3a1c      	subs	r2, #28
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	3b04      	subs	r3, #4
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	680b      	ldr	r3, [r1, #0]
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	f7fc febb 	bl	8008d3c <i_am_goal>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f43f aea7 	beq.w	800bd1c <saitan5+0x1f4>
        }

    }

    run_pattern[run_cnt++] = straight_HSTEP;
 800bfce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800bfd2:	f103 0304 	add.w	r3, r3, #4
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	1c53      	adds	r3, r2, #1
 800bfda:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800bfde:	f101 0104 	add.w	r1, r1, #4
 800bfe2:	600b      	str	r3, [r1, #0]
 800bfe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfe8:	3b10      	subs	r3, #16
 800bfea:	2101      	movs	r1, #1
 800bfec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    run_pattern[run_cnt] = goal;
 800bff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bff4:	3b10      	subs	r3, #16
 800bff6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800bffa:	f102 0204 	add.w	r2, r2, #4
 800bffe:	6812      	ldr	r2, [r2, #0]
 800c000:	21ff      	movs	r1, #255	; 0xff
 800c002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if(goal_size >1)	straight(15.0,SEARCH_ACCEL,SEARCH_SPEED,SEARCH_SPEED);
 800c006:	f107 0308 	add.w	r3, r7, #8
 800c00a:	3b04      	subs	r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	dd09      	ble.n	800c026 <saitan5+0x4fe>
 800c012:	eddf 1aab 	vldr	s3, [pc, #684]	; 800c2c0 <saitan5+0x798>
 800c016:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800c2c0 <saitan5+0x798>
 800c01a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c01e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800c022:	f7f8 fa31 	bl	8004488 <straight>
    int cnt = 0;int accel_cnt = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	2300      	movs	r3, #0
 800c030:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c034:	f102 021c 	add.w	r2, r2, #28
 800c038:	6013      	str	r3, [r2, #0]
    while(run_pattern[cnt] != goal){
 800c03a:	f000 be34 	b.w	800cca6 <saitan5+0x117e>
    	switch(run_pattern[cnt]){
 800c03e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c042:	3b10      	subs	r3, #16
 800c044:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04e:	3b01      	subs	r3, #1
 800c050:	2b11      	cmp	r3, #17
 800c052:	f200 8628 	bhi.w	800cca6 <saitan5+0x117e>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <saitan5+0x534>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c0a5 	.word	0x0800c0a5
 800c060:	0800c7b7 	.word	0x0800c7b7
 800c064:	0800c8ff 	.word	0x0800c8ff
 800c068:	0800c85b 	.word	0x0800c85b
 800c06c:	0800c9af 	.word	0x0800c9af
 800c070:	0800ca79 	.word	0x0800ca79
 800c074:	0800cca7 	.word	0x0800cca7
 800c078:	0800cca7 	.word	0x0800cca7
 800c07c:	0800cca7 	.word	0x0800cca7
 800c080:	0800cca7 	.word	0x0800cca7
 800c084:	0800cca7 	.word	0x0800cca7
 800c088:	0800cca7 	.word	0x0800cca7
 800c08c:	0800cca7 	.word	0x0800cca7
 800c090:	0800cca7 	.word	0x0800cca7
 800c094:	0800cca7 	.word	0x0800cca7
 800c098:	0800cca7 	.word	0x0800cca7
 800c09c:	0800cb43 	.word	0x0800cb43
 800c0a0:	0800cbef 	.word	0x0800cbef
    		case straight_HSTEP:
    			if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == diagonal_l){
 800c0a4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0b0:	3b10      	subs	r3, #16
 800c0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d15c      	bne.n	800c174 <saitan5+0x64c>
 800c0ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	1c9a      	adds	r2, r3, #2
 800c0c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0c6:	3b10      	subs	r3, #16
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	2b06      	cmp	r3, #6
 800c0ce:	d151      	bne.n	800c174 <saitan5+0x64c>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c0d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c0d4:	f103 031c 	add.w	r3, r3, #28
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	dd1d      	ble.n	800c11a <saitan5+0x5f2>
 800c0de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c0e2:	f103 031c 	add.w	r3, r3, #28
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	f7f4 fa24 	bl	8000534 <__aeabi_i2d>
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	4b74      	ldr	r3, [pc, #464]	; (800c2c4 <saitan5+0x79c>)
 800c0f2:	f7f4 fa89 	bl	8000608 <__aeabi_dmul>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	f7f4 fd5b 	bl	8000bb8 <__aeabi_d2f>
 800c102:	4603      	mov	r3, r0
 800c104:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c108:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c10c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c110:	ee00 3a10 	vmov	s0, r3
 800c114:	f7f8 f9b8 	bl	8004488 <straight>
 800c118:	e01c      	b.n	800c154 <saitan5+0x62c>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c11a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c11e:	f103 031c 	add.w	r3, r3, #28
 800c122:	6818      	ldr	r0, [r3, #0]
 800c124:	f7f4 fa06 	bl	8000534 <__aeabi_i2d>
 800c128:	f04f 0200 	mov.w	r2, #0
 800c12c:	4b65      	ldr	r3, [pc, #404]	; (800c2c4 <saitan5+0x79c>)
 800c12e:	f7f4 fa6b 	bl	8000608 <__aeabi_dmul>
 800c132:	4603      	mov	r3, r0
 800c134:	460c      	mov	r4, r1
 800c136:	4618      	mov	r0, r3
 800c138:	4621      	mov	r1, r4
 800c13a:	f7f4 fd3d 	bl	8000bb8 <__aeabi_d2f>
 800c13e:	4603      	mov	r3, r0
 800c140:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c144:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c148:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c14c:	ee00 3a10 	vmov	s0, r3
 800c150:	f7f8 f99a 	bl	8004488 <straight>
    				in_R45();	cnt = cnt + 2;	accel_cnt = 0;
 800c154:	f7fa fed4 	bl	8006f00 <in_R45>
 800c158:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3302      	adds	r3, #2
 800c160:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	2300      	movs	r3, #0
 800c168:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c16c:	f102 021c 	add.w	r2, r2, #28
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	e31f      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == diagonal_r){
 800c174:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c180:	3b10      	subs	r3, #16
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	2b04      	cmp	r3, #4
 800c188:	d15c      	bne.n	800c244 <saitan5+0x71c>
 800c18a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	1c9a      	adds	r2, r3, #2
 800c192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c196:	3b10      	subs	r3, #16
 800c198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19c:	2b05      	cmp	r3, #5
 800c19e:	d151      	bne.n	800c244 <saitan5+0x71c>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c1a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c1a4:	f103 031c 	add.w	r3, r3, #28
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	dd1d      	ble.n	800c1ea <saitan5+0x6c2>
 800c1ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c1b2:	f103 031c 	add.w	r3, r3, #28
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	f7f4 f9bc 	bl	8000534 <__aeabi_i2d>
 800c1bc:	f04f 0200 	mov.w	r2, #0
 800c1c0:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <saitan5+0x79c>)
 800c1c2:	f7f4 fa21 	bl	8000608 <__aeabi_dmul>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f7f4 fcf3 	bl	8000bb8 <__aeabi_d2f>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c1d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c1dc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c1e0:	ee00 3a10 	vmov	s0, r3
 800c1e4:	f7f8 f950 	bl	8004488 <straight>
 800c1e8:	e01c      	b.n	800c224 <saitan5+0x6fc>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c1ea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c1ee:	f103 031c 	add.w	r3, r3, #28
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	f7f4 f99e 	bl	8000534 <__aeabi_i2d>
 800c1f8:	f04f 0200 	mov.w	r2, #0
 800c1fc:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <saitan5+0x79c>)
 800c1fe:	f7f4 fa03 	bl	8000608 <__aeabi_dmul>
 800c202:	4603      	mov	r3, r0
 800c204:	460c      	mov	r4, r1
 800c206:	4618      	mov	r0, r3
 800c208:	4621      	mov	r1, r4
 800c20a:	f7f4 fcd5 	bl	8000bb8 <__aeabi_d2f>
 800c20e:	4603      	mov	r3, r0
 800c210:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c214:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c218:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c21c:	ee00 3a10 	vmov	s0, r3
 800c220:	f7f8 f932 	bl	8004488 <straight>
    				in_L45();	cnt = cnt + 2;	accel_cnt = 0;
 800c224:	f7fa fb68 	bl	80068f8 <in_L45>
 800c228:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3302      	adds	r3, #2
 800c230:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	2300      	movs	r3, #0
 800c238:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c23c:	f102 021c 	add.w	r2, r2, #28
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	e2b7      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == straight_HSTEP){
 800c244:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c250:	3b10      	subs	r3, #16
 800c252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c256:	2b02      	cmp	r3, #2
 800c258:	d163      	bne.n	800c322 <saitan5+0x7fa>
 800c25a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	1c9a      	adds	r2, r3, #2
 800c262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c266:	3b10      	subs	r3, #16
 800c268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d158      	bne.n	800c322 <saitan5+0x7fa>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c270:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c274:	f103 031c 	add.w	r3, r3, #28
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	dd24      	ble.n	800c2c8 <saitan5+0x7a0>
 800c27e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c282:	f103 031c 	add.w	r3, r3, #28
 800c286:	6818      	ldr	r0, [r3, #0]
 800c288:	f7f4 f954 	bl	8000534 <__aeabi_i2d>
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	4b0c      	ldr	r3, [pc, #48]	; (800c2c4 <saitan5+0x79c>)
 800c292:	f7f4 f9b9 	bl	8000608 <__aeabi_dmul>
 800c296:	4603      	mov	r3, r0
 800c298:	460c      	mov	r4, r1
 800c29a:	4618      	mov	r0, r3
 800c29c:	4621      	mov	r1, r4
 800c29e:	f7f4 fc8b 	bl	8000bb8 <__aeabi_d2f>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c2a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c2ac:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c2b0:	ee00 3a10 	vmov	s0, r3
 800c2b4:	f7f8 f8e8 	bl	8004488 <straight>
 800c2b8:	e023      	b.n	800c302 <saitan5+0x7da>
 800c2ba:	bf00      	nop
 800c2bc:	20004380 	.word	0x20004380
 800c2c0:	3e99999a 	.word	0x3e99999a
 800c2c4:	40468000 	.word	0x40468000
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c2c8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c2cc:	f103 031c 	add.w	r3, r3, #28
 800c2d0:	6818      	ldr	r0, [r3, #0]
 800c2d2:	f7f4 f92f 	bl	8000534 <__aeabi_i2d>
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	4bb9      	ldr	r3, [pc, #740]	; (800c5c0 <saitan5+0xa98>)
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	f7f4 fc66 	bl	8000bb8 <__aeabi_d2f>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c2f2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c2f6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c2fa:	ee00 3a10 	vmov	s0, r3
 800c2fe:	f7f8 f8c3 	bl	8004488 <straight>
    				long_turn_R90();cnt = cnt + 3;	accel_cnt = 0;
 800c302:	f7f9 fc65 	bl	8005bd0 <long_turn_R90>
 800c306:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3303      	adds	r3, #3
 800c30e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	2300      	movs	r3, #0
 800c316:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c31a:	f102 021c 	add.w	r2, r2, #28
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	e248      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == straight_HSTEP){
 800c322:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c32e:	3b10      	subs	r3, #16
 800c330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c334:	2b04      	cmp	r3, #4
 800c336:	d15c      	bne.n	800c3f2 <saitan5+0x8ca>
 800c338:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	1c9a      	adds	r2, r3, #2
 800c340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c344:	3b10      	subs	r3, #16
 800c346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d151      	bne.n	800c3f2 <saitan5+0x8ca>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c34e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c352:	f103 031c 	add.w	r3, r3, #28
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	dd1d      	ble.n	800c398 <saitan5+0x870>
 800c35c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c360:	f103 031c 	add.w	r3, r3, #28
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	f7f4 f8e5 	bl	8000534 <__aeabi_i2d>
 800c36a:	f04f 0200 	mov.w	r2, #0
 800c36e:	4b94      	ldr	r3, [pc, #592]	; (800c5c0 <saitan5+0xa98>)
 800c370:	f7f4 f94a 	bl	8000608 <__aeabi_dmul>
 800c374:	4603      	mov	r3, r0
 800c376:	460c      	mov	r4, r1
 800c378:	4618      	mov	r0, r3
 800c37a:	4621      	mov	r1, r4
 800c37c:	f7f4 fc1c 	bl	8000bb8 <__aeabi_d2f>
 800c380:	4603      	mov	r3, r0
 800c382:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c386:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c38a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c38e:	ee00 3a10 	vmov	s0, r3
 800c392:	f7f8 f879 	bl	8004488 <straight>
 800c396:	e01c      	b.n	800c3d2 <saitan5+0x8aa>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c398:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c39c:	f103 031c 	add.w	r3, r3, #28
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f7f4 f8c7 	bl	8000534 <__aeabi_i2d>
 800c3a6:	f04f 0200 	mov.w	r2, #0
 800c3aa:	4b85      	ldr	r3, [pc, #532]	; (800c5c0 <saitan5+0xa98>)
 800c3ac:	f7f4 f92c 	bl	8000608 <__aeabi_dmul>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	f7f4 fbfe 	bl	8000bb8 <__aeabi_d2f>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c3c2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c3c6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c3ca:	ee00 3a10 	vmov	s0, r3
 800c3ce:	f7f8 f85b 	bl	8004488 <straight>
    				long_turn_L90();cnt = cnt + 3;	accel_cnt = 0;
 800c3d2:	f7f9 fda1 	bl	8005f18 <long_turn_L90>
 800c3d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3303      	adds	r3, #3
 800c3de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c3ea:	f102 021c 	add.w	r2, r2, #28
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	e1e0      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == turn_r90 && run_pattern[cnt+3] == straight_HSTEP){
 800c3f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3fe:	3b10      	subs	r3, #16
 800c400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c404:	2b02      	cmp	r3, #2
 800c406:	d167      	bne.n	800c4d8 <saitan5+0x9b0>
 800c408:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	1c9a      	adds	r2, r3, #2
 800c410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c414:	3b10      	subs	r3, #16
 800c416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d15c      	bne.n	800c4d8 <saitan5+0x9b0>
 800c41e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	1cda      	adds	r2, r3, #3
 800c426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c42a:	3b10      	subs	r3, #16
 800c42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d151      	bne.n	800c4d8 <saitan5+0x9b0>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c434:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c438:	f103 031c 	add.w	r3, r3, #28
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	dd1d      	ble.n	800c47e <saitan5+0x956>
 800c442:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c446:	f103 031c 	add.w	r3, r3, #28
 800c44a:	6818      	ldr	r0, [r3, #0]
 800c44c:	f7f4 f872 	bl	8000534 <__aeabi_i2d>
 800c450:	f04f 0200 	mov.w	r2, #0
 800c454:	4b5a      	ldr	r3, [pc, #360]	; (800c5c0 <saitan5+0xa98>)
 800c456:	f7f4 f8d7 	bl	8000608 <__aeabi_dmul>
 800c45a:	4603      	mov	r3, r0
 800c45c:	460c      	mov	r4, r1
 800c45e:	4618      	mov	r0, r3
 800c460:	4621      	mov	r1, r4
 800c462:	f7f4 fba9 	bl	8000bb8 <__aeabi_d2f>
 800c466:	4603      	mov	r3, r0
 800c468:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c46c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c470:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c474:	ee00 3a10 	vmov	s0, r3
 800c478:	f7f8 f806 	bl	8004488 <straight>
 800c47c:	e01c      	b.n	800c4b8 <saitan5+0x990>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c47e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c482:	f103 031c 	add.w	r3, r3, #28
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	f7f4 f854 	bl	8000534 <__aeabi_i2d>
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	4b4b      	ldr	r3, [pc, #300]	; (800c5c0 <saitan5+0xa98>)
 800c492:	f7f4 f8b9 	bl	8000608 <__aeabi_dmul>
 800c496:	4603      	mov	r3, r0
 800c498:	460c      	mov	r4, r1
 800c49a:	4618      	mov	r0, r3
 800c49c:	4621      	mov	r1, r4
 800c49e:	f7f4 fb8b 	bl	8000bb8 <__aeabi_d2f>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c4a8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c4ac:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c4b0:	ee00 3a10 	vmov	s0, r3
 800c4b4:	f7f7 ffe8 	bl	8004488 <straight>
    				long_turn_R180();cnt = cnt + 4;	accel_cnt = 0;
 800c4b8:	f7f9 fed6 	bl	8006268 <long_turn_R180>
 800c4bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c4d0:	f102 021c 	add.w	r2, r2, #28
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	e16d      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == turn_l90 && run_pattern[cnt+3] == straight_HSTEP){
 800c4d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4e4:	3b10      	subs	r3, #16
 800c4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d16a      	bne.n	800c5c4 <saitan5+0xa9c>
 800c4ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	1c9a      	adds	r2, r3, #2
 800c4f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4fa:	3b10      	subs	r3, #16
 800c4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c500:	2b04      	cmp	r3, #4
 800c502:	d15f      	bne.n	800c5c4 <saitan5+0xa9c>
 800c504:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	1cda      	adds	r2, r3, #3
 800c50c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c510:	3b10      	subs	r3, #16
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d154      	bne.n	800c5c4 <saitan5+0xa9c>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c51a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c51e:	f103 031c 	add.w	r3, r3, #28
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b02      	cmp	r3, #2
 800c526:	dd1d      	ble.n	800c564 <saitan5+0xa3c>
 800c528:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c52c:	f103 031c 	add.w	r3, r3, #28
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f7f3 ffff 	bl	8000534 <__aeabi_i2d>
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	4b21      	ldr	r3, [pc, #132]	; (800c5c0 <saitan5+0xa98>)
 800c53c:	f7f4 f864 	bl	8000608 <__aeabi_dmul>
 800c540:	4603      	mov	r3, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4618      	mov	r0, r3
 800c546:	4621      	mov	r1, r4
 800c548:	f7f4 fb36 	bl	8000bb8 <__aeabi_d2f>
 800c54c:	4603      	mov	r3, r0
 800c54e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c552:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c556:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c55a:	ee00 3a10 	vmov	s0, r3
 800c55e:	f7f7 ff93 	bl	8004488 <straight>
 800c562:	e01c      	b.n	800c59e <saitan5+0xa76>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c564:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c568:	f103 031c 	add.w	r3, r3, #28
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	f7f3 ffe1 	bl	8000534 <__aeabi_i2d>
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	4b12      	ldr	r3, [pc, #72]	; (800c5c0 <saitan5+0xa98>)
 800c578:	f7f4 f846 	bl	8000608 <__aeabi_dmul>
 800c57c:	4603      	mov	r3, r0
 800c57e:	460c      	mov	r4, r1
 800c580:	4618      	mov	r0, r3
 800c582:	4621      	mov	r1, r4
 800c584:	f7f4 fb18 	bl	8000bb8 <__aeabi_d2f>
 800c588:	4603      	mov	r3, r0
 800c58a:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c58e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c592:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c596:	ee00 3a10 	vmov	s0, r3
 800c59a:	f7f7 ff75 	bl	8004488 <straight>
    				long_turn_L180();cnt = cnt + 4;	accel_cnt = 0;
 800c59e:	f7fa f807 	bl	80065b0 <long_turn_L180>
 800c5a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c5b6:	f102 021c 	add.w	r2, r2, #28
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	e0fa      	b.n	800c7b4 <saitan5+0xc8c>
 800c5be:	bf00      	nop
 800c5c0:	40468000 	.word	0x40468000
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == turn_r90 && run_pattern[cnt+3] == diagonal_l){
 800c5c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5d0:	3b10      	subs	r3, #16
 800c5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d167      	bne.n	800c6aa <saitan5+0xb82>
 800c5da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	1c9a      	adds	r2, r3, #2
 800c5e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5e6:	3b10      	subs	r3, #16
 800c5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d15c      	bne.n	800c6aa <saitan5+0xb82>
 800c5f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	1cda      	adds	r2, r3, #3
 800c5f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5fc:	3b10      	subs	r3, #16
 800c5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c602:	2b06      	cmp	r3, #6
 800c604:	d151      	bne.n	800c6aa <saitan5+0xb82>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c606:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c60a:	f103 031c 	add.w	r3, r3, #28
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b02      	cmp	r3, #2
 800c612:	dd1d      	ble.n	800c650 <saitan5+0xb28>
 800c614:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c618:	f103 031c 	add.w	r3, r3, #28
 800c61c:	6818      	ldr	r0, [r3, #0]
 800c61e:	f7f3 ff89 	bl	8000534 <__aeabi_i2d>
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	4bc8      	ldr	r3, [pc, #800]	; (800c948 <saitan5+0xe20>)
 800c628:	f7f3 ffee 	bl	8000608 <__aeabi_dmul>
 800c62c:	4603      	mov	r3, r0
 800c62e:	460c      	mov	r4, r1
 800c630:	4618      	mov	r0, r3
 800c632:	4621      	mov	r1, r4
 800c634:	f7f4 fac0 	bl	8000bb8 <__aeabi_d2f>
 800c638:	4603      	mov	r3, r0
 800c63a:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c63e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c642:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c646:	ee00 3a10 	vmov	s0, r3
 800c64a:	f7f7 ff1d 	bl	8004488 <straight>
 800c64e:	e01c      	b.n	800c68a <saitan5+0xb62>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c650:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c654:	f103 031c 	add.w	r3, r3, #28
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	f7f3 ff6b 	bl	8000534 <__aeabi_i2d>
 800c65e:	f04f 0200 	mov.w	r2, #0
 800c662:	4bb9      	ldr	r3, [pc, #740]	; (800c948 <saitan5+0xe20>)
 800c664:	f7f3 ffd0 	bl	8000608 <__aeabi_dmul>
 800c668:	4603      	mov	r3, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	4618      	mov	r0, r3
 800c66e:	4621      	mov	r1, r4
 800c670:	f7f4 faa2 	bl	8000bb8 <__aeabi_d2f>
 800c674:	4603      	mov	r3, r0
 800c676:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c67a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c67e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c682:	ee00 3a10 	vmov	s0, r3
 800c686:	f7f7 feff 	bl	8004488 <straight>
    				in_R135(); 	cnt = cnt + 3;	accel_cnt = 0;
 800c68a:	f7fa ff39 	bl	8007500 <in_R135>
 800c68e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3303      	adds	r3, #3
 800c696:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	2300      	movs	r3, #0
 800c69e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c6a2:	f102 021c 	add.w	r2, r2, #28
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	e084      	b.n	800c7b4 <saitan5+0xc8c>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == turn_l90 && run_pattern[cnt+3] == diagonal_r){
 800c6aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6b6:	3b10      	subs	r3, #16
 800c6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d167      	bne.n	800c790 <saitan5+0xc68>
 800c6c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	1c9a      	adds	r2, r3, #2
 800c6c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6cc:	3b10      	subs	r3, #16
 800c6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d15c      	bne.n	800c790 <saitan5+0xc68>
 800c6d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	1cda      	adds	r2, r3, #3
 800c6de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6e2:	3b10      	subs	r3, #16
 800c6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e8:	2b05      	cmp	r3, #5
 800c6ea:	d151      	bne.n	800c790 <saitan5+0xc68>
					if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c6ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c6f0:	f103 031c 	add.w	r3, r3, #28
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	dd1d      	ble.n	800c736 <saitan5+0xc0e>
 800c6fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c6fe:	f103 031c 	add.w	r3, r3, #28
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	f7f3 ff16 	bl	8000534 <__aeabi_i2d>
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	4b8e      	ldr	r3, [pc, #568]	; (800c948 <saitan5+0xe20>)
 800c70e:	f7f3 ff7b 	bl	8000608 <__aeabi_dmul>
 800c712:	4603      	mov	r3, r0
 800c714:	460c      	mov	r4, r1
 800c716:	4618      	mov	r0, r3
 800c718:	4621      	mov	r1, r4
 800c71a:	f7f4 fa4d 	bl	8000bb8 <__aeabi_d2f>
 800c71e:	4603      	mov	r3, r0
 800c720:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c724:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c728:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c72c:	ee00 3a10 	vmov	s0, r3
 800c730:	f7f7 feaa 	bl	8004488 <straight>
 800c734:	e01c      	b.n	800c770 <saitan5+0xc48>
					else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c736:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c73a:	f103 031c 	add.w	r3, r3, #28
 800c73e:	6818      	ldr	r0, [r3, #0]
 800c740:	f7f3 fef8 	bl	8000534 <__aeabi_i2d>
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	4b7f      	ldr	r3, [pc, #508]	; (800c948 <saitan5+0xe20>)
 800c74a:	f7f3 ff5d 	bl	8000608 <__aeabi_dmul>
 800c74e:	4603      	mov	r3, r0
 800c750:	460c      	mov	r4, r1
 800c752:	4618      	mov	r0, r3
 800c754:	4621      	mov	r1, r4
 800c756:	f7f4 fa2f 	bl	8000bb8 <__aeabi_d2f>
 800c75a:	4603      	mov	r3, r0
 800c75c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c760:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c764:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c768:	ee00 3a10 	vmov	s0, r3
 800c76c:	f7f7 fe8c 	bl	8004488 <straight>
    				in_L135(); 	cnt = cnt + 3;	accel_cnt = 0;
 800c770:	f7fb f9be 	bl	8007af0 <in_L135>
 800c774:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3303      	adds	r3, #3
 800c77c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c788:	f102 021c 	add.w	r2, r2, #28
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	e011      	b.n	800c7b4 <saitan5+0xc8c>
    			}else{
    				accel_cnt = accel_cnt + 1;	cnt = cnt + 1;
 800c790:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c794:	f103 031c 	add.w	r3, r3, #28
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c7a0:	f102 021c 	add.w	r2, r2, #28
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c7b2:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800c7b4:	e277      	b.n	800cca6 <saitan5+0x117e>
    		case turn_r90:
				if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c7b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c7ba:	f103 031c 	add.w	r3, r3, #28
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	dd1d      	ble.n	800c800 <saitan5+0xcd8>
 800c7c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c7c8:	f103 031c 	add.w	r3, r3, #28
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f7f3 feb1 	bl	8000534 <__aeabi_i2d>
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	4b5c      	ldr	r3, [pc, #368]	; (800c948 <saitan5+0xe20>)
 800c7d8:	f7f3 ff16 	bl	8000608 <__aeabi_dmul>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	f7f4 f9e8 	bl	8000bb8 <__aeabi_d2f>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c7ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c7f2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c7f6:	ee00 3a10 	vmov	s0, r3
 800c7fa:	f7f7 fe45 	bl	8004488 <straight>
 800c7fe:	e01c      	b.n	800c83a <saitan5+0xd12>
				else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c800:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c804:	f103 031c 	add.w	r3, r3, #28
 800c808:	6818      	ldr	r0, [r3, #0]
 800c80a:	f7f3 fe93 	bl	8000534 <__aeabi_i2d>
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	4b4d      	ldr	r3, [pc, #308]	; (800c948 <saitan5+0xe20>)
 800c814:	f7f3 fef8 	bl	8000608 <__aeabi_dmul>
 800c818:	4603      	mov	r3, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4618      	mov	r0, r3
 800c81e:	4621      	mov	r1, r4
 800c820:	f7f4 f9ca 	bl	8000bb8 <__aeabi_d2f>
 800c824:	4603      	mov	r3, r0
 800c826:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c82a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c82e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c832:	ee00 3a10 	vmov	s0, r3
 800c836:	f7f7 fe27 	bl	8004488 <straight>
    			sla_R90();	cnt = cnt + 1;	accel_cnt = 0;
 800c83a:	f7f8 ffdd 	bl	80057f8 <sla_R90>
 800c83e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3301      	adds	r3, #1
 800c846:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	2300      	movs	r3, #0
 800c84e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c852:	f102 021c 	add.w	r2, r2, #28
 800c856:	6013      	str	r3, [r2, #0]
    			break;
 800c858:	e225      	b.n	800cca6 <saitan5+0x117e>
    		case turn_l90:
				if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c85a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c85e:	f103 031c 	add.w	r3, r3, #28
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b02      	cmp	r3, #2
 800c866:	dd1d      	ble.n	800c8a4 <saitan5+0xd7c>
 800c868:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c86c:	f103 031c 	add.w	r3, r3, #28
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	f7f3 fe5f 	bl	8000534 <__aeabi_i2d>
 800c876:	f04f 0200 	mov.w	r2, #0
 800c87a:	4b33      	ldr	r3, [pc, #204]	; (800c948 <saitan5+0xe20>)
 800c87c:	f7f3 fec4 	bl	8000608 <__aeabi_dmul>
 800c880:	4603      	mov	r3, r0
 800c882:	460c      	mov	r4, r1
 800c884:	4618      	mov	r0, r3
 800c886:	4621      	mov	r1, r4
 800c888:	f7f4 f996 	bl	8000bb8 <__aeabi_d2f>
 800c88c:	4603      	mov	r3, r0
 800c88e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c892:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c896:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c89a:	ee00 3a10 	vmov	s0, r3
 800c89e:	f7f7 fdf3 	bl	8004488 <straight>
 800c8a2:	e01c      	b.n	800c8de <saitan5+0xdb6>
				else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c8a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c8a8:	f103 031c 	add.w	r3, r3, #28
 800c8ac:	6818      	ldr	r0, [r3, #0]
 800c8ae:	f7f3 fe41 	bl	8000534 <__aeabi_i2d>
 800c8b2:	f04f 0200 	mov.w	r2, #0
 800c8b6:	4b24      	ldr	r3, [pc, #144]	; (800c948 <saitan5+0xe20>)
 800c8b8:	f7f3 fea6 	bl	8000608 <__aeabi_dmul>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	f7f4 f978 	bl	8000bb8 <__aeabi_d2f>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c8ce:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c8d2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c8d6:	ee00 3a10 	vmov	s0, r3
 800c8da:	f7f7 fdd5 	bl	8004488 <straight>
    			sla_L90();	cnt = cnt + 1;	accel_cnt = 0;
 800c8de:	f7f8 fda7 	bl	8005430 <sla_L90>
 800c8e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c8f6:	f102 021c 	add.w	r2, r2, #28
 800c8fa:	6013      	str	r3, [r2, #0]
    			break;
 800c8fc:	e1d3      	b.n	800cca6 <saitan5+0x117e>
    		case turn_l180:
				if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800c8fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c902:	f103 031c 	add.w	r3, r3, #28
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b02      	cmp	r3, #2
 800c90a:	dd1f      	ble.n	800c94c <saitan5+0xe24>
 800c90c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c910:	f103 031c 	add.w	r3, r3, #28
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f7f3 fe0d 	bl	8000534 <__aeabi_i2d>
 800c91a:	f04f 0200 	mov.w	r2, #0
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <saitan5+0xe20>)
 800c920:	f7f3 fe72 	bl	8000608 <__aeabi_dmul>
 800c924:	4603      	mov	r3, r0
 800c926:	460c      	mov	r4, r1
 800c928:	4618      	mov	r0, r3
 800c92a:	4621      	mov	r1, r4
 800c92c:	f7f4 f944 	bl	8000bb8 <__aeabi_d2f>
 800c930:	4603      	mov	r3, r0
 800c932:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c936:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c93a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800c93e:	ee00 3a10 	vmov	s0, r3
 800c942:	f7f7 fda1 	bl	8004488 <straight>
 800c946:	e01e      	b.n	800c986 <saitan5+0xe5e>
 800c948:	40468000 	.word	0x40468000
				else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800c94c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800c950:	f103 031c 	add.w	r3, r3, #28
 800c954:	6818      	ldr	r0, [r3, #0]
 800c956:	f7f3 fded 	bl	8000534 <__aeabi_i2d>
 800c95a:	f04f 0200 	mov.w	r2, #0
 800c95e:	4bb6      	ldr	r3, [pc, #728]	; (800cc38 <saitan5+0x1110>)
 800c960:	f7f3 fe52 	bl	8000608 <__aeabi_dmul>
 800c964:	4603      	mov	r3, r0
 800c966:	460c      	mov	r4, r1
 800c968:	4618      	mov	r0, r3
 800c96a:	4621      	mov	r1, r4
 800c96c:	f7f4 f924 	bl	8000bb8 <__aeabi_d2f>
 800c970:	4603      	mov	r3, r0
 800c972:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800c976:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c97a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800c97e:	ee00 3a10 	vmov	s0, r3
 800c982:	f7f7 fd81 	bl	8004488 <straight>
    			turn_L180(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;	accel_cnt = 0;
 800c986:	eddf 0aad 	vldr	s1, [pc, #692]	; 800cc3c <saitan5+0x1114>
 800c98a:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800cc40 <saitan5+0x1118>
 800c98e:	f7f8 fc3b 	bl	8005208 <turn_L180>
 800c992:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800c9a6:	f102 021c 	add.w	r2, r2, #28
 800c9aa:	6013      	str	r3, [r2, #0]
    			break;
 800c9ac:	e17b      	b.n	800cca6 <saitan5+0x117e>
    		case diagonal_r:
    			if(run_pattern[cnt+1] == straight_HSTEP ){
 800c9ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9ba:	3b10      	subs	r3, #16
 800c9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d109      	bne.n	800c9d8 <saitan5+0xeb0>
    				out_R45();	cnt = cnt + 2;
 800c9c4:	f7fa fc3c 	bl	8007240 <out_R45>
 800c9c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3302      	adds	r3, #2
 800c9d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	e166      	b.n	800cca6 <saitan5+0x117e>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == straight_HSTEP){
 800c9d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	1c5a      	adds	r2, r3, #1
 800c9e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9e4:	3b10      	subs	r3, #16
 800c9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d114      	bne.n	800ca18 <saitan5+0xef0>
 800c9ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	1c9a      	adds	r2, r3, #2
 800c9f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9fa:	3b10      	subs	r3, #16
 800c9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d109      	bne.n	800ca18 <saitan5+0xef0>
    				out_R135();	cnt = cnt + 3;
 800ca04:	f7fa ff18 	bl	8007838 <out_R135>
 800ca08:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3303      	adds	r3, #3
 800ca10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	e02e      	b.n	800ca76 <saitan5+0xf4e>
    			}else if(run_pattern[cnt+1] == turn_r90 && run_pattern[cnt+2] == diagonal_l){
 800ca18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	1c5a      	adds	r2, r3, #1
 800ca20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca24:	3b10      	subs	r3, #16
 800ca26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d114      	bne.n	800ca58 <saitan5+0xf30>
 800ca2e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	1c9a      	adds	r2, r3, #2
 800ca36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca3a:	3b10      	subs	r3, #16
 800ca3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca40:	2b06      	cmp	r3, #6
 800ca42:	d109      	bne.n	800ca58 <saitan5+0xf30>
    				v_R90();	cnt = cnt + 2;
 800ca44:	f7fb fb50 	bl	80080e8 <v_R90>
 800ca48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3302      	adds	r3, #2
 800ca50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e00e      	b.n	800ca76 <saitan5+0xf4e>
    			}else{
    				diagonal(SEARCH_ACCEL,0.5,0.5);	cnt = cnt + 1;
 800ca58:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800ca5c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800ca60:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800ca64:	f7fb fe70 	bl	8008748 <diagonal>
 800ca68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ca74:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800ca76:	e116      	b.n	800cca6 <saitan5+0x117e>
    		case diagonal_l:
    			if(run_pattern[cnt+1] == straight_HSTEP ){
 800ca78:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca84:	3b10      	subs	r3, #16
 800ca86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d109      	bne.n	800caa2 <saitan5+0xf7a>
    				out_L45();	cnt = cnt + 2;
 800ca8e:	f7fa f8d7 	bl	8006c40 <out_L45>
 800ca92:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3302      	adds	r3, #2
 800ca9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	e101      	b.n	800cca6 <saitan5+0x117e>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == straight_HSTEP){
 800caa2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800caae:	3b10      	subs	r3, #16
 800cab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d114      	bne.n	800cae2 <saitan5+0xfba>
 800cab8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	1c9a      	adds	r2, r3, #2
 800cac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cac4:	3b10      	subs	r3, #16
 800cac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d109      	bne.n	800cae2 <saitan5+0xfba>
    				out_L135();	cnt = cnt + 3;
 800cace:	f7fb f9af 	bl	8007e30 <out_L135>
 800cad2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3303      	adds	r3, #3
 800cada:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	e02e      	b.n	800cb40 <saitan5+0x1018>
    			}else if(run_pattern[cnt+1] == turn_l90 && run_pattern[cnt+2] == diagonal_r){
 800cae2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800caee:	3b10      	subs	r3, #16
 800caf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d114      	bne.n	800cb22 <saitan5+0xffa>
 800caf8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	1c9a      	adds	r2, r3, #2
 800cb00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb04:	3b10      	subs	r3, #16
 800cb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d109      	bne.n	800cb22 <saitan5+0xffa>
    				v_L90();	cnt = cnt + 2;
 800cb0e:	f7fb fc83 	bl	8008418 <v_L90>
 800cb12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3302      	adds	r3, #2
 800cb1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	e00e      	b.n	800cb40 <saitan5+0x1018>
    			}else{
    				diagonal(SEARCH_ACCEL,0.5,0.5);	cnt = cnt + 1;
 800cb22:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800cb26:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800cb2a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800cb2e:	f7fb fe0b 	bl	8008748 <diagonal>
 800cb32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800cb3e:	6013      	str	r3, [r2, #0]
    			}
    			break;
 800cb40:	e0b1      	b.n	800cca6 <saitan5+0x117e>
    		case spin_r90:
				if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800cb42:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cb46:	f103 031c 	add.w	r3, r3, #28
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	dd1d      	ble.n	800cb8c <saitan5+0x1064>
 800cb50:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cb54:	f103 031c 	add.w	r3, r3, #28
 800cb58:	6818      	ldr	r0, [r3, #0]
 800cb5a:	f7f3 fceb 	bl	8000534 <__aeabi_i2d>
 800cb5e:	f04f 0200 	mov.w	r2, #0
 800cb62:	4b35      	ldr	r3, [pc, #212]	; (800cc38 <saitan5+0x1110>)
 800cb64:	f7f3 fd50 	bl	8000608 <__aeabi_dmul>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	4621      	mov	r1, r4
 800cb70:	f7f4 f822 	bl	8000bb8 <__aeabi_d2f>
 800cb74:	4603      	mov	r3, r0
 800cb76:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800cb7a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800cb7e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800cb82:	ee00 3a10 	vmov	s0, r3
 800cb86:	f7f7 fc7f 	bl	8004488 <straight>
 800cb8a:	e01c      	b.n	800cbc6 <saitan5+0x109e>
				else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800cb8c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cb90:	f103 031c 	add.w	r3, r3, #28
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	f7f3 fccd 	bl	8000534 <__aeabi_i2d>
 800cb9a:	f04f 0200 	mov.w	r2, #0
 800cb9e:	4b26      	ldr	r3, [pc, #152]	; (800cc38 <saitan5+0x1110>)
 800cba0:	f7f3 fd32 	bl	8000608 <__aeabi_dmul>
 800cba4:	4603      	mov	r3, r0
 800cba6:	460c      	mov	r4, r1
 800cba8:	4618      	mov	r0, r3
 800cbaa:	4621      	mov	r1, r4
 800cbac:	f7f4 f804 	bl	8000bb8 <__aeabi_d2f>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800cbb6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800cbba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800cbbe:	ee00 3a10 	vmov	s0, r3
 800cbc2:	f7f7 fc61 	bl	8004488 <straight>

    			turn_R90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;	accel_cnt = 0;
 800cbc6:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800cc3c <saitan5+0x1114>
 800cbca:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800cc40 <saitan5+0x1118>
 800cbce:	f7f8 f8e3 	bl	8004d98 <turn_R90>
 800cbd2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800cbe6:	f102 021c 	add.w	r2, r2, #28
 800cbea:	6013      	str	r3, [r2, #0]
    			break;
 800cbec:	e05b      	b.n	800cca6 <saitan5+0x117e>
    		case spin_l90:
				if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800cbee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cbf2:	f103 031c 	add.w	r3, r3, #28
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	dd23      	ble.n	800cc44 <saitan5+0x111c>
 800cbfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cc00:	f103 031c 	add.w	r3, r3, #28
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f7f3 fc95 	bl	8000534 <__aeabi_i2d>
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	4b0a      	ldr	r3, [pc, #40]	; (800cc38 <saitan5+0x1110>)
 800cc10:	f7f3 fcfa 	bl	8000608 <__aeabi_dmul>
 800cc14:	4603      	mov	r3, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4618      	mov	r0, r3
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	f7f3 ffcc 	bl	8000bb8 <__aeabi_d2f>
 800cc20:	4603      	mov	r3, r0
 800cc22:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800cc26:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800cc2a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800cc2e:	ee00 3a10 	vmov	s0, r3
 800cc32:	f7f7 fc29 	bl	8004488 <straight>
 800cc36:	e022      	b.n	800cc7e <saitan5+0x1156>
 800cc38:	40468000 	.word	0x40468000
 800cc3c:	41490fd8 	.word	0x41490fd8
 800cc40:	437b53ce 	.word	0x437b53ce
				else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800cc44:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cc48:	f103 031c 	add.w	r3, r3, #28
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f7f3 fc71 	bl	8000534 <__aeabi_i2d>
 800cc52:	f04f 0200 	mov.w	r2, #0
 800cc56:	4b6e      	ldr	r3, [pc, #440]	; (800ce10 <saitan5+0x12e8>)
 800cc58:	f7f3 fcd6 	bl	8000608 <__aeabi_dmul>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	4618      	mov	r0, r3
 800cc62:	4621      	mov	r1, r4
 800cc64:	f7f3 ffa8 	bl	8000bb8 <__aeabi_d2f>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800cc6e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800cc72:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800cc76:	ee00 3a10 	vmov	s0, r3
 800cc7a:	f7f7 fc05 	bl	8004488 <straight>

    			turn_L90(SEARCH_TURN_ACCEL, SEARCH_TURN_SPEED);	cnt = cnt + 1;	accel_cnt = 0;
 800cc7e:	eddf 0a65 	vldr	s1, [pc, #404]	; 800ce14 <saitan5+0x12ec>
 800cc82:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800ce18 <saitan5+0x12f0>
 800cc86:	f7f8 f9a7 	bl	8004fd8 <turn_L90>
 800cc8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3301      	adds	r3, #1
 800cc92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800cc9e:	f102 021c 	add.w	r2, r2, #28
 800cca2:	6013      	str	r3, [r2, #0]
    			break;
 800cca4:	bf00      	nop
    while(run_pattern[cnt] != goal){
 800cca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ccaa:	3b10      	subs	r3, #16
 800ccac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	2bff      	cmp	r3, #255	; 0xff
 800ccb8:	f47f a9c1 	bne.w	800c03e <saitan5+0x516>
    	}
    }

    if(accel_cnt > 2)	straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL*1.5,1.0,0.5);
 800ccbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ccc0:	f103 031c 	add.w	r3, r3, #28
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	dd1d      	ble.n	800cd06 <saitan5+0x11de>
 800ccca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ccce:	f103 031c 	add.w	r3, r3, #28
 800ccd2:	6818      	ldr	r0, [r3, #0]
 800ccd4:	f7f3 fc2e 	bl	8000534 <__aeabi_i2d>
 800ccd8:	f04f 0200 	mov.w	r2, #0
 800ccdc:	4b4c      	ldr	r3, [pc, #304]	; (800ce10 <saitan5+0x12e8>)
 800ccde:	f7f3 fc93 	bl	8000608 <__aeabi_dmul>
 800cce2:	4603      	mov	r3, r0
 800cce4:	460c      	mov	r4, r1
 800cce6:	4618      	mov	r0, r3
 800cce8:	4621      	mov	r1, r4
 800ccea:	f7f3 ff65 	bl	8000bb8 <__aeabi_d2f>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800ccf4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ccf8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800ccfc:	ee00 3a10 	vmov	s0, r3
 800cd00:	f7f7 fbc2 	bl	8004488 <straight>
 800cd04:	e01c      	b.n	800cd40 <saitan5+0x1218>
	else				straight(HALF_SECTION*accel_cnt,SEARCH_ACCEL,0.5,0.5);
 800cd06:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cd0a:	f103 031c 	add.w	r3, r3, #28
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	f7f3 fc10 	bl	8000534 <__aeabi_i2d>
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	4b3d      	ldr	r3, [pc, #244]	; (800ce10 <saitan5+0x12e8>)
 800cd1a:	f7f3 fc75 	bl	8000608 <__aeabi_dmul>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	460c      	mov	r4, r1
 800cd22:	4618      	mov	r0, r3
 800cd24:	4621      	mov	r1, r4
 800cd26:	f7f3 ff47 	bl	8000bb8 <__aeabi_d2f>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800cd30:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800cd34:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800cd38:	ee00 3a10 	vmov	s0, r3
 800cd3c:	f7f7 fba4 	bl	8004488 <straight>
	accel_cnt = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800cd46:	f102 021c 	add.w	r2, r2, #28
 800cd4a:	6013      	str	r3, [r2, #0]

    if(goal_size > 1){
 800cd4c:	f107 0308 	add.w	r3, r7, #8
 800cd50:	3b04      	subs	r3, #4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	dd41      	ble.n	800cddc <saitan5+0x12b4>
		straight(SECTION+7.4,SEARCH_ACCEL,0.5,0.0);
 800cd58:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ce1c <saitan5+0x12f4>
 800cd5c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800cd60:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800cd64:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800ce20 <saitan5+0x12f8>
 800cd68:	f7f7 fb8e 	bl	8004488 <straight>
		switch(mypos.dir){
 800cd6c:	4b2d      	ldr	r3, [pc, #180]	; (800ce24 <saitan5+0x12fc>)
 800cd6e:	791b      	ldrb	r3, [r3, #4]
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d833      	bhi.n	800cddc <saitan5+0x12b4>
 800cd74:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <saitan5+0x1254>)
 800cd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7a:	bf00      	nop
 800cd7c:	0800cd8d 	.word	0x0800cd8d
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800cdb5 	.word	0x0800cdb5
 800cd88:	0800cdc9 	.word	0x0800cdc9
			case north:
				mypos.y++;
 800cd8c:	4b25      	ldr	r3, [pc, #148]	; (800ce24 <saitan5+0x12fc>)
 800cd8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	3301      	adds	r3, #1
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	b21a      	sxth	r2, r3
 800cd9a:	4b22      	ldr	r3, [pc, #136]	; (800ce24 <saitan5+0x12fc>)
 800cd9c:	805a      	strh	r2, [r3, #2]
				break;
 800cd9e:	e01d      	b.n	800cddc <saitan5+0x12b4>
			case east:
				mypos.x++;
 800cda0:	4b20      	ldr	r3, [pc, #128]	; (800ce24 <saitan5+0x12fc>)
 800cda2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	3301      	adds	r3, #1
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	b21a      	sxth	r2, r3
 800cdae:	4b1d      	ldr	r3, [pc, #116]	; (800ce24 <saitan5+0x12fc>)
 800cdb0:	801a      	strh	r2, [r3, #0]
				break;
 800cdb2:	e013      	b.n	800cddc <saitan5+0x12b4>
			case south:
				mypos.y--;
 800cdb4:	4b1b      	ldr	r3, [pc, #108]	; (800ce24 <saitan5+0x12fc>)
 800cdb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	b21a      	sxth	r2, r3
 800cdc2:	4b18      	ldr	r3, [pc, #96]	; (800ce24 <saitan5+0x12fc>)
 800cdc4:	805a      	strh	r2, [r3, #2]
				break;
 800cdc6:	e009      	b.n	800cddc <saitan5+0x12b4>
			case west:
				mypos.x--;
 800cdc8:	4b16      	ldr	r3, [pc, #88]	; (800ce24 <saitan5+0x12fc>)
 800cdca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	b21a      	sxth	r2, r3
 800cdd6:	4b13      	ldr	r3, [pc, #76]	; (800ce24 <saitan5+0x12fc>)
 800cdd8:	801a      	strh	r2, [r3, #0]
				break;
 800cdda:	bf00      	nop
		}
    }
	accel = 0.0; max_speed = 0.0; tar_speed = 0.0;
 800cddc:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <saitan5+0x1300>)
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <saitan5+0x1304>)
 800cde6:	f04f 0200 	mov.w	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <saitan5+0x1308>)
 800cdee:	f04f 0200 	mov.w	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]
	HAL_Delay(300);
 800cdf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cdf8:	f000 fe88 	bl	800db0c <HAL_Delay>

    run_mode = NON_CON_MODE;
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	; (800ce34 <saitan5+0x130c>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
}
 800ce02:	bf00      	nop
 800ce04:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd90      	pop	{r4, r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	40468000 	.word	0x40468000
 800ce14:	41490fd8 	.word	0x41490fd8
 800ce18:	437b53ce 	.word	0x437b53ce
 800ce1c:	00000000 	.word	0x00000000
 800ce20:	42c2cccd 	.word	0x42c2cccd
 800ce24:	20004380 	.word	0x20004380
 800ce28:	2000a16c 	.word	0x2000a16c
 800ce2c:	2000d05c 	.word	0x2000d05c
 800ce30:	2000d198 	.word	0x2000d198
 800ce34:	2000a170 	.word	0x2000a170

0800ce38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800ce3c:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce3e:	4a18      	ldr	r2, [pc, #96]	; (800cea0 <MX_SPI1_Init+0x68>)
 800ce40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ce42:	4b16      	ldr	r3, [pc, #88]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce44:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ce48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ce4a:	4b14      	ldr	r3, [pc, #80]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ce50:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ce56:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce58:	2202      	movs	r2, #2
 800ce5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ce62:	4b0e      	ldr	r3, [pc, #56]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ce6a:	4b0c      	ldr	r3, [pc, #48]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce6c:	2218      	movs	r2, #24
 800ce6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ce70:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ce76:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce7c:	4b07      	ldr	r3, [pc, #28]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ce82:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce84:	220a      	movs	r2, #10
 800ce86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ce88:	4804      	ldr	r0, [pc, #16]	; (800ce9c <MX_SPI1_Init+0x64>)
 800ce8a:	f002 ffb7 	bl	800fdfc <HAL_SPI_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800ce94:	f7f5 fd84 	bl	80029a0 <Error_Handler>
  }

}
 800ce98:	bf00      	nop
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	200123bc 	.word	0x200123bc
 800cea0:	40013000 	.word	0x40013000

0800cea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08a      	sub	sp, #40	; 0x28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceac:	f107 0314 	add.w	r3, r7, #20
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	605a      	str	r2, [r3, #4]
 800ceb6:	609a      	str	r2, [r3, #8]
 800ceb8:	60da      	str	r2, [r3, #12]
 800ceba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a57      	ldr	r2, [pc, #348]	; (800d020 <HAL_SPI_MspInit+0x17c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	f040 80a8 	bne.w	800d018 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cec8:	2300      	movs	r3, #0
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	4b55      	ldr	r3, [pc, #340]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800cece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced0:	4a54      	ldr	r2, [pc, #336]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800ced2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ced6:	6453      	str	r3, [r2, #68]	; 0x44
 800ced8:	4b52      	ldr	r3, [pc, #328]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800ceda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cedc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cee0:	613b      	str	r3, [r7, #16]
 800cee2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	4b4e      	ldr	r3, [pc, #312]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceec:	4a4d      	ldr	r2, [pc, #308]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	6313      	str	r3, [r2, #48]	; 0x30
 800cef4:	4b4b      	ldr	r3, [pc, #300]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800cef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef8:	f003 0301 	and.w	r3, r3, #1
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf00:	2300      	movs	r3, #0
 800cf02:	60bb      	str	r3, [r7, #8]
 800cf04:	4b47      	ldr	r3, [pc, #284]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800cf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf08:	4a46      	ldr	r2, [pc, #280]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800cf0a:	f043 0302 	orr.w	r3, r3, #2
 800cf0e:	6313      	str	r3, [r2, #48]	; 0x30
 800cf10:	4b44      	ldr	r3, [pc, #272]	; (800d024 <HAL_SPI_MspInit+0x180>)
 800cf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf14:	f003 0302 	and.w	r3, r3, #2
 800cf18:	60bb      	str	r3, [r7, #8]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cf1c:	2320      	movs	r3, #32
 800cf1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf20:	2302      	movs	r3, #2
 800cf22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf2c:	2305      	movs	r3, #5
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	4619      	mov	r1, r3
 800cf36:	483c      	ldr	r0, [pc, #240]	; (800d028 <HAL_SPI_MspInit+0x184>)
 800cf38:	f002 f956 	bl	800f1e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800cf3c:	2330      	movs	r3, #48	; 0x30
 800cf3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf40:	2302      	movs	r3, #2
 800cf42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf44:	2300      	movs	r3, #0
 800cf46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cf4c:	2305      	movs	r3, #5
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf50:	f107 0314 	add.w	r3, r7, #20
 800cf54:	4619      	mov	r1, r3
 800cf56:	4835      	ldr	r0, [pc, #212]	; (800d02c <HAL_SPI_MspInit+0x188>)
 800cf58:	f002 f946 	bl	800f1e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800cf5c:	4b34      	ldr	r3, [pc, #208]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf5e:	4a35      	ldr	r2, [pc, #212]	; (800d034 <HAL_SPI_MspInit+0x190>)
 800cf60:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800cf62:	4b33      	ldr	r3, [pc, #204]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf64:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800cf68:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cf6a:	4b31      	ldr	r3, [pc, #196]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cf70:	4b2f      	ldr	r3, [pc, #188]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cf76:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf7c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cf7e:	4b2c      	ldr	r3, [pc, #176]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cf84:	4b2a      	ldr	r3, [pc, #168]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800cf8a:	4b29      	ldr	r3, [pc, #164]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800cf90:	4b27      	ldr	r3, [pc, #156]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cf96:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cf98:	4b25      	ldr	r3, [pc, #148]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800cf9e:	4824      	ldr	r0, [pc, #144]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cfa0:	f001 face 	bl	800e540 <HAL_DMA_Init>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800cfaa:	f7f5 fcf9 	bl	80029a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a1f      	ldr	r2, [pc, #124]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cfb2:	64da      	str	r2, [r3, #76]	; 0x4c
 800cfb4:	4a1e      	ldr	r2, [pc, #120]	; (800d030 <HAL_SPI_MspInit+0x18c>)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800cfba:	4b1f      	ldr	r3, [pc, #124]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfbc:	4a1f      	ldr	r2, [pc, #124]	; (800d03c <HAL_SPI_MspInit+0x198>)
 800cfbe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800cfc0:	4b1d      	ldr	r3, [pc, #116]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfc2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800cfc6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cfc8:	4b1b      	ldr	r3, [pc, #108]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfca:	2240      	movs	r2, #64	; 0x40
 800cfcc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cfce:	4b1a      	ldr	r3, [pc, #104]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cfd4:	4b18      	ldr	r3, [pc, #96]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfda:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cfdc:	4b16      	ldr	r3, [pc, #88]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800cfe8:	4b13      	ldr	r3, [pc, #76]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800cfee:	4b12      	ldr	r3, [pc, #72]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cff0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cff4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cff6:	4b10      	ldr	r3, [pc, #64]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800cffc:	480e      	ldr	r0, [pc, #56]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800cffe:	f001 fa9f 	bl	800e540 <HAL_DMA_Init>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 800d008:	f7f5 fcca 	bl	80029a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a0a      	ldr	r2, [pc, #40]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800d010:	649a      	str	r2, [r3, #72]	; 0x48
 800d012:	4a09      	ldr	r2, [pc, #36]	; (800d038 <HAL_SPI_MspInit+0x194>)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800d018:	bf00      	nop
 800d01a:	3728      	adds	r7, #40	; 0x28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	40013000 	.word	0x40013000
 800d024:	40023800 	.word	0x40023800
 800d028:	40020000 	.word	0x40020000
 800d02c:	40020400 	.word	0x40020400
 800d030:	20012414 	.word	0x20012414
 800d034:	40026440 	.word	0x40026440
 800d038:	20012474 	.word	0x20012474
 800d03c:	40026458 	.word	0x40026458

0800d040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <HAL_MspInit+0x4c>)
 800d04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d04e:	4a0f      	ldr	r2, [pc, #60]	; (800d08c <HAL_MspInit+0x4c>)
 800d050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d054:	6453      	str	r3, [r2, #68]	; 0x44
 800d056:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <HAL_MspInit+0x4c>)
 800d058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d05e:	607b      	str	r3, [r7, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d062:	2300      	movs	r3, #0
 800d064:	603b      	str	r3, [r7, #0]
 800d066:	4b09      	ldr	r3, [pc, #36]	; (800d08c <HAL_MspInit+0x4c>)
 800d068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06a:	4a08      	ldr	r2, [pc, #32]	; (800d08c <HAL_MspInit+0x4c>)
 800d06c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d070:	6413      	str	r3, [r2, #64]	; 0x40
 800d072:	4b06      	ldr	r3, [pc, #24]	; (800d08c <HAL_MspInit+0x4c>)
 800d074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	40023800 	.word	0x40023800

0800d090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d090:	b480      	push	{r7}
 800d092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d094:	bf00      	nop
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d09e:	b480      	push	{r7}
 800d0a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d0a2:	e7fe      	b.n	800d0a2 <HardFault_Handler+0x4>

0800d0a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d0a8:	e7fe      	b.n	800d0a8 <MemManage_Handler+0x4>

0800d0aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d0ae:	e7fe      	b.n	800d0ae <BusFault_Handler+0x4>

0800d0b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d0b4:	e7fe      	b.n	800d0b4 <UsageFault_Handler+0x4>

0800d0b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d0ba:	bf00      	nop
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d0c8:	bf00      	nop
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d0d6:	bf00      	nop
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d0e4:	f000 fcf2 	bl	800dacc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d0e8:	bf00      	nop
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800d0f0:	4804      	ldr	r0, [pc, #16]	; (800d104 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800d0f2:	f003 fca1 	bl	8010a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  get_speed();
 800d0f6:	f7f6 fb9b 	bl	8003830 <get_speed>
  interrupt_main();
 800d0fa:	f7f5 fda5 	bl	8002c48 <interrupt_main>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d0fe:	bf00      	nop
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20012514 	.word	0x20012514

0800d108 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800d10c:	4814      	ldr	r0, [pc, #80]	; (800d160 <TIM4_IRQHandler+0x58>)
 800d10e:	f003 fc93 	bl	8010a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  static int cnt = 0;
  if(cnt == 0){
 800d112:	4b14      	ldr	r3, [pc, #80]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d105      	bne.n	800d126 <TIM4_IRQHandler+0x1e>
	  IMU_read_DMA();	cnt = 1;
 800d11a:	f7f6 ffc1 	bl	80040a0 <IMU_read_DMA>
 800d11e:	4b11      	ldr	r3, [pc, #68]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d120:	2201      	movs	r2, #1
 800d122:	601a      	str	r2, [r3, #0]
  }else if(cnt == 3){
	  cnt = 0;
  }

  /* USER CODE END TIM4_IRQn 1 */
}
 800d124:	e01a      	b.n	800d15c <TIM4_IRQHandler+0x54>
  }else if(cnt == 1){
 800d126:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d105      	bne.n	800d13a <TIM4_IRQHandler+0x32>
	  LENC_read_DMA(); 	cnt = 2;
 800d12e:	f7f6 ffe7 	bl	8004100 <LENC_read_DMA>
 800d132:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d134:	2202      	movs	r2, #2
 800d136:	601a      	str	r2, [r3, #0]
}
 800d138:	e010      	b.n	800d15c <TIM4_IRQHandler+0x54>
  }else if(cnt == 2){
 800d13a:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d105      	bne.n	800d14e <TIM4_IRQHandler+0x46>
	  RENC_read_DMA();	cnt = 3;
 800d142:	f7f6 ffc5 	bl	80040d0 <RENC_read_DMA>
 800d146:	4b07      	ldr	r3, [pc, #28]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d148:	2203      	movs	r2, #3
 800d14a:	601a      	str	r2, [r3, #0]
}
 800d14c:	e006      	b.n	800d15c <TIM4_IRQHandler+0x54>
  }else if(cnt == 3){
 800d14e:	4b05      	ldr	r3, [pc, #20]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b03      	cmp	r3, #3
 800d154:	d102      	bne.n	800d15c <TIM4_IRQHandler+0x54>
	  cnt = 0;
 800d156:	4b03      	ldr	r3, [pc, #12]	; (800d164 <TIM4_IRQHandler+0x5c>)
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
}
 800d15c:	bf00      	nop
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200124d4 	.word	0x200124d4
 800d164:	20000224 	.word	0x20000224

0800d168 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d16c:	4803      	ldr	r0, [pc, #12]	; (800d17c <TIM5_IRQHandler+0x14>)
 800d16e:	f003 fc63 	bl	8010a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  ir_sensor_interrupt();
 800d172:	f7f4 fd7b 	bl	8001c6c <ir_sensor_interrupt>


  /* USER CODE END TIM5_IRQn 1 */
}
 800d176:	bf00      	nop
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20012554 	.word	0x20012554

0800d180 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d184:	4802      	ldr	r0, [pc, #8]	; (800d190 <DMA2_Stream0_IRQHandler+0x10>)
 800d186:	f001 fae1 	bl	800e74c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d18a:	bf00      	nop
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	2000027c 	.word	0x2000027c

0800d194 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800d198:	4802      	ldr	r0, [pc, #8]	; (800d1a4 <DMA2_Stream2_IRQHandler+0x10>)
 800d19a:	f001 fad7 	bl	800e74c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d19e:	bf00      	nop
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20012414 	.word	0x20012414

0800d1a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800d1ac:	4802      	ldr	r0, [pc, #8]	; (800d1b8 <DMA2_Stream3_IRQHandler+0x10>)
 800d1ae:	f001 facd 	bl	800e74c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800d1b2:	bf00      	nop
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20012474 	.word	0x20012474

0800d1bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	e00a      	b.n	800d1e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d1ce:	f3af 8000 	nop.w
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	1c5a      	adds	r2, r3, #1
 800d1d8:	60ba      	str	r2, [r7, #8]
 800d1da:	b2ca      	uxtb	r2, r1
 800d1dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	dbf0      	blt.n	800d1ce <_read+0x12>
	}

return len;
 800d1ec:	687b      	ldr	r3, [r7, #4]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3718      	adds	r7, #24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b083      	sub	sp, #12
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
	return -1;
 800d1fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d20e:	b480      	push	{r7}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d21e:	605a      	str	r2, [r3, #4]
	return 0;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	370c      	adds	r7, #12
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <_isatty>:

int _isatty(int file)
{
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
	return 1;
 800d236:	2301      	movs	r3, #1
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
	return 0;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
	...

0800d260 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d268:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <_sbrk+0x50>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <_sbrk+0x16>
		heap_end = &end;
 800d270:	4b0f      	ldr	r3, [pc, #60]	; (800d2b0 <_sbrk+0x50>)
 800d272:	4a10      	ldr	r2, [pc, #64]	; (800d2b4 <_sbrk+0x54>)
 800d274:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d276:	4b0e      	ldr	r3, [pc, #56]	; (800d2b0 <_sbrk+0x50>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d27c:	4b0c      	ldr	r3, [pc, #48]	; (800d2b0 <_sbrk+0x50>)
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4413      	add	r3, r2
 800d284:	466a      	mov	r2, sp
 800d286:	4293      	cmp	r3, r2
 800d288:	d907      	bls.n	800d29a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d28a:	f004 fe87 	bl	8011f9c <__errno>
 800d28e:	4602      	mov	r2, r0
 800d290:	230c      	movs	r3, #12
 800d292:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d294:	f04f 33ff 	mov.w	r3, #4294967295
 800d298:	e006      	b.n	800d2a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <_sbrk+0x50>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	4a03      	ldr	r2, [pc, #12]	; (800d2b0 <_sbrk+0x50>)
 800d2a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20000228 	.word	0x20000228
 800d2b4:	20012680 	.word	0x20012680

0800d2b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d2bc:	4b08      	ldr	r3, [pc, #32]	; (800d2e0 <SystemInit+0x28>)
 800d2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c2:	4a07      	ldr	r2, [pc, #28]	; (800d2e0 <SystemInit+0x28>)
 800d2c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d2cc:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <SystemInit+0x28>)
 800d2ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d2d2:	609a      	str	r2, [r3, #8]
#endif
}
 800d2d4:	bf00      	nop
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	e000ed00 	.word	0xe000ed00

0800d2e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d2ea:	f107 0308 	add.w	r3, r7, #8
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	605a      	str	r2, [r3, #4]
 800d2f4:	609a      	str	r2, [r3, #8]
 800d2f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800d300:	4b1d      	ldr	r3, [pc, #116]	; (800d378 <MX_TIM2_Init+0x94>)
 800d302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 800d308:	4b1b      	ldr	r3, [pc, #108]	; (800d378 <MX_TIM2_Init+0x94>)
 800d30a:	2227      	movs	r2, #39	; 0x27
 800d30c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d30e:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <MX_TIM2_Init+0x94>)
 800d310:	2200      	movs	r2, #0
 800d312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800d314:	4b18      	ldr	r3, [pc, #96]	; (800d378 <MX_TIM2_Init+0x94>)
 800d316:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d31a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d31c:	4b16      	ldr	r3, [pc, #88]	; (800d378 <MX_TIM2_Init+0x94>)
 800d31e:	2200      	movs	r2, #0
 800d320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d322:	4b15      	ldr	r3, [pc, #84]	; (800d378 <MX_TIM2_Init+0x94>)
 800d324:	2200      	movs	r2, #0
 800d326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d328:	4813      	ldr	r0, [pc, #76]	; (800d378 <MX_TIM2_Init+0x94>)
 800d32a:	f003 fa13 	bl	8010754 <HAL_TIM_Base_Init>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800d334:	f7f5 fb34 	bl	80029a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d33c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d33e:	f107 0308 	add.w	r3, r7, #8
 800d342:	4619      	mov	r1, r3
 800d344:	480c      	ldr	r0, [pc, #48]	; (800d378 <MX_TIM2_Init+0x94>)
 800d346:	f003 fd45 	bl	8010dd4 <HAL_TIM_ConfigClockSource>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800d350:	f7f5 fb26 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d354:	2300      	movs	r3, #0
 800d356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d358:	2300      	movs	r3, #0
 800d35a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d35c:	463b      	mov	r3, r7
 800d35e:	4619      	mov	r1, r3
 800d360:	4805      	ldr	r0, [pc, #20]	; (800d378 <MX_TIM2_Init+0x94>)
 800d362:	f004 f8ed 	bl	8011540 <HAL_TIMEx_MasterConfigSynchronization>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800d36c:	f7f5 fb18 	bl	80029a0 <Error_Handler>
  }

}
 800d370:	bf00      	nop
 800d372:	3718      	adds	r7, #24
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	200125d4 	.word	0x200125d4

0800d37c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08e      	sub	sp, #56	; 0x38
 800d380:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	605a      	str	r2, [r3, #4]
 800d38c:	609a      	str	r2, [r3, #8]
 800d38e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d390:	f107 0320 	add.w	r3, r7, #32
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
 800d398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d39a:	1d3b      	adds	r3, r7, #4
 800d39c:	2200      	movs	r2, #0
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	605a      	str	r2, [r3, #4]
 800d3a2:	609a      	str	r2, [r3, #8]
 800d3a4:	60da      	str	r2, [r3, #12]
 800d3a6:	611a      	str	r2, [r3, #16]
 800d3a8:	615a      	str	r2, [r3, #20]
 800d3aa:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800d3ac:	4b3d      	ldr	r3, [pc, #244]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3ae:	4a3e      	ldr	r2, [pc, #248]	; (800d4a8 <MX_TIM3_Init+0x12c>)
 800d3b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d3b2:	4b3c      	ldr	r3, [pc, #240]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3b8:	4b3a      	ldr	r3, [pc, #232]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800d3be:	4b39      	ldr	r3, [pc, #228]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d3c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3c6:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3cc:	4b35      	ldr	r3, [pc, #212]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d3d2:	4834      	ldr	r0, [pc, #208]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3d4:	f003 f9be 	bl	8010754 <HAL_TIM_Base_Init>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800d3de:	f7f5 fadf 	bl	80029a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d3e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	482d      	ldr	r0, [pc, #180]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d3f0:	f003 fcf0 	bl	8010dd4 <HAL_TIM_ConfigClockSource>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800d3fa:	f7f5 fad1 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d3fe:	4829      	ldr	r0, [pc, #164]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d400:	f003 fa70 	bl	80108e4 <HAL_TIM_PWM_Init>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d001      	beq.n	800d40e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800d40a:	f7f5 fac9 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d40e:	2300      	movs	r3, #0
 800d410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d412:	2300      	movs	r3, #0
 800d414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d416:	f107 0320 	add.w	r3, r7, #32
 800d41a:	4619      	mov	r1, r3
 800d41c:	4821      	ldr	r0, [pc, #132]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d41e:	f004 f88f 	bl	8011540 <HAL_TIMEx_MasterConfigSynchronization>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800d428:	f7f5 faba 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d42c:	2360      	movs	r3, #96	; 0x60
 800d42e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d438:	2300      	movs	r3, #0
 800d43a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d43c:	1d3b      	adds	r3, r7, #4
 800d43e:	2200      	movs	r2, #0
 800d440:	4619      	mov	r1, r3
 800d442:	4818      	ldr	r0, [pc, #96]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d444:	f003 fc00 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800d44e:	f7f5 faa7 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d452:	1d3b      	adds	r3, r7, #4
 800d454:	2204      	movs	r2, #4
 800d456:	4619      	mov	r1, r3
 800d458:	4812      	ldr	r0, [pc, #72]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d45a:	f003 fbf5 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800d464:	f7f5 fa9c 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d468:	1d3b      	adds	r3, r7, #4
 800d46a:	2208      	movs	r2, #8
 800d46c:	4619      	mov	r1, r3
 800d46e:	480d      	ldr	r0, [pc, #52]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d470:	f003 fbea 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800d47a:	f7f5 fa91 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d47e:	1d3b      	adds	r3, r7, #4
 800d480:	220c      	movs	r2, #12
 800d482:	4619      	mov	r1, r3
 800d484:	4807      	ldr	r0, [pc, #28]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d486:	f003 fbdf 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800d490:	f7f5 fa86 	bl	80029a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800d494:	4803      	ldr	r0, [pc, #12]	; (800d4a4 <MX_TIM3_Init+0x128>)
 800d496:	f000 f9d1 	bl	800d83c <HAL_TIM_MspPostInit>

}
 800d49a:	bf00      	nop
 800d49c:	3738      	adds	r7, #56	; 0x38
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20012594 	.word	0x20012594
 800d4a8:	40000400 	.word	0x40000400

0800d4ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08e      	sub	sp, #56	; 0x38
 800d4b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d4b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	605a      	str	r2, [r3, #4]
 800d4bc:	609a      	str	r2, [r3, #8]
 800d4be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4c0:	f107 0320 	add.w	r3, r7, #32
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	601a      	str	r2, [r3, #0]
 800d4c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d4ca:	1d3b      	adds	r3, r7, #4
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	605a      	str	r2, [r3, #4]
 800d4d2:	609a      	str	r2, [r3, #8]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	611a      	str	r2, [r3, #16]
 800d4d8:	615a      	str	r2, [r3, #20]
 800d4da:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800d4dc:	4b2b      	ldr	r3, [pc, #172]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4de:	4a2c      	ldr	r2, [pc, #176]	; (800d590 <MX_TIM4_Init+0xe4>)
 800d4e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 800d4e2:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4e4:	2209      	movs	r2, #9
 800d4e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4e8:	4b28      	ldr	r3, [pc, #160]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800d4ee:	4b27      	ldr	r3, [pc, #156]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d4f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4f6:	4b25      	ldr	r3, [pc, #148]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4fc:	4b23      	ldr	r3, [pc, #140]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800d502:	4822      	ldr	r0, [pc, #136]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d504:	f003 f926 	bl	8010754 <HAL_TIM_Base_Init>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800d50e:	f7f5 fa47 	bl	80029a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d516:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800d518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d51c:	4619      	mov	r1, r3
 800d51e:	481b      	ldr	r0, [pc, #108]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d520:	f003 fc58 	bl	8010dd4 <HAL_TIM_ConfigClockSource>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d001      	beq.n	800d52e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800d52a:	f7f5 fa39 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800d52e:	4817      	ldr	r0, [pc, #92]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d530:	f003 f9d8 	bl	80108e4 <HAL_TIM_PWM_Init>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800d53a:	f7f5 fa31 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d53e:	2300      	movs	r3, #0
 800d540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d542:	2300      	movs	r3, #0
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d546:	f107 0320 	add.w	r3, r7, #32
 800d54a:	4619      	mov	r1, r3
 800d54c:	480f      	ldr	r0, [pc, #60]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d54e:	f003 fff7 	bl	8011540 <HAL_TIMEx_MasterConfigSynchronization>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d001      	beq.n	800d55c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800d558:	f7f5 fa22 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d55c:	2360      	movs	r3, #96	; 0x60
 800d55e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 800d560:	2304      	movs	r3, #4
 800d562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d564:	2300      	movs	r3, #0
 800d566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d568:	2300      	movs	r3, #0
 800d56a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d56c:	1d3b      	adds	r3, r7, #4
 800d56e:	2200      	movs	r2, #0
 800d570:	4619      	mov	r1, r3
 800d572:	4806      	ldr	r0, [pc, #24]	; (800d58c <MX_TIM4_Init+0xe0>)
 800d574:	f003 fb68 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800d57e:	f7f5 fa0f 	bl	80029a0 <Error_Handler>
  }

}
 800d582:	bf00      	nop
 800d584:	3738      	adds	r7, #56	; 0x38
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	200124d4 	.word	0x200124d4
 800d590:	40000800 	.word	0x40000800

0800d594 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	; 0x28
 800d598:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d59a:	f107 0320 	add.w	r3, r7, #32
 800d59e:	2200      	movs	r2, #0
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d5a4:	1d3b      	adds	r3, r7, #4
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	605a      	str	r2, [r3, #4]
 800d5ac:	609a      	str	r2, [r3, #8]
 800d5ae:	60da      	str	r2, [r3, #12]
 800d5b0:	611a      	str	r2, [r3, #16]
 800d5b2:	615a      	str	r2, [r3, #20]
 800d5b4:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800d5b6:	4b2e      	ldr	r3, [pc, #184]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5b8:	4a2e      	ldr	r2, [pc, #184]	; (800d674 <MX_TIM5_Init+0xe0>)
 800d5ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 800d5bc:	4b2c      	ldr	r3, [pc, #176]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5be:	2207      	movs	r2, #7
 800d5c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5c2:	4b2b      	ldr	r3, [pc, #172]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800d5c8:	4b29      	ldr	r3, [pc, #164]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d5ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d5d0:	4b27      	ldr	r3, [pc, #156]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5d6:	4b26      	ldr	r3, [pc, #152]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d5dc:	4824      	ldr	r0, [pc, #144]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5de:	f003 f981 	bl	80108e4 <HAL_TIM_PWM_Init>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800d5e8:	f7f5 f9da 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d5f4:	f107 0320 	add.w	r3, r7, #32
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	481d      	ldr	r0, [pc, #116]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d5fc:	f003 ffa0 	bl	8011540 <HAL_TIMEx_MasterConfigSynchronization>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800d606:	f7f5 f9cb 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d60a:	2360      	movs	r3, #96	; 0x60
 800d60c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 800d60e:	2396      	movs	r3, #150	; 0x96
 800d610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d612:	2300      	movs	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d616:	2300      	movs	r3, #0
 800d618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	2200      	movs	r2, #0
 800d61e:	4619      	mov	r1, r3
 800d620:	4813      	ldr	r0, [pc, #76]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d622:	f003 fb11 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800d62c:	f7f5 f9b8 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800d630:	2332      	movs	r3, #50	; 0x32
 800d632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d634:	1d3b      	adds	r3, r7, #4
 800d636:	2204      	movs	r2, #4
 800d638:	4619      	mov	r1, r3
 800d63a:	480d      	ldr	r0, [pc, #52]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d63c:	f003 fb04 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 800d646:	f7f5 f9ab 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.Pulse = 300;
 800d64a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d64e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d650:	1d3b      	adds	r3, r7, #4
 800d652:	2208      	movs	r2, #8
 800d654:	4619      	mov	r1, r3
 800d656:	4806      	ldr	r0, [pc, #24]	; (800d670 <MX_TIM5_Init+0xdc>)
 800d658:	f003 faf6 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 800d662:	f7f5 f99d 	bl	80029a0 <Error_Handler>
  }

}
 800d666:	bf00      	nop
 800d668:	3728      	adds	r7, #40	; 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20012554 	.word	0x20012554
 800d674:	40000c00 	.word	0x40000c00

0800d678 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d67e:	1d3b      	adds	r3, r7, #4
 800d680:	2200      	movs	r2, #0
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	605a      	str	r2, [r3, #4]
 800d686:	609a      	str	r2, [r3, #8]
 800d688:	60da      	str	r2, [r3, #12]
 800d68a:	611a      	str	r2, [r3, #16]
 800d68c:	615a      	str	r2, [r3, #20]
 800d68e:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800d690:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d692:	4a1d      	ldr	r2, [pc, #116]	; (800d708 <MX_TIM10_Init+0x90>)
 800d694:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 40-1;
 800d696:	4b1b      	ldr	r3, [pc, #108]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d698:	2227      	movs	r2, #39	; 0x27
 800d69a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d69c:	4b19      	ldr	r3, [pc, #100]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800d6a2:	4b18      	ldr	r3, [pc, #96]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d6a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d6aa:	4b16      	ldr	r3, [pc, #88]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d6b0:	4b14      	ldr	r3, [pc, #80]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800d6b6:	4813      	ldr	r0, [pc, #76]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6b8:	f003 f84c 	bl	8010754 <HAL_TIM_Base_Init>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800d6c2:	f7f5 f96d 	bl	80029a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800d6c6:	480f      	ldr	r0, [pc, #60]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6c8:	f003 f90c 	bl	80108e4 <HAL_TIM_PWM_Init>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800d6d2:	f7f5 f965 	bl	80029a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d6d6:	2360      	movs	r3, #96	; 0x60
 800d6d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d6e6:	1d3b      	adds	r3, r7, #4
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4805      	ldr	r0, [pc, #20]	; (800d704 <MX_TIM10_Init+0x8c>)
 800d6ee:	f003 faab 	bl	8010c48 <HAL_TIM_PWM_ConfigChannel>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800d6f8:	f7f5 f952 	bl	80029a0 <Error_Handler>
  }

}
 800d6fc:	bf00      	nop
 800d6fe:	3720      	adds	r7, #32
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20012514 	.word	0x20012514
 800d708:	40014400 	.word	0x40014400

0800d70c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d71c:	d10e      	bne.n	800d73c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]
 800d722:	4b2e      	ldr	r3, [pc, #184]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	4a2d      	ldr	r2, [pc, #180]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d728:	f043 0301 	orr.w	r3, r3, #1
 800d72c:	6413      	str	r3, [r2, #64]	; 0x40
 800d72e:	4b2b      	ldr	r3, [pc, #172]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800d73a:	e04a      	b.n	800d7d2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a27      	ldr	r2, [pc, #156]	; (800d7e0 <HAL_TIM_Base_MspInit+0xd4>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d10e      	bne.n	800d764 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d746:	2300      	movs	r3, #0
 800d748:	613b      	str	r3, [r7, #16]
 800d74a:	4b24      	ldr	r3, [pc, #144]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74e:	4a23      	ldr	r2, [pc, #140]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d750:	f043 0302 	orr.w	r3, r3, #2
 800d754:	6413      	str	r3, [r2, #64]	; 0x40
 800d756:	4b21      	ldr	r3, [pc, #132]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	613b      	str	r3, [r7, #16]
 800d760:	693b      	ldr	r3, [r7, #16]
}
 800d762:	e036      	b.n	800d7d2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a1e      	ldr	r2, [pc, #120]	; (800d7e4 <HAL_TIM_Base_MspInit+0xd8>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d116      	bne.n	800d79c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d76e:	2300      	movs	r3, #0
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	4b1a      	ldr	r3, [pc, #104]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d776:	4a19      	ldr	r2, [pc, #100]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d778:	f043 0304 	orr.w	r3, r3, #4
 800d77c:	6413      	str	r3, [r2, #64]	; 0x40
 800d77e:	4b17      	ldr	r3, [pc, #92]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800d78a:	2200      	movs	r2, #0
 800d78c:	2102      	movs	r1, #2
 800d78e:	201e      	movs	r0, #30
 800d790:	f000 fe9f 	bl	800e4d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800d794:	201e      	movs	r0, #30
 800d796:	f000 feb8 	bl	800e50a <HAL_NVIC_EnableIRQ>
}
 800d79a:	e01a      	b.n	800d7d2 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM10)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a11      	ldr	r2, [pc, #68]	; (800d7e8 <HAL_TIM_Base_MspInit+0xdc>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d115      	bne.n	800d7d2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60bb      	str	r3, [r7, #8]
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ae:	4a0b      	ldr	r2, [pc, #44]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d7b6:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <HAL_TIM_Base_MspInit+0xd0>)
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7be:	60bb      	str	r3, [r7, #8]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2102      	movs	r1, #2
 800d7c6:	2019      	movs	r0, #25
 800d7c8:	f000 fe83 	bl	800e4d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d7cc:	2019      	movs	r0, #25
 800d7ce:	f000 fe9c 	bl	800e50a <HAL_NVIC_EnableIRQ>
}
 800d7d2:	bf00      	nop
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	40023800 	.word	0x40023800
 800d7e0:	40000400 	.word	0x40000400
 800d7e4:	40000800 	.word	0x40000800
 800d7e8:	40014400 	.word	0x40014400

0800d7ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a0e      	ldr	r2, [pc, #56]	; (800d834 <HAL_TIM_PWM_MspInit+0x48>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d115      	bne.n	800d82a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <HAL_TIM_PWM_MspInit+0x4c>)
 800d804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d806:	4a0c      	ldr	r2, [pc, #48]	; (800d838 <HAL_TIM_PWM_MspInit+0x4c>)
 800d808:	f043 0308 	orr.w	r3, r3, #8
 800d80c:	6413      	str	r3, [r2, #64]	; 0x40
 800d80e:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <HAL_TIM_PWM_MspInit+0x4c>)
 800d810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d812:	f003 0308 	and.w	r3, r3, #8
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800d81a:	2200      	movs	r2, #0
 800d81c:	2100      	movs	r1, #0
 800d81e:	2032      	movs	r0, #50	; 0x32
 800d820:	f000 fe57 	bl	800e4d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800d824:	2032      	movs	r0, #50	; 0x32
 800d826:	f000 fe70 	bl	800e50a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800d82a:	bf00      	nop
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	40000c00 	.word	0x40000c00
 800d838:	40023800 	.word	0x40023800

0800d83c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08a      	sub	sp, #40	; 0x28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d844:	f107 0314 	add.w	r3, r7, #20
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	605a      	str	r2, [r3, #4]
 800d84e:	609a      	str	r2, [r3, #8]
 800d850:	60da      	str	r2, [r3, #12]
 800d852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a21      	ldr	r2, [pc, #132]	; (800d8e0 <HAL_TIM_MspPostInit+0xa4>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d13b      	bne.n	800d8d6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d85e:	2300      	movs	r3, #0
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	4b20      	ldr	r3, [pc, #128]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d866:	4a1f      	ldr	r2, [pc, #124]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d868:	f043 0301 	orr.w	r3, r3, #1
 800d86c:	6313      	str	r3, [r2, #48]	; 0x30
 800d86e:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	613b      	str	r3, [r7, #16]
 800d878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	4b19      	ldr	r3, [pc, #100]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d882:	4a18      	ldr	r2, [pc, #96]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d884:	f043 0302 	orr.w	r3, r3, #2
 800d888:	6313      	str	r3, [r2, #48]	; 0x30
 800d88a:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <HAL_TIM_MspPostInit+0xa8>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d896:	23c0      	movs	r3, #192	; 0xc0
 800d898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d89a:	2302      	movs	r3, #2
 800d89c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d89e:	2302      	movs	r3, #2
 800d8a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8aa:	f107 0314 	add.w	r3, r7, #20
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	480d      	ldr	r0, [pc, #52]	; (800d8e8 <HAL_TIM_MspPostInit+0xac>)
 800d8b2:	f001 fc99 	bl	800f1e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d8be:	2302      	movs	r3, #2
 800d8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8ca:	f107 0314 	add.w	r3, r7, #20
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4806      	ldr	r0, [pc, #24]	; (800d8ec <HAL_TIM_MspPostInit+0xb0>)
 800d8d2:	f001 fc89 	bl	800f1e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d8d6:	bf00      	nop
 800d8d8:	3728      	adds	r7, #40	; 0x28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	40000400 	.word	0x40000400
 800d8e4:	40023800 	.word	0x40023800
 800d8e8:	40020000 	.word	0x40020000
 800d8ec:	40020400 	.word	0x40020400

0800d8f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800d8f4:	4b11      	ldr	r3, [pc, #68]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d8f6:	4a12      	ldr	r2, [pc, #72]	; (800d940 <MX_USART1_UART_Init+0x50>)
 800d8f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d8fa:	4b10      	ldr	r3, [pc, #64]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d8fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d902:	4b0e      	ldr	r3, [pc, #56]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d904:	2200      	movs	r2, #0
 800d906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d908:	4b0c      	ldr	r3, [pc, #48]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d90e:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d910:	2200      	movs	r2, #0
 800d912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d914:	4b09      	ldr	r3, [pc, #36]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d916:	220c      	movs	r2, #12
 800d918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d91a:	4b08      	ldr	r3, [pc, #32]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d920:	4b06      	ldr	r3, [pc, #24]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d922:	2200      	movs	r2, #0
 800d924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d926:	4805      	ldr	r0, [pc, #20]	; (800d93c <MX_USART1_UART_Init+0x4c>)
 800d928:	f003 fe8c 	bl	8011644 <HAL_UART_Init>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d932:	f7f5 f835 	bl	80029a0 <Error_Handler>
  }

}
 800d936:	bf00      	nop
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	20012614 	.word	0x20012614
 800d940:	40011000 	.word	0x40011000

0800d944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08a      	sub	sp, #40	; 0x28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	2200      	movs	r2, #0
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	605a      	str	r2, [r3, #4]
 800d956:	609a      	str	r2, [r3, #8]
 800d958:	60da      	str	r2, [r3, #12]
 800d95a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a19      	ldr	r2, [pc, #100]	; (800d9c8 <HAL_UART_MspInit+0x84>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d12c      	bne.n	800d9c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d966:	2300      	movs	r3, #0
 800d968:	613b      	str	r3, [r7, #16]
 800d96a:	4b18      	ldr	r3, [pc, #96]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d96e:	4a17      	ldr	r2, [pc, #92]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d970:	f043 0310 	orr.w	r3, r3, #16
 800d974:	6453      	str	r3, [r2, #68]	; 0x44
 800d976:	4b15      	ldr	r3, [pc, #84]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d97a:	f003 0310 	and.w	r3, r3, #16
 800d97e:	613b      	str	r3, [r7, #16]
 800d980:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d982:	2300      	movs	r3, #0
 800d984:	60fb      	str	r3, [r7, #12]
 800d986:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d98a:	4a10      	ldr	r2, [pc, #64]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d98c:	f043 0301 	orr.w	r3, r3, #1
 800d990:	6313      	str	r3, [r2, #48]	; 0x30
 800d992:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <HAL_UART_MspInit+0x88>)
 800d994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d99e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d9a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d9b0:	2307      	movs	r3, #7
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9b4:	f107 0314 	add.w	r3, r7, #20
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4805      	ldr	r0, [pc, #20]	; (800d9d0 <HAL_UART_MspInit+0x8c>)
 800d9bc:	f001 fc14 	bl	800f1e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800d9c0:	bf00      	nop
 800d9c2:	3728      	adds	r7, #40	; 0x28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	40011000 	.word	0x40011000
 800d9cc:	40023800 	.word	0x40023800
 800d9d0:	40020000 	.word	0x40020000

0800d9d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d9d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800da0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d9d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d9da:	e003      	b.n	800d9e4 <LoopCopyDataInit>

0800d9dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d9de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d9e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d9e2:	3104      	adds	r1, #4

0800d9e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d9e4:	480b      	ldr	r0, [pc, #44]	; (800da14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d9e6:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d9e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d9ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d9ec:	d3f6      	bcc.n	800d9dc <CopyDataInit>
  ldr  r2, =_sbss
 800d9ee:	4a0b      	ldr	r2, [pc, #44]	; (800da1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d9f0:	e002      	b.n	800d9f8 <LoopFillZerobss>

0800d9f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d9f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d9f4:	f842 3b04 	str.w	r3, [r2], #4

0800d9f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d9fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d9fc:	d3f9      	bcc.n	800d9f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d9fe:	f7ff fc5b 	bl	800d2b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800da02:	f004 fad1 	bl	8011fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800da06:	f7f4 f98f 	bl	8001d28 <main>
  bx  lr    
 800da0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800da0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800da10:	08014d78 	.word	0x08014d78
  ldr  r0, =_sdata
 800da14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800da18:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800da1c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800da20:	2001267c 	.word	0x2001267c

0800da24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800da24:	e7fe      	b.n	800da24 <ADC_IRQHandler>
	...

0800da28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800da2c:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <HAL_Init+0x40>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a0d      	ldr	r2, [pc, #52]	; (800da68 <HAL_Init+0x40>)
 800da32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800da38:	4b0b      	ldr	r3, [pc, #44]	; (800da68 <HAL_Init+0x40>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a0a      	ldr	r2, [pc, #40]	; (800da68 <HAL_Init+0x40>)
 800da3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800da44:	4b08      	ldr	r3, [pc, #32]	; (800da68 <HAL_Init+0x40>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a07      	ldr	r2, [pc, #28]	; (800da68 <HAL_Init+0x40>)
 800da4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800da50:	2003      	movs	r0, #3
 800da52:	f000 fd33 	bl	800e4bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800da56:	2000      	movs	r0, #0
 800da58:	f000 f808 	bl	800da6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800da5c:	f7ff faf0 	bl	800d040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	40023c00 	.word	0x40023c00

0800da6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800da74:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <HAL_InitTick+0x54>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	4b12      	ldr	r3, [pc, #72]	; (800dac4 <HAL_InitTick+0x58>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da82:	fbb3 f3f1 	udiv	r3, r3, r1
 800da86:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 fd4b 	bl	800e526 <HAL_SYSTICK_Config>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d001      	beq.n	800da9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	e00e      	b.n	800dab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b0f      	cmp	r3, #15
 800da9e:	d80a      	bhi.n	800dab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800daa0:	2200      	movs	r2, #0
 800daa2:	6879      	ldr	r1, [r7, #4]
 800daa4:	f04f 30ff 	mov.w	r0, #4294967295
 800daa8:	f000 fd13 	bl	800e4d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800daac:	4a06      	ldr	r2, [pc, #24]	; (800dac8 <HAL_InitTick+0x5c>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e000      	b.n	800dab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20000004 	.word	0x20000004
 800dac4:	2000000c 	.word	0x2000000c
 800dac8:	20000008 	.word	0x20000008

0800dacc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dacc:	b480      	push	{r7}
 800dace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <HAL_IncTick+0x20>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	461a      	mov	r2, r3
 800dad6:	4b06      	ldr	r3, [pc, #24]	; (800daf0 <HAL_IncTick+0x24>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4413      	add	r3, r2
 800dadc:	4a04      	ldr	r2, [pc, #16]	; (800daf0 <HAL_IncTick+0x24>)
 800dade:	6013      	str	r3, [r2, #0]
}
 800dae0:	bf00      	nop
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	2000000c 	.word	0x2000000c
 800daf0:	20012654 	.word	0x20012654

0800daf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800daf4:	b480      	push	{r7}
 800daf6:	af00      	add	r7, sp, #0
  return uwTick;
 800daf8:	4b03      	ldr	r3, [pc, #12]	; (800db08 <HAL_GetTick+0x14>)
 800dafa:	681b      	ldr	r3, [r3, #0]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	20012654 	.word	0x20012654

0800db0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800db14:	f7ff ffee 	bl	800daf4 <HAL_GetTick>
 800db18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db24:	d005      	beq.n	800db32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800db26:	4b09      	ldr	r3, [pc, #36]	; (800db4c <HAL_Delay+0x40>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800db32:	bf00      	nop
 800db34:	f7ff ffde 	bl	800daf4 <HAL_GetTick>
 800db38:	4602      	mov	r2, r0
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	429a      	cmp	r2, r3
 800db42:	d8f7      	bhi.n	800db34 <HAL_Delay+0x28>
  {
  }
}
 800db44:	bf00      	nop
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	2000000c 	.word	0x2000000c

0800db50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d101      	bne.n	800db66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e033      	b.n	800dbce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d109      	bne.n	800db82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7f3 fa80 	bl	8001074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d118      	bne.n	800dbc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800db96:	f023 0302 	bic.w	r3, r3, #2
 800db9a:	f043 0202 	orr.w	r2, r3, #2
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fa3c 	bl	800e020 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	f043 0201 	orr.w	r2, r3, #1
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	641a      	str	r2, [r3, #64]	; 0x40
 800dbbe:	e001      	b.n	800dbc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800dbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
	...

0800dbd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d101      	bne.n	800dbf6 <HAL_ADC_Start_DMA+0x1e>
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	e0b1      	b.n	800dd5a <HAL_ADC_Start_DMA+0x182>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d018      	beq.n	800dc3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f042 0201 	orr.w	r2, r2, #1
 800dc1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800dc1c:	4b51      	ldr	r3, [pc, #324]	; (800dd64 <HAL_ADC_Start_DMA+0x18c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a51      	ldr	r2, [pc, #324]	; (800dd68 <HAL_ADC_Start_DMA+0x190>)
 800dc22:	fba2 2303 	umull	r2, r3, r2, r3
 800dc26:	0c9a      	lsrs	r2, r3, #18
 800dc28:	4613      	mov	r3, r2
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	4413      	add	r3, r2
 800dc2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800dc30:	e002      	b.n	800dc38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3b01      	subs	r3, #1
 800dc36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1f9      	bne.n	800dc32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	f040 8085 	bne.w	800dd58 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800dc56:	f023 0301 	bic.w	r3, r3, #1
 800dc5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d007      	beq.n	800dc80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dc78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc8c:	d106      	bne.n	800dc9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc92:	f023 0206 	bic.w	r2, r3, #6
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	645a      	str	r2, [r3, #68]	; 0x44
 800dc9a:	e002      	b.n	800dca2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dcaa:	4b30      	ldr	r3, [pc, #192]	; (800dd6c <HAL_ADC_Start_DMA+0x194>)
 800dcac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	4a2f      	ldr	r2, [pc, #188]	; (800dd70 <HAL_ADC_Start_DMA+0x198>)
 800dcb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcba:	4a2e      	ldr	r2, [pc, #184]	; (800dd74 <HAL_ADC_Start_DMA+0x19c>)
 800dcbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc2:	4a2d      	ldr	r2, [pc, #180]	; (800dd78 <HAL_ADC_Start_DMA+0x1a0>)
 800dcc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800dcce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800dcde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	689a      	ldr	r2, [r3, #8]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dcee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	334c      	adds	r3, #76	; 0x4c
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f000 fccc 	bl	800e69c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f003 031f 	and.w	r3, r3, #31
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10f      	bne.n	800dd30 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d11c      	bne.n	800dd58 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	689a      	ldr	r2, [r3, #8]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dd2c:	609a      	str	r2, [r3, #8]
 800dd2e:	e013      	b.n	800dd58 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a11      	ldr	r2, [pc, #68]	; (800dd7c <HAL_ADC_Start_DMA+0x1a4>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d10e      	bne.n	800dd58 <HAL_ADC_Start_DMA+0x180>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d107      	bne.n	800dd58 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	689a      	ldr	r2, [r3, #8]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dd56:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20000004 	.word	0x20000004
 800dd68:	431bde83 	.word	0x431bde83
 800dd6c:	40012300 	.word	0x40012300
 800dd70:	0800e219 	.word	0x0800e219
 800dd74:	0800e2d3 	.word	0x0800e2d3
 800dd78:	0800e2ef 	.word	0x0800e2ef
 800dd7c:	40012000 	.word	0x40012000

0800dd80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d101      	bne.n	800ddd8 <HAL_ADC_ConfigChannel+0x1c>
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	e113      	b.n	800e000 <HAL_ADC_ConfigChannel+0x244>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d925      	bls.n	800de34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68d9      	ldr	r1, [r3, #12]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4413      	add	r3, r2
 800ddfc:	3b1e      	subs	r3, #30
 800ddfe:	2207      	movs	r2, #7
 800de00:	fa02 f303 	lsl.w	r3, r2, r3
 800de04:	43da      	mvns	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	400a      	ands	r2, r1
 800de0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68d9      	ldr	r1, [r3, #12]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	689a      	ldr	r2, [r3, #8]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	4618      	mov	r0, r3
 800de20:	4603      	mov	r3, r0
 800de22:	005b      	lsls	r3, r3, #1
 800de24:	4403      	add	r3, r0
 800de26:	3b1e      	subs	r3, #30
 800de28:	409a      	lsls	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	430a      	orrs	r2, r1
 800de30:	60da      	str	r2, [r3, #12]
 800de32:	e022      	b.n	800de7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6919      	ldr	r1, [r3, #16]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	461a      	mov	r2, r3
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	2207      	movs	r2, #7
 800de4a:	fa02 f303 	lsl.w	r3, r2, r3
 800de4e:	43da      	mvns	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	400a      	ands	r2, r1
 800de56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6919      	ldr	r1, [r3, #16]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	b29b      	uxth	r3, r3
 800de68:	4618      	mov	r0, r3
 800de6a:	4603      	mov	r3, r0
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4403      	add	r3, r0
 800de70:	409a      	lsls	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	2b06      	cmp	r3, #6
 800de80:	d824      	bhi.n	800decc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685a      	ldr	r2, [r3, #4]
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	3b05      	subs	r3, #5
 800de94:	221f      	movs	r2, #31
 800de96:	fa02 f303 	lsl.w	r3, r2, r3
 800de9a:	43da      	mvns	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	400a      	ands	r2, r1
 800dea2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	3b05      	subs	r3, #5
 800debe:	fa00 f203 	lsl.w	r2, r0, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	635a      	str	r2, [r3, #52]	; 0x34
 800deca:	e04c      	b.n	800df66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	2b0c      	cmp	r3, #12
 800ded2:	d824      	bhi.n	800df1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	685a      	ldr	r2, [r3, #4]
 800dede:	4613      	mov	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	3b23      	subs	r3, #35	; 0x23
 800dee6:	221f      	movs	r2, #31
 800dee8:	fa02 f303 	lsl.w	r3, r2, r3
 800deec:	43da      	mvns	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	400a      	ands	r2, r1
 800def4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	b29b      	uxth	r3, r3
 800df02:	4618      	mov	r0, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	4613      	mov	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	3b23      	subs	r3, #35	; 0x23
 800df10:	fa00 f203 	lsl.w	r2, r0, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	430a      	orrs	r2, r1
 800df1a:	631a      	str	r2, [r3, #48]	; 0x30
 800df1c:	e023      	b.n	800df66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	685a      	ldr	r2, [r3, #4]
 800df28:	4613      	mov	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	3b41      	subs	r3, #65	; 0x41
 800df30:	221f      	movs	r2, #31
 800df32:	fa02 f303 	lsl.w	r3, r2, r3
 800df36:	43da      	mvns	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	400a      	ands	r2, r1
 800df3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	4618      	mov	r0, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	4613      	mov	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	4413      	add	r3, r2
 800df58:	3b41      	subs	r3, #65	; 0x41
 800df5a:	fa00 f203 	lsl.w	r2, r0, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	430a      	orrs	r2, r1
 800df64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800df66:	4b29      	ldr	r3, [pc, #164]	; (800e00c <HAL_ADC_ConfigChannel+0x250>)
 800df68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a28      	ldr	r2, [pc, #160]	; (800e010 <HAL_ADC_ConfigChannel+0x254>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d10f      	bne.n	800df94 <HAL_ADC_ConfigChannel+0x1d8>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b12      	cmp	r3, #18
 800df7a:	d10b      	bne.n	800df94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a1d      	ldr	r2, [pc, #116]	; (800e010 <HAL_ADC_ConfigChannel+0x254>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d12b      	bne.n	800dff6 <HAL_ADC_ConfigChannel+0x23a>
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a1c      	ldr	r2, [pc, #112]	; (800e014 <HAL_ADC_ConfigChannel+0x258>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d003      	beq.n	800dfb0 <HAL_ADC_ConfigChannel+0x1f4>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b11      	cmp	r3, #17
 800dfae:	d122      	bne.n	800dff6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a11      	ldr	r2, [pc, #68]	; (800e014 <HAL_ADC_ConfigChannel+0x258>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d111      	bne.n	800dff6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800dfd2:	4b11      	ldr	r3, [pc, #68]	; (800e018 <HAL_ADC_ConfigChannel+0x25c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a11      	ldr	r2, [pc, #68]	; (800e01c <HAL_ADC_ConfigChannel+0x260>)
 800dfd8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfdc:	0c9a      	lsrs	r2, r3, #18
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800dfe8:	e002      	b.n	800dff0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1f9      	bne.n	800dfea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	40012300 	.word	0x40012300
 800e010:	40012000 	.word	0x40012000
 800e014:	10000012 	.word	0x10000012
 800e018:	20000004 	.word	0x20000004
 800e01c:	431bde83 	.word	0x431bde83

0800e020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e028:	4b79      	ldr	r3, [pc, #484]	; (800e210 <ADC_Init+0x1f0>)
 800e02a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	431a      	orrs	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6859      	ldr	r1, [r3, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	021a      	lsls	r2, r3, #8
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	430a      	orrs	r2, r1
 800e068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	6859      	ldr	r1, [r3, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	689a      	ldr	r2, [r3, #8]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	430a      	orrs	r2, r1
 800e08a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e09a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6899      	ldr	r1, [r3, #8]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68da      	ldr	r2, [r3, #12]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b2:	4a58      	ldr	r2, [pc, #352]	; (800e214 <ADC_Init+0x1f4>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d022      	beq.n	800e0fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	689a      	ldr	r2, [r3, #8]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e0c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6899      	ldr	r1, [r3, #8]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	430a      	orrs	r2, r1
 800e0d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	689a      	ldr	r2, [r3, #8]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e0e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	6899      	ldr	r1, [r3, #8]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	430a      	orrs	r2, r1
 800e0fa:	609a      	str	r2, [r3, #8]
 800e0fc:	e00f      	b.n	800e11e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e10c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689a      	ldr	r2, [r3, #8]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e11c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	689a      	ldr	r2, [r3, #8]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f022 0202 	bic.w	r2, r2, #2
 800e12c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6899      	ldr	r1, [r3, #8]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7e1b      	ldrb	r3, [r3, #24]
 800e138:	005a      	lsls	r2, r3, #1
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01b      	beq.n	800e184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	685a      	ldr	r2, [r3, #4]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e15a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e16a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6859      	ldr	r1, [r3, #4]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	3b01      	subs	r3, #1
 800e178:	035a      	lsls	r2, r3, #13
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	430a      	orrs	r2, r1
 800e180:	605a      	str	r2, [r3, #4]
 800e182:	e007      	b.n	800e194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	685a      	ldr	r2, [r3, #4]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e1a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	69db      	ldr	r3, [r3, #28]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	051a      	lsls	r2, r3, #20
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	430a      	orrs	r2, r1
 800e1b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689a      	ldr	r2, [r3, #8]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e1c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6899      	ldr	r1, [r3, #8]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1d6:	025a      	lsls	r2, r3, #9
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	689a      	ldr	r2, [r3, #8]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6899      	ldr	r1, [r3, #8]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	029a      	lsls	r2, r3, #10
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	430a      	orrs	r2, r1
 800e202:	609a      	str	r2, [r3, #8]
}
 800e204:	bf00      	nop
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	40012300 	.word	0x40012300
 800e214:	0f000001 	.word	0x0f000001

0800e218 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e224:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e22a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d13c      	bne.n	800e2ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e236:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d12b      	bne.n	800e2a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e250:	2b00      	cmp	r3, #0
 800e252:	d127      	bne.n	800e2a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d006      	beq.n	800e270 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d119      	bne.n	800e2a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 0220 	bic.w	r2, r2, #32
 800e27e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d105      	bne.n	800e2a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29c:	f043 0201 	orr.w	r2, r3, #1
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7ff fd6b 	bl	800dd80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e2aa:	e00e      	b.n	800e2ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b0:	f003 0310 	and.w	r3, r3, #16
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7ff fd75 	bl	800dda8 <HAL_ADC_ErrorCallback>
}
 800e2be:	e004      	b.n	800e2ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	4798      	blx	r3
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7ff fd57 	bl	800dd94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e2e6:	bf00      	nop
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2240      	movs	r2, #64	; 0x40
 800e300:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e306:	f043 0204 	orr.w	r2, r3, #4
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff fd4a 	bl	800dda8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e314:	bf00      	nop
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <__NVIC_SetPriorityGrouping>:
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e32c:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <__NVIC_SetPriorityGrouping+0x44>)
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e338:	4013      	ands	r3, r2
 800e33a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e34c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e34e:	4a04      	ldr	r2, [pc, #16]	; (800e360 <__NVIC_SetPriorityGrouping+0x44>)
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	60d3      	str	r3, [r2, #12]
}
 800e354:	bf00      	nop
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	e000ed00 	.word	0xe000ed00

0800e364 <__NVIC_GetPriorityGrouping>:
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e368:	4b04      	ldr	r3, [pc, #16]	; (800e37c <__NVIC_GetPriorityGrouping+0x18>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	f003 0307 	and.w	r3, r3, #7
}
 800e372:	4618      	mov	r0, r3
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	e000ed00 	.word	0xe000ed00

0800e380 <__NVIC_EnableIRQ>:
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	db0b      	blt.n	800e3aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	f003 021f 	and.w	r2, r3, #31
 800e398:	4907      	ldr	r1, [pc, #28]	; (800e3b8 <__NVIC_EnableIRQ+0x38>)
 800e39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e39e:	095b      	lsrs	r3, r3, #5
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	fa00 f202 	lsl.w	r2, r0, r2
 800e3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e3aa:	bf00      	nop
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	e000e100 	.word	0xe000e100

0800e3bc <__NVIC_SetPriority>:
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	6039      	str	r1, [r7, #0]
 800e3c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	db0a      	blt.n	800e3e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	490c      	ldr	r1, [pc, #48]	; (800e408 <__NVIC_SetPriority+0x4c>)
 800e3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3da:	0112      	lsls	r2, r2, #4
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	440b      	add	r3, r1
 800e3e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e3e4:	e00a      	b.n	800e3fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	4908      	ldr	r1, [pc, #32]	; (800e40c <__NVIC_SetPriority+0x50>)
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	f003 030f 	and.w	r3, r3, #15
 800e3f2:	3b04      	subs	r3, #4
 800e3f4:	0112      	lsls	r2, r2, #4
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	440b      	add	r3, r1
 800e3fa:	761a      	strb	r2, [r3, #24]
}
 800e3fc:	bf00      	nop
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	e000e100 	.word	0xe000e100
 800e40c:	e000ed00 	.word	0xe000ed00

0800e410 <NVIC_EncodePriority>:
{
 800e410:	b480      	push	{r7}
 800e412:	b089      	sub	sp, #36	; 0x24
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f003 0307 	and.w	r3, r3, #7
 800e422:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	f1c3 0307 	rsb	r3, r3, #7
 800e42a:	2b04      	cmp	r3, #4
 800e42c:	bf28      	it	cs
 800e42e:	2304      	movcs	r3, #4
 800e430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	3304      	adds	r3, #4
 800e436:	2b06      	cmp	r3, #6
 800e438:	d902      	bls.n	800e440 <NVIC_EncodePriority+0x30>
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	3b03      	subs	r3, #3
 800e43e:	e000      	b.n	800e442 <NVIC_EncodePriority+0x32>
 800e440:	2300      	movs	r3, #0
 800e442:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e444:	f04f 32ff 	mov.w	r2, #4294967295
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	fa02 f303 	lsl.w	r3, r2, r3
 800e44e:	43da      	mvns	r2, r3
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	401a      	ands	r2, r3
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e458:	f04f 31ff 	mov.w	r1, #4294967295
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	fa01 f303 	lsl.w	r3, r1, r3
 800e462:	43d9      	mvns	r1, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e468:	4313      	orrs	r3, r2
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3724      	adds	r7, #36	; 0x24
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3b01      	subs	r3, #1
 800e484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e488:	d301      	bcc.n	800e48e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e48a:	2301      	movs	r3, #1
 800e48c:	e00f      	b.n	800e4ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e48e:	4a0a      	ldr	r2, [pc, #40]	; (800e4b8 <SysTick_Config+0x40>)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	3b01      	subs	r3, #1
 800e494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e496:	210f      	movs	r1, #15
 800e498:	f04f 30ff 	mov.w	r0, #4294967295
 800e49c:	f7ff ff8e 	bl	800e3bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <SysTick_Config+0x40>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e4a6:	4b04      	ldr	r3, [pc, #16]	; (800e4b8 <SysTick_Config+0x40>)
 800e4a8:	2207      	movs	r2, #7
 800e4aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	e000e010 	.word	0xe000e010

0800e4bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7ff ff29 	bl	800e31c <__NVIC_SetPriorityGrouping>
}
 800e4ca:	bf00      	nop
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b086      	sub	sp, #24
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	4603      	mov	r3, r0
 800e4da:	60b9      	str	r1, [r7, #8]
 800e4dc:	607a      	str	r2, [r7, #4]
 800e4de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e4e4:	f7ff ff3e 	bl	800e364 <__NVIC_GetPriorityGrouping>
 800e4e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	68b9      	ldr	r1, [r7, #8]
 800e4ee:	6978      	ldr	r0, [r7, #20]
 800e4f0:	f7ff ff8e 	bl	800e410 <NVIC_EncodePriority>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff ff5d 	bl	800e3bc <__NVIC_SetPriority>
}
 800e502:	bf00      	nop
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	4603      	mov	r3, r0
 800e512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7ff ff31 	bl	800e380 <__NVIC_EnableIRQ>
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff ffa2 	bl	800e478 <SysTick_Config>
 800e534:	4603      	mov	r3, r0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e548:	2300      	movs	r3, #0
 800e54a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e54c:	f7ff fad2 	bl	800daf4 <HAL_GetTick>
 800e550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d101      	bne.n	800e55c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	e099      	b.n	800e690 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2202      	movs	r2, #2
 800e568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f022 0201 	bic.w	r2, r2, #1
 800e57a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e57c:	e00f      	b.n	800e59e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e57e:	f7ff fab9 	bl	800daf4 <HAL_GetTick>
 800e582:	4602      	mov	r2, r0
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	2b05      	cmp	r3, #5
 800e58a:	d908      	bls.n	800e59e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2220      	movs	r2, #32
 800e590:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2203      	movs	r2, #3
 800e596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e078      	b.n	800e690 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 0301 	and.w	r3, r3, #1
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e8      	bne.n	800e57e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	4b38      	ldr	r3, [pc, #224]	; (800e698 <HAL_DMA_Init+0x158>)
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	691b      	ldr	r3, [r3, #16]
 800e5d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e5e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
 800e5e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	d107      	bne.n	800e608 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e600:	4313      	orrs	r3, r2
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	4313      	orrs	r3, r2
 800e606:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f023 0307 	bic.w	r3, r3, #7
 800e61e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	697a      	ldr	r2, [r7, #20]
 800e626:	4313      	orrs	r3, r2
 800e628:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d117      	bne.n	800e662 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	4313      	orrs	r3, r2
 800e63a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00e      	beq.n	800e662 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 fa6f 	bl	800eb28 <DMA_CheckFifoParam>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2240      	movs	r2, #64	; 0x40
 800e654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e65e:	2301      	movs	r3, #1
 800e660:	e016      	b.n	800e690 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fa26 	bl	800eabc <DMA_CalcBaseAndBitshift>
 800e670:	4603      	mov	r3, r0
 800e672:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e678:	223f      	movs	r2, #63	; 0x3f
 800e67a:	409a      	lsls	r2, r3
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	f010803f 	.word	0xf010803f

0800e69c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d101      	bne.n	800e6c2 <HAL_DMA_Start_IT+0x26>
 800e6be:	2302      	movs	r3, #2
 800e6c0:	e040      	b.n	800e744 <HAL_DMA_Start_IT+0xa8>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d12f      	bne.n	800e736 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2202      	movs	r2, #2
 800e6da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 f9b8 	bl	800ea60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f4:	223f      	movs	r2, #63	; 0x3f
 800e6f6:	409a      	lsls	r2, r3
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f042 0216 	orr.w	r2, r2, #22
 800e70a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e710:	2b00      	cmp	r3, #0
 800e712:	d007      	beq.n	800e724 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f042 0208 	orr.w	r2, r2, #8
 800e722:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f042 0201 	orr.w	r2, r2, #1
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	e005      	b.n	800e742 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e73e:	2302      	movs	r3, #2
 800e740:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e742:	7dfb      	ldrb	r3, [r7, #23]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3718      	adds	r7, #24
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e758:	4b92      	ldr	r3, [pc, #584]	; (800e9a4 <HAL_DMA_IRQHandler+0x258>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a92      	ldr	r2, [pc, #584]	; (800e9a8 <HAL_DMA_IRQHandler+0x25c>)
 800e75e:	fba2 2303 	umull	r2, r3, r2, r3
 800e762:	0a9b      	lsrs	r3, r3, #10
 800e764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e776:	2208      	movs	r2, #8
 800e778:	409a      	lsls	r2, r3
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	4013      	ands	r3, r2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01a      	beq.n	800e7b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d013      	beq.n	800e7b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f022 0204 	bic.w	r2, r2, #4
 800e79e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7a4:	2208      	movs	r2, #8
 800e7a6:	409a      	lsls	r2, r3
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b0:	f043 0201 	orr.w	r2, r3, #1
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7bc:	2201      	movs	r2, #1
 800e7be:	409a      	lsls	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d012      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00b      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7da:	2201      	movs	r2, #1
 800e7dc:	409a      	lsls	r2, r3
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7e6:	f043 0202 	orr.w	r2, r3, #2
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f2:	2204      	movs	r2, #4
 800e7f4:	409a      	lsls	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d012      	beq.n	800e824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00b      	beq.n	800e824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e810:	2204      	movs	r2, #4
 800e812:	409a      	lsls	r2, r3
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81c:	f043 0204 	orr.w	r2, r3, #4
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e828:	2210      	movs	r2, #16
 800e82a:	409a      	lsls	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4013      	ands	r3, r2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d043      	beq.n	800e8bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f003 0308 	and.w	r3, r3, #8
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d03c      	beq.n	800e8bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e846:	2210      	movs	r2, #16
 800e848:	409a      	lsls	r2, r3
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d018      	beq.n	800e88e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e866:	2b00      	cmp	r3, #0
 800e868:	d108      	bne.n	800e87c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d024      	beq.n	800e8bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	4798      	blx	r3
 800e87a:	e01f      	b.n	800e8bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01b      	beq.n	800e8bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	4798      	blx	r3
 800e88c:	e016      	b.n	800e8bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d107      	bne.n	800e8ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f022 0208 	bic.w	r2, r2, #8
 800e8aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8c0:	2220      	movs	r2, #32
 800e8c2:	409a      	lsls	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 808e 	beq.w	800e9ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 8086 	beq.w	800e9ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8e2:	2220      	movs	r2, #32
 800e8e4:	409a      	lsls	r2, r3
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b05      	cmp	r3, #5
 800e8f4:	d136      	bne.n	800e964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f022 0216 	bic.w	r2, r2, #22
 800e904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	695a      	ldr	r2, [r3, #20]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d103      	bne.n	800e926 <HAL_DMA_IRQHandler+0x1da>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e922:	2b00      	cmp	r3, #0
 800e924:	d007      	beq.n	800e936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f022 0208 	bic.w	r2, r2, #8
 800e934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e93a:	223f      	movs	r2, #63	; 0x3f
 800e93c:	409a      	lsls	r2, r3
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e956:	2b00      	cmp	r3, #0
 800e958:	d07d      	beq.n	800ea56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	4798      	blx	r3
        }
        return;
 800e962:	e078      	b.n	800ea56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d01c      	beq.n	800e9ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d108      	bne.n	800e992 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e984:	2b00      	cmp	r3, #0
 800e986:	d030      	beq.n	800e9ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	4798      	blx	r3
 800e990:	e02b      	b.n	800e9ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d027      	beq.n	800e9ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	4798      	blx	r3
 800e9a2:	e022      	b.n	800e9ea <HAL_DMA_IRQHandler+0x29e>
 800e9a4:	20000004 	.word	0x20000004
 800e9a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10f      	bne.n	800e9da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0210 	bic.w	r2, r2, #16
 800e9c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d032      	beq.n	800ea58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d022      	beq.n	800ea44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2205      	movs	r2, #5
 800ea02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f022 0201 	bic.w	r2, r2, #1
 800ea14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	60bb      	str	r3, [r7, #8]
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d307      	bcc.n	800ea32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1f2      	bne.n	800ea16 <HAL_DMA_IRQHandler+0x2ca>
 800ea30:	e000      	b.n	800ea34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ea32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	4798      	blx	r3
 800ea54:	e000      	b.n	800ea58 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ea56:	bf00      	nop
    }
  }
}
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop

0800ea60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ea7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	683a      	ldr	r2, [r7, #0]
 800ea84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	2b40      	cmp	r3, #64	; 0x40
 800ea8c:	d108      	bne.n	800eaa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ea9e:	e007      	b.n	800eab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	60da      	str	r2, [r3, #12]
}
 800eab0:	bf00      	nop
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	3b10      	subs	r3, #16
 800eacc:	4a14      	ldr	r2, [pc, #80]	; (800eb20 <DMA_CalcBaseAndBitshift+0x64>)
 800eace:	fba2 2303 	umull	r2, r3, r2, r3
 800ead2:	091b      	lsrs	r3, r3, #4
 800ead4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ead6:	4a13      	ldr	r2, [pc, #76]	; (800eb24 <DMA_CalcBaseAndBitshift+0x68>)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	4413      	add	r3, r2
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2b03      	cmp	r3, #3
 800eae8:	d909      	bls.n	800eafe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eaf2:	f023 0303 	bic.w	r3, r3, #3
 800eaf6:	1d1a      	adds	r2, r3, #4
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	659a      	str	r2, [r3, #88]	; 0x58
 800eafc:	e007      	b.n	800eb0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eb06:	f023 0303 	bic.w	r3, r3, #3
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3714      	adds	r7, #20
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	aaaaaaab 	.word	0xaaaaaaab
 800eb24:	08014a9c 	.word	0x08014a9c

0800eb28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	699b      	ldr	r3, [r3, #24]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d11f      	bne.n	800eb82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d855      	bhi.n	800ebf4 <DMA_CheckFifoParam+0xcc>
 800eb48:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <DMA_CheckFifoParam+0x28>)
 800eb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4e:	bf00      	nop
 800eb50:	0800eb61 	.word	0x0800eb61
 800eb54:	0800eb73 	.word	0x0800eb73
 800eb58:	0800eb61 	.word	0x0800eb61
 800eb5c:	0800ebf5 	.word	0x0800ebf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d045      	beq.n	800ebf8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eb70:	e042      	b.n	800ebf8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800eb7a:	d13f      	bne.n	800ebfc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eb80:	e03c      	b.n	800ebfc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb8a:	d121      	bne.n	800ebd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d836      	bhi.n	800ec00 <DMA_CheckFifoParam+0xd8>
 800eb92:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <DMA_CheckFifoParam+0x70>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800eba9 	.word	0x0800eba9
 800eb9c:	0800ebaf 	.word	0x0800ebaf
 800eba0:	0800eba9 	.word	0x0800eba9
 800eba4:	0800ebc1 	.word	0x0800ebc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ebac:	e02f      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d024      	beq.n	800ec04 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebbe:	e021      	b.n	800ec04 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ebc8:	d11e      	bne.n	800ec08 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ebce:	e01b      	b.n	800ec08 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d902      	bls.n	800ebdc <DMA_CheckFifoParam+0xb4>
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d003      	beq.n	800ebe2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ebda:	e018      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	73fb      	strb	r3, [r7, #15]
      break;
 800ebe0:	e015      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00e      	beq.n	800ec0c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf2:	e00b      	b.n	800ec0c <DMA_CheckFifoParam+0xe4>
      break;
 800ebf4:	bf00      	nop
 800ebf6:	e00a      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;
 800ebf8:	bf00      	nop
 800ebfa:	e008      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;
 800ebfc:	bf00      	nop
 800ebfe:	e006      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;
 800ec00:	bf00      	nop
 800ec02:	e004      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;
 800ec04:	bf00      	nop
 800ec06:	e002      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;   
 800ec08:	bf00      	nop
 800ec0a:	e000      	b.n	800ec0e <DMA_CheckFifoParam+0xe6>
      break;
 800ec0c:	bf00      	nop
    }
  } 
  
  return status; 
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3714      	adds	r7, #20
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ec2e:	4b23      	ldr	r3, [pc, #140]	; (800ecbc <HAL_FLASH_Program+0xa0>)
 800ec30:	7e1b      	ldrb	r3, [r3, #24]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d101      	bne.n	800ec3a <HAL_FLASH_Program+0x1e>
 800ec36:	2302      	movs	r3, #2
 800ec38:	e03b      	b.n	800ecb2 <HAL_FLASH_Program+0x96>
 800ec3a:	4b20      	ldr	r3, [pc, #128]	; (800ecbc <HAL_FLASH_Program+0xa0>)
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ec40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ec44:	f000 f870 	bl	800ed28 <FLASH_WaitForLastOperation>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d12b      	bne.n	800ecaa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ec58:	783b      	ldrb	r3, [r7, #0]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	68b8      	ldr	r0, [r7, #8]
 800ec5e:	f000 f919 	bl	800ee94 <FLASH_Program_Byte>
 800ec62:	e016      	b.n	800ec92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d105      	bne.n	800ec76 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ec6a:	883b      	ldrh	r3, [r7, #0]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	68b8      	ldr	r0, [r7, #8]
 800ec70:	f000 f8ec 	bl	800ee4c <FLASH_Program_HalfWord>
 800ec74:	e00d      	b.n	800ec92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d105      	bne.n	800ec88 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	68b8      	ldr	r0, [r7, #8]
 800ec82:	f000 f8c1 	bl	800ee08 <FLASH_Program_Word>
 800ec86:	e004      	b.n	800ec92 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ec88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec8c:	68b8      	ldr	r0, [r7, #8]
 800ec8e:	f000 f88b 	bl	800eda8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ec92:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ec96:	f000 f847 	bl	800ed28 <FLASH_WaitForLastOperation>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ec9e:	4b08      	ldr	r3, [pc, #32]	; (800ecc0 <HAL_FLASH_Program+0xa4>)
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	4a07      	ldr	r2, [pc, #28]	; (800ecc0 <HAL_FLASH_Program+0xa4>)
 800eca4:	f023 0301 	bic.w	r3, r3, #1
 800eca8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ecaa:	4b04      	ldr	r3, [pc, #16]	; (800ecbc <HAL_FLASH_Program+0xa0>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	20012658 	.word	0x20012658
 800ecc0:	40023c00 	.word	0x40023c00

0800ecc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ecca:	2300      	movs	r3, #0
 800eccc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ecce:	4b0b      	ldr	r3, [pc, #44]	; (800ecfc <HAL_FLASH_Unlock+0x38>)
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	da0b      	bge.n	800ecee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ecd6:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <HAL_FLASH_Unlock+0x38>)
 800ecd8:	4a09      	ldr	r2, [pc, #36]	; (800ed00 <HAL_FLASH_Unlock+0x3c>)
 800ecda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ecdc:	4b07      	ldr	r3, [pc, #28]	; (800ecfc <HAL_FLASH_Unlock+0x38>)
 800ecde:	4a09      	ldr	r2, [pc, #36]	; (800ed04 <HAL_FLASH_Unlock+0x40>)
 800ece0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ece2:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <HAL_FLASH_Unlock+0x38>)
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	da01      	bge.n	800ecee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ecea:	2301      	movs	r3, #1
 800ecec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ecee:	79fb      	ldrb	r3, [r7, #7]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	40023c00 	.word	0x40023c00
 800ed00:	45670123 	.word	0x45670123
 800ed04:	cdef89ab 	.word	0xcdef89ab

0800ed08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ed0c:	4b05      	ldr	r3, [pc, #20]	; (800ed24 <HAL_FLASH_Lock+0x1c>)
 800ed0e:	691b      	ldr	r3, [r3, #16]
 800ed10:	4a04      	ldr	r2, [pc, #16]	; (800ed24 <HAL_FLASH_Lock+0x1c>)
 800ed12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ed16:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr
 800ed24:	40023c00 	.word	0x40023c00

0800ed28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ed30:	2300      	movs	r3, #0
 800ed32:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed34:	4b1a      	ldr	r3, [pc, #104]	; (800eda0 <FLASH_WaitForLastOperation+0x78>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ed3a:	f7fe fedb 	bl	800daf4 <HAL_GetTick>
 800ed3e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ed40:	e010      	b.n	800ed64 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed48:	d00c      	beq.n	800ed64 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d007      	beq.n	800ed60 <FLASH_WaitForLastOperation+0x38>
 800ed50:	f7fe fed0 	bl	800daf4 <HAL_GetTick>
 800ed54:	4602      	mov	r2, r0
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d201      	bcs.n	800ed64 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ed60:	2303      	movs	r3, #3
 800ed62:	e019      	b.n	800ed98 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <FLASH_WaitForLastOperation+0x7c>)
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e8      	bne.n	800ed42 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ed70:	4b0c      	ldr	r3, [pc, #48]	; (800eda4 <FLASH_WaitForLastOperation+0x7c>)
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	f003 0301 	and.w	r3, r3, #1
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ed7c:	4b09      	ldr	r3, [pc, #36]	; (800eda4 <FLASH_WaitForLastOperation+0x7c>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ed82:	4b08      	ldr	r3, [pc, #32]	; (800eda4 <FLASH_WaitForLastOperation+0x7c>)
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ed8e:	f000 f8a3 	bl	800eed8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
  
}  
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20012658 	.word	0x20012658
 800eda4:	40023c00 	.word	0x40023c00

0800eda8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800eda8:	b490      	push	{r4, r7}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800edb4:	4b13      	ldr	r3, [pc, #76]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	4a12      	ldr	r2, [pc, #72]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800edc0:	4b10      	ldr	r3, [pc, #64]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	4a0f      	ldr	r2, [pc, #60]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800edca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800edcc:	4b0d      	ldr	r3, [pc, #52]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	4a0c      	ldr	r2, [pc, #48]	; (800ee04 <FLASH_Program_DoubleWord+0x5c>)
 800edd2:	f043 0301 	orr.w	r3, r3, #1
 800edd6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800edde:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ede2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ede6:	f04f 0300 	mov.w	r3, #0
 800edea:	f04f 0400 	mov.w	r4, #0
 800edee:	0013      	movs	r3, r2
 800edf0:	2400      	movs	r4, #0
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	3204      	adds	r2, #4
 800edf6:	6013      	str	r3, [r2, #0]
}
 800edf8:	bf00      	nop
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bc90      	pop	{r4, r7}
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	40023c00 	.word	0x40023c00

0800ee08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee12:	4b0d      	ldr	r3, [pc, #52]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	4a0c      	ldr	r2, [pc, #48]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ee1e:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	4a09      	ldr	r2, [pc, #36]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee2a:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	4a06      	ldr	r2, [pc, #24]	; (800ee48 <FLASH_Program_Word+0x40>)
 800ee30:	f043 0301 	orr.w	r3, r3, #1
 800ee34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	683a      	ldr	r2, [r7, #0]
 800ee3a:	601a      	str	r2, [r3, #0]
}
 800ee3c:	bf00      	nop
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	40023c00 	.word	0x40023c00

0800ee4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee58:	4b0d      	ldr	r3, [pc, #52]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ee64:	4b0a      	ldr	r3, [pc, #40]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	4a09      	ldr	r2, [pc, #36]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ee70:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	4a06      	ldr	r2, [pc, #24]	; (800ee90 <FLASH_Program_HalfWord+0x44>)
 800ee76:	f043 0301 	orr.w	r3, r3, #1
 800ee7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	887a      	ldrh	r2, [r7, #2]
 800ee80:	801a      	strh	r2, [r3, #0]
}
 800ee82:	bf00      	nop
 800ee84:	370c      	adds	r7, #12
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	40023c00 	.word	0x40023c00

0800ee94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800eea0:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4a0b      	ldr	r2, [pc, #44]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eeaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800eeac:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eeae:	4a09      	ldr	r2, [pc, #36]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800eeb4:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	4a06      	ldr	r2, [pc, #24]	; (800eed4 <FLASH_Program_Byte+0x40>)
 800eeba:	f043 0301 	orr.w	r3, r3, #1
 800eebe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	78fa      	ldrb	r2, [r7, #3]
 800eec4:	701a      	strb	r2, [r3, #0]
}
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	40023c00 	.word	0x40023c00

0800eed8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800eedc:	4b2f      	ldr	r3, [pc, #188]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	f003 0310 	and.w	r3, r3, #16
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d008      	beq.n	800eefa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800eee8:	4b2d      	ldr	r3, [pc, #180]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800eeea:	69db      	ldr	r3, [r3, #28]
 800eeec:	f043 0310 	orr.w	r3, r3, #16
 800eef0:	4a2b      	ldr	r2, [pc, #172]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800eef2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800eef4:	4b29      	ldr	r3, [pc, #164]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800eef6:	2210      	movs	r2, #16
 800eef8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800eefa:	4b28      	ldr	r3, [pc, #160]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	f003 0320 	and.w	r3, r3, #32
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d008      	beq.n	800ef18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ef06:	4b26      	ldr	r3, [pc, #152]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef08:	69db      	ldr	r3, [r3, #28]
 800ef0a:	f043 0308 	orr.w	r3, r3, #8
 800ef0e:	4a24      	ldr	r2, [pc, #144]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ef12:	4b22      	ldr	r3, [pc, #136]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef14:	2220      	movs	r2, #32
 800ef16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ef18:	4b20      	ldr	r3, [pc, #128]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d008      	beq.n	800ef36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ef24:	4b1e      	ldr	r3, [pc, #120]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	f043 0304 	orr.w	r3, r3, #4
 800ef2c:	4a1c      	ldr	r2, [pc, #112]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ef30:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef32:	2240      	movs	r2, #64	; 0x40
 800ef34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ef36:	4b19      	ldr	r3, [pc, #100]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d008      	beq.n	800ef54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ef42:	4b17      	ldr	r3, [pc, #92]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef44:	69db      	ldr	r3, [r3, #28]
 800ef46:	f043 0302 	orr.w	r3, r3, #2
 800ef4a:	4a15      	ldr	r2, [pc, #84]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ef4e:	4b13      	ldr	r3, [pc, #76]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef50:	2280      	movs	r2, #128	; 0x80
 800ef52:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ef54:	4b11      	ldr	r3, [pc, #68]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ef60:	4b0f      	ldr	r3, [pc, #60]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef62:	69db      	ldr	r3, [r3, #28]
 800ef64:	f043 0301 	orr.w	r3, r3, #1
 800ef68:	4a0d      	ldr	r2, [pc, #52]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ef6c:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef72:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ef74:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d008      	beq.n	800ef92 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ef80:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef82:	69db      	ldr	r3, [r3, #28]
 800ef84:	f043 0320 	orr.w	r3, r3, #32
 800ef88:	4a05      	ldr	r2, [pc, #20]	; (800efa0 <FLASH_SetErrorCode+0xc8>)
 800ef8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ef8c:	4b03      	ldr	r3, [pc, #12]	; (800ef9c <FLASH_SetErrorCode+0xc4>)
 800ef8e:	2202      	movs	r2, #2
 800ef90:	60da      	str	r2, [r3, #12]
  }
}
 800ef92:	bf00      	nop
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	40023c00 	.word	0x40023c00
 800efa0:	20012658 	.word	0x20012658

0800efa4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800efb6:	4b31      	ldr	r3, [pc, #196]	; (800f07c <HAL_FLASHEx_Erase+0xd8>)
 800efb8:	7e1b      	ldrb	r3, [r3, #24]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d101      	bne.n	800efc2 <HAL_FLASHEx_Erase+0x1e>
 800efbe:	2302      	movs	r3, #2
 800efc0:	e058      	b.n	800f074 <HAL_FLASHEx_Erase+0xd0>
 800efc2:	4b2e      	ldr	r3, [pc, #184]	; (800f07c <HAL_FLASHEx_Erase+0xd8>)
 800efc4:	2201      	movs	r2, #1
 800efc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800efc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800efcc:	f7ff feac 	bl	800ed28 <FLASH_WaitForLastOperation>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d148      	bne.n	800f06c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	f04f 32ff 	mov.w	r2, #4294967295
 800efe0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d115      	bne.n	800f016 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	f000 f844 	bl	800f084 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800effc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f000:	f7ff fe92 	bl	800ed28 <FLASH_WaitForLastOperation>
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800f008:	4b1d      	ldr	r3, [pc, #116]	; (800f080 <HAL_FLASHEx_Erase+0xdc>)
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	4a1c      	ldr	r2, [pc, #112]	; (800f080 <HAL_FLASHEx_Erase+0xdc>)
 800f00e:	f023 0304 	bic.w	r3, r3, #4
 800f012:	6113      	str	r3, [r2, #16]
 800f014:	e028      	b.n	800f068 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	60bb      	str	r3, [r7, #8]
 800f01c:	e01c      	b.n	800f058 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	b2db      	uxtb	r3, r3
 800f024:	4619      	mov	r1, r3
 800f026:	68b8      	ldr	r0, [r7, #8]
 800f028:	f000 f850 	bl	800f0cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f02c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f030:	f7ff fe7a 	bl	800ed28 <FLASH_WaitForLastOperation>
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <HAL_FLASHEx_Erase+0xdc>)
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	4a10      	ldr	r2, [pc, #64]	; (800f080 <HAL_FLASHEx_Erase+0xdc>)
 800f03e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f042:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800f044:	7bfb      	ldrb	r3, [r7, #15]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d003      	beq.n	800f052 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	601a      	str	r2, [r3, #0]
          break;
 800f050:	e00a      	b.n	800f068 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	3301      	adds	r3, #1
 800f056:	60bb      	str	r3, [r7, #8]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	4413      	add	r3, r2
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	429a      	cmp	r2, r3
 800f066:	d3da      	bcc.n	800f01e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800f068:	f000 f878 	bl	800f15c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <HAL_FLASHEx_Erase+0xd8>)
 800f06e:	2200      	movs	r2, #0
 800f070:	761a      	strb	r2, [r3, #24]

  return status;
 800f072:	7bfb      	ldrb	r3, [r7, #15]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	20012658 	.word	0x20012658
 800f080:	40023c00 	.word	0x40023c00

0800f084 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	6039      	str	r1, [r7, #0]
 800f08e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f090:	4b0d      	ldr	r3, [pc, #52]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	4a0c      	ldr	r2, [pc, #48]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f09a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f09c:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	4a09      	ldr	r2, [pc, #36]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f0a2:	f043 0304 	orr.w	r3, r3, #4
 800f0a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800f0a8:	4b07      	ldr	r3, [pc, #28]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f0aa:	691a      	ldr	r2, [r3, #16]
 800f0ac:	79fb      	ldrb	r3, [r7, #7]
 800f0ae:	021b      	lsls	r3, r3, #8
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	4a05      	ldr	r2, [pc, #20]	; (800f0c8 <FLASH_MassErase+0x44>)
 800f0b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f0b8:	6113      	str	r3, [r2, #16]
}
 800f0ba:	bf00      	nop
 800f0bc:	370c      	adds	r7, #12
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	40023c00 	.word	0x40023c00

0800f0cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f0dc:	78fb      	ldrb	r3, [r7, #3]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d102      	bne.n	800f0e8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	e010      	b.n	800f10a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f0e8:	78fb      	ldrb	r3, [r7, #3]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d103      	bne.n	800f0f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e009      	b.n	800f10a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800f0f6:	78fb      	ldrb	r3, [r7, #3]
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d103      	bne.n	800f104 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800f0fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f100:	60fb      	str	r3, [r7, #12]
 800f102:	e002      	b.n	800f10a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f104:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f108:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f10a:	4b13      	ldr	r3, [pc, #76]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	4a12      	ldr	r2, [pc, #72]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f114:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800f116:	4b10      	ldr	r3, [pc, #64]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f118:	691a      	ldr	r2, [r3, #16]
 800f11a:	490f      	ldr	r1, [pc, #60]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4313      	orrs	r3, r2
 800f120:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f122:	4b0d      	ldr	r3, [pc, #52]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f128:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f12c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f12e:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f130:	691a      	ldr	r2, [r3, #16]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	00db      	lsls	r3, r3, #3
 800f136:	4313      	orrs	r3, r2
 800f138:	4a07      	ldr	r2, [pc, #28]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f13a:	f043 0302 	orr.w	r3, r3, #2
 800f13e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f140:	4b05      	ldr	r3, [pc, #20]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	4a04      	ldr	r2, [pc, #16]	; (800f158 <FLASH_Erase_Sector+0x8c>)
 800f146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f14a:	6113      	str	r3, [r2, #16]
}
 800f14c:	bf00      	nop
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	40023c00 	.word	0x40023c00

0800f15c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800f15c:	b480      	push	{r7}
 800f15e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f160:	4b20      	ldr	r3, [pc, #128]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d017      	beq.n	800f19c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f16c:	4b1d      	ldr	r3, [pc, #116]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a1c      	ldr	r2, [pc, #112]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f172:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f176:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f178:	4b1a      	ldr	r3, [pc, #104]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a19      	ldr	r2, [pc, #100]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f17e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f182:	6013      	str	r3, [r2, #0]
 800f184:	4b17      	ldr	r3, [pc, #92]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a16      	ldr	r2, [pc, #88]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f18a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f18e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f190:	4b14      	ldr	r3, [pc, #80]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a13      	ldr	r2, [pc, #76]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f19a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f19c:	4b11      	ldr	r3, [pc, #68]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d017      	beq.n	800f1d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f1a8:	4b0e      	ldr	r3, [pc, #56]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a0d      	ldr	r2, [pc, #52]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a0a      	ldr	r2, [pc, #40]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a07      	ldr	r2, [pc, #28]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f1cc:	4b05      	ldr	r3, [pc, #20]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a04      	ldr	r2, [pc, #16]	; (800f1e4 <FLASH_FlushCaches+0x88>)
 800f1d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f1d6:	6013      	str	r3, [r2, #0]
  }
}
 800f1d8:	bf00      	nop
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	40023c00 	.word	0x40023c00

0800f1e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b089      	sub	sp, #36	; 0x24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f1fe:	2300      	movs	r3, #0
 800f200:	61fb      	str	r3, [r7, #28]
 800f202:	e159      	b.n	800f4b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f204:	2201      	movs	r2, #1
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	fa02 f303 	lsl.w	r3, r2, r3
 800f20c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	697a      	ldr	r2, [r7, #20]
 800f214:	4013      	ands	r3, r2
 800f216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	f040 8148 	bne.w	800f4b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	2b01      	cmp	r3, #1
 800f228:	d00b      	beq.n	800f242 <HAL_GPIO_Init+0x5a>
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	2b02      	cmp	r3, #2
 800f230:	d007      	beq.n	800f242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f236:	2b11      	cmp	r3, #17
 800f238:	d003      	beq.n	800f242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	2b12      	cmp	r3, #18
 800f240:	d130      	bne.n	800f2a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	2203      	movs	r2, #3
 800f24e:	fa02 f303 	lsl.w	r3, r2, r3
 800f252:	43db      	mvns	r3, r3
 800f254:	69ba      	ldr	r2, [r7, #24]
 800f256:	4013      	ands	r3, r2
 800f258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	68da      	ldr	r2, [r3, #12]
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	fa02 f303 	lsl.w	r3, r2, r3
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	4313      	orrs	r3, r2
 800f26a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	69ba      	ldr	r2, [r7, #24]
 800f270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f278:	2201      	movs	r2, #1
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	fa02 f303 	lsl.w	r3, r2, r3
 800f280:	43db      	mvns	r3, r3
 800f282:	69ba      	ldr	r2, [r7, #24]
 800f284:	4013      	ands	r3, r2
 800f286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	091b      	lsrs	r3, r3, #4
 800f28e:	f003 0201 	and.w	r2, r3, #1
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	fa02 f303 	lsl.w	r3, r2, r3
 800f298:	69ba      	ldr	r2, [r7, #24]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	005b      	lsls	r3, r3, #1
 800f2ae:	2203      	movs	r2, #3
 800f2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2b4:	43db      	mvns	r3, r3
 800f2b6:	69ba      	ldr	r2, [r7, #24]
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2c8:	69ba      	ldr	r2, [r7, #24]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	2b02      	cmp	r3, #2
 800f2da:	d003      	beq.n	800f2e4 <HAL_GPIO_Init+0xfc>
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b12      	cmp	r3, #18
 800f2e2:	d123      	bne.n	800f32c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	08da      	lsrs	r2, r3, #3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	3208      	adds	r2, #8
 800f2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	f003 0307 	and.w	r3, r3, #7
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	220f      	movs	r2, #15
 800f2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f300:	43db      	mvns	r3, r3
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	4013      	ands	r3, r2
 800f306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	691a      	ldr	r2, [r3, #16]
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	f003 0307 	and.w	r3, r3, #7
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	fa02 f303 	lsl.w	r3, r2, r3
 800f318:	69ba      	ldr	r2, [r7, #24]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	08da      	lsrs	r2, r3, #3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3208      	adds	r2, #8
 800f326:	69b9      	ldr	r1, [r7, #24]
 800f328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	2203      	movs	r2, #3
 800f338:	fa02 f303 	lsl.w	r3, r2, r3
 800f33c:	43db      	mvns	r3, r3
 800f33e:	69ba      	ldr	r2, [r7, #24]
 800f340:	4013      	ands	r3, r2
 800f342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	f003 0203 	and.w	r2, r3, #3
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	fa02 f303 	lsl.w	r3, r2, r3
 800f354:	69ba      	ldr	r2, [r7, #24]
 800f356:	4313      	orrs	r3, r2
 800f358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 80a2 	beq.w	800f4b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	4b56      	ldr	r3, [pc, #344]	; (800f4cc <HAL_GPIO_Init+0x2e4>)
 800f374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f376:	4a55      	ldr	r2, [pc, #340]	; (800f4cc <HAL_GPIO_Init+0x2e4>)
 800f378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f37c:	6453      	str	r3, [r2, #68]	; 0x44
 800f37e:	4b53      	ldr	r3, [pc, #332]	; (800f4cc <HAL_GPIO_Init+0x2e4>)
 800f380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f386:	60fb      	str	r3, [r7, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f38a:	4a51      	ldr	r2, [pc, #324]	; (800f4d0 <HAL_GPIO_Init+0x2e8>)
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	089b      	lsrs	r3, r3, #2
 800f390:	3302      	adds	r3, #2
 800f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	f003 0303 	and.w	r3, r3, #3
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	220f      	movs	r2, #15
 800f3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3a6:	43db      	mvns	r3, r3
 800f3a8:	69ba      	ldr	r2, [r7, #24]
 800f3aa:	4013      	ands	r3, r2
 800f3ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a48      	ldr	r2, [pc, #288]	; (800f4d4 <HAL_GPIO_Init+0x2ec>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d019      	beq.n	800f3ea <HAL_GPIO_Init+0x202>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a47      	ldr	r2, [pc, #284]	; (800f4d8 <HAL_GPIO_Init+0x2f0>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d013      	beq.n	800f3e6 <HAL_GPIO_Init+0x1fe>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a46      	ldr	r2, [pc, #280]	; (800f4dc <HAL_GPIO_Init+0x2f4>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d00d      	beq.n	800f3e2 <HAL_GPIO_Init+0x1fa>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a45      	ldr	r2, [pc, #276]	; (800f4e0 <HAL_GPIO_Init+0x2f8>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d007      	beq.n	800f3de <HAL_GPIO_Init+0x1f6>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a44      	ldr	r2, [pc, #272]	; (800f4e4 <HAL_GPIO_Init+0x2fc>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d101      	bne.n	800f3da <HAL_GPIO_Init+0x1f2>
 800f3d6:	2304      	movs	r3, #4
 800f3d8:	e008      	b.n	800f3ec <HAL_GPIO_Init+0x204>
 800f3da:	2307      	movs	r3, #7
 800f3dc:	e006      	b.n	800f3ec <HAL_GPIO_Init+0x204>
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e004      	b.n	800f3ec <HAL_GPIO_Init+0x204>
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	e002      	b.n	800f3ec <HAL_GPIO_Init+0x204>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e000      	b.n	800f3ec <HAL_GPIO_Init+0x204>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	69fa      	ldr	r2, [r7, #28]
 800f3ee:	f002 0203 	and.w	r2, r2, #3
 800f3f2:	0092      	lsls	r2, r2, #2
 800f3f4:	4093      	lsls	r3, r2
 800f3f6:	69ba      	ldr	r2, [r7, #24]
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f3fc:	4934      	ldr	r1, [pc, #208]	; (800f4d0 <HAL_GPIO_Init+0x2e8>)
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	089b      	lsrs	r3, r3, #2
 800f402:	3302      	adds	r3, #2
 800f404:	69ba      	ldr	r2, [r7, #24]
 800f406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f40a:	4b37      	ldr	r3, [pc, #220]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	43db      	mvns	r3, r3
 800f414:	69ba      	ldr	r2, [r7, #24]
 800f416:	4013      	ands	r3, r2
 800f418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800f426:	69ba      	ldr	r2, [r7, #24]
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	4313      	orrs	r3, r2
 800f42c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f42e:	4a2e      	ldr	r2, [pc, #184]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f434:	4b2c      	ldr	r3, [pc, #176]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	43db      	mvns	r3, r3
 800f43e:	69ba      	ldr	r2, [r7, #24]
 800f440:	4013      	ands	r3, r2
 800f442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800f450:	69ba      	ldr	r2, [r7, #24]
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	4313      	orrs	r3, r2
 800f456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f458:	4a23      	ldr	r2, [pc, #140]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f45e:	4b22      	ldr	r3, [pc, #136]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	43db      	mvns	r3, r3
 800f468:	69ba      	ldr	r2, [r7, #24]
 800f46a:	4013      	ands	r3, r2
 800f46c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d003      	beq.n	800f482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800f47a:	69ba      	ldr	r2, [r7, #24]
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	4313      	orrs	r3, r2
 800f480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f482:	4a19      	ldr	r2, [pc, #100]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f488:	4b17      	ldr	r3, [pc, #92]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	43db      	mvns	r3, r3
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	4013      	ands	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d003      	beq.n	800f4ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800f4a4:	69ba      	ldr	r2, [r7, #24]
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f4ac:	4a0e      	ldr	r2, [pc, #56]	; (800f4e8 <HAL_GPIO_Init+0x300>)
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	61fb      	str	r3, [r7, #28]
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	2b0f      	cmp	r3, #15
 800f4bc:	f67f aea2 	bls.w	800f204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f4c0:	bf00      	nop
 800f4c2:	3724      	adds	r7, #36	; 0x24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr
 800f4cc:	40023800 	.word	0x40023800
 800f4d0:	40013800 	.word	0x40013800
 800f4d4:	40020000 	.word	0x40020000
 800f4d8:	40020400 	.word	0x40020400
 800f4dc:	40020800 	.word	0x40020800
 800f4e0:	40020c00 	.word	0x40020c00
 800f4e4:	40021000 	.word	0x40021000
 800f4e8:	40013c00 	.word	0x40013c00

0800f4ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	691a      	ldr	r2, [r3, #16]
 800f4fc:	887b      	ldrh	r3, [r7, #2]
 800f4fe:	4013      	ands	r3, r2
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f504:	2301      	movs	r3, #1
 800f506:	73fb      	strb	r3, [r7, #15]
 800f508:	e001      	b.n	800f50e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f50a:	2300      	movs	r3, #0
 800f50c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	460b      	mov	r3, r1
 800f526:	807b      	strh	r3, [r7, #2]
 800f528:	4613      	mov	r3, r2
 800f52a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f52c:	787b      	ldrb	r3, [r7, #1]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d003      	beq.n	800f53a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f532:	887a      	ldrh	r2, [r7, #2]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f538:	e003      	b.n	800f542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f53a:	887b      	ldrh	r3, [r7, #2]
 800f53c:	041a      	lsls	r2, r3, #16
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	619a      	str	r2, [r3, #24]
}
 800f542:	bf00      	nop
 800f544:	370c      	adds	r7, #12
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr

0800f54e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f54e:	b480      	push	{r7}
 800f550:	b083      	sub	sp, #12
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	460b      	mov	r3, r1
 800f558:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	695a      	ldr	r2, [r3, #20]
 800f55e:	887b      	ldrh	r3, [r7, #2]
 800f560:	401a      	ands	r2, r3
 800f562:	887b      	ldrh	r3, [r7, #2]
 800f564:	429a      	cmp	r2, r3
 800f566:	d104      	bne.n	800f572 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f568:	887b      	ldrh	r3, [r7, #2]
 800f56a:	041a      	lsls	r2, r3, #16
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800f570:	e002      	b.n	800f578 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800f572:	887a      	ldrh	r2, [r7, #2]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	619a      	str	r2, [r3, #24]
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	e25b      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f003 0301 	and.w	r3, r3, #1
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d075      	beq.n	800f68e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f5a2:	4ba3      	ldr	r3, [pc, #652]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	f003 030c 	and.w	r3, r3, #12
 800f5aa:	2b04      	cmp	r3, #4
 800f5ac:	d00c      	beq.n	800f5c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f5ae:	4ba0      	ldr	r3, [pc, #640]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f5b6:	2b08      	cmp	r3, #8
 800f5b8:	d112      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f5ba:	4b9d      	ldr	r3, [pc, #628]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f5c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5c6:	d10b      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f5c8:	4b99      	ldr	r3, [pc, #612]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d05b      	beq.n	800f68c <HAL_RCC_OscConfig+0x108>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d157      	bne.n	800f68c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e236      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5e8:	d106      	bne.n	800f5f8 <HAL_RCC_OscConfig+0x74>
 800f5ea:	4b91      	ldr	r3, [pc, #580]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4a90      	ldr	r2, [pc, #576]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f5f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	e01d      	b.n	800f634 <HAL_RCC_OscConfig+0xb0>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f600:	d10c      	bne.n	800f61c <HAL_RCC_OscConfig+0x98>
 800f602:	4b8b      	ldr	r3, [pc, #556]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a8a      	ldr	r2, [pc, #552]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f60c:	6013      	str	r3, [r2, #0]
 800f60e:	4b88      	ldr	r3, [pc, #544]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	4a87      	ldr	r2, [pc, #540]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	e00b      	b.n	800f634 <HAL_RCC_OscConfig+0xb0>
 800f61c:	4b84      	ldr	r3, [pc, #528]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a83      	ldr	r2, [pc, #524]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f626:	6013      	str	r3, [r2, #0]
 800f628:	4b81      	ldr	r3, [pc, #516]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a80      	ldr	r2, [pc, #512]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f62e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d013      	beq.n	800f664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f63c:	f7fe fa5a 	bl	800daf4 <HAL_GetTick>
 800f640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f642:	e008      	b.n	800f656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f644:	f7fe fa56 	bl	800daf4 <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	2b64      	cmp	r3, #100	; 0x64
 800f650:	d901      	bls.n	800f656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f652:	2303      	movs	r3, #3
 800f654:	e1fb      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f656:	4b76      	ldr	r3, [pc, #472]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d0f0      	beq.n	800f644 <HAL_RCC_OscConfig+0xc0>
 800f662:	e014      	b.n	800f68e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f664:	f7fe fa46 	bl	800daf4 <HAL_GetTick>
 800f668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f66a:	e008      	b.n	800f67e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f66c:	f7fe fa42 	bl	800daf4 <HAL_GetTick>
 800f670:	4602      	mov	r2, r0
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	1ad3      	subs	r3, r2, r3
 800f676:	2b64      	cmp	r3, #100	; 0x64
 800f678:	d901      	bls.n	800f67e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f67a:	2303      	movs	r3, #3
 800f67c:	e1e7      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f67e:	4b6c      	ldr	r3, [pc, #432]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1f0      	bne.n	800f66c <HAL_RCC_OscConfig+0xe8>
 800f68a:	e000      	b.n	800f68e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f68c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f003 0302 	and.w	r3, r3, #2
 800f696:	2b00      	cmp	r3, #0
 800f698:	d063      	beq.n	800f762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f69a:	4b65      	ldr	r3, [pc, #404]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	f003 030c 	and.w	r3, r3, #12
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00b      	beq.n	800f6be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f6a6:	4b62      	ldr	r3, [pc, #392]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f6ae:	2b08      	cmp	r3, #8
 800f6b0:	d11c      	bne.n	800f6ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f6b2:	4b5f      	ldr	r3, [pc, #380]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d116      	bne.n	800f6ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f6be:	4b5c      	ldr	r3, [pc, #368]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d005      	beq.n	800f6d6 <HAL_RCC_OscConfig+0x152>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d001      	beq.n	800f6d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e1bb      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6d6:	4b56      	ldr	r3, [pc, #344]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	4952      	ldr	r1, [pc, #328]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f6ea:	e03a      	b.n	800f762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d020      	beq.n	800f736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f6f4:	4b4f      	ldr	r3, [pc, #316]	; (800f834 <HAL_RCC_OscConfig+0x2b0>)
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6fa:	f7fe f9fb 	bl	800daf4 <HAL_GetTick>
 800f6fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f700:	e008      	b.n	800f714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f702:	f7fe f9f7 	bl	800daf4 <HAL_GetTick>
 800f706:	4602      	mov	r2, r0
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d901      	bls.n	800f714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f710:	2303      	movs	r3, #3
 800f712:	e19c      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f714:	4b46      	ldr	r3, [pc, #280]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f003 0302 	and.w	r3, r3, #2
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d0f0      	beq.n	800f702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f720:	4b43      	ldr	r3, [pc, #268]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	00db      	lsls	r3, r3, #3
 800f72e:	4940      	ldr	r1, [pc, #256]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f730:	4313      	orrs	r3, r2
 800f732:	600b      	str	r3, [r1, #0]
 800f734:	e015      	b.n	800f762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f736:	4b3f      	ldr	r3, [pc, #252]	; (800f834 <HAL_RCC_OscConfig+0x2b0>)
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f73c:	f7fe f9da 	bl	800daf4 <HAL_GetTick>
 800f740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f742:	e008      	b.n	800f756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f744:	f7fe f9d6 	bl	800daf4 <HAL_GetTick>
 800f748:	4602      	mov	r2, r0
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	2b02      	cmp	r3, #2
 800f750:	d901      	bls.n	800f756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f752:	2303      	movs	r3, #3
 800f754:	e17b      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f756:	4b36      	ldr	r3, [pc, #216]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f003 0302 	and.w	r3, r3, #2
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1f0      	bne.n	800f744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f003 0308 	and.w	r3, r3, #8
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d030      	beq.n	800f7d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	695b      	ldr	r3, [r3, #20]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d016      	beq.n	800f7a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f776:	4b30      	ldr	r3, [pc, #192]	; (800f838 <HAL_RCC_OscConfig+0x2b4>)
 800f778:	2201      	movs	r2, #1
 800f77a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f77c:	f7fe f9ba 	bl	800daf4 <HAL_GetTick>
 800f780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f782:	e008      	b.n	800f796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f784:	f7fe f9b6 	bl	800daf4 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d901      	bls.n	800f796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e15b      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f796:	4b26      	ldr	r3, [pc, #152]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f79a:	f003 0302 	and.w	r3, r3, #2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0f0      	beq.n	800f784 <HAL_RCC_OscConfig+0x200>
 800f7a2:	e015      	b.n	800f7d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f7a4:	4b24      	ldr	r3, [pc, #144]	; (800f838 <HAL_RCC_OscConfig+0x2b4>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f7aa:	f7fe f9a3 	bl	800daf4 <HAL_GetTick>
 800f7ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f7b0:	e008      	b.n	800f7c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f7b2:	f7fe f99f 	bl	800daf4 <HAL_GetTick>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	d901      	bls.n	800f7c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	e144      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f7c4:	4b1a      	ldr	r3, [pc, #104]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c8:	f003 0302 	and.w	r3, r3, #2
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1f0      	bne.n	800f7b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 80a0 	beq.w	800f91e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f7e2:	4b13      	ldr	r3, [pc, #76]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10f      	bne.n	800f80e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	60bb      	str	r3, [r7, #8]
 800f7f2:	4b0f      	ldr	r3, [pc, #60]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f6:	4a0e      	ldr	r2, [pc, #56]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f7f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7fc:	6413      	str	r3, [r2, #64]	; 0x40
 800f7fe:	4b0c      	ldr	r3, [pc, #48]	; (800f830 <HAL_RCC_OscConfig+0x2ac>)
 800f800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f806:	60bb      	str	r3, [r7, #8]
 800f808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f80a:	2301      	movs	r3, #1
 800f80c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f80e:	4b0b      	ldr	r3, [pc, #44]	; (800f83c <HAL_RCC_OscConfig+0x2b8>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f816:	2b00      	cmp	r3, #0
 800f818:	d121      	bne.n	800f85e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f81a:	4b08      	ldr	r3, [pc, #32]	; (800f83c <HAL_RCC_OscConfig+0x2b8>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a07      	ldr	r2, [pc, #28]	; (800f83c <HAL_RCC_OscConfig+0x2b8>)
 800f820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f826:	f7fe f965 	bl	800daf4 <HAL_GetTick>
 800f82a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f82c:	e011      	b.n	800f852 <HAL_RCC_OscConfig+0x2ce>
 800f82e:	bf00      	nop
 800f830:	40023800 	.word	0x40023800
 800f834:	42470000 	.word	0x42470000
 800f838:	42470e80 	.word	0x42470e80
 800f83c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f840:	f7fe f958 	bl	800daf4 <HAL_GetTick>
 800f844:	4602      	mov	r2, r0
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d901      	bls.n	800f852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f84e:	2303      	movs	r3, #3
 800f850:	e0fd      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f852:	4b81      	ldr	r3, [pc, #516]	; (800fa58 <HAL_RCC_OscConfig+0x4d4>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0f0      	beq.n	800f840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d106      	bne.n	800f874 <HAL_RCC_OscConfig+0x2f0>
 800f866:	4b7d      	ldr	r3, [pc, #500]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f86a:	4a7c      	ldr	r2, [pc, #496]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f86c:	f043 0301 	orr.w	r3, r3, #1
 800f870:	6713      	str	r3, [r2, #112]	; 0x70
 800f872:	e01c      	b.n	800f8ae <HAL_RCC_OscConfig+0x32a>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	2b05      	cmp	r3, #5
 800f87a:	d10c      	bne.n	800f896 <HAL_RCC_OscConfig+0x312>
 800f87c:	4b77      	ldr	r3, [pc, #476]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f880:	4a76      	ldr	r2, [pc, #472]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f882:	f043 0304 	orr.w	r3, r3, #4
 800f886:	6713      	str	r3, [r2, #112]	; 0x70
 800f888:	4b74      	ldr	r3, [pc, #464]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f88c:	4a73      	ldr	r2, [pc, #460]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f88e:	f043 0301 	orr.w	r3, r3, #1
 800f892:	6713      	str	r3, [r2, #112]	; 0x70
 800f894:	e00b      	b.n	800f8ae <HAL_RCC_OscConfig+0x32a>
 800f896:	4b71      	ldr	r3, [pc, #452]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f89a:	4a70      	ldr	r2, [pc, #448]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f89c:	f023 0301 	bic.w	r3, r3, #1
 800f8a0:	6713      	str	r3, [r2, #112]	; 0x70
 800f8a2:	4b6e      	ldr	r3, [pc, #440]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a6:	4a6d      	ldr	r2, [pc, #436]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f8a8:	f023 0304 	bic.w	r3, r3, #4
 800f8ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d015      	beq.n	800f8e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8b6:	f7fe f91d 	bl	800daf4 <HAL_GetTick>
 800f8ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f8bc:	e00a      	b.n	800f8d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f8be:	f7fe f919 	bl	800daf4 <HAL_GetTick>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	1ad3      	subs	r3, r2, r3
 800f8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d901      	bls.n	800f8d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f8d0:	2303      	movs	r3, #3
 800f8d2:	e0bc      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f8d4:	4b61      	ldr	r3, [pc, #388]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d8:	f003 0302 	and.w	r3, r3, #2
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d0ee      	beq.n	800f8be <HAL_RCC_OscConfig+0x33a>
 800f8e0:	e014      	b.n	800f90c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8e2:	f7fe f907 	bl	800daf4 <HAL_GetTick>
 800f8e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f8e8:	e00a      	b.n	800f900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f8ea:	f7fe f903 	bl	800daf4 <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d901      	bls.n	800f900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	e0a6      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f900:	4b56      	ldr	r3, [pc, #344]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f904:	f003 0302 	and.w	r3, r3, #2
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1ee      	bne.n	800f8ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f90c:	7dfb      	ldrb	r3, [r7, #23]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d105      	bne.n	800f91e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f912:	4b52      	ldr	r3, [pc, #328]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f916:	4a51      	ldr	r2, [pc, #324]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f91c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 8092 	beq.w	800fa4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f928:	4b4c      	ldr	r3, [pc, #304]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	f003 030c 	and.w	r3, r3, #12
 800f930:	2b08      	cmp	r3, #8
 800f932:	d05c      	beq.n	800f9ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	699b      	ldr	r3, [r3, #24]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d141      	bne.n	800f9c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f93c:	4b48      	ldr	r3, [pc, #288]	; (800fa60 <HAL_RCC_OscConfig+0x4dc>)
 800f93e:	2200      	movs	r2, #0
 800f940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f942:	f7fe f8d7 	bl	800daf4 <HAL_GetTick>
 800f946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f948:	e008      	b.n	800f95c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f94a:	f7fe f8d3 	bl	800daf4 <HAL_GetTick>
 800f94e:	4602      	mov	r2, r0
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	2b02      	cmp	r3, #2
 800f956:	d901      	bls.n	800f95c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	e078      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f95c:	4b3f      	ldr	r3, [pc, #252]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f0      	bne.n	800f94a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	69da      	ldr	r2, [r3, #28]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a1b      	ldr	r3, [r3, #32]
 800f970:	431a      	orrs	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f976:	019b      	lsls	r3, r3, #6
 800f978:	431a      	orrs	r2, r3
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97e:	085b      	lsrs	r3, r3, #1
 800f980:	3b01      	subs	r3, #1
 800f982:	041b      	lsls	r3, r3, #16
 800f984:	431a      	orrs	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98a:	061b      	lsls	r3, r3, #24
 800f98c:	4933      	ldr	r1, [pc, #204]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f98e:	4313      	orrs	r3, r2
 800f990:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f992:	4b33      	ldr	r3, [pc, #204]	; (800fa60 <HAL_RCC_OscConfig+0x4dc>)
 800f994:	2201      	movs	r2, #1
 800f996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f998:	f7fe f8ac 	bl	800daf4 <HAL_GetTick>
 800f99c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f99e:	e008      	b.n	800f9b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f9a0:	f7fe f8a8 	bl	800daf4 <HAL_GetTick>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d901      	bls.n	800f9b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	e04d      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f9b2:	4b2a      	ldr	r3, [pc, #168]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d0f0      	beq.n	800f9a0 <HAL_RCC_OscConfig+0x41c>
 800f9be:	e045      	b.n	800fa4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9c0:	4b27      	ldr	r3, [pc, #156]	; (800fa60 <HAL_RCC_OscConfig+0x4dc>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9c6:	f7fe f895 	bl	800daf4 <HAL_GetTick>
 800f9ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9cc:	e008      	b.n	800f9e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f9ce:	f7fe f891 	bl	800daf4 <HAL_GetTick>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d901      	bls.n	800f9e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f9dc:	2303      	movs	r3, #3
 800f9de:	e036      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9e0:	4b1e      	ldr	r3, [pc, #120]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d1f0      	bne.n	800f9ce <HAL_RCC_OscConfig+0x44a>
 800f9ec:	e02e      	b.n	800fa4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d101      	bne.n	800f9fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e029      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f9fa:	4b18      	ldr	r3, [pc, #96]	; (800fa5c <HAL_RCC_OscConfig+0x4d8>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d11c      	bne.n	800fa48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d115      	bne.n	800fa48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fa22:	4013      	ands	r3, r2
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d10d      	bne.n	800fa48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d106      	bne.n	800fa48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d001      	beq.n	800fa4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e000      	b.n	800fa4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	40007000 	.word	0x40007000
 800fa5c:	40023800 	.word	0x40023800
 800fa60:	42470060 	.word	0x42470060

0800fa64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa74:	2301      	movs	r3, #1
 800fa76:	e0cc      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fa78:	4b68      	ldr	r3, [pc, #416]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 030f 	and.w	r3, r3, #15
 800fa80:	683a      	ldr	r2, [r7, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d90c      	bls.n	800faa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa86:	4b65      	ldr	r3, [pc, #404]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	b2d2      	uxtb	r2, r2
 800fa8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa8e:	4b63      	ldr	r3, [pc, #396]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 030f 	and.w	r3, r3, #15
 800fa96:	683a      	ldr	r2, [r7, #0]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d001      	beq.n	800faa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e0b8      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d020      	beq.n	800faee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f003 0304 	and.w	r3, r3, #4
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fab8:	4b59      	ldr	r3, [pc, #356]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	4a58      	ldr	r2, [pc, #352]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fabe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f003 0308 	and.w	r3, r3, #8
 800facc:	2b00      	cmp	r3, #0
 800face:	d005      	beq.n	800fadc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fad0:	4b53      	ldr	r3, [pc, #332]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	4a52      	ldr	r2, [pc, #328]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fadc:	4b50      	ldr	r3, [pc, #320]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	494d      	ldr	r1, [pc, #308]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800faea:	4313      	orrs	r3, r2
 800faec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d044      	beq.n	800fb84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d107      	bne.n	800fb12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fb02:	4b47      	ldr	r3, [pc, #284]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d119      	bne.n	800fb42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e07f      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d003      	beq.n	800fb22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb1e:	2b03      	cmp	r3, #3
 800fb20:	d107      	bne.n	800fb32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb22:	4b3f      	ldr	r3, [pc, #252]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d109      	bne.n	800fb42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e06f      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb32:	4b3b      	ldr	r3, [pc, #236]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e067      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fb42:	4b37      	ldr	r3, [pc, #220]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	f023 0203 	bic.w	r2, r3, #3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4934      	ldr	r1, [pc, #208]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb50:	4313      	orrs	r3, r2
 800fb52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fb54:	f7fd ffce 	bl	800daf4 <HAL_GetTick>
 800fb58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb5a:	e00a      	b.n	800fb72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb5c:	f7fd ffca 	bl	800daf4 <HAL_GetTick>
 800fb60:	4602      	mov	r2, r0
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d901      	bls.n	800fb72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e04f      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb72:	4b2b      	ldr	r3, [pc, #172]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	f003 020c 	and.w	r2, r3, #12
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d1eb      	bne.n	800fb5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fb84:	4b25      	ldr	r3, [pc, #148]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f003 030f 	and.w	r3, r3, #15
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d20c      	bcs.n	800fbac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb92:	4b22      	ldr	r3, [pc, #136]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fb94:	683a      	ldr	r2, [r7, #0]
 800fb96:	b2d2      	uxtb	r2, r2
 800fb98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb9a:	4b20      	ldr	r3, [pc, #128]	; (800fc1c <HAL_RCC_ClockConfig+0x1b8>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f003 030f 	and.w	r3, r3, #15
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d001      	beq.n	800fbac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e032      	b.n	800fc12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f003 0304 	and.w	r3, r3, #4
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d008      	beq.n	800fbca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fbb8:	4b19      	ldr	r3, [pc, #100]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	4916      	ldr	r1, [pc, #88]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f003 0308 	and.w	r3, r3, #8
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d009      	beq.n	800fbea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fbd6:	4b12      	ldr	r3, [pc, #72]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	691b      	ldr	r3, [r3, #16]
 800fbe2:	00db      	lsls	r3, r3, #3
 800fbe4:	490e      	ldr	r1, [pc, #56]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fbea:	f000 f821 	bl	800fc30 <HAL_RCC_GetSysClockFreq>
 800fbee:	4601      	mov	r1, r0
 800fbf0:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <HAL_RCC_ClockConfig+0x1bc>)
 800fbf2:	689b      	ldr	r3, [r3, #8]
 800fbf4:	091b      	lsrs	r3, r3, #4
 800fbf6:	f003 030f 	and.w	r3, r3, #15
 800fbfa:	4a0a      	ldr	r2, [pc, #40]	; (800fc24 <HAL_RCC_ClockConfig+0x1c0>)
 800fbfc:	5cd3      	ldrb	r3, [r2, r3]
 800fbfe:	fa21 f303 	lsr.w	r3, r1, r3
 800fc02:	4a09      	ldr	r2, [pc, #36]	; (800fc28 <HAL_RCC_ClockConfig+0x1c4>)
 800fc04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fc06:	4b09      	ldr	r3, [pc, #36]	; (800fc2c <HAL_RCC_ClockConfig+0x1c8>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fd ff2e 	bl	800da6c <HAL_InitTick>

  return HAL_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	40023c00 	.word	0x40023c00
 800fc20:	40023800 	.word	0x40023800
 800fc24:	08014a84 	.word	0x08014a84
 800fc28:	20000004 	.word	0x20000004
 800fc2c:	20000008 	.word	0x20000008

0800fc30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fc36:	2300      	movs	r3, #0
 800fc38:	607b      	str	r3, [r7, #4]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800fc42:	2300      	movs	r3, #0
 800fc44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc46:	4b50      	ldr	r3, [pc, #320]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	f003 030c 	and.w	r3, r3, #12
 800fc4e:	2b04      	cmp	r3, #4
 800fc50:	d007      	beq.n	800fc62 <HAL_RCC_GetSysClockFreq+0x32>
 800fc52:	2b08      	cmp	r3, #8
 800fc54:	d008      	beq.n	800fc68 <HAL_RCC_GetSysClockFreq+0x38>
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f040 808d 	bne.w	800fd76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fc5c:	4b4b      	ldr	r3, [pc, #300]	; (800fd8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800fc5e:	60bb      	str	r3, [r7, #8]
       break;
 800fc60:	e08c      	b.n	800fd7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fc62:	4b4b      	ldr	r3, [pc, #300]	; (800fd90 <HAL_RCC_GetSysClockFreq+0x160>)
 800fc64:	60bb      	str	r3, [r7, #8]
      break;
 800fc66:	e089      	b.n	800fd7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fc68:	4b47      	ldr	r3, [pc, #284]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fc72:	4b45      	ldr	r3, [pc, #276]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d023      	beq.n	800fcc6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc7e:	4b42      	ldr	r3, [pc, #264]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	099b      	lsrs	r3, r3, #6
 800fc84:	f04f 0400 	mov.w	r4, #0
 800fc88:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fc8c:	f04f 0200 	mov.w	r2, #0
 800fc90:	ea03 0501 	and.w	r5, r3, r1
 800fc94:	ea04 0602 	and.w	r6, r4, r2
 800fc98:	4a3d      	ldr	r2, [pc, #244]	; (800fd90 <HAL_RCC_GetSysClockFreq+0x160>)
 800fc9a:	fb02 f106 	mul.w	r1, r2, r6
 800fc9e:	2200      	movs	r2, #0
 800fca0:	fb02 f205 	mul.w	r2, r2, r5
 800fca4:	440a      	add	r2, r1
 800fca6:	493a      	ldr	r1, [pc, #232]	; (800fd90 <HAL_RCC_GetSysClockFreq+0x160>)
 800fca8:	fba5 0101 	umull	r0, r1, r5, r1
 800fcac:	1853      	adds	r3, r2, r1
 800fcae:	4619      	mov	r1, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f04f 0400 	mov.w	r4, #0
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4623      	mov	r3, r4
 800fcba:	f7f0 ffcd 	bl	8000c58 <__aeabi_uldivmod>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	60fb      	str	r3, [r7, #12]
 800fcc4:	e049      	b.n	800fd5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fcc6:	4b30      	ldr	r3, [pc, #192]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	099b      	lsrs	r3, r3, #6
 800fccc:	f04f 0400 	mov.w	r4, #0
 800fcd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fcd4:	f04f 0200 	mov.w	r2, #0
 800fcd8:	ea03 0501 	and.w	r5, r3, r1
 800fcdc:	ea04 0602 	and.w	r6, r4, r2
 800fce0:	4629      	mov	r1, r5
 800fce2:	4632      	mov	r2, r6
 800fce4:	f04f 0300 	mov.w	r3, #0
 800fce8:	f04f 0400 	mov.w	r4, #0
 800fcec:	0154      	lsls	r4, r2, #5
 800fcee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800fcf2:	014b      	lsls	r3, r1, #5
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4622      	mov	r2, r4
 800fcf8:	1b49      	subs	r1, r1, r5
 800fcfa:	eb62 0206 	sbc.w	r2, r2, r6
 800fcfe:	f04f 0300 	mov.w	r3, #0
 800fd02:	f04f 0400 	mov.w	r4, #0
 800fd06:	0194      	lsls	r4, r2, #6
 800fd08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800fd0c:	018b      	lsls	r3, r1, #6
 800fd0e:	1a5b      	subs	r3, r3, r1
 800fd10:	eb64 0402 	sbc.w	r4, r4, r2
 800fd14:	f04f 0100 	mov.w	r1, #0
 800fd18:	f04f 0200 	mov.w	r2, #0
 800fd1c:	00e2      	lsls	r2, r4, #3
 800fd1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800fd22:	00d9      	lsls	r1, r3, #3
 800fd24:	460b      	mov	r3, r1
 800fd26:	4614      	mov	r4, r2
 800fd28:	195b      	adds	r3, r3, r5
 800fd2a:	eb44 0406 	adc.w	r4, r4, r6
 800fd2e:	f04f 0100 	mov.w	r1, #0
 800fd32:	f04f 0200 	mov.w	r2, #0
 800fd36:	02a2      	lsls	r2, r4, #10
 800fd38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800fd3c:	0299      	lsls	r1, r3, #10
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4614      	mov	r4, r2
 800fd42:	4618      	mov	r0, r3
 800fd44:	4621      	mov	r1, r4
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f04f 0400 	mov.w	r4, #0
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	4623      	mov	r3, r4
 800fd50:	f7f0 ff82 	bl	8000c58 <__aeabi_uldivmod>
 800fd54:	4603      	mov	r3, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fd5a:	4b0b      	ldr	r3, [pc, #44]	; (800fd88 <HAL_RCC_GetSysClockFreq+0x158>)
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	0c1b      	lsrs	r3, r3, #16
 800fd60:	f003 0303 	and.w	r3, r3, #3
 800fd64:	3301      	adds	r3, #1
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd72:	60bb      	str	r3, [r7, #8]
      break;
 800fd74:	e002      	b.n	800fd7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fd76:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800fd78:	60bb      	str	r3, [r7, #8]
      break;
 800fd7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd86:	bf00      	nop
 800fd88:	40023800 	.word	0x40023800
 800fd8c:	00f42400 	.word	0x00f42400
 800fd90:	017d7840 	.word	0x017d7840

0800fd94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fd94:	b480      	push	{r7}
 800fd96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fd98:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <HAL_RCC_GetHCLKFreq+0x14>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	20000004 	.word	0x20000004

0800fdac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fdb0:	f7ff fff0 	bl	800fd94 <HAL_RCC_GetHCLKFreq>
 800fdb4:	4601      	mov	r1, r0
 800fdb6:	4b05      	ldr	r3, [pc, #20]	; (800fdcc <HAL_RCC_GetPCLK1Freq+0x20>)
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	0a9b      	lsrs	r3, r3, #10
 800fdbc:	f003 0307 	and.w	r3, r3, #7
 800fdc0:	4a03      	ldr	r2, [pc, #12]	; (800fdd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fdc2:	5cd3      	ldrb	r3, [r2, r3]
 800fdc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	40023800 	.word	0x40023800
 800fdd0:	08014a94 	.word	0x08014a94

0800fdd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fdd8:	f7ff ffdc 	bl	800fd94 <HAL_RCC_GetHCLKFreq>
 800fddc:	4601      	mov	r1, r0
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	0b5b      	lsrs	r3, r3, #13
 800fde4:	f003 0307 	and.w	r3, r3, #7
 800fde8:	4a03      	ldr	r2, [pc, #12]	; (800fdf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fdea:	5cd3      	ldrb	r3, [r2, r3]
 800fdec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	40023800 	.word	0x40023800
 800fdf8:	08014a94 	.word	0x08014a94

0800fdfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d101      	bne.n	800fe0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e056      	b.n	800febc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d106      	bne.n	800fe2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7fd f83b 	bl	800cea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2202      	movs	r2, #2
 800fe32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685a      	ldr	r2, [r3, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	431a      	orrs	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	431a      	orrs	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	431a      	orrs	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	695b      	ldr	r3, [r3, #20]
 800fe60:	431a      	orrs	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	699b      	ldr	r3, [r3, #24]
 800fe66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe6a:	431a      	orrs	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	431a      	orrs	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6a1b      	ldr	r3, [r3, #32]
 800fe76:	ea42 0103 	orr.w	r1, r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	430a      	orrs	r2, r1
 800fe84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	0c1b      	lsrs	r3, r3, #16
 800fe8c:	f003 0104 	and.w	r1, r3, #4
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	430a      	orrs	r2, r1
 800fe9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	69da      	ldr	r2, [r3, #28]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800feaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2201      	movs	r2, #1
 800feb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b088      	sub	sp, #32
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	603b      	str	r3, [r7, #0]
 800fed0:	4613      	mov	r3, r2
 800fed2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fed4:	2300      	movs	r3, #0
 800fed6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d101      	bne.n	800fee6 <HAL_SPI_Transmit+0x22>
 800fee2:	2302      	movs	r3, #2
 800fee4:	e11e      	b.n	8010124 <HAL_SPI_Transmit+0x260>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2201      	movs	r2, #1
 800feea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800feee:	f7fd fe01 	bl	800daf4 <HAL_GetTick>
 800fef2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fef4:	88fb      	ldrh	r3, [r7, #6]
 800fef6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d002      	beq.n	800ff0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ff04:	2302      	movs	r3, #2
 800ff06:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ff08:	e103      	b.n	8010112 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <HAL_SPI_Transmit+0x52>
 800ff10:	88fb      	ldrh	r3, [r7, #6]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ff16:	2301      	movs	r3, #1
 800ff18:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ff1a:	e0fa      	b.n	8010112 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2203      	movs	r2, #3
 800ff20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	88fa      	ldrh	r2, [r7, #6]
 800ff34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	88fa      	ldrh	r2, [r7, #6]
 800ff3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2200      	movs	r2, #0
 800ff46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff62:	d107      	bne.n	800ff74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff7e:	2b40      	cmp	r3, #64	; 0x40
 800ff80:	d007      	beq.n	800ff92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ff9a:	d14b      	bne.n	8010034 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <HAL_SPI_Transmit+0xe6>
 800ffa4:	8afb      	ldrh	r3, [r7, #22]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d13e      	bne.n	8010028 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffae:	881a      	ldrh	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffba:	1c9a      	adds	r2, r3, #2
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ffce:	e02b      	b.n	8010028 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	689b      	ldr	r3, [r3, #8]
 800ffd6:	f003 0302 	and.w	r3, r3, #2
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d112      	bne.n	8010004 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe2:	881a      	ldrh	r2, [r3, #0]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffee:	1c9a      	adds	r2, r3, #2
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	3b01      	subs	r3, #1
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	86da      	strh	r2, [r3, #54]	; 0x36
 8010002:	e011      	b.n	8010028 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010004:	f7fd fd76 	bl	800daf4 <HAL_GetTick>
 8010008:	4602      	mov	r2, r0
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	429a      	cmp	r2, r3
 8010012:	d803      	bhi.n	801001c <HAL_SPI_Transmit+0x158>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801001a:	d102      	bne.n	8010022 <HAL_SPI_Transmit+0x15e>
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d102      	bne.n	8010028 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8010022:	2303      	movs	r3, #3
 8010024:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010026:	e074      	b.n	8010112 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801002c:	b29b      	uxth	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1ce      	bne.n	800ffd0 <HAL_SPI_Transmit+0x10c>
 8010032:	e04c      	b.n	80100ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <HAL_SPI_Transmit+0x17e>
 801003c:	8afb      	ldrh	r3, [r7, #22]
 801003e:	2b01      	cmp	r3, #1
 8010040:	d140      	bne.n	80100c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	330c      	adds	r3, #12
 801004c:	7812      	ldrb	r2, [r2, #0]
 801004e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801005e:	b29b      	uxth	r3, r3
 8010060:	3b01      	subs	r3, #1
 8010062:	b29a      	uxth	r2, r3
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010068:	e02c      	b.n	80100c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	f003 0302 	and.w	r3, r3, #2
 8010074:	2b02      	cmp	r3, #2
 8010076:	d113      	bne.n	80100a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	330c      	adds	r3, #12
 8010082:	7812      	ldrb	r2, [r2, #0]
 8010084:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801008a:	1c5a      	adds	r2, r3, #1
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010094:	b29b      	uxth	r3, r3
 8010096:	3b01      	subs	r3, #1
 8010098:	b29a      	uxth	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	86da      	strh	r2, [r3, #54]	; 0x36
 801009e:	e011      	b.n	80100c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100a0:	f7fd fd28 	bl	800daf4 <HAL_GetTick>
 80100a4:	4602      	mov	r2, r0
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d803      	bhi.n	80100b8 <HAL_SPI_Transmit+0x1f4>
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b6:	d102      	bne.n	80100be <HAL_SPI_Transmit+0x1fa>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80100c2:	e026      	b.n	8010112 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1cd      	bne.n	801006a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80100ce:	69ba      	ldr	r2, [r7, #24]
 80100d0:	6839      	ldr	r1, [r7, #0]
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f000 fafc 	bl	80106d0 <SPI_EndRxTxTransaction>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d002      	beq.n	80100e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2220      	movs	r2, #32
 80100e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10a      	bne.n	8010102 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80100ec:	2300      	movs	r3, #0
 80100ee:	613b      	str	r3, [r7, #16]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	613b      	str	r3, [r7, #16]
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	613b      	str	r3, [r7, #16]
 8010100:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	77fb      	strb	r3, [r7, #31]
 801010e:	e000      	b.n	8010112 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010110:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2201      	movs	r2, #1
 8010116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010122:	7ffb      	ldrb	r3, [r7, #31]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3720      	adds	r7, #32
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
 8010138:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801013a:	2300      	movs	r3, #0
 801013c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010144:	2b01      	cmp	r3, #1
 8010146:	d101      	bne.n	801014c <HAL_SPI_TransmitReceive_DMA+0x20>
 8010148:	2302      	movs	r3, #2
 801014a:	e0e3      	b.n	8010314 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2201      	movs	r2, #1
 8010150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801015a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8010162:	7dbb      	ldrb	r3, [r7, #22]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d00d      	beq.n	8010184 <HAL_SPI_TransmitReceive_DMA+0x58>
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801016e:	d106      	bne.n	801017e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d102      	bne.n	801017e <HAL_SPI_TransmitReceive_DMA+0x52>
 8010178:	7dbb      	ldrb	r3, [r7, #22]
 801017a:	2b04      	cmp	r3, #4
 801017c:	d002      	beq.n	8010184 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 801017e:	2302      	movs	r3, #2
 8010180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010182:	e0c2      	b.n	801030a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d005      	beq.n	8010196 <HAL_SPI_TransmitReceive_DMA+0x6a>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8010190:	887b      	ldrh	r3, [r7, #2]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d102      	bne.n	801019c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8010196:	2301      	movs	r3, #1
 8010198:	75fb      	strb	r3, [r7, #23]
    goto error;
 801019a:	e0b6      	b.n	801030a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	2b04      	cmp	r3, #4
 80101a6:	d003      	beq.n	80101b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2205      	movs	r2, #5
 80101ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2200      	movs	r2, #0
 80101b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	887a      	ldrh	r2, [r7, #2]
 80101c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	887a      	ldrh	r2, [r7, #2]
 80101c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	887a      	ldrh	r2, [r7, #2]
 80101d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	887a      	ldrh	r2, [r7, #2]
 80101d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2200      	movs	r2, #0
 80101de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2200      	movs	r2, #0
 80101e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b04      	cmp	r3, #4
 80101f0:	d108      	bne.n	8010204 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101f6:	4a49      	ldr	r2, [pc, #292]	; (801031c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80101f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101fe:	4a48      	ldr	r2, [pc, #288]	; (8010320 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8010200:	63da      	str	r2, [r3, #60]	; 0x3c
 8010202:	e007      	b.n	8010214 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010208:	4a46      	ldr	r2, [pc, #280]	; (8010324 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 801020a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010210:	4a45      	ldr	r2, [pc, #276]	; (8010328 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8010212:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010218:	4a44      	ldr	r2, [pc, #272]	; (801032c <HAL_SPI_TransmitReceive_DMA+0x200>)
 801021a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010220:	2200      	movs	r2, #0
 8010222:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	330c      	adds	r3, #12
 801022e:	4619      	mov	r1, r3
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010234:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801023a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801023c:	f7fe fa2e 	bl	800e69c <HAL_DMA_Start_IT>
 8010240:	4603      	mov	r3, r0
 8010242:	2b00      	cmp	r3, #0
 8010244:	d00c      	beq.n	8010260 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801024a:	f043 0210 	orr.w	r2, r3, #16
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8010252:	2301      	movs	r3, #1
 8010254:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2201      	movs	r2, #1
 801025a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801025e:	e054      	b.n	801030a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	685a      	ldr	r2, [r3, #4]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f042 0201 	orr.w	r2, r2, #1
 801026e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010274:	2200      	movs	r2, #0
 8010276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801027c:	2200      	movs	r2, #0
 801027e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010284:	2200      	movs	r2, #0
 8010286:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801028c:	2200      	movs	r2, #0
 801028e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010298:	4619      	mov	r1, r3
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	330c      	adds	r3, #12
 80102a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80102a8:	f7fe f9f8 	bl	800e69c <HAL_DMA_Start_IT>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00c      	beq.n	80102cc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102b6:	f043 0210 	orr.w	r2, r3, #16
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80102ca:	e01e      	b.n	801030a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102d6:	2b40      	cmp	r3, #64	; 0x40
 80102d8:	d007      	beq.n	80102ea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80102e8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f042 0220 	orr.w	r2, r2, #32
 80102f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f042 0202 	orr.w	r2, r2, #2
 8010308:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010312:	7dfb      	ldrb	r3, [r7, #23]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3718      	adds	r7, #24
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	080104b9 	.word	0x080104b9
 8010320:	08010381 	.word	0x08010381
 8010324:	080104d5 	.word	0x080104d5
 8010328:	08010429 	.word	0x08010429
 801032c:	080104f1 	.word	0x080104f1

08010330 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801038c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801038e:	f7fd fbb1 	bl	800daf4 <HAL_GetTick>
 8010392:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801039e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103a2:	d03b      	beq.n	801041c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f022 0220 	bic.w	r2, r2, #32
 80103b2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10d      	bne.n	80103d8 <SPI_DMAReceiveCplt+0x58>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80103c4:	d108      	bne.n	80103d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685a      	ldr	r2, [r3, #4]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f022 0203 	bic.w	r2, r2, #3
 80103d4:	605a      	str	r2, [r3, #4]
 80103d6:	e007      	b.n	80103e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	685a      	ldr	r2, [r3, #4]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f022 0201 	bic.w	r2, r2, #1
 80103e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	2164      	movs	r1, #100	; 0x64
 80103ec:	68f8      	ldr	r0, [r7, #12]
 80103ee:	f000 f909 	bl	8010604 <SPI_EndRxTransaction>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2220      	movs	r2, #32
 80103fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010410:	2b00      	cmp	r3, #0
 8010412:	d003      	beq.n	801041c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f7ff ffa9 	bl	801036c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801041a:	e002      	b.n	8010422 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7ff ff87 	bl	8010330 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010434:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010436:	f7fd fb5d 	bl	800daf4 <HAL_GetTick>
 801043a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801044a:	d02f      	beq.n	80104ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f022 0220 	bic.w	r2, r2, #32
 801045a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	2164      	movs	r1, #100	; 0x64
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f000 f935 	bl	80106d0 <SPI_EndRxTxTransaction>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d005      	beq.n	8010478 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010470:	f043 0220 	orr.w	r2, r3, #32
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f022 0203 	bic.w	r2, r2, #3
 8010486:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2200      	movs	r2, #0
 801048c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2201      	movs	r2, #1
 8010498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d003      	beq.n	80104ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f7ff ff61 	bl	801036c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80104aa:	e002      	b.n	80104b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7f3 fe3f 	bl	8004130 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f7ff ff3c 	bl	8010344 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80104cc:	bf00      	nop
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff ff38 	bl	8010358 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80104e8:	bf00      	nop
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	685a      	ldr	r2, [r3, #4]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f022 0203 	bic.w	r2, r2, #3
 801050c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010512:	f043 0210 	orr.w	r2, r3, #16
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2201      	movs	r2, #1
 801051e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f7ff ff22 	bl	801036c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010528:	bf00      	nop
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	603b      	str	r3, [r7, #0]
 801053c:	4613      	mov	r3, r2
 801053e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010540:	e04c      	b.n	80105dc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010548:	d048      	beq.n	80105dc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801054a:	f7fd fad3 	bl	800daf4 <HAL_GetTick>
 801054e:	4602      	mov	r2, r0
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d902      	bls.n	8010560 <SPI_WaitFlagStateUntilTimeout+0x30>
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d13d      	bne.n	80105dc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	685a      	ldr	r2, [r3, #4]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801056e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010578:	d111      	bne.n	801059e <SPI_WaitFlagStateUntilTimeout+0x6e>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010582:	d004      	beq.n	801058e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801058c:	d107      	bne.n	801059e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801059c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105a6:	d10f      	bne.n	80105c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105b6:	601a      	str	r2, [r3, #0]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80105c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80105d8:	2303      	movs	r3, #3
 80105da:	e00f      	b.n	80105fc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	689a      	ldr	r2, [r3, #8]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	4013      	ands	r3, r2
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	bf0c      	ite	eq
 80105ec:	2301      	moveq	r3, #1
 80105ee:	2300      	movne	r3, #0
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	461a      	mov	r2, r3
 80105f4:	79fb      	ldrb	r3, [r7, #7]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d1a3      	bne.n	8010542 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af02      	add	r7, sp, #8
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010618:	d111      	bne.n	801063e <SPI_EndRxTransaction+0x3a>
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010622:	d004      	beq.n	801062e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801062c:	d107      	bne.n	801063e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801063c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010646:	d12a      	bne.n	801069e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010650:	d012      	beq.n	8010678 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	2200      	movs	r2, #0
 801065a:	2180      	movs	r1, #128	; 0x80
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f7ff ff67 	bl	8010530 <SPI_WaitFlagStateUntilTimeout>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d02d      	beq.n	80106c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801066c:	f043 0220 	orr.w	r2, r3, #32
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010674:	2303      	movs	r3, #3
 8010676:	e026      	b.n	80106c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	2200      	movs	r2, #0
 8010680:	2101      	movs	r1, #1
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f7ff ff54 	bl	8010530 <SPI_WaitFlagStateUntilTimeout>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d01a      	beq.n	80106c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010692:	f043 0220 	orr.w	r2, r3, #32
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801069a:	2303      	movs	r3, #3
 801069c:	e013      	b.n	80106c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	2200      	movs	r2, #0
 80106a6:	2101      	movs	r1, #1
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7ff ff41 	bl	8010530 <SPI_WaitFlagStateUntilTimeout>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d007      	beq.n	80106c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106b8:	f043 0220 	orr.w	r2, r3, #32
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80106c0:	2303      	movs	r3, #3
 80106c2:	e000      	b.n	80106c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
	...

080106d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80106dc:	4b1b      	ldr	r3, [pc, #108]	; (801074c <SPI_EndRxTxTransaction+0x7c>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a1b      	ldr	r2, [pc, #108]	; (8010750 <SPI_EndRxTxTransaction+0x80>)
 80106e2:	fba2 2303 	umull	r2, r3, r2, r3
 80106e6:	0d5b      	lsrs	r3, r3, #21
 80106e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80106ec:	fb02 f303 	mul.w	r3, r2, r3
 80106f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106fa:	d112      	bne.n	8010722 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	2200      	movs	r2, #0
 8010704:	2180      	movs	r1, #128	; 0x80
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7ff ff12 	bl	8010530 <SPI_WaitFlagStateUntilTimeout>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d016      	beq.n	8010740 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010716:	f043 0220 	orr.w	r2, r3, #32
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801071e:	2303      	movs	r3, #3
 8010720:	e00f      	b.n	8010742 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00a      	beq.n	801073e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	3b01      	subs	r3, #1
 801072c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	689b      	ldr	r3, [r3, #8]
 8010734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010738:	2b80      	cmp	r3, #128	; 0x80
 801073a:	d0f2      	beq.n	8010722 <SPI_EndRxTxTransaction+0x52>
 801073c:	e000      	b.n	8010740 <SPI_EndRxTxTransaction+0x70>
        break;
 801073e:	bf00      	nop
  }

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20000004 	.word	0x20000004
 8010750:	165e9f81 	.word	0x165e9f81

08010754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e01d      	b.n	80107a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801076c:	b2db      	uxtb	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7fc ffc6 	bl	800d70c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2202      	movs	r2, #2
 8010784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3304      	adds	r3, #4
 8010790:	4619      	mov	r1, r3
 8010792:	4610      	mov	r0, r2
 8010794:	f000 fc08 	bl	8010fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80107aa:	b480      	push	{r7}
 80107ac:	b085      	sub	sp, #20
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68da      	ldr	r2, [r3, #12]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f042 0201 	orr.w	r2, r2, #1
 80107c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	f003 0307 	and.w	r3, r3, #7
 80107cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2b06      	cmp	r3, #6
 80107d2:	d007      	beq.n	80107e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f042 0201 	orr.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3714      	adds	r7, #20
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
	...

080107f4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b0c      	cmp	r3, #12
 8010802:	d841      	bhi.n	8010888 <HAL_TIM_OC_Start_IT+0x94>
 8010804:	a201      	add	r2, pc, #4	; (adr r2, 801080c <HAL_TIM_OC_Start_IT+0x18>)
 8010806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080a:	bf00      	nop
 801080c:	08010841 	.word	0x08010841
 8010810:	08010889 	.word	0x08010889
 8010814:	08010889 	.word	0x08010889
 8010818:	08010889 	.word	0x08010889
 801081c:	08010853 	.word	0x08010853
 8010820:	08010889 	.word	0x08010889
 8010824:	08010889 	.word	0x08010889
 8010828:	08010889 	.word	0x08010889
 801082c:	08010865 	.word	0x08010865
 8010830:	08010889 	.word	0x08010889
 8010834:	08010889 	.word	0x08010889
 8010838:	08010889 	.word	0x08010889
 801083c:	08010877 	.word	0x08010877
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f042 0202 	orr.w	r2, r2, #2
 801084e:	60da      	str	r2, [r3, #12]
      break;
 8010850:	e01b      	b.n	801088a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68da      	ldr	r2, [r3, #12]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f042 0204 	orr.w	r2, r2, #4
 8010860:	60da      	str	r2, [r3, #12]
      break;
 8010862:	e012      	b.n	801088a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	68da      	ldr	r2, [r3, #12]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f042 0208 	orr.w	r2, r2, #8
 8010872:	60da      	str	r2, [r3, #12]
      break;
 8010874:	e009      	b.n	801088a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	68da      	ldr	r2, [r3, #12]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f042 0210 	orr.w	r2, r2, #16
 8010884:	60da      	str	r2, [r3, #12]
      break;
 8010886:	e000      	b.n	801088a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8010888:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2201      	movs	r2, #1
 8010890:	6839      	ldr	r1, [r7, #0]
 8010892:	4618      	mov	r0, r3
 8010894:	f000 fe2e 	bl	80114f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a10      	ldr	r2, [pc, #64]	; (80108e0 <HAL_TIM_OC_Start_IT+0xec>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d107      	bne.n	80108b2 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	f003 0307 	and.w	r3, r3, #7
 80108bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b06      	cmp	r3, #6
 80108c2:	d007      	beq.n	80108d4 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f042 0201 	orr.w	r2, r2, #1
 80108d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	40010000 	.word	0x40010000

080108e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d101      	bne.n	80108f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80108f2:	2301      	movs	r3, #1
 80108f4:	e01d      	b.n	8010932 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d106      	bne.n	8010910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f7fc ff6e 	bl	800d7ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2202      	movs	r2, #2
 8010914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3304      	adds	r3, #4
 8010920:	4619      	mov	r1, r3
 8010922:	4610      	mov	r0, r2
 8010924:	f000 fb40 	bl	8010fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2201      	movs	r2, #1
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	4618      	mov	r0, r3
 8010950:	f000 fdd0 	bl	80114f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a10      	ldr	r2, [pc, #64]	; (801099c <HAL_TIM_PWM_Start+0x60>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d107      	bne.n	801096e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801096c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	f003 0307 	and.w	r3, r3, #7
 8010978:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2b06      	cmp	r3, #6
 801097e:	d007      	beq.n	8010990 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f042 0201 	orr.w	r2, r2, #1
 801098e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	40010000 	.word	0x40010000

080109a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2200      	movs	r2, #0
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 fd9e 	bl	80114f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a1d      	ldr	r2, [pc, #116]	; (8010a34 <HAL_TIM_PWM_Stop+0x94>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d117      	bne.n	80109f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	6a1a      	ldr	r2, [r3, #32]
 80109c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80109cc:	4013      	ands	r3, r2
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d10f      	bne.n	80109f2 <HAL_TIM_PWM_Stop+0x52>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6a1a      	ldr	r2, [r3, #32]
 80109d8:	f240 4344 	movw	r3, #1092	; 0x444
 80109dc:	4013      	ands	r3, r2
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d107      	bne.n	80109f2 <HAL_TIM_PWM_Stop+0x52>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80109f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6a1a      	ldr	r2, [r3, #32]
 80109f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80109fc:	4013      	ands	r3, r2
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d10f      	bne.n	8010a22 <HAL_TIM_PWM_Stop+0x82>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	6a1a      	ldr	r2, [r3, #32]
 8010a08:	f240 4344 	movw	r3, #1092	; 0x444
 8010a0c:	4013      	ands	r3, r2
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d107      	bne.n	8010a22 <HAL_TIM_PWM_Stop+0x82>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f022 0201 	bic.w	r2, r2, #1
 8010a20:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	40010000 	.word	0x40010000

08010a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	f003 0302 	and.w	r3, r3, #2
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d122      	bne.n	8010a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	f003 0302 	and.w	r3, r3, #2
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d11b      	bne.n	8010a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f06f 0202 	mvn.w	r2, #2
 8010a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2201      	movs	r2, #1
 8010a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	699b      	ldr	r3, [r3, #24]
 8010a72:	f003 0303 	and.w	r3, r3, #3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d003      	beq.n	8010a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fa75 	bl	8010f6a <HAL_TIM_IC_CaptureCallback>
 8010a80:	e005      	b.n	8010a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 fa67 	bl	8010f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fa78 	bl	8010f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2200      	movs	r2, #0
 8010a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	f003 0304 	and.w	r3, r3, #4
 8010a9e:	2b04      	cmp	r3, #4
 8010aa0:	d122      	bne.n	8010ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	f003 0304 	and.w	r3, r3, #4
 8010aac:	2b04      	cmp	r3, #4
 8010aae:	d11b      	bne.n	8010ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f06f 0204 	mvn.w	r2, #4
 8010ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2202      	movs	r2, #2
 8010abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d003      	beq.n	8010ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fa4b 	bl	8010f6a <HAL_TIM_IC_CaptureCallback>
 8010ad4:	e005      	b.n	8010ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fa3d 	bl	8010f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 fa4e 	bl	8010f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	f003 0308 	and.w	r3, r3, #8
 8010af2:	2b08      	cmp	r3, #8
 8010af4:	d122      	bne.n	8010b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	f003 0308 	and.w	r3, r3, #8
 8010b00:	2b08      	cmp	r3, #8
 8010b02:	d11b      	bne.n	8010b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f06f 0208 	mvn.w	r2, #8
 8010b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2204      	movs	r2, #4
 8010b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	69db      	ldr	r3, [r3, #28]
 8010b1a:	f003 0303 	and.w	r3, r3, #3
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d003      	beq.n	8010b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fa21 	bl	8010f6a <HAL_TIM_IC_CaptureCallback>
 8010b28:	e005      	b.n	8010b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fa13 	bl	8010f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fa24 	bl	8010f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	f003 0310 	and.w	r3, r3, #16
 8010b46:	2b10      	cmp	r3, #16
 8010b48:	d122      	bne.n	8010b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	f003 0310 	and.w	r3, r3, #16
 8010b54:	2b10      	cmp	r3, #16
 8010b56:	d11b      	bne.n	8010b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f06f 0210 	mvn.w	r2, #16
 8010b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2208      	movs	r2, #8
 8010b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	69db      	ldr	r3, [r3, #28]
 8010b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 f9f7 	bl	8010f6a <HAL_TIM_IC_CaptureCallback>
 8010b7c:	e005      	b.n	8010b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f9e9 	bl	8010f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 f9fa 	bl	8010f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	f003 0301 	and.w	r3, r3, #1
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d10e      	bne.n	8010bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d107      	bne.n	8010bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f06f 0201 	mvn.w	r2, #1
 8010bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f9c3 	bl	8010f42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	691b      	ldr	r3, [r3, #16]
 8010bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bc6:	2b80      	cmp	r3, #128	; 0x80
 8010bc8:	d10e      	bne.n	8010be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bd4:	2b80      	cmp	r3, #128	; 0x80
 8010bd6:	d107      	bne.n	8010be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fd24 	bl	8011630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bf2:	2b40      	cmp	r3, #64	; 0x40
 8010bf4:	d10e      	bne.n	8010c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c00:	2b40      	cmp	r3, #64	; 0x40
 8010c02:	d107      	bne.n	8010c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f9bf 	bl	8010f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	f003 0320 	and.w	r3, r3, #32
 8010c1e:	2b20      	cmp	r3, #32
 8010c20:	d10e      	bne.n	8010c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	f003 0320 	and.w	r3, r3, #32
 8010c2c:	2b20      	cmp	r3, #32
 8010c2e:	d107      	bne.n	8010c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f06f 0220 	mvn.w	r2, #32
 8010c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 fcee 	bl	801161c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010c40:	bf00      	nop
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d101      	bne.n	8010c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010c5e:	2302      	movs	r3, #2
 8010c60:	e0b4      	b.n	8010dcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2201      	movs	r2, #1
 8010c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2202      	movs	r2, #2
 8010c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b0c      	cmp	r3, #12
 8010c76:	f200 809f 	bhi.w	8010db8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010c7a:	a201      	add	r2, pc, #4	; (adr r2, 8010c80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c80:	08010cb5 	.word	0x08010cb5
 8010c84:	08010db9 	.word	0x08010db9
 8010c88:	08010db9 	.word	0x08010db9
 8010c8c:	08010db9 	.word	0x08010db9
 8010c90:	08010cf5 	.word	0x08010cf5
 8010c94:	08010db9 	.word	0x08010db9
 8010c98:	08010db9 	.word	0x08010db9
 8010c9c:	08010db9 	.word	0x08010db9
 8010ca0:	08010d37 	.word	0x08010d37
 8010ca4:	08010db9 	.word	0x08010db9
 8010ca8:	08010db9 	.word	0x08010db9
 8010cac:	08010db9 	.word	0x08010db9
 8010cb0:	08010d77 	.word	0x08010d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 f9f4 	bl	80110a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	699a      	ldr	r2, [r3, #24]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f042 0208 	orr.w	r2, r2, #8
 8010cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	699a      	ldr	r2, [r3, #24]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f022 0204 	bic.w	r2, r2, #4
 8010cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	6999      	ldr	r1, [r3, #24]
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	691a      	ldr	r2, [r3, #16]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	430a      	orrs	r2, r1
 8010cf0:	619a      	str	r2, [r3, #24]
      break;
 8010cf2:	e062      	b.n	8010dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68b9      	ldr	r1, [r7, #8]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 fa3a 	bl	8011174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	699a      	ldr	r2, [r3, #24]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	699a      	ldr	r2, [r3, #24]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6999      	ldr	r1, [r3, #24]
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	691b      	ldr	r3, [r3, #16]
 8010d2a:	021a      	lsls	r2, r3, #8
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	430a      	orrs	r2, r1
 8010d32:	619a      	str	r2, [r3, #24]
      break;
 8010d34:	e041      	b.n	8010dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68b9      	ldr	r1, [r7, #8]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f000 fa85 	bl	801124c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	69da      	ldr	r2, [r3, #28]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f042 0208 	orr.w	r2, r2, #8
 8010d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	69da      	ldr	r2, [r3, #28]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f022 0204 	bic.w	r2, r2, #4
 8010d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	69d9      	ldr	r1, [r3, #28]
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	691a      	ldr	r2, [r3, #16]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	430a      	orrs	r2, r1
 8010d72:	61da      	str	r2, [r3, #28]
      break;
 8010d74:	e021      	b.n	8010dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	68b9      	ldr	r1, [r7, #8]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 facf 	bl	8011320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	69da      	ldr	r2, [r3, #28]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	69da      	ldr	r2, [r3, #28]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	69d9      	ldr	r1, [r3, #28]
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	021a      	lsls	r2, r3, #8
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	430a      	orrs	r2, r1
 8010db4:	61da      	str	r2, [r3, #28]
      break;
 8010db6:	e000      	b.n	8010dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8010db8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d101      	bne.n	8010dec <HAL_TIM_ConfigClockSource+0x18>
 8010de8:	2302      	movs	r3, #2
 8010dea:	e0a6      	b.n	8010f3a <HAL_TIM_ConfigClockSource+0x166>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2202      	movs	r2, #2
 8010df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010e12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b40      	cmp	r3, #64	; 0x40
 8010e22:	d067      	beq.n	8010ef4 <HAL_TIM_ConfigClockSource+0x120>
 8010e24:	2b40      	cmp	r3, #64	; 0x40
 8010e26:	d80b      	bhi.n	8010e40 <HAL_TIM_ConfigClockSource+0x6c>
 8010e28:	2b10      	cmp	r3, #16
 8010e2a:	d073      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x140>
 8010e2c:	2b10      	cmp	r3, #16
 8010e2e:	d802      	bhi.n	8010e36 <HAL_TIM_ConfigClockSource+0x62>
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d06f      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010e34:	e078      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010e36:	2b20      	cmp	r3, #32
 8010e38:	d06c      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x140>
 8010e3a:	2b30      	cmp	r3, #48	; 0x30
 8010e3c:	d06a      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8010e3e:	e073      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010e40:	2b70      	cmp	r3, #112	; 0x70
 8010e42:	d00d      	beq.n	8010e60 <HAL_TIM_ConfigClockSource+0x8c>
 8010e44:	2b70      	cmp	r3, #112	; 0x70
 8010e46:	d804      	bhi.n	8010e52 <HAL_TIM_ConfigClockSource+0x7e>
 8010e48:	2b50      	cmp	r3, #80	; 0x50
 8010e4a:	d033      	beq.n	8010eb4 <HAL_TIM_ConfigClockSource+0xe0>
 8010e4c:	2b60      	cmp	r3, #96	; 0x60
 8010e4e:	d041      	beq.n	8010ed4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8010e50:	e06a      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e56:	d066      	beq.n	8010f26 <HAL_TIM_ConfigClockSource+0x152>
 8010e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e5c:	d017      	beq.n	8010e8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8010e5e:	e063      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6818      	ldr	r0, [r3, #0]
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	6899      	ldr	r1, [r3, #8]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	f000 fb20 	bl	80114b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010e82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	609a      	str	r2, [r3, #8]
      break;
 8010e8c:	e04c      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6818      	ldr	r0, [r3, #0]
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	6899      	ldr	r1, [r3, #8]
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	f000 fb09 	bl	80114b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	689a      	ldr	r2, [r3, #8]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010eb0:	609a      	str	r2, [r3, #8]
      break;
 8010eb2:	e039      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6818      	ldr	r0, [r3, #0]
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	6859      	ldr	r1, [r3, #4]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	f000 fa7d 	bl	80113c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2150      	movs	r1, #80	; 0x50
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fad6 	bl	801147e <TIM_ITRx_SetConfig>
      break;
 8010ed2:	e029      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6818      	ldr	r0, [r3, #0]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	6859      	ldr	r1, [r3, #4]
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	f000 fa9c 	bl	801141e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2160      	movs	r1, #96	; 0x60
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 fac6 	bl	801147e <TIM_ITRx_SetConfig>
      break;
 8010ef2:	e019      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6818      	ldr	r0, [r3, #0]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	6859      	ldr	r1, [r3, #4]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	461a      	mov	r2, r3
 8010f02:	f000 fa5d 	bl	80113c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2140      	movs	r1, #64	; 0x40
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 fab6 	bl	801147e <TIM_ITRx_SetConfig>
      break;
 8010f12:	e009      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f000 faad 	bl	801147e <TIM_ITRx_SetConfig>
      break;
 8010f24:	e000      	b.n	8010f28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8010f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f42:	b480      	push	{r7}
 8010f44:	b083      	sub	sp, #12
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010f4a:	bf00      	nop
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b083      	sub	sp, #12
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f5e:	bf00      	nop
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b083      	sub	sp, #12
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f72:	bf00      	nop
 8010f74:	370c      	adds	r7, #12
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f7e:	b480      	push	{r7}
 8010f80:	b083      	sub	sp, #12
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f86:	bf00      	nop
 8010f88:	370c      	adds	r7, #12
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr

08010f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f92:	b480      	push	{r7}
 8010f94:	b083      	sub	sp, #12
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f9a:	bf00      	nop
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
	...

08010fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b085      	sub	sp, #20
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	4a34      	ldr	r2, [pc, #208]	; (801108c <TIM_Base_SetConfig+0xe4>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d00f      	beq.n	8010fe0 <TIM_Base_SetConfig+0x38>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fc6:	d00b      	beq.n	8010fe0 <TIM_Base_SetConfig+0x38>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a31      	ldr	r2, [pc, #196]	; (8011090 <TIM_Base_SetConfig+0xe8>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d007      	beq.n	8010fe0 <TIM_Base_SetConfig+0x38>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a30      	ldr	r2, [pc, #192]	; (8011094 <TIM_Base_SetConfig+0xec>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d003      	beq.n	8010fe0 <TIM_Base_SetConfig+0x38>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a2f      	ldr	r2, [pc, #188]	; (8011098 <TIM_Base_SetConfig+0xf0>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d108      	bne.n	8010ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	68fa      	ldr	r2, [r7, #12]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a25      	ldr	r2, [pc, #148]	; (801108c <TIM_Base_SetConfig+0xe4>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d01b      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011000:	d017      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a22      	ldr	r2, [pc, #136]	; (8011090 <TIM_Base_SetConfig+0xe8>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d013      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a21      	ldr	r2, [pc, #132]	; (8011094 <TIM_Base_SetConfig+0xec>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d00f      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a20      	ldr	r2, [pc, #128]	; (8011098 <TIM_Base_SetConfig+0xf0>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d00b      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a1f      	ldr	r2, [pc, #124]	; (801109c <TIM_Base_SetConfig+0xf4>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d007      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a1e      	ldr	r2, [pc, #120]	; (80110a0 <TIM_Base_SetConfig+0xf8>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d003      	beq.n	8011032 <TIM_Base_SetConfig+0x8a>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a1d      	ldr	r2, [pc, #116]	; (80110a4 <TIM_Base_SetConfig+0xfc>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d108      	bne.n	8011044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	4313      	orrs	r3, r2
 8011042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	4313      	orrs	r3, r2
 8011050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	689a      	ldr	r2, [r3, #8]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4a08      	ldr	r2, [pc, #32]	; (801108c <TIM_Base_SetConfig+0xe4>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d103      	bne.n	8011078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	691a      	ldr	r2, [r3, #16]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	615a      	str	r2, [r3, #20]
}
 801107e:	bf00      	nop
 8011080:	3714      	adds	r7, #20
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr
 801108a:	bf00      	nop
 801108c:	40010000 	.word	0x40010000
 8011090:	40000400 	.word	0x40000400
 8011094:	40000800 	.word	0x40000800
 8011098:	40000c00 	.word	0x40000c00
 801109c:	40014000 	.word	0x40014000
 80110a0:	40014400 	.word	0x40014400
 80110a4:	40014800 	.word	0x40014800

080110a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b087      	sub	sp, #28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	f023 0201 	bic.w	r2, r3, #1
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a1b      	ldr	r3, [r3, #32]
 80110c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	699b      	ldr	r3, [r3, #24]
 80110ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f023 0303 	bic.w	r3, r3, #3
 80110de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	f023 0302 	bic.w	r3, r3, #2
 80110f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	697a      	ldr	r2, [r7, #20]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a1c      	ldr	r2, [pc, #112]	; (8011170 <TIM_OC1_SetConfig+0xc8>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d10c      	bne.n	801111e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	f023 0308 	bic.w	r3, r3, #8
 801110a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	4313      	orrs	r3, r2
 8011114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f023 0304 	bic.w	r3, r3, #4
 801111c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a13      	ldr	r2, [pc, #76]	; (8011170 <TIM_OC1_SetConfig+0xc8>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d111      	bne.n	801114a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801112c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	695b      	ldr	r3, [r3, #20]
 801113a:	693a      	ldr	r2, [r7, #16]
 801113c:	4313      	orrs	r3, r2
 801113e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	699b      	ldr	r3, [r3, #24]
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	4313      	orrs	r3, r2
 8011148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	697a      	ldr	r2, [r7, #20]
 8011162:	621a      	str	r2, [r3, #32]
}
 8011164:	bf00      	nop
 8011166:	371c      	adds	r7, #28
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	40010000 	.word	0x40010000

08011174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011174:	b480      	push	{r7}
 8011176:	b087      	sub	sp, #28
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a1b      	ldr	r3, [r3, #32]
 8011182:	f023 0210 	bic.w	r2, r3, #16
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a1b      	ldr	r3, [r3, #32]
 801118e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	699b      	ldr	r3, [r3, #24]
 801119a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	021b      	lsls	r3, r3, #8
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	4313      	orrs	r3, r2
 80111b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f023 0320 	bic.w	r3, r3, #32
 80111be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	011b      	lsls	r3, r3, #4
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4a1e      	ldr	r2, [pc, #120]	; (8011248 <TIM_OC2_SetConfig+0xd4>)
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d10d      	bne.n	80111f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80111da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	011b      	lsls	r3, r3, #4
 80111e2:	697a      	ldr	r2, [r7, #20]
 80111e4:	4313      	orrs	r3, r2
 80111e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4a15      	ldr	r2, [pc, #84]	; (8011248 <TIM_OC2_SetConfig+0xd4>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d113      	bne.n	8011220 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	695b      	ldr	r3, [r3, #20]
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	693a      	ldr	r2, [r7, #16]
 8011210:	4313      	orrs	r3, r2
 8011212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	693a      	ldr	r2, [r7, #16]
 801121c:	4313      	orrs	r3, r2
 801121e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	621a      	str	r2, [r3, #32]
}
 801123a:	bf00      	nop
 801123c:	371c      	adds	r7, #28
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	40010000 	.word	0x40010000

0801124c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801124c:	b480      	push	{r7}
 801124e:	b087      	sub	sp, #28
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a1b      	ldr	r3, [r3, #32]
 8011266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801127a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f023 0303 	bic.w	r3, r3, #3
 8011282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	4313      	orrs	r3, r2
 801128c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	021b      	lsls	r3, r3, #8
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	4313      	orrs	r3, r2
 80112a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	4a1d      	ldr	r2, [pc, #116]	; (801131c <TIM_OC3_SetConfig+0xd0>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d10d      	bne.n	80112c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	021b      	lsls	r3, r3, #8
 80112b8:	697a      	ldr	r2, [r7, #20]
 80112ba:	4313      	orrs	r3, r2
 80112bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80112c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a14      	ldr	r2, [pc, #80]	; (801131c <TIM_OC3_SetConfig+0xd0>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d113      	bne.n	80112f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	695b      	ldr	r3, [r3, #20]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	693a      	ldr	r2, [r7, #16]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	699b      	ldr	r3, [r3, #24]
 80112ee:	011b      	lsls	r3, r3, #4
 80112f0:	693a      	ldr	r2, [r7, #16]
 80112f2:	4313      	orrs	r3, r2
 80112f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	693a      	ldr	r2, [r7, #16]
 80112fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	685a      	ldr	r2, [r3, #4]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	697a      	ldr	r2, [r7, #20]
 801130e:	621a      	str	r2, [r3, #32]
}
 8011310:	bf00      	nop
 8011312:	371c      	adds	r7, #28
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	40010000 	.word	0x40010000

08011320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011320:	b480      	push	{r7}
 8011322:	b087      	sub	sp, #28
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a1b      	ldr	r3, [r3, #32]
 801133a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	69db      	ldr	r3, [r3, #28]
 8011346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801134e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	021b      	lsls	r3, r3, #8
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	4313      	orrs	r3, r2
 8011362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801136a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	689b      	ldr	r3, [r3, #8]
 8011370:	031b      	lsls	r3, r3, #12
 8011372:	693a      	ldr	r2, [r7, #16]
 8011374:	4313      	orrs	r3, r2
 8011376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	4a10      	ldr	r2, [pc, #64]	; (80113bc <TIM_OC4_SetConfig+0x9c>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d109      	bne.n	8011394 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	695b      	ldr	r3, [r3, #20]
 801138c:	019b      	lsls	r3, r3, #6
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	4313      	orrs	r3, r2
 8011392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	697a      	ldr	r2, [r7, #20]
 8011398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	68fa      	ldr	r2, [r7, #12]
 801139e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	685a      	ldr	r2, [r3, #4]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	693a      	ldr	r2, [r7, #16]
 80113ac:	621a      	str	r2, [r3, #32]
}
 80113ae:	bf00      	nop
 80113b0:	371c      	adds	r7, #28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	40010000 	.word	0x40010000

080113c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b087      	sub	sp, #28
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	6a1b      	ldr	r3, [r3, #32]
 80113d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6a1b      	ldr	r3, [r3, #32]
 80113d6:	f023 0201 	bic.w	r2, r3, #1
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	699b      	ldr	r3, [r3, #24]
 80113e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80113ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	693a      	ldr	r2, [r7, #16]
 80113f2:	4313      	orrs	r3, r2
 80113f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f023 030a 	bic.w	r3, r3, #10
 80113fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80113fe:	697a      	ldr	r2, [r7, #20]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	4313      	orrs	r3, r2
 8011404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	693a      	ldr	r2, [r7, #16]
 801140a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	697a      	ldr	r2, [r7, #20]
 8011410:	621a      	str	r2, [r3, #32]
}
 8011412:	bf00      	nop
 8011414:	371c      	adds	r7, #28
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr

0801141e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801141e:	b480      	push	{r7}
 8011420:	b087      	sub	sp, #28
 8011422:	af00      	add	r7, sp, #0
 8011424:	60f8      	str	r0, [r7, #12]
 8011426:	60b9      	str	r1, [r7, #8]
 8011428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	f023 0210 	bic.w	r2, r3, #16
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	699b      	ldr	r3, [r3, #24]
 801143a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6a1b      	ldr	r3, [r3, #32]
 8011440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	031b      	lsls	r3, r3, #12
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	4313      	orrs	r3, r2
 8011452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801145a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	4313      	orrs	r3, r2
 8011464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	697a      	ldr	r2, [r7, #20]
 801146a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	693a      	ldr	r2, [r7, #16]
 8011470:	621a      	str	r2, [r3, #32]
}
 8011472:	bf00      	nop
 8011474:	371c      	adds	r7, #28
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr

0801147e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801147e:	b480      	push	{r7}
 8011480:	b085      	sub	sp, #20
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	689b      	ldr	r3, [r3, #8]
 801148c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	4313      	orrs	r3, r2
 801149c:	f043 0307 	orr.w	r3, r3, #7
 80114a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	609a      	str	r2, [r3, #8]
}
 80114a8:	bf00      	nop
 80114aa:	3714      	adds	r7, #20
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b087      	sub	sp, #28
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
 80114c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80114ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	021a      	lsls	r2, r3, #8
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	431a      	orrs	r2, r3
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	4313      	orrs	r3, r2
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	4313      	orrs	r3, r2
 80114e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	697a      	ldr	r2, [r7, #20]
 80114e6:	609a      	str	r2, [r3, #8]
}
 80114e8:	bf00      	nop
 80114ea:	371c      	adds	r7, #28
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b087      	sub	sp, #28
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	f003 031f 	and.w	r3, r3, #31
 8011506:	2201      	movs	r2, #1
 8011508:	fa02 f303 	lsl.w	r3, r2, r3
 801150c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6a1a      	ldr	r2, [r3, #32]
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	43db      	mvns	r3, r3
 8011516:	401a      	ands	r2, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6a1a      	ldr	r2, [r3, #32]
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	f003 031f 	and.w	r3, r3, #31
 8011526:	6879      	ldr	r1, [r7, #4]
 8011528:	fa01 f303 	lsl.w	r3, r1, r3
 801152c:	431a      	orrs	r2, r3
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	621a      	str	r2, [r3, #32]
}
 8011532:	bf00      	nop
 8011534:	371c      	adds	r7, #28
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
	...

08011540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011540:	b480      	push	{r7}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011550:	2b01      	cmp	r3, #1
 8011552:	d101      	bne.n	8011558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011554:	2302      	movs	r3, #2
 8011556:	e050      	b.n	80115fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2201      	movs	r2, #1
 801155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2202      	movs	r2, #2
 8011564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801157e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	4313      	orrs	r3, r2
 8011588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a1c      	ldr	r2, [pc, #112]	; (8011608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d018      	beq.n	80115ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115a4:	d013      	beq.n	80115ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a18      	ldr	r2, [pc, #96]	; (801160c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d00e      	beq.n	80115ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4a16      	ldr	r2, [pc, #88]	; (8011610 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d009      	beq.n	80115ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	4a15      	ldr	r2, [pc, #84]	; (8011614 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d004      	beq.n	80115ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a13      	ldr	r2, [pc, #76]	; (8011618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d10c      	bne.n	80115e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	68ba      	ldr	r2, [r7, #8]
 80115dc:	4313      	orrs	r3, r2
 80115de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3714      	adds	r7, #20
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	40010000 	.word	0x40010000
 801160c:	40000400 	.word	0x40000400
 8011610:	40000800 	.word	0x40000800
 8011614:	40000c00 	.word	0x40000c00
 8011618:	40014000 	.word	0x40014000

0801161c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011624:	bf00      	nop
 8011626:	370c      	adds	r7, #12
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr

08011630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011638:	bf00      	nop
 801163a:	370c      	adds	r7, #12
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011652:	2301      	movs	r3, #1
 8011654:	e03f      	b.n	80116d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801165c:	b2db      	uxtb	r3, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	d106      	bne.n	8011670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7fc f96a 	bl	800d944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2224      	movs	r2, #36	; 0x24
 8011674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	68da      	ldr	r2, [r3, #12]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f90b 	bl	80118a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	691a      	ldr	r2, [r3, #16]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801169c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	695a      	ldr	r2, [r3, #20]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80116ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	68da      	ldr	r2, [r3, #12]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80116bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2220      	movs	r2, #32
 80116c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2220      	movs	r2, #32
 80116d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b088      	sub	sp, #32
 80116e2:	af02      	add	r7, sp, #8
 80116e4:	60f8      	str	r0, [r7, #12]
 80116e6:	60b9      	str	r1, [r7, #8]
 80116e8:	603b      	str	r3, [r7, #0]
 80116ea:	4613      	mov	r3, r2
 80116ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80116ee:	2300      	movs	r3, #0
 80116f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b20      	cmp	r3, #32
 80116fc:	f040 8083 	bne.w	8011806 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d002      	beq.n	801170c <HAL_UART_Transmit+0x2e>
 8011706:	88fb      	ldrh	r3, [r7, #6]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d101      	bne.n	8011710 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801170c:	2301      	movs	r3, #1
 801170e:	e07b      	b.n	8011808 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011716:	2b01      	cmp	r3, #1
 8011718:	d101      	bne.n	801171e <HAL_UART_Transmit+0x40>
 801171a:	2302      	movs	r3, #2
 801171c:	e074      	b.n	8011808 <HAL_UART_Transmit+0x12a>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2201      	movs	r2, #1
 8011722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2200      	movs	r2, #0
 801172a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2221      	movs	r2, #33	; 0x21
 8011730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8011734:	f7fc f9de 	bl	800daf4 <HAL_GetTick>
 8011738:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	88fa      	ldrh	r2, [r7, #6]
 801173e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	88fa      	ldrh	r2, [r7, #6]
 8011744:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2200      	movs	r2, #0
 801174a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801174e:	e042      	b.n	80117d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011754:	b29b      	uxth	r3, r3
 8011756:	3b01      	subs	r3, #1
 8011758:	b29a      	uxth	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011766:	d122      	bne.n	80117ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	2200      	movs	r2, #0
 8011770:	2180      	movs	r1, #128	; 0x80
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	f000 f84c 	bl	8011810 <UART_WaitOnFlagUntilTimeout>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d001      	beq.n	8011782 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	e042      	b.n	8011808 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	461a      	mov	r2, r3
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011794:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	691b      	ldr	r3, [r3, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d103      	bne.n	80117a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	3302      	adds	r3, #2
 80117a2:	60bb      	str	r3, [r7, #8]
 80117a4:	e017      	b.n	80117d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	3301      	adds	r3, #1
 80117aa:	60bb      	str	r3, [r7, #8]
 80117ac:	e013      	b.n	80117d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	2200      	movs	r2, #0
 80117b6:	2180      	movs	r1, #128	; 0x80
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f000 f829 	bl	8011810 <UART_WaitOnFlagUntilTimeout>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d001      	beq.n	80117c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80117c4:	2303      	movs	r3, #3
 80117c6:	e01f      	b.n	8011808 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	1c5a      	adds	r2, r3, #1
 80117cc:	60ba      	str	r2, [r7, #8]
 80117ce:	781a      	ldrb	r2, [r3, #0]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80117da:	b29b      	uxth	r3, r3
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1b7      	bne.n	8011750 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2200      	movs	r2, #0
 80117e8:	2140      	movs	r1, #64	; 0x40
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f000 f810 	bl	8011810 <UART_WaitOnFlagUntilTimeout>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d001      	beq.n	80117fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80117f6:	2303      	movs	r3, #3
 80117f8:	e006      	b.n	8011808 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2220      	movs	r2, #32
 80117fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8011802:	2300      	movs	r3, #0
 8011804:	e000      	b.n	8011808 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8011806:	2302      	movs	r3, #2
  }
}
 8011808:	4618      	mov	r0, r3
 801180a:	3718      	adds	r7, #24
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	603b      	str	r3, [r7, #0]
 801181c:	4613      	mov	r3, r2
 801181e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011820:	e02c      	b.n	801187c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011828:	d028      	beq.n	801187c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d007      	beq.n	8011840 <UART_WaitOnFlagUntilTimeout+0x30>
 8011830:	f7fc f960 	bl	800daf4 <HAL_GetTick>
 8011834:	4602      	mov	r2, r0
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	69ba      	ldr	r2, [r7, #24]
 801183c:	429a      	cmp	r2, r3
 801183e:	d21d      	bcs.n	801187c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68da      	ldr	r2, [r3, #12]
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801184e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	695a      	ldr	r2, [r3, #20]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f022 0201 	bic.w	r2, r2, #1
 801185e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2220      	movs	r2, #32
 8011864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2220      	movs	r2, #32
 801186c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2200      	movs	r2, #0
 8011874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8011878:	2303      	movs	r3, #3
 801187a:	e00f      	b.n	801189c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	4013      	ands	r3, r2
 8011886:	68ba      	ldr	r2, [r7, #8]
 8011888:	429a      	cmp	r2, r3
 801188a:	bf0c      	ite	eq
 801188c:	2301      	moveq	r3, #1
 801188e:	2300      	movne	r3, #0
 8011890:	b2db      	uxtb	r3, r3
 8011892:	461a      	mov	r2, r3
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	429a      	cmp	r2, r3
 8011898:	d0c3      	beq.n	8011822 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80118a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a8:	b085      	sub	sp, #20
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	68da      	ldr	r2, [r3, #12]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	430a      	orrs	r2, r1
 80118c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	689a      	ldr	r2, [r3, #8]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	691b      	ldr	r3, [r3, #16]
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	431a      	orrs	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	69db      	ldr	r3, [r3, #28]
 80118d8:	4313      	orrs	r3, r2
 80118da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80118e6:	f023 030c 	bic.w	r3, r3, #12
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	6812      	ldr	r2, [r2, #0]
 80118ee:	68f9      	ldr	r1, [r7, #12]
 80118f0:	430b      	orrs	r3, r1
 80118f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	699a      	ldr	r2, [r3, #24]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	430a      	orrs	r2, r1
 8011908:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011912:	f040 818b 	bne.w	8011c2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4ac1      	ldr	r2, [pc, #772]	; (8011c20 <UART_SetConfig+0x37c>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d005      	beq.n	801192c <UART_SetConfig+0x88>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4abf      	ldr	r2, [pc, #764]	; (8011c24 <UART_SetConfig+0x380>)
 8011926:	4293      	cmp	r3, r2
 8011928:	f040 80bd 	bne.w	8011aa6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801192c:	f7fe fa52 	bl	800fdd4 <HAL_RCC_GetPCLK2Freq>
 8011930:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	461d      	mov	r5, r3
 8011936:	f04f 0600 	mov.w	r6, #0
 801193a:	46a8      	mov	r8, r5
 801193c:	46b1      	mov	r9, r6
 801193e:	eb18 0308 	adds.w	r3, r8, r8
 8011942:	eb49 0409 	adc.w	r4, r9, r9
 8011946:	4698      	mov	r8, r3
 8011948:	46a1      	mov	r9, r4
 801194a:	eb18 0805 	adds.w	r8, r8, r5
 801194e:	eb49 0906 	adc.w	r9, r9, r6
 8011952:	f04f 0100 	mov.w	r1, #0
 8011956:	f04f 0200 	mov.w	r2, #0
 801195a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801195e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011962:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011966:	4688      	mov	r8, r1
 8011968:	4691      	mov	r9, r2
 801196a:	eb18 0005 	adds.w	r0, r8, r5
 801196e:	eb49 0106 	adc.w	r1, r9, r6
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	461d      	mov	r5, r3
 8011978:	f04f 0600 	mov.w	r6, #0
 801197c:	196b      	adds	r3, r5, r5
 801197e:	eb46 0406 	adc.w	r4, r6, r6
 8011982:	461a      	mov	r2, r3
 8011984:	4623      	mov	r3, r4
 8011986:	f7ef f967 	bl	8000c58 <__aeabi_uldivmod>
 801198a:	4603      	mov	r3, r0
 801198c:	460c      	mov	r4, r1
 801198e:	461a      	mov	r2, r3
 8011990:	4ba5      	ldr	r3, [pc, #660]	; (8011c28 <UART_SetConfig+0x384>)
 8011992:	fba3 2302 	umull	r2, r3, r3, r2
 8011996:	095b      	lsrs	r3, r3, #5
 8011998:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	461d      	mov	r5, r3
 80119a0:	f04f 0600 	mov.w	r6, #0
 80119a4:	46a9      	mov	r9, r5
 80119a6:	46b2      	mov	sl, r6
 80119a8:	eb19 0309 	adds.w	r3, r9, r9
 80119ac:	eb4a 040a 	adc.w	r4, sl, sl
 80119b0:	4699      	mov	r9, r3
 80119b2:	46a2      	mov	sl, r4
 80119b4:	eb19 0905 	adds.w	r9, r9, r5
 80119b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80119bc:	f04f 0100 	mov.w	r1, #0
 80119c0:	f04f 0200 	mov.w	r2, #0
 80119c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80119c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80119cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80119d0:	4689      	mov	r9, r1
 80119d2:	4692      	mov	sl, r2
 80119d4:	eb19 0005 	adds.w	r0, r9, r5
 80119d8:	eb4a 0106 	adc.w	r1, sl, r6
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	461d      	mov	r5, r3
 80119e2:	f04f 0600 	mov.w	r6, #0
 80119e6:	196b      	adds	r3, r5, r5
 80119e8:	eb46 0406 	adc.w	r4, r6, r6
 80119ec:	461a      	mov	r2, r3
 80119ee:	4623      	mov	r3, r4
 80119f0:	f7ef f932 	bl	8000c58 <__aeabi_uldivmod>
 80119f4:	4603      	mov	r3, r0
 80119f6:	460c      	mov	r4, r1
 80119f8:	461a      	mov	r2, r3
 80119fa:	4b8b      	ldr	r3, [pc, #556]	; (8011c28 <UART_SetConfig+0x384>)
 80119fc:	fba3 1302 	umull	r1, r3, r3, r2
 8011a00:	095b      	lsrs	r3, r3, #5
 8011a02:	2164      	movs	r1, #100	; 0x64
 8011a04:	fb01 f303 	mul.w	r3, r1, r3
 8011a08:	1ad3      	subs	r3, r2, r3
 8011a0a:	00db      	lsls	r3, r3, #3
 8011a0c:	3332      	adds	r3, #50	; 0x32
 8011a0e:	4a86      	ldr	r2, [pc, #536]	; (8011c28 <UART_SetConfig+0x384>)
 8011a10:	fba2 2303 	umull	r2, r3, r2, r3
 8011a14:	095b      	lsrs	r3, r3, #5
 8011a16:	005b      	lsls	r3, r3, #1
 8011a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011a1c:	4498      	add	r8, r3
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	461d      	mov	r5, r3
 8011a22:	f04f 0600 	mov.w	r6, #0
 8011a26:	46a9      	mov	r9, r5
 8011a28:	46b2      	mov	sl, r6
 8011a2a:	eb19 0309 	adds.w	r3, r9, r9
 8011a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8011a32:	4699      	mov	r9, r3
 8011a34:	46a2      	mov	sl, r4
 8011a36:	eb19 0905 	adds.w	r9, r9, r5
 8011a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8011a3e:	f04f 0100 	mov.w	r1, #0
 8011a42:	f04f 0200 	mov.w	r2, #0
 8011a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011a52:	4689      	mov	r9, r1
 8011a54:	4692      	mov	sl, r2
 8011a56:	eb19 0005 	adds.w	r0, r9, r5
 8011a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	461d      	mov	r5, r3
 8011a64:	f04f 0600 	mov.w	r6, #0
 8011a68:	196b      	adds	r3, r5, r5
 8011a6a:	eb46 0406 	adc.w	r4, r6, r6
 8011a6e:	461a      	mov	r2, r3
 8011a70:	4623      	mov	r3, r4
 8011a72:	f7ef f8f1 	bl	8000c58 <__aeabi_uldivmod>
 8011a76:	4603      	mov	r3, r0
 8011a78:	460c      	mov	r4, r1
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	4b6a      	ldr	r3, [pc, #424]	; (8011c28 <UART_SetConfig+0x384>)
 8011a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8011a82:	095b      	lsrs	r3, r3, #5
 8011a84:	2164      	movs	r1, #100	; 0x64
 8011a86:	fb01 f303 	mul.w	r3, r1, r3
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	3332      	adds	r3, #50	; 0x32
 8011a90:	4a65      	ldr	r2, [pc, #404]	; (8011c28 <UART_SetConfig+0x384>)
 8011a92:	fba2 2303 	umull	r2, r3, r2, r3
 8011a96:	095b      	lsrs	r3, r3, #5
 8011a98:	f003 0207 	and.w	r2, r3, #7
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4442      	add	r2, r8
 8011aa2:	609a      	str	r2, [r3, #8]
 8011aa4:	e26f      	b.n	8011f86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011aa6:	f7fe f981 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8011aaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	461d      	mov	r5, r3
 8011ab0:	f04f 0600 	mov.w	r6, #0
 8011ab4:	46a8      	mov	r8, r5
 8011ab6:	46b1      	mov	r9, r6
 8011ab8:	eb18 0308 	adds.w	r3, r8, r8
 8011abc:	eb49 0409 	adc.w	r4, r9, r9
 8011ac0:	4698      	mov	r8, r3
 8011ac2:	46a1      	mov	r9, r4
 8011ac4:	eb18 0805 	adds.w	r8, r8, r5
 8011ac8:	eb49 0906 	adc.w	r9, r9, r6
 8011acc:	f04f 0100 	mov.w	r1, #0
 8011ad0:	f04f 0200 	mov.w	r2, #0
 8011ad4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011ad8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011adc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011ae0:	4688      	mov	r8, r1
 8011ae2:	4691      	mov	r9, r2
 8011ae4:	eb18 0005 	adds.w	r0, r8, r5
 8011ae8:	eb49 0106 	adc.w	r1, r9, r6
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	461d      	mov	r5, r3
 8011af2:	f04f 0600 	mov.w	r6, #0
 8011af6:	196b      	adds	r3, r5, r5
 8011af8:	eb46 0406 	adc.w	r4, r6, r6
 8011afc:	461a      	mov	r2, r3
 8011afe:	4623      	mov	r3, r4
 8011b00:	f7ef f8aa 	bl	8000c58 <__aeabi_uldivmod>
 8011b04:	4603      	mov	r3, r0
 8011b06:	460c      	mov	r4, r1
 8011b08:	461a      	mov	r2, r3
 8011b0a:	4b47      	ldr	r3, [pc, #284]	; (8011c28 <UART_SetConfig+0x384>)
 8011b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8011b10:	095b      	lsrs	r3, r3, #5
 8011b12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	461d      	mov	r5, r3
 8011b1a:	f04f 0600 	mov.w	r6, #0
 8011b1e:	46a9      	mov	r9, r5
 8011b20:	46b2      	mov	sl, r6
 8011b22:	eb19 0309 	adds.w	r3, r9, r9
 8011b26:	eb4a 040a 	adc.w	r4, sl, sl
 8011b2a:	4699      	mov	r9, r3
 8011b2c:	46a2      	mov	sl, r4
 8011b2e:	eb19 0905 	adds.w	r9, r9, r5
 8011b32:	eb4a 0a06 	adc.w	sl, sl, r6
 8011b36:	f04f 0100 	mov.w	r1, #0
 8011b3a:	f04f 0200 	mov.w	r2, #0
 8011b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011b4a:	4689      	mov	r9, r1
 8011b4c:	4692      	mov	sl, r2
 8011b4e:	eb19 0005 	adds.w	r0, r9, r5
 8011b52:	eb4a 0106 	adc.w	r1, sl, r6
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	461d      	mov	r5, r3
 8011b5c:	f04f 0600 	mov.w	r6, #0
 8011b60:	196b      	adds	r3, r5, r5
 8011b62:	eb46 0406 	adc.w	r4, r6, r6
 8011b66:	461a      	mov	r2, r3
 8011b68:	4623      	mov	r3, r4
 8011b6a:	f7ef f875 	bl	8000c58 <__aeabi_uldivmod>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	460c      	mov	r4, r1
 8011b72:	461a      	mov	r2, r3
 8011b74:	4b2c      	ldr	r3, [pc, #176]	; (8011c28 <UART_SetConfig+0x384>)
 8011b76:	fba3 1302 	umull	r1, r3, r3, r2
 8011b7a:	095b      	lsrs	r3, r3, #5
 8011b7c:	2164      	movs	r1, #100	; 0x64
 8011b7e:	fb01 f303 	mul.w	r3, r1, r3
 8011b82:	1ad3      	subs	r3, r2, r3
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	3332      	adds	r3, #50	; 0x32
 8011b88:	4a27      	ldr	r2, [pc, #156]	; (8011c28 <UART_SetConfig+0x384>)
 8011b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b8e:	095b      	lsrs	r3, r3, #5
 8011b90:	005b      	lsls	r3, r3, #1
 8011b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011b96:	4498      	add	r8, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	461d      	mov	r5, r3
 8011b9c:	f04f 0600 	mov.w	r6, #0
 8011ba0:	46a9      	mov	r9, r5
 8011ba2:	46b2      	mov	sl, r6
 8011ba4:	eb19 0309 	adds.w	r3, r9, r9
 8011ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8011bac:	4699      	mov	r9, r3
 8011bae:	46a2      	mov	sl, r4
 8011bb0:	eb19 0905 	adds.w	r9, r9, r5
 8011bb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8011bb8:	f04f 0100 	mov.w	r1, #0
 8011bbc:	f04f 0200 	mov.w	r2, #0
 8011bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011bcc:	4689      	mov	r9, r1
 8011bce:	4692      	mov	sl, r2
 8011bd0:	eb19 0005 	adds.w	r0, r9, r5
 8011bd4:	eb4a 0106 	adc.w	r1, sl, r6
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	461d      	mov	r5, r3
 8011bde:	f04f 0600 	mov.w	r6, #0
 8011be2:	196b      	adds	r3, r5, r5
 8011be4:	eb46 0406 	adc.w	r4, r6, r6
 8011be8:	461a      	mov	r2, r3
 8011bea:	4623      	mov	r3, r4
 8011bec:	f7ef f834 	bl	8000c58 <__aeabi_uldivmod>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <UART_SetConfig+0x384>)
 8011bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8011bfc:	095b      	lsrs	r3, r3, #5
 8011bfe:	2164      	movs	r1, #100	; 0x64
 8011c00:	fb01 f303 	mul.w	r3, r1, r3
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	3332      	adds	r3, #50	; 0x32
 8011c0a:	4a07      	ldr	r2, [pc, #28]	; (8011c28 <UART_SetConfig+0x384>)
 8011c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8011c10:	095b      	lsrs	r3, r3, #5
 8011c12:	f003 0207 	and.w	r2, r3, #7
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4442      	add	r2, r8
 8011c1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011c1e:	e1b2      	b.n	8011f86 <UART_SetConfig+0x6e2>
 8011c20:	40011000 	.word	0x40011000
 8011c24:	40011400 	.word	0x40011400
 8011c28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4ad7      	ldr	r2, [pc, #860]	; (8011f90 <UART_SetConfig+0x6ec>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d005      	beq.n	8011c42 <UART_SetConfig+0x39e>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4ad6      	ldr	r2, [pc, #856]	; (8011f94 <UART_SetConfig+0x6f0>)
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	f040 80d1 	bne.w	8011de4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011c42:	f7fe f8c7 	bl	800fdd4 <HAL_RCC_GetPCLK2Freq>
 8011c46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	469a      	mov	sl, r3
 8011c4c:	f04f 0b00 	mov.w	fp, #0
 8011c50:	46d0      	mov	r8, sl
 8011c52:	46d9      	mov	r9, fp
 8011c54:	eb18 0308 	adds.w	r3, r8, r8
 8011c58:	eb49 0409 	adc.w	r4, r9, r9
 8011c5c:	4698      	mov	r8, r3
 8011c5e:	46a1      	mov	r9, r4
 8011c60:	eb18 080a 	adds.w	r8, r8, sl
 8011c64:	eb49 090b 	adc.w	r9, r9, fp
 8011c68:	f04f 0100 	mov.w	r1, #0
 8011c6c:	f04f 0200 	mov.w	r2, #0
 8011c70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011c74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011c78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011c7c:	4688      	mov	r8, r1
 8011c7e:	4691      	mov	r9, r2
 8011c80:	eb1a 0508 	adds.w	r5, sl, r8
 8011c84:	eb4b 0609 	adc.w	r6, fp, r9
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f04f 0200 	mov.w	r2, #0
 8011c92:	f04f 0300 	mov.w	r3, #0
 8011c96:	f04f 0400 	mov.w	r4, #0
 8011c9a:	0094      	lsls	r4, r2, #2
 8011c9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011ca0:	008b      	lsls	r3, r1, #2
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4623      	mov	r3, r4
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	4631      	mov	r1, r6
 8011caa:	f7ee ffd5 	bl	8000c58 <__aeabi_uldivmod>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	4bb8      	ldr	r3, [pc, #736]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8011cba:	095b      	lsrs	r3, r3, #5
 8011cbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	469b      	mov	fp, r3
 8011cc4:	f04f 0c00 	mov.w	ip, #0
 8011cc8:	46d9      	mov	r9, fp
 8011cca:	46e2      	mov	sl, ip
 8011ccc:	eb19 0309 	adds.w	r3, r9, r9
 8011cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8011cd4:	4699      	mov	r9, r3
 8011cd6:	46a2      	mov	sl, r4
 8011cd8:	eb19 090b 	adds.w	r9, r9, fp
 8011cdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011ce0:	f04f 0100 	mov.w	r1, #0
 8011ce4:	f04f 0200 	mov.w	r2, #0
 8011ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011cf4:	4689      	mov	r9, r1
 8011cf6:	4692      	mov	sl, r2
 8011cf8:	eb1b 0509 	adds.w	r5, fp, r9
 8011cfc:	eb4c 060a 	adc.w	r6, ip, sl
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	4619      	mov	r1, r3
 8011d06:	f04f 0200 	mov.w	r2, #0
 8011d0a:	f04f 0300 	mov.w	r3, #0
 8011d0e:	f04f 0400 	mov.w	r4, #0
 8011d12:	0094      	lsls	r4, r2, #2
 8011d14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011d18:	008b      	lsls	r3, r1, #2
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	4623      	mov	r3, r4
 8011d1e:	4628      	mov	r0, r5
 8011d20:	4631      	mov	r1, r6
 8011d22:	f7ee ff99 	bl	8000c58 <__aeabi_uldivmod>
 8011d26:	4603      	mov	r3, r0
 8011d28:	460c      	mov	r4, r1
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	4b9a      	ldr	r3, [pc, #616]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8011d32:	095b      	lsrs	r3, r3, #5
 8011d34:	2164      	movs	r1, #100	; 0x64
 8011d36:	fb01 f303 	mul.w	r3, r1, r3
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	011b      	lsls	r3, r3, #4
 8011d3e:	3332      	adds	r3, #50	; 0x32
 8011d40:	4a95      	ldr	r2, [pc, #596]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011d42:	fba2 2303 	umull	r2, r3, r2, r3
 8011d46:	095b      	lsrs	r3, r3, #5
 8011d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d4c:	4498      	add	r8, r3
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	469b      	mov	fp, r3
 8011d52:	f04f 0c00 	mov.w	ip, #0
 8011d56:	46d9      	mov	r9, fp
 8011d58:	46e2      	mov	sl, ip
 8011d5a:	eb19 0309 	adds.w	r3, r9, r9
 8011d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8011d62:	4699      	mov	r9, r3
 8011d64:	46a2      	mov	sl, r4
 8011d66:	eb19 090b 	adds.w	r9, r9, fp
 8011d6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011d6e:	f04f 0100 	mov.w	r1, #0
 8011d72:	f04f 0200 	mov.w	r2, #0
 8011d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011d82:	4689      	mov	r9, r1
 8011d84:	4692      	mov	sl, r2
 8011d86:	eb1b 0509 	adds.w	r5, fp, r9
 8011d8a:	eb4c 060a 	adc.w	r6, ip, sl
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	4619      	mov	r1, r3
 8011d94:	f04f 0200 	mov.w	r2, #0
 8011d98:	f04f 0300 	mov.w	r3, #0
 8011d9c:	f04f 0400 	mov.w	r4, #0
 8011da0:	0094      	lsls	r4, r2, #2
 8011da2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011da6:	008b      	lsls	r3, r1, #2
 8011da8:	461a      	mov	r2, r3
 8011daa:	4623      	mov	r3, r4
 8011dac:	4628      	mov	r0, r5
 8011dae:	4631      	mov	r1, r6
 8011db0:	f7ee ff52 	bl	8000c58 <__aeabi_uldivmod>
 8011db4:	4603      	mov	r3, r0
 8011db6:	460c      	mov	r4, r1
 8011db8:	461a      	mov	r2, r3
 8011dba:	4b77      	ldr	r3, [pc, #476]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8011dc0:	095b      	lsrs	r3, r3, #5
 8011dc2:	2164      	movs	r1, #100	; 0x64
 8011dc4:	fb01 f303 	mul.w	r3, r1, r3
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	011b      	lsls	r3, r3, #4
 8011dcc:	3332      	adds	r3, #50	; 0x32
 8011dce:	4a72      	ldr	r2, [pc, #456]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8011dd4:	095b      	lsrs	r3, r3, #5
 8011dd6:	f003 020f 	and.w	r2, r3, #15
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	4442      	add	r2, r8
 8011de0:	609a      	str	r2, [r3, #8]
 8011de2:	e0d0      	b.n	8011f86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011de4:	f7fd ffe2 	bl	800fdac <HAL_RCC_GetPCLK1Freq>
 8011de8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	469a      	mov	sl, r3
 8011dee:	f04f 0b00 	mov.w	fp, #0
 8011df2:	46d0      	mov	r8, sl
 8011df4:	46d9      	mov	r9, fp
 8011df6:	eb18 0308 	adds.w	r3, r8, r8
 8011dfa:	eb49 0409 	adc.w	r4, r9, r9
 8011dfe:	4698      	mov	r8, r3
 8011e00:	46a1      	mov	r9, r4
 8011e02:	eb18 080a 	adds.w	r8, r8, sl
 8011e06:	eb49 090b 	adc.w	r9, r9, fp
 8011e0a:	f04f 0100 	mov.w	r1, #0
 8011e0e:	f04f 0200 	mov.w	r2, #0
 8011e12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011e16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011e1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011e1e:	4688      	mov	r8, r1
 8011e20:	4691      	mov	r9, r2
 8011e22:	eb1a 0508 	adds.w	r5, sl, r8
 8011e26:	eb4b 0609 	adc.w	r6, fp, r9
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	4619      	mov	r1, r3
 8011e30:	f04f 0200 	mov.w	r2, #0
 8011e34:	f04f 0300 	mov.w	r3, #0
 8011e38:	f04f 0400 	mov.w	r4, #0
 8011e3c:	0094      	lsls	r4, r2, #2
 8011e3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011e42:	008b      	lsls	r3, r1, #2
 8011e44:	461a      	mov	r2, r3
 8011e46:	4623      	mov	r3, r4
 8011e48:	4628      	mov	r0, r5
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	f7ee ff04 	bl	8000c58 <__aeabi_uldivmod>
 8011e50:	4603      	mov	r3, r0
 8011e52:	460c      	mov	r4, r1
 8011e54:	461a      	mov	r2, r3
 8011e56:	4b50      	ldr	r3, [pc, #320]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011e58:	fba3 2302 	umull	r2, r3, r3, r2
 8011e5c:	095b      	lsrs	r3, r3, #5
 8011e5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	469b      	mov	fp, r3
 8011e66:	f04f 0c00 	mov.w	ip, #0
 8011e6a:	46d9      	mov	r9, fp
 8011e6c:	46e2      	mov	sl, ip
 8011e6e:	eb19 0309 	adds.w	r3, r9, r9
 8011e72:	eb4a 040a 	adc.w	r4, sl, sl
 8011e76:	4699      	mov	r9, r3
 8011e78:	46a2      	mov	sl, r4
 8011e7a:	eb19 090b 	adds.w	r9, r9, fp
 8011e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011e82:	f04f 0100 	mov.w	r1, #0
 8011e86:	f04f 0200 	mov.w	r2, #0
 8011e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011e96:	4689      	mov	r9, r1
 8011e98:	4692      	mov	sl, r2
 8011e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8011e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	f04f 0200 	mov.w	r2, #0
 8011eac:	f04f 0300 	mov.w	r3, #0
 8011eb0:	f04f 0400 	mov.w	r4, #0
 8011eb4:	0094      	lsls	r4, r2, #2
 8011eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011eba:	008b      	lsls	r3, r1, #2
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4623      	mov	r3, r4
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	f7ee fec8 	bl	8000c58 <__aeabi_uldivmod>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	460c      	mov	r4, r1
 8011ecc:	461a      	mov	r2, r3
 8011ece:	4b32      	ldr	r3, [pc, #200]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8011ed4:	095b      	lsrs	r3, r3, #5
 8011ed6:	2164      	movs	r1, #100	; 0x64
 8011ed8:	fb01 f303 	mul.w	r3, r1, r3
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	011b      	lsls	r3, r3, #4
 8011ee0:	3332      	adds	r3, #50	; 0x32
 8011ee2:	4a2d      	ldr	r2, [pc, #180]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8011ee8:	095b      	lsrs	r3, r3, #5
 8011eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011eee:	4498      	add	r8, r3
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	469b      	mov	fp, r3
 8011ef4:	f04f 0c00 	mov.w	ip, #0
 8011ef8:	46d9      	mov	r9, fp
 8011efa:	46e2      	mov	sl, ip
 8011efc:	eb19 0309 	adds.w	r3, r9, r9
 8011f00:	eb4a 040a 	adc.w	r4, sl, sl
 8011f04:	4699      	mov	r9, r3
 8011f06:	46a2      	mov	sl, r4
 8011f08:	eb19 090b 	adds.w	r9, r9, fp
 8011f0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011f10:	f04f 0100 	mov.w	r1, #0
 8011f14:	f04f 0200 	mov.w	r2, #0
 8011f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011f24:	4689      	mov	r9, r1
 8011f26:	4692      	mov	sl, r2
 8011f28:	eb1b 0509 	adds.w	r5, fp, r9
 8011f2c:	eb4c 060a 	adc.w	r6, ip, sl
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	4619      	mov	r1, r3
 8011f36:	f04f 0200 	mov.w	r2, #0
 8011f3a:	f04f 0300 	mov.w	r3, #0
 8011f3e:	f04f 0400 	mov.w	r4, #0
 8011f42:	0094      	lsls	r4, r2, #2
 8011f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011f48:	008b      	lsls	r3, r1, #2
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	4623      	mov	r3, r4
 8011f4e:	4628      	mov	r0, r5
 8011f50:	4631      	mov	r1, r6
 8011f52:	f7ee fe81 	bl	8000c58 <__aeabi_uldivmod>
 8011f56:	4603      	mov	r3, r0
 8011f58:	460c      	mov	r4, r1
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	4b0e      	ldr	r3, [pc, #56]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8011f62:	095b      	lsrs	r3, r3, #5
 8011f64:	2164      	movs	r1, #100	; 0x64
 8011f66:	fb01 f303 	mul.w	r3, r1, r3
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	011b      	lsls	r3, r3, #4
 8011f6e:	3332      	adds	r3, #50	; 0x32
 8011f70:	4a09      	ldr	r2, [pc, #36]	; (8011f98 <UART_SetConfig+0x6f4>)
 8011f72:	fba2 2303 	umull	r2, r3, r2, r3
 8011f76:	095b      	lsrs	r3, r3, #5
 8011f78:	f003 020f 	and.w	r2, r3, #15
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4442      	add	r2, r8
 8011f82:	609a      	str	r2, [r3, #8]
}
 8011f84:	e7ff      	b.n	8011f86 <UART_SetConfig+0x6e2>
 8011f86:	bf00      	nop
 8011f88:	3714      	adds	r7, #20
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f90:	40011000 	.word	0x40011000
 8011f94:	40011400 	.word	0x40011400
 8011f98:	51eb851f 	.word	0x51eb851f

08011f9c <__errno>:
 8011f9c:	4b01      	ldr	r3, [pc, #4]	; (8011fa4 <__errno+0x8>)
 8011f9e:	6818      	ldr	r0, [r3, #0]
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	20000010 	.word	0x20000010

08011fa8 <__libc_init_array>:
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	4e0d      	ldr	r6, [pc, #52]	; (8011fe0 <__libc_init_array+0x38>)
 8011fac:	4c0d      	ldr	r4, [pc, #52]	; (8011fe4 <__libc_init_array+0x3c>)
 8011fae:	1ba4      	subs	r4, r4, r6
 8011fb0:	10a4      	asrs	r4, r4, #2
 8011fb2:	2500      	movs	r5, #0
 8011fb4:	42a5      	cmp	r5, r4
 8011fb6:	d109      	bne.n	8011fcc <__libc_init_array+0x24>
 8011fb8:	4e0b      	ldr	r6, [pc, #44]	; (8011fe8 <__libc_init_array+0x40>)
 8011fba:	4c0c      	ldr	r4, [pc, #48]	; (8011fec <__libc_init_array+0x44>)
 8011fbc:	f002 fc64 	bl	8014888 <_init>
 8011fc0:	1ba4      	subs	r4, r4, r6
 8011fc2:	10a4      	asrs	r4, r4, #2
 8011fc4:	2500      	movs	r5, #0
 8011fc6:	42a5      	cmp	r5, r4
 8011fc8:	d105      	bne.n	8011fd6 <__libc_init_array+0x2e>
 8011fca:	bd70      	pop	{r4, r5, r6, pc}
 8011fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fd0:	4798      	blx	r3
 8011fd2:	3501      	adds	r5, #1
 8011fd4:	e7ee      	b.n	8011fb4 <__libc_init_array+0xc>
 8011fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fda:	4798      	blx	r3
 8011fdc:	3501      	adds	r5, #1
 8011fde:	e7f2      	b.n	8011fc6 <__libc_init_array+0x1e>
 8011fe0:	08014d70 	.word	0x08014d70
 8011fe4:	08014d70 	.word	0x08014d70
 8011fe8:	08014d70 	.word	0x08014d70
 8011fec:	08014d74 	.word	0x08014d74

08011ff0 <memcpy>:
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	1e43      	subs	r3, r0, #1
 8011ff4:	440a      	add	r2, r1
 8011ff6:	4291      	cmp	r1, r2
 8011ff8:	d100      	bne.n	8011ffc <memcpy+0xc>
 8011ffa:	bd10      	pop	{r4, pc}
 8011ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012004:	e7f7      	b.n	8011ff6 <memcpy+0x6>

08012006 <memset>:
 8012006:	4402      	add	r2, r0
 8012008:	4603      	mov	r3, r0
 801200a:	4293      	cmp	r3, r2
 801200c:	d100      	bne.n	8012010 <memset+0xa>
 801200e:	4770      	bx	lr
 8012010:	f803 1b01 	strb.w	r1, [r3], #1
 8012014:	e7f9      	b.n	801200a <memset+0x4>

08012016 <__cvt>:
 8012016:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801201a:	ec55 4b10 	vmov	r4, r5, d0
 801201e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012020:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012024:	2d00      	cmp	r5, #0
 8012026:	460e      	mov	r6, r1
 8012028:	4691      	mov	r9, r2
 801202a:	4619      	mov	r1, r3
 801202c:	bfb8      	it	lt
 801202e:	4622      	movlt	r2, r4
 8012030:	462b      	mov	r3, r5
 8012032:	f027 0720 	bic.w	r7, r7, #32
 8012036:	bfbb      	ittet	lt
 8012038:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801203c:	461d      	movlt	r5, r3
 801203e:	2300      	movge	r3, #0
 8012040:	232d      	movlt	r3, #45	; 0x2d
 8012042:	bfb8      	it	lt
 8012044:	4614      	movlt	r4, r2
 8012046:	2f46      	cmp	r7, #70	; 0x46
 8012048:	700b      	strb	r3, [r1, #0]
 801204a:	d004      	beq.n	8012056 <__cvt+0x40>
 801204c:	2f45      	cmp	r7, #69	; 0x45
 801204e:	d100      	bne.n	8012052 <__cvt+0x3c>
 8012050:	3601      	adds	r6, #1
 8012052:	2102      	movs	r1, #2
 8012054:	e000      	b.n	8012058 <__cvt+0x42>
 8012056:	2103      	movs	r1, #3
 8012058:	ab03      	add	r3, sp, #12
 801205a:	9301      	str	r3, [sp, #4]
 801205c:	ab02      	add	r3, sp, #8
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	4632      	mov	r2, r6
 8012062:	4653      	mov	r3, sl
 8012064:	ec45 4b10 	vmov	d0, r4, r5
 8012068:	f000 feb2 	bl	8012dd0 <_dtoa_r>
 801206c:	2f47      	cmp	r7, #71	; 0x47
 801206e:	4680      	mov	r8, r0
 8012070:	d102      	bne.n	8012078 <__cvt+0x62>
 8012072:	f019 0f01 	tst.w	r9, #1
 8012076:	d026      	beq.n	80120c6 <__cvt+0xb0>
 8012078:	2f46      	cmp	r7, #70	; 0x46
 801207a:	eb08 0906 	add.w	r9, r8, r6
 801207e:	d111      	bne.n	80120a4 <__cvt+0x8e>
 8012080:	f898 3000 	ldrb.w	r3, [r8]
 8012084:	2b30      	cmp	r3, #48	; 0x30
 8012086:	d10a      	bne.n	801209e <__cvt+0x88>
 8012088:	2200      	movs	r2, #0
 801208a:	2300      	movs	r3, #0
 801208c:	4620      	mov	r0, r4
 801208e:	4629      	mov	r1, r5
 8012090:	f7ee fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8012094:	b918      	cbnz	r0, 801209e <__cvt+0x88>
 8012096:	f1c6 0601 	rsb	r6, r6, #1
 801209a:	f8ca 6000 	str.w	r6, [sl]
 801209e:	f8da 3000 	ldr.w	r3, [sl]
 80120a2:	4499      	add	r9, r3
 80120a4:	2200      	movs	r2, #0
 80120a6:	2300      	movs	r3, #0
 80120a8:	4620      	mov	r0, r4
 80120aa:	4629      	mov	r1, r5
 80120ac:	f7ee fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 80120b0:	b938      	cbnz	r0, 80120c2 <__cvt+0xac>
 80120b2:	2230      	movs	r2, #48	; 0x30
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	454b      	cmp	r3, r9
 80120b8:	d205      	bcs.n	80120c6 <__cvt+0xb0>
 80120ba:	1c59      	adds	r1, r3, #1
 80120bc:	9103      	str	r1, [sp, #12]
 80120be:	701a      	strb	r2, [r3, #0]
 80120c0:	e7f8      	b.n	80120b4 <__cvt+0x9e>
 80120c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80120c6:	9b03      	ldr	r3, [sp, #12]
 80120c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120ca:	eba3 0308 	sub.w	r3, r3, r8
 80120ce:	4640      	mov	r0, r8
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	b004      	add	sp, #16
 80120d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080120d8 <__exponent>:
 80120d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120da:	2900      	cmp	r1, #0
 80120dc:	4604      	mov	r4, r0
 80120de:	bfba      	itte	lt
 80120e0:	4249      	neglt	r1, r1
 80120e2:	232d      	movlt	r3, #45	; 0x2d
 80120e4:	232b      	movge	r3, #43	; 0x2b
 80120e6:	2909      	cmp	r1, #9
 80120e8:	f804 2b02 	strb.w	r2, [r4], #2
 80120ec:	7043      	strb	r3, [r0, #1]
 80120ee:	dd20      	ble.n	8012132 <__exponent+0x5a>
 80120f0:	f10d 0307 	add.w	r3, sp, #7
 80120f4:	461f      	mov	r7, r3
 80120f6:	260a      	movs	r6, #10
 80120f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80120fc:	fb06 1115 	mls	r1, r6, r5, r1
 8012100:	3130      	adds	r1, #48	; 0x30
 8012102:	2d09      	cmp	r5, #9
 8012104:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012108:	f103 32ff 	add.w	r2, r3, #4294967295
 801210c:	4629      	mov	r1, r5
 801210e:	dc09      	bgt.n	8012124 <__exponent+0x4c>
 8012110:	3130      	adds	r1, #48	; 0x30
 8012112:	3b02      	subs	r3, #2
 8012114:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012118:	42bb      	cmp	r3, r7
 801211a:	4622      	mov	r2, r4
 801211c:	d304      	bcc.n	8012128 <__exponent+0x50>
 801211e:	1a10      	subs	r0, r2, r0
 8012120:	b003      	add	sp, #12
 8012122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012124:	4613      	mov	r3, r2
 8012126:	e7e7      	b.n	80120f8 <__exponent+0x20>
 8012128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801212c:	f804 2b01 	strb.w	r2, [r4], #1
 8012130:	e7f2      	b.n	8012118 <__exponent+0x40>
 8012132:	2330      	movs	r3, #48	; 0x30
 8012134:	4419      	add	r1, r3
 8012136:	7083      	strb	r3, [r0, #2]
 8012138:	1d02      	adds	r2, r0, #4
 801213a:	70c1      	strb	r1, [r0, #3]
 801213c:	e7ef      	b.n	801211e <__exponent+0x46>
	...

08012140 <_printf_float>:
 8012140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012144:	b08d      	sub	sp, #52	; 0x34
 8012146:	460c      	mov	r4, r1
 8012148:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801214c:	4616      	mov	r6, r2
 801214e:	461f      	mov	r7, r3
 8012150:	4605      	mov	r5, r0
 8012152:	f001 fd6f 	bl	8013c34 <_localeconv_r>
 8012156:	6803      	ldr	r3, [r0, #0]
 8012158:	9304      	str	r3, [sp, #16]
 801215a:	4618      	mov	r0, r3
 801215c:	f7ee f840 	bl	80001e0 <strlen>
 8012160:	2300      	movs	r3, #0
 8012162:	930a      	str	r3, [sp, #40]	; 0x28
 8012164:	f8d8 3000 	ldr.w	r3, [r8]
 8012168:	9005      	str	r0, [sp, #20]
 801216a:	3307      	adds	r3, #7
 801216c:	f023 0307 	bic.w	r3, r3, #7
 8012170:	f103 0208 	add.w	r2, r3, #8
 8012174:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012178:	f8d4 b000 	ldr.w	fp, [r4]
 801217c:	f8c8 2000 	str.w	r2, [r8]
 8012180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012184:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012188:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801218c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012190:	9307      	str	r3, [sp, #28]
 8012192:	f8cd 8018 	str.w	r8, [sp, #24]
 8012196:	f04f 32ff 	mov.w	r2, #4294967295
 801219a:	4ba7      	ldr	r3, [pc, #668]	; (8012438 <_printf_float+0x2f8>)
 801219c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121a0:	f7ee fccc 	bl	8000b3c <__aeabi_dcmpun>
 80121a4:	bb70      	cbnz	r0, 8012204 <_printf_float+0xc4>
 80121a6:	f04f 32ff 	mov.w	r2, #4294967295
 80121aa:	4ba3      	ldr	r3, [pc, #652]	; (8012438 <_printf_float+0x2f8>)
 80121ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121b0:	f7ee fca6 	bl	8000b00 <__aeabi_dcmple>
 80121b4:	bb30      	cbnz	r0, 8012204 <_printf_float+0xc4>
 80121b6:	2200      	movs	r2, #0
 80121b8:	2300      	movs	r3, #0
 80121ba:	4640      	mov	r0, r8
 80121bc:	4649      	mov	r1, r9
 80121be:	f7ee fc95 	bl	8000aec <__aeabi_dcmplt>
 80121c2:	b110      	cbz	r0, 80121ca <_printf_float+0x8a>
 80121c4:	232d      	movs	r3, #45	; 0x2d
 80121c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121ca:	4a9c      	ldr	r2, [pc, #624]	; (801243c <_printf_float+0x2fc>)
 80121cc:	4b9c      	ldr	r3, [pc, #624]	; (8012440 <_printf_float+0x300>)
 80121ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80121d2:	bf8c      	ite	hi
 80121d4:	4690      	movhi	r8, r2
 80121d6:	4698      	movls	r8, r3
 80121d8:	2303      	movs	r3, #3
 80121da:	f02b 0204 	bic.w	r2, fp, #4
 80121de:	6123      	str	r3, [r4, #16]
 80121e0:	6022      	str	r2, [r4, #0]
 80121e2:	f04f 0900 	mov.w	r9, #0
 80121e6:	9700      	str	r7, [sp, #0]
 80121e8:	4633      	mov	r3, r6
 80121ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80121ec:	4621      	mov	r1, r4
 80121ee:	4628      	mov	r0, r5
 80121f0:	f000 f9e6 	bl	80125c0 <_printf_common>
 80121f4:	3001      	adds	r0, #1
 80121f6:	f040 808d 	bne.w	8012314 <_printf_float+0x1d4>
 80121fa:	f04f 30ff 	mov.w	r0, #4294967295
 80121fe:	b00d      	add	sp, #52	; 0x34
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	4642      	mov	r2, r8
 8012206:	464b      	mov	r3, r9
 8012208:	4640      	mov	r0, r8
 801220a:	4649      	mov	r1, r9
 801220c:	f7ee fc96 	bl	8000b3c <__aeabi_dcmpun>
 8012210:	b110      	cbz	r0, 8012218 <_printf_float+0xd8>
 8012212:	4a8c      	ldr	r2, [pc, #560]	; (8012444 <_printf_float+0x304>)
 8012214:	4b8c      	ldr	r3, [pc, #560]	; (8012448 <_printf_float+0x308>)
 8012216:	e7da      	b.n	80121ce <_printf_float+0x8e>
 8012218:	6861      	ldr	r1, [r4, #4]
 801221a:	1c4b      	adds	r3, r1, #1
 801221c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012220:	a80a      	add	r0, sp, #40	; 0x28
 8012222:	d13e      	bne.n	80122a2 <_printf_float+0x162>
 8012224:	2306      	movs	r3, #6
 8012226:	6063      	str	r3, [r4, #4]
 8012228:	2300      	movs	r3, #0
 801222a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801222e:	ab09      	add	r3, sp, #36	; 0x24
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	ec49 8b10 	vmov	d0, r8, r9
 8012236:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801223a:	6022      	str	r2, [r4, #0]
 801223c:	f8cd a004 	str.w	sl, [sp, #4]
 8012240:	6861      	ldr	r1, [r4, #4]
 8012242:	4628      	mov	r0, r5
 8012244:	f7ff fee7 	bl	8012016 <__cvt>
 8012248:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801224c:	2b47      	cmp	r3, #71	; 0x47
 801224e:	4680      	mov	r8, r0
 8012250:	d109      	bne.n	8012266 <_printf_float+0x126>
 8012252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012254:	1cd8      	adds	r0, r3, #3
 8012256:	db02      	blt.n	801225e <_printf_float+0x11e>
 8012258:	6862      	ldr	r2, [r4, #4]
 801225a:	4293      	cmp	r3, r2
 801225c:	dd47      	ble.n	80122ee <_printf_float+0x1ae>
 801225e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012262:	fa5f fa8a 	uxtb.w	sl, sl
 8012266:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801226a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801226c:	d824      	bhi.n	80122b8 <_printf_float+0x178>
 801226e:	3901      	subs	r1, #1
 8012270:	4652      	mov	r2, sl
 8012272:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012276:	9109      	str	r1, [sp, #36]	; 0x24
 8012278:	f7ff ff2e 	bl	80120d8 <__exponent>
 801227c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801227e:	1813      	adds	r3, r2, r0
 8012280:	2a01      	cmp	r2, #1
 8012282:	4681      	mov	r9, r0
 8012284:	6123      	str	r3, [r4, #16]
 8012286:	dc02      	bgt.n	801228e <_printf_float+0x14e>
 8012288:	6822      	ldr	r2, [r4, #0]
 801228a:	07d1      	lsls	r1, r2, #31
 801228c:	d501      	bpl.n	8012292 <_printf_float+0x152>
 801228e:	3301      	adds	r3, #1
 8012290:	6123      	str	r3, [r4, #16]
 8012292:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012296:	2b00      	cmp	r3, #0
 8012298:	d0a5      	beq.n	80121e6 <_printf_float+0xa6>
 801229a:	232d      	movs	r3, #45	; 0x2d
 801229c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122a0:	e7a1      	b.n	80121e6 <_printf_float+0xa6>
 80122a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80122a6:	f000 8177 	beq.w	8012598 <_printf_float+0x458>
 80122aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80122ae:	d1bb      	bne.n	8012228 <_printf_float+0xe8>
 80122b0:	2900      	cmp	r1, #0
 80122b2:	d1b9      	bne.n	8012228 <_printf_float+0xe8>
 80122b4:	2301      	movs	r3, #1
 80122b6:	e7b6      	b.n	8012226 <_printf_float+0xe6>
 80122b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80122bc:	d119      	bne.n	80122f2 <_printf_float+0x1b2>
 80122be:	2900      	cmp	r1, #0
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	dd0c      	ble.n	80122de <_printf_float+0x19e>
 80122c4:	6121      	str	r1, [r4, #16]
 80122c6:	b913      	cbnz	r3, 80122ce <_printf_float+0x18e>
 80122c8:	6822      	ldr	r2, [r4, #0]
 80122ca:	07d2      	lsls	r2, r2, #31
 80122cc:	d502      	bpl.n	80122d4 <_printf_float+0x194>
 80122ce:	3301      	adds	r3, #1
 80122d0:	440b      	add	r3, r1
 80122d2:	6123      	str	r3, [r4, #16]
 80122d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80122d8:	f04f 0900 	mov.w	r9, #0
 80122dc:	e7d9      	b.n	8012292 <_printf_float+0x152>
 80122de:	b913      	cbnz	r3, 80122e6 <_printf_float+0x1a6>
 80122e0:	6822      	ldr	r2, [r4, #0]
 80122e2:	07d0      	lsls	r0, r2, #31
 80122e4:	d501      	bpl.n	80122ea <_printf_float+0x1aa>
 80122e6:	3302      	adds	r3, #2
 80122e8:	e7f3      	b.n	80122d2 <_printf_float+0x192>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e7f1      	b.n	80122d2 <_printf_float+0x192>
 80122ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80122f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80122f6:	4293      	cmp	r3, r2
 80122f8:	db05      	blt.n	8012306 <_printf_float+0x1c6>
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	6123      	str	r3, [r4, #16]
 80122fe:	07d1      	lsls	r1, r2, #31
 8012300:	d5e8      	bpl.n	80122d4 <_printf_float+0x194>
 8012302:	3301      	adds	r3, #1
 8012304:	e7e5      	b.n	80122d2 <_printf_float+0x192>
 8012306:	2b00      	cmp	r3, #0
 8012308:	bfd4      	ite	le
 801230a:	f1c3 0302 	rsble	r3, r3, #2
 801230e:	2301      	movgt	r3, #1
 8012310:	4413      	add	r3, r2
 8012312:	e7de      	b.n	80122d2 <_printf_float+0x192>
 8012314:	6823      	ldr	r3, [r4, #0]
 8012316:	055a      	lsls	r2, r3, #21
 8012318:	d407      	bmi.n	801232a <_printf_float+0x1ea>
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	4642      	mov	r2, r8
 801231e:	4631      	mov	r1, r6
 8012320:	4628      	mov	r0, r5
 8012322:	47b8      	blx	r7
 8012324:	3001      	adds	r0, #1
 8012326:	d12b      	bne.n	8012380 <_printf_float+0x240>
 8012328:	e767      	b.n	80121fa <_printf_float+0xba>
 801232a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801232e:	f240 80dc 	bls.w	80124ea <_printf_float+0x3aa>
 8012332:	2200      	movs	r2, #0
 8012334:	2300      	movs	r3, #0
 8012336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801233a:	f7ee fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 801233e:	2800      	cmp	r0, #0
 8012340:	d033      	beq.n	80123aa <_printf_float+0x26a>
 8012342:	2301      	movs	r3, #1
 8012344:	4a41      	ldr	r2, [pc, #260]	; (801244c <_printf_float+0x30c>)
 8012346:	4631      	mov	r1, r6
 8012348:	4628      	mov	r0, r5
 801234a:	47b8      	blx	r7
 801234c:	3001      	adds	r0, #1
 801234e:	f43f af54 	beq.w	80121fa <_printf_float+0xba>
 8012352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012356:	429a      	cmp	r2, r3
 8012358:	db02      	blt.n	8012360 <_printf_float+0x220>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	07d8      	lsls	r0, r3, #31
 801235e:	d50f      	bpl.n	8012380 <_printf_float+0x240>
 8012360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012364:	4631      	mov	r1, r6
 8012366:	4628      	mov	r0, r5
 8012368:	47b8      	blx	r7
 801236a:	3001      	adds	r0, #1
 801236c:	f43f af45 	beq.w	80121fa <_printf_float+0xba>
 8012370:	f04f 0800 	mov.w	r8, #0
 8012374:	f104 091a 	add.w	r9, r4, #26
 8012378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801237a:	3b01      	subs	r3, #1
 801237c:	4543      	cmp	r3, r8
 801237e:	dc09      	bgt.n	8012394 <_printf_float+0x254>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	079b      	lsls	r3, r3, #30
 8012384:	f100 8103 	bmi.w	801258e <_printf_float+0x44e>
 8012388:	68e0      	ldr	r0, [r4, #12]
 801238a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801238c:	4298      	cmp	r0, r3
 801238e:	bfb8      	it	lt
 8012390:	4618      	movlt	r0, r3
 8012392:	e734      	b.n	80121fe <_printf_float+0xbe>
 8012394:	2301      	movs	r3, #1
 8012396:	464a      	mov	r2, r9
 8012398:	4631      	mov	r1, r6
 801239a:	4628      	mov	r0, r5
 801239c:	47b8      	blx	r7
 801239e:	3001      	adds	r0, #1
 80123a0:	f43f af2b 	beq.w	80121fa <_printf_float+0xba>
 80123a4:	f108 0801 	add.w	r8, r8, #1
 80123a8:	e7e6      	b.n	8012378 <_printf_float+0x238>
 80123aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	dc2b      	bgt.n	8012408 <_printf_float+0x2c8>
 80123b0:	2301      	movs	r3, #1
 80123b2:	4a26      	ldr	r2, [pc, #152]	; (801244c <_printf_float+0x30c>)
 80123b4:	4631      	mov	r1, r6
 80123b6:	4628      	mov	r0, r5
 80123b8:	47b8      	blx	r7
 80123ba:	3001      	adds	r0, #1
 80123bc:	f43f af1d 	beq.w	80121fa <_printf_float+0xba>
 80123c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123c2:	b923      	cbnz	r3, 80123ce <_printf_float+0x28e>
 80123c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c6:	b913      	cbnz	r3, 80123ce <_printf_float+0x28e>
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	07d9      	lsls	r1, r3, #31
 80123cc:	d5d8      	bpl.n	8012380 <_printf_float+0x240>
 80123ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123d2:	4631      	mov	r1, r6
 80123d4:	4628      	mov	r0, r5
 80123d6:	47b8      	blx	r7
 80123d8:	3001      	adds	r0, #1
 80123da:	f43f af0e 	beq.w	80121fa <_printf_float+0xba>
 80123de:	f04f 0900 	mov.w	r9, #0
 80123e2:	f104 0a1a 	add.w	sl, r4, #26
 80123e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123e8:	425b      	negs	r3, r3
 80123ea:	454b      	cmp	r3, r9
 80123ec:	dc01      	bgt.n	80123f2 <_printf_float+0x2b2>
 80123ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123f0:	e794      	b.n	801231c <_printf_float+0x1dc>
 80123f2:	2301      	movs	r3, #1
 80123f4:	4652      	mov	r2, sl
 80123f6:	4631      	mov	r1, r6
 80123f8:	4628      	mov	r0, r5
 80123fa:	47b8      	blx	r7
 80123fc:	3001      	adds	r0, #1
 80123fe:	f43f aefc 	beq.w	80121fa <_printf_float+0xba>
 8012402:	f109 0901 	add.w	r9, r9, #1
 8012406:	e7ee      	b.n	80123e6 <_printf_float+0x2a6>
 8012408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801240a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801240c:	429a      	cmp	r2, r3
 801240e:	bfa8      	it	ge
 8012410:	461a      	movge	r2, r3
 8012412:	2a00      	cmp	r2, #0
 8012414:	4691      	mov	r9, r2
 8012416:	dd07      	ble.n	8012428 <_printf_float+0x2e8>
 8012418:	4613      	mov	r3, r2
 801241a:	4631      	mov	r1, r6
 801241c:	4642      	mov	r2, r8
 801241e:	4628      	mov	r0, r5
 8012420:	47b8      	blx	r7
 8012422:	3001      	adds	r0, #1
 8012424:	f43f aee9 	beq.w	80121fa <_printf_float+0xba>
 8012428:	f104 031a 	add.w	r3, r4, #26
 801242c:	f04f 0b00 	mov.w	fp, #0
 8012430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012434:	9306      	str	r3, [sp, #24]
 8012436:	e015      	b.n	8012464 <_printf_float+0x324>
 8012438:	7fefffff 	.word	0x7fefffff
 801243c:	08014aac 	.word	0x08014aac
 8012440:	08014aa8 	.word	0x08014aa8
 8012444:	08014ab4 	.word	0x08014ab4
 8012448:	08014ab0 	.word	0x08014ab0
 801244c:	08014ab8 	.word	0x08014ab8
 8012450:	2301      	movs	r3, #1
 8012452:	9a06      	ldr	r2, [sp, #24]
 8012454:	4631      	mov	r1, r6
 8012456:	4628      	mov	r0, r5
 8012458:	47b8      	blx	r7
 801245a:	3001      	adds	r0, #1
 801245c:	f43f aecd 	beq.w	80121fa <_printf_float+0xba>
 8012460:	f10b 0b01 	add.w	fp, fp, #1
 8012464:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012468:	ebaa 0309 	sub.w	r3, sl, r9
 801246c:	455b      	cmp	r3, fp
 801246e:	dcef      	bgt.n	8012450 <_printf_float+0x310>
 8012470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012474:	429a      	cmp	r2, r3
 8012476:	44d0      	add	r8, sl
 8012478:	db15      	blt.n	80124a6 <_printf_float+0x366>
 801247a:	6823      	ldr	r3, [r4, #0]
 801247c:	07da      	lsls	r2, r3, #31
 801247e:	d412      	bmi.n	80124a6 <_printf_float+0x366>
 8012480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012484:	eba3 020a 	sub.w	r2, r3, sl
 8012488:	eba3 0a01 	sub.w	sl, r3, r1
 801248c:	4592      	cmp	sl, r2
 801248e:	bfa8      	it	ge
 8012490:	4692      	movge	sl, r2
 8012492:	f1ba 0f00 	cmp.w	sl, #0
 8012496:	dc0e      	bgt.n	80124b6 <_printf_float+0x376>
 8012498:	f04f 0800 	mov.w	r8, #0
 801249c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80124a0:	f104 091a 	add.w	r9, r4, #26
 80124a4:	e019      	b.n	80124da <_printf_float+0x39a>
 80124a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124aa:	4631      	mov	r1, r6
 80124ac:	4628      	mov	r0, r5
 80124ae:	47b8      	blx	r7
 80124b0:	3001      	adds	r0, #1
 80124b2:	d1e5      	bne.n	8012480 <_printf_float+0x340>
 80124b4:	e6a1      	b.n	80121fa <_printf_float+0xba>
 80124b6:	4653      	mov	r3, sl
 80124b8:	4642      	mov	r2, r8
 80124ba:	4631      	mov	r1, r6
 80124bc:	4628      	mov	r0, r5
 80124be:	47b8      	blx	r7
 80124c0:	3001      	adds	r0, #1
 80124c2:	d1e9      	bne.n	8012498 <_printf_float+0x358>
 80124c4:	e699      	b.n	80121fa <_printf_float+0xba>
 80124c6:	2301      	movs	r3, #1
 80124c8:	464a      	mov	r2, r9
 80124ca:	4631      	mov	r1, r6
 80124cc:	4628      	mov	r0, r5
 80124ce:	47b8      	blx	r7
 80124d0:	3001      	adds	r0, #1
 80124d2:	f43f ae92 	beq.w	80121fa <_printf_float+0xba>
 80124d6:	f108 0801 	add.w	r8, r8, #1
 80124da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124de:	1a9b      	subs	r3, r3, r2
 80124e0:	eba3 030a 	sub.w	r3, r3, sl
 80124e4:	4543      	cmp	r3, r8
 80124e6:	dcee      	bgt.n	80124c6 <_printf_float+0x386>
 80124e8:	e74a      	b.n	8012380 <_printf_float+0x240>
 80124ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ec:	2a01      	cmp	r2, #1
 80124ee:	dc01      	bgt.n	80124f4 <_printf_float+0x3b4>
 80124f0:	07db      	lsls	r3, r3, #31
 80124f2:	d53a      	bpl.n	801256a <_printf_float+0x42a>
 80124f4:	2301      	movs	r3, #1
 80124f6:	4642      	mov	r2, r8
 80124f8:	4631      	mov	r1, r6
 80124fa:	4628      	mov	r0, r5
 80124fc:	47b8      	blx	r7
 80124fe:	3001      	adds	r0, #1
 8012500:	f43f ae7b 	beq.w	80121fa <_printf_float+0xba>
 8012504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012508:	4631      	mov	r1, r6
 801250a:	4628      	mov	r0, r5
 801250c:	47b8      	blx	r7
 801250e:	3001      	adds	r0, #1
 8012510:	f108 0801 	add.w	r8, r8, #1
 8012514:	f43f ae71 	beq.w	80121fa <_printf_float+0xba>
 8012518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801251a:	2200      	movs	r2, #0
 801251c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012524:	2300      	movs	r3, #0
 8012526:	f7ee fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 801252a:	b9c8      	cbnz	r0, 8012560 <_printf_float+0x420>
 801252c:	4653      	mov	r3, sl
 801252e:	4642      	mov	r2, r8
 8012530:	4631      	mov	r1, r6
 8012532:	4628      	mov	r0, r5
 8012534:	47b8      	blx	r7
 8012536:	3001      	adds	r0, #1
 8012538:	d10e      	bne.n	8012558 <_printf_float+0x418>
 801253a:	e65e      	b.n	80121fa <_printf_float+0xba>
 801253c:	2301      	movs	r3, #1
 801253e:	4652      	mov	r2, sl
 8012540:	4631      	mov	r1, r6
 8012542:	4628      	mov	r0, r5
 8012544:	47b8      	blx	r7
 8012546:	3001      	adds	r0, #1
 8012548:	f43f ae57 	beq.w	80121fa <_printf_float+0xba>
 801254c:	f108 0801 	add.w	r8, r8, #1
 8012550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012552:	3b01      	subs	r3, #1
 8012554:	4543      	cmp	r3, r8
 8012556:	dcf1      	bgt.n	801253c <_printf_float+0x3fc>
 8012558:	464b      	mov	r3, r9
 801255a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801255e:	e6de      	b.n	801231e <_printf_float+0x1de>
 8012560:	f04f 0800 	mov.w	r8, #0
 8012564:	f104 0a1a 	add.w	sl, r4, #26
 8012568:	e7f2      	b.n	8012550 <_printf_float+0x410>
 801256a:	2301      	movs	r3, #1
 801256c:	e7df      	b.n	801252e <_printf_float+0x3ee>
 801256e:	2301      	movs	r3, #1
 8012570:	464a      	mov	r2, r9
 8012572:	4631      	mov	r1, r6
 8012574:	4628      	mov	r0, r5
 8012576:	47b8      	blx	r7
 8012578:	3001      	adds	r0, #1
 801257a:	f43f ae3e 	beq.w	80121fa <_printf_float+0xba>
 801257e:	f108 0801 	add.w	r8, r8, #1
 8012582:	68e3      	ldr	r3, [r4, #12]
 8012584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	4543      	cmp	r3, r8
 801258a:	dcf0      	bgt.n	801256e <_printf_float+0x42e>
 801258c:	e6fc      	b.n	8012388 <_printf_float+0x248>
 801258e:	f04f 0800 	mov.w	r8, #0
 8012592:	f104 0919 	add.w	r9, r4, #25
 8012596:	e7f4      	b.n	8012582 <_printf_float+0x442>
 8012598:	2900      	cmp	r1, #0
 801259a:	f43f ae8b 	beq.w	80122b4 <_printf_float+0x174>
 801259e:	2300      	movs	r3, #0
 80125a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80125a4:	ab09      	add	r3, sp, #36	; 0x24
 80125a6:	9300      	str	r3, [sp, #0]
 80125a8:	ec49 8b10 	vmov	d0, r8, r9
 80125ac:	6022      	str	r2, [r4, #0]
 80125ae:	f8cd a004 	str.w	sl, [sp, #4]
 80125b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7ff fd2d 	bl	8012016 <__cvt>
 80125bc:	4680      	mov	r8, r0
 80125be:	e648      	b.n	8012252 <_printf_float+0x112>

080125c0 <_printf_common>:
 80125c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c4:	4691      	mov	r9, r2
 80125c6:	461f      	mov	r7, r3
 80125c8:	688a      	ldr	r2, [r1, #8]
 80125ca:	690b      	ldr	r3, [r1, #16]
 80125cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125d0:	4293      	cmp	r3, r2
 80125d2:	bfb8      	it	lt
 80125d4:	4613      	movlt	r3, r2
 80125d6:	f8c9 3000 	str.w	r3, [r9]
 80125da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125de:	4606      	mov	r6, r0
 80125e0:	460c      	mov	r4, r1
 80125e2:	b112      	cbz	r2, 80125ea <_printf_common+0x2a>
 80125e4:	3301      	adds	r3, #1
 80125e6:	f8c9 3000 	str.w	r3, [r9]
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	0699      	lsls	r1, r3, #26
 80125ee:	bf42      	ittt	mi
 80125f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80125f4:	3302      	addmi	r3, #2
 80125f6:	f8c9 3000 	strmi.w	r3, [r9]
 80125fa:	6825      	ldr	r5, [r4, #0]
 80125fc:	f015 0506 	ands.w	r5, r5, #6
 8012600:	d107      	bne.n	8012612 <_printf_common+0x52>
 8012602:	f104 0a19 	add.w	sl, r4, #25
 8012606:	68e3      	ldr	r3, [r4, #12]
 8012608:	f8d9 2000 	ldr.w	r2, [r9]
 801260c:	1a9b      	subs	r3, r3, r2
 801260e:	42ab      	cmp	r3, r5
 8012610:	dc28      	bgt.n	8012664 <_printf_common+0xa4>
 8012612:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012616:	6822      	ldr	r2, [r4, #0]
 8012618:	3300      	adds	r3, #0
 801261a:	bf18      	it	ne
 801261c:	2301      	movne	r3, #1
 801261e:	0692      	lsls	r2, r2, #26
 8012620:	d42d      	bmi.n	801267e <_printf_common+0xbe>
 8012622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012626:	4639      	mov	r1, r7
 8012628:	4630      	mov	r0, r6
 801262a:	47c0      	blx	r8
 801262c:	3001      	adds	r0, #1
 801262e:	d020      	beq.n	8012672 <_printf_common+0xb2>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	68e5      	ldr	r5, [r4, #12]
 8012634:	f8d9 2000 	ldr.w	r2, [r9]
 8012638:	f003 0306 	and.w	r3, r3, #6
 801263c:	2b04      	cmp	r3, #4
 801263e:	bf08      	it	eq
 8012640:	1aad      	subeq	r5, r5, r2
 8012642:	68a3      	ldr	r3, [r4, #8]
 8012644:	6922      	ldr	r2, [r4, #16]
 8012646:	bf0c      	ite	eq
 8012648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801264c:	2500      	movne	r5, #0
 801264e:	4293      	cmp	r3, r2
 8012650:	bfc4      	itt	gt
 8012652:	1a9b      	subgt	r3, r3, r2
 8012654:	18ed      	addgt	r5, r5, r3
 8012656:	f04f 0900 	mov.w	r9, #0
 801265a:	341a      	adds	r4, #26
 801265c:	454d      	cmp	r5, r9
 801265e:	d11a      	bne.n	8012696 <_printf_common+0xd6>
 8012660:	2000      	movs	r0, #0
 8012662:	e008      	b.n	8012676 <_printf_common+0xb6>
 8012664:	2301      	movs	r3, #1
 8012666:	4652      	mov	r2, sl
 8012668:	4639      	mov	r1, r7
 801266a:	4630      	mov	r0, r6
 801266c:	47c0      	blx	r8
 801266e:	3001      	adds	r0, #1
 8012670:	d103      	bne.n	801267a <_printf_common+0xba>
 8012672:	f04f 30ff 	mov.w	r0, #4294967295
 8012676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801267a:	3501      	adds	r5, #1
 801267c:	e7c3      	b.n	8012606 <_printf_common+0x46>
 801267e:	18e1      	adds	r1, r4, r3
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	2030      	movs	r0, #48	; 0x30
 8012684:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012688:	4422      	add	r2, r4
 801268a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801268e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012692:	3302      	adds	r3, #2
 8012694:	e7c5      	b.n	8012622 <_printf_common+0x62>
 8012696:	2301      	movs	r3, #1
 8012698:	4622      	mov	r2, r4
 801269a:	4639      	mov	r1, r7
 801269c:	4630      	mov	r0, r6
 801269e:	47c0      	blx	r8
 80126a0:	3001      	adds	r0, #1
 80126a2:	d0e6      	beq.n	8012672 <_printf_common+0xb2>
 80126a4:	f109 0901 	add.w	r9, r9, #1
 80126a8:	e7d8      	b.n	801265c <_printf_common+0x9c>
	...

080126ac <_printf_i>:
 80126ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80126b4:	460c      	mov	r4, r1
 80126b6:	7e09      	ldrb	r1, [r1, #24]
 80126b8:	b085      	sub	sp, #20
 80126ba:	296e      	cmp	r1, #110	; 0x6e
 80126bc:	4617      	mov	r7, r2
 80126be:	4606      	mov	r6, r0
 80126c0:	4698      	mov	r8, r3
 80126c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126c4:	f000 80b3 	beq.w	801282e <_printf_i+0x182>
 80126c8:	d822      	bhi.n	8012710 <_printf_i+0x64>
 80126ca:	2963      	cmp	r1, #99	; 0x63
 80126cc:	d036      	beq.n	801273c <_printf_i+0x90>
 80126ce:	d80a      	bhi.n	80126e6 <_printf_i+0x3a>
 80126d0:	2900      	cmp	r1, #0
 80126d2:	f000 80b9 	beq.w	8012848 <_printf_i+0x19c>
 80126d6:	2958      	cmp	r1, #88	; 0x58
 80126d8:	f000 8083 	beq.w	80127e2 <_printf_i+0x136>
 80126dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80126e4:	e032      	b.n	801274c <_printf_i+0xa0>
 80126e6:	2964      	cmp	r1, #100	; 0x64
 80126e8:	d001      	beq.n	80126ee <_printf_i+0x42>
 80126ea:	2969      	cmp	r1, #105	; 0x69
 80126ec:	d1f6      	bne.n	80126dc <_printf_i+0x30>
 80126ee:	6820      	ldr	r0, [r4, #0]
 80126f0:	6813      	ldr	r3, [r2, #0]
 80126f2:	0605      	lsls	r5, r0, #24
 80126f4:	f103 0104 	add.w	r1, r3, #4
 80126f8:	d52a      	bpl.n	8012750 <_printf_i+0xa4>
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	6011      	str	r1, [r2, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	da03      	bge.n	801270a <_printf_i+0x5e>
 8012702:	222d      	movs	r2, #45	; 0x2d
 8012704:	425b      	negs	r3, r3
 8012706:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801270a:	486f      	ldr	r0, [pc, #444]	; (80128c8 <_printf_i+0x21c>)
 801270c:	220a      	movs	r2, #10
 801270e:	e039      	b.n	8012784 <_printf_i+0xd8>
 8012710:	2973      	cmp	r1, #115	; 0x73
 8012712:	f000 809d 	beq.w	8012850 <_printf_i+0x1a4>
 8012716:	d808      	bhi.n	801272a <_printf_i+0x7e>
 8012718:	296f      	cmp	r1, #111	; 0x6f
 801271a:	d020      	beq.n	801275e <_printf_i+0xb2>
 801271c:	2970      	cmp	r1, #112	; 0x70
 801271e:	d1dd      	bne.n	80126dc <_printf_i+0x30>
 8012720:	6823      	ldr	r3, [r4, #0]
 8012722:	f043 0320 	orr.w	r3, r3, #32
 8012726:	6023      	str	r3, [r4, #0]
 8012728:	e003      	b.n	8012732 <_printf_i+0x86>
 801272a:	2975      	cmp	r1, #117	; 0x75
 801272c:	d017      	beq.n	801275e <_printf_i+0xb2>
 801272e:	2978      	cmp	r1, #120	; 0x78
 8012730:	d1d4      	bne.n	80126dc <_printf_i+0x30>
 8012732:	2378      	movs	r3, #120	; 0x78
 8012734:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012738:	4864      	ldr	r0, [pc, #400]	; (80128cc <_printf_i+0x220>)
 801273a:	e055      	b.n	80127e8 <_printf_i+0x13c>
 801273c:	6813      	ldr	r3, [r2, #0]
 801273e:	1d19      	adds	r1, r3, #4
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	6011      	str	r1, [r2, #0]
 8012744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801274c:	2301      	movs	r3, #1
 801274e:	e08c      	b.n	801286a <_printf_i+0x1be>
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	6011      	str	r1, [r2, #0]
 8012754:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012758:	bf18      	it	ne
 801275a:	b21b      	sxthne	r3, r3
 801275c:	e7cf      	b.n	80126fe <_printf_i+0x52>
 801275e:	6813      	ldr	r3, [r2, #0]
 8012760:	6825      	ldr	r5, [r4, #0]
 8012762:	1d18      	adds	r0, r3, #4
 8012764:	6010      	str	r0, [r2, #0]
 8012766:	0628      	lsls	r0, r5, #24
 8012768:	d501      	bpl.n	801276e <_printf_i+0xc2>
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	e002      	b.n	8012774 <_printf_i+0xc8>
 801276e:	0668      	lsls	r0, r5, #25
 8012770:	d5fb      	bpl.n	801276a <_printf_i+0xbe>
 8012772:	881b      	ldrh	r3, [r3, #0]
 8012774:	4854      	ldr	r0, [pc, #336]	; (80128c8 <_printf_i+0x21c>)
 8012776:	296f      	cmp	r1, #111	; 0x6f
 8012778:	bf14      	ite	ne
 801277a:	220a      	movne	r2, #10
 801277c:	2208      	moveq	r2, #8
 801277e:	2100      	movs	r1, #0
 8012780:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012784:	6865      	ldr	r5, [r4, #4]
 8012786:	60a5      	str	r5, [r4, #8]
 8012788:	2d00      	cmp	r5, #0
 801278a:	f2c0 8095 	blt.w	80128b8 <_printf_i+0x20c>
 801278e:	6821      	ldr	r1, [r4, #0]
 8012790:	f021 0104 	bic.w	r1, r1, #4
 8012794:	6021      	str	r1, [r4, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d13d      	bne.n	8012816 <_printf_i+0x16a>
 801279a:	2d00      	cmp	r5, #0
 801279c:	f040 808e 	bne.w	80128bc <_printf_i+0x210>
 80127a0:	4665      	mov	r5, ip
 80127a2:	2a08      	cmp	r2, #8
 80127a4:	d10b      	bne.n	80127be <_printf_i+0x112>
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	07db      	lsls	r3, r3, #31
 80127aa:	d508      	bpl.n	80127be <_printf_i+0x112>
 80127ac:	6923      	ldr	r3, [r4, #16]
 80127ae:	6862      	ldr	r2, [r4, #4]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	bfde      	ittt	le
 80127b4:	2330      	movle	r3, #48	; 0x30
 80127b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80127ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80127be:	ebac 0305 	sub.w	r3, ip, r5
 80127c2:	6123      	str	r3, [r4, #16]
 80127c4:	f8cd 8000 	str.w	r8, [sp]
 80127c8:	463b      	mov	r3, r7
 80127ca:	aa03      	add	r2, sp, #12
 80127cc:	4621      	mov	r1, r4
 80127ce:	4630      	mov	r0, r6
 80127d0:	f7ff fef6 	bl	80125c0 <_printf_common>
 80127d4:	3001      	adds	r0, #1
 80127d6:	d14d      	bne.n	8012874 <_printf_i+0x1c8>
 80127d8:	f04f 30ff 	mov.w	r0, #4294967295
 80127dc:	b005      	add	sp, #20
 80127de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127e2:	4839      	ldr	r0, [pc, #228]	; (80128c8 <_printf_i+0x21c>)
 80127e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80127e8:	6813      	ldr	r3, [r2, #0]
 80127ea:	6821      	ldr	r1, [r4, #0]
 80127ec:	1d1d      	adds	r5, r3, #4
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6015      	str	r5, [r2, #0]
 80127f2:	060a      	lsls	r2, r1, #24
 80127f4:	d50b      	bpl.n	801280e <_printf_i+0x162>
 80127f6:	07ca      	lsls	r2, r1, #31
 80127f8:	bf44      	itt	mi
 80127fa:	f041 0120 	orrmi.w	r1, r1, #32
 80127fe:	6021      	strmi	r1, [r4, #0]
 8012800:	b91b      	cbnz	r3, 801280a <_printf_i+0x15e>
 8012802:	6822      	ldr	r2, [r4, #0]
 8012804:	f022 0220 	bic.w	r2, r2, #32
 8012808:	6022      	str	r2, [r4, #0]
 801280a:	2210      	movs	r2, #16
 801280c:	e7b7      	b.n	801277e <_printf_i+0xd2>
 801280e:	064d      	lsls	r5, r1, #25
 8012810:	bf48      	it	mi
 8012812:	b29b      	uxthmi	r3, r3
 8012814:	e7ef      	b.n	80127f6 <_printf_i+0x14a>
 8012816:	4665      	mov	r5, ip
 8012818:	fbb3 f1f2 	udiv	r1, r3, r2
 801281c:	fb02 3311 	mls	r3, r2, r1, r3
 8012820:	5cc3      	ldrb	r3, [r0, r3]
 8012822:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012826:	460b      	mov	r3, r1
 8012828:	2900      	cmp	r1, #0
 801282a:	d1f5      	bne.n	8012818 <_printf_i+0x16c>
 801282c:	e7b9      	b.n	80127a2 <_printf_i+0xf6>
 801282e:	6813      	ldr	r3, [r2, #0]
 8012830:	6825      	ldr	r5, [r4, #0]
 8012832:	6961      	ldr	r1, [r4, #20]
 8012834:	1d18      	adds	r0, r3, #4
 8012836:	6010      	str	r0, [r2, #0]
 8012838:	0628      	lsls	r0, r5, #24
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	d501      	bpl.n	8012842 <_printf_i+0x196>
 801283e:	6019      	str	r1, [r3, #0]
 8012840:	e002      	b.n	8012848 <_printf_i+0x19c>
 8012842:	066a      	lsls	r2, r5, #25
 8012844:	d5fb      	bpl.n	801283e <_printf_i+0x192>
 8012846:	8019      	strh	r1, [r3, #0]
 8012848:	2300      	movs	r3, #0
 801284a:	6123      	str	r3, [r4, #16]
 801284c:	4665      	mov	r5, ip
 801284e:	e7b9      	b.n	80127c4 <_printf_i+0x118>
 8012850:	6813      	ldr	r3, [r2, #0]
 8012852:	1d19      	adds	r1, r3, #4
 8012854:	6011      	str	r1, [r2, #0]
 8012856:	681d      	ldr	r5, [r3, #0]
 8012858:	6862      	ldr	r2, [r4, #4]
 801285a:	2100      	movs	r1, #0
 801285c:	4628      	mov	r0, r5
 801285e:	f7ed fcc7 	bl	80001f0 <memchr>
 8012862:	b108      	cbz	r0, 8012868 <_printf_i+0x1bc>
 8012864:	1b40      	subs	r0, r0, r5
 8012866:	6060      	str	r0, [r4, #4]
 8012868:	6863      	ldr	r3, [r4, #4]
 801286a:	6123      	str	r3, [r4, #16]
 801286c:	2300      	movs	r3, #0
 801286e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012872:	e7a7      	b.n	80127c4 <_printf_i+0x118>
 8012874:	6923      	ldr	r3, [r4, #16]
 8012876:	462a      	mov	r2, r5
 8012878:	4639      	mov	r1, r7
 801287a:	4630      	mov	r0, r6
 801287c:	47c0      	blx	r8
 801287e:	3001      	adds	r0, #1
 8012880:	d0aa      	beq.n	80127d8 <_printf_i+0x12c>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	079b      	lsls	r3, r3, #30
 8012886:	d413      	bmi.n	80128b0 <_printf_i+0x204>
 8012888:	68e0      	ldr	r0, [r4, #12]
 801288a:	9b03      	ldr	r3, [sp, #12]
 801288c:	4298      	cmp	r0, r3
 801288e:	bfb8      	it	lt
 8012890:	4618      	movlt	r0, r3
 8012892:	e7a3      	b.n	80127dc <_printf_i+0x130>
 8012894:	2301      	movs	r3, #1
 8012896:	464a      	mov	r2, r9
 8012898:	4639      	mov	r1, r7
 801289a:	4630      	mov	r0, r6
 801289c:	47c0      	blx	r8
 801289e:	3001      	adds	r0, #1
 80128a0:	d09a      	beq.n	80127d8 <_printf_i+0x12c>
 80128a2:	3501      	adds	r5, #1
 80128a4:	68e3      	ldr	r3, [r4, #12]
 80128a6:	9a03      	ldr	r2, [sp, #12]
 80128a8:	1a9b      	subs	r3, r3, r2
 80128aa:	42ab      	cmp	r3, r5
 80128ac:	dcf2      	bgt.n	8012894 <_printf_i+0x1e8>
 80128ae:	e7eb      	b.n	8012888 <_printf_i+0x1dc>
 80128b0:	2500      	movs	r5, #0
 80128b2:	f104 0919 	add.w	r9, r4, #25
 80128b6:	e7f5      	b.n	80128a4 <_printf_i+0x1f8>
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1ac      	bne.n	8012816 <_printf_i+0x16a>
 80128bc:	7803      	ldrb	r3, [r0, #0]
 80128be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128c6:	e76c      	b.n	80127a2 <_printf_i+0xf6>
 80128c8:	08014aba 	.word	0x08014aba
 80128cc:	08014acb 	.word	0x08014acb

080128d0 <iprintf>:
 80128d0:	b40f      	push	{r0, r1, r2, r3}
 80128d2:	4b0a      	ldr	r3, [pc, #40]	; (80128fc <iprintf+0x2c>)
 80128d4:	b513      	push	{r0, r1, r4, lr}
 80128d6:	681c      	ldr	r4, [r3, #0]
 80128d8:	b124      	cbz	r4, 80128e4 <iprintf+0x14>
 80128da:	69a3      	ldr	r3, [r4, #24]
 80128dc:	b913      	cbnz	r3, 80128e4 <iprintf+0x14>
 80128de:	4620      	mov	r0, r4
 80128e0:	f001 f91e 	bl	8013b20 <__sinit>
 80128e4:	ab05      	add	r3, sp, #20
 80128e6:	9a04      	ldr	r2, [sp, #16]
 80128e8:	68a1      	ldr	r1, [r4, #8]
 80128ea:	9301      	str	r3, [sp, #4]
 80128ec:	4620      	mov	r0, r4
 80128ee:	f001 fdd7 	bl	80144a0 <_vfiprintf_r>
 80128f2:	b002      	add	sp, #8
 80128f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128f8:	b004      	add	sp, #16
 80128fa:	4770      	bx	lr
 80128fc:	20000010 	.word	0x20000010

08012900 <_puts_r>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	460e      	mov	r6, r1
 8012904:	4605      	mov	r5, r0
 8012906:	b118      	cbz	r0, 8012910 <_puts_r+0x10>
 8012908:	6983      	ldr	r3, [r0, #24]
 801290a:	b90b      	cbnz	r3, 8012910 <_puts_r+0x10>
 801290c:	f001 f908 	bl	8013b20 <__sinit>
 8012910:	69ab      	ldr	r3, [r5, #24]
 8012912:	68ac      	ldr	r4, [r5, #8]
 8012914:	b913      	cbnz	r3, 801291c <_puts_r+0x1c>
 8012916:	4628      	mov	r0, r5
 8012918:	f001 f902 	bl	8013b20 <__sinit>
 801291c:	4b23      	ldr	r3, [pc, #140]	; (80129ac <_puts_r+0xac>)
 801291e:	429c      	cmp	r4, r3
 8012920:	d117      	bne.n	8012952 <_puts_r+0x52>
 8012922:	686c      	ldr	r4, [r5, #4]
 8012924:	89a3      	ldrh	r3, [r4, #12]
 8012926:	071b      	lsls	r3, r3, #28
 8012928:	d51d      	bpl.n	8012966 <_puts_r+0x66>
 801292a:	6923      	ldr	r3, [r4, #16]
 801292c:	b1db      	cbz	r3, 8012966 <_puts_r+0x66>
 801292e:	3e01      	subs	r6, #1
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012936:	3b01      	subs	r3, #1
 8012938:	60a3      	str	r3, [r4, #8]
 801293a:	b9e9      	cbnz	r1, 8012978 <_puts_r+0x78>
 801293c:	2b00      	cmp	r3, #0
 801293e:	da2e      	bge.n	801299e <_puts_r+0x9e>
 8012940:	4622      	mov	r2, r4
 8012942:	210a      	movs	r1, #10
 8012944:	4628      	mov	r0, r5
 8012946:	f000 f8f5 	bl	8012b34 <__swbuf_r>
 801294a:	3001      	adds	r0, #1
 801294c:	d011      	beq.n	8012972 <_puts_r+0x72>
 801294e:	200a      	movs	r0, #10
 8012950:	e011      	b.n	8012976 <_puts_r+0x76>
 8012952:	4b17      	ldr	r3, [pc, #92]	; (80129b0 <_puts_r+0xb0>)
 8012954:	429c      	cmp	r4, r3
 8012956:	d101      	bne.n	801295c <_puts_r+0x5c>
 8012958:	68ac      	ldr	r4, [r5, #8]
 801295a:	e7e3      	b.n	8012924 <_puts_r+0x24>
 801295c:	4b15      	ldr	r3, [pc, #84]	; (80129b4 <_puts_r+0xb4>)
 801295e:	429c      	cmp	r4, r3
 8012960:	bf08      	it	eq
 8012962:	68ec      	ldreq	r4, [r5, #12]
 8012964:	e7de      	b.n	8012924 <_puts_r+0x24>
 8012966:	4621      	mov	r1, r4
 8012968:	4628      	mov	r0, r5
 801296a:	f000 f935 	bl	8012bd8 <__swsetup_r>
 801296e:	2800      	cmp	r0, #0
 8012970:	d0dd      	beq.n	801292e <_puts_r+0x2e>
 8012972:	f04f 30ff 	mov.w	r0, #4294967295
 8012976:	bd70      	pop	{r4, r5, r6, pc}
 8012978:	2b00      	cmp	r3, #0
 801297a:	da04      	bge.n	8012986 <_puts_r+0x86>
 801297c:	69a2      	ldr	r2, [r4, #24]
 801297e:	429a      	cmp	r2, r3
 8012980:	dc06      	bgt.n	8012990 <_puts_r+0x90>
 8012982:	290a      	cmp	r1, #10
 8012984:	d004      	beq.n	8012990 <_puts_r+0x90>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	1c5a      	adds	r2, r3, #1
 801298a:	6022      	str	r2, [r4, #0]
 801298c:	7019      	strb	r1, [r3, #0]
 801298e:	e7cf      	b.n	8012930 <_puts_r+0x30>
 8012990:	4622      	mov	r2, r4
 8012992:	4628      	mov	r0, r5
 8012994:	f000 f8ce 	bl	8012b34 <__swbuf_r>
 8012998:	3001      	adds	r0, #1
 801299a:	d1c9      	bne.n	8012930 <_puts_r+0x30>
 801299c:	e7e9      	b.n	8012972 <_puts_r+0x72>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	200a      	movs	r0, #10
 80129a2:	1c5a      	adds	r2, r3, #1
 80129a4:	6022      	str	r2, [r4, #0]
 80129a6:	7018      	strb	r0, [r3, #0]
 80129a8:	e7e5      	b.n	8012976 <_puts_r+0x76>
 80129aa:	bf00      	nop
 80129ac:	08014b0c 	.word	0x08014b0c
 80129b0:	08014b2c 	.word	0x08014b2c
 80129b4:	08014aec 	.word	0x08014aec

080129b8 <puts>:
 80129b8:	4b02      	ldr	r3, [pc, #8]	; (80129c4 <puts+0xc>)
 80129ba:	4601      	mov	r1, r0
 80129bc:	6818      	ldr	r0, [r3, #0]
 80129be:	f7ff bf9f 	b.w	8012900 <_puts_r>
 80129c2:	bf00      	nop
 80129c4:	20000010 	.word	0x20000010

080129c8 <setbuf>:
 80129c8:	2900      	cmp	r1, #0
 80129ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129ce:	bf0c      	ite	eq
 80129d0:	2202      	moveq	r2, #2
 80129d2:	2200      	movne	r2, #0
 80129d4:	f000 b800 	b.w	80129d8 <setvbuf>

080129d8 <setvbuf>:
 80129d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129dc:	461d      	mov	r5, r3
 80129de:	4b51      	ldr	r3, [pc, #324]	; (8012b24 <setvbuf+0x14c>)
 80129e0:	681e      	ldr	r6, [r3, #0]
 80129e2:	4604      	mov	r4, r0
 80129e4:	460f      	mov	r7, r1
 80129e6:	4690      	mov	r8, r2
 80129e8:	b126      	cbz	r6, 80129f4 <setvbuf+0x1c>
 80129ea:	69b3      	ldr	r3, [r6, #24]
 80129ec:	b913      	cbnz	r3, 80129f4 <setvbuf+0x1c>
 80129ee:	4630      	mov	r0, r6
 80129f0:	f001 f896 	bl	8013b20 <__sinit>
 80129f4:	4b4c      	ldr	r3, [pc, #304]	; (8012b28 <setvbuf+0x150>)
 80129f6:	429c      	cmp	r4, r3
 80129f8:	d152      	bne.n	8012aa0 <setvbuf+0xc8>
 80129fa:	6874      	ldr	r4, [r6, #4]
 80129fc:	f1b8 0f02 	cmp.w	r8, #2
 8012a00:	d006      	beq.n	8012a10 <setvbuf+0x38>
 8012a02:	f1b8 0f01 	cmp.w	r8, #1
 8012a06:	f200 8089 	bhi.w	8012b1c <setvbuf+0x144>
 8012a0a:	2d00      	cmp	r5, #0
 8012a0c:	f2c0 8086 	blt.w	8012b1c <setvbuf+0x144>
 8012a10:	4621      	mov	r1, r4
 8012a12:	4630      	mov	r0, r6
 8012a14:	f001 f81a 	bl	8013a4c <_fflush_r>
 8012a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a1a:	b141      	cbz	r1, 8012a2e <setvbuf+0x56>
 8012a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a20:	4299      	cmp	r1, r3
 8012a22:	d002      	beq.n	8012a2a <setvbuf+0x52>
 8012a24:	4630      	mov	r0, r6
 8012a26:	f001 fc69 	bl	80142fc <_free_r>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8012a2e:	2300      	movs	r3, #0
 8012a30:	61a3      	str	r3, [r4, #24]
 8012a32:	6063      	str	r3, [r4, #4]
 8012a34:	89a3      	ldrh	r3, [r4, #12]
 8012a36:	061b      	lsls	r3, r3, #24
 8012a38:	d503      	bpl.n	8012a42 <setvbuf+0x6a>
 8012a3a:	6921      	ldr	r1, [r4, #16]
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	f001 fc5d 	bl	80142fc <_free_r>
 8012a42:	89a3      	ldrh	r3, [r4, #12]
 8012a44:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012a48:	f023 0303 	bic.w	r3, r3, #3
 8012a4c:	f1b8 0f02 	cmp.w	r8, #2
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	d05d      	beq.n	8012b10 <setvbuf+0x138>
 8012a54:	ab01      	add	r3, sp, #4
 8012a56:	466a      	mov	r2, sp
 8012a58:	4621      	mov	r1, r4
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f001 f8f8 	bl	8013c50 <__swhatbuf_r>
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	4318      	orrs	r0, r3
 8012a64:	81a0      	strh	r0, [r4, #12]
 8012a66:	bb2d      	cbnz	r5, 8012ab4 <setvbuf+0xdc>
 8012a68:	9d00      	ldr	r5, [sp, #0]
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f001 f954 	bl	8013d18 <malloc>
 8012a70:	4607      	mov	r7, r0
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d14e      	bne.n	8012b14 <setvbuf+0x13c>
 8012a76:	f8dd 9000 	ldr.w	r9, [sp]
 8012a7a:	45a9      	cmp	r9, r5
 8012a7c:	d13c      	bne.n	8012af8 <setvbuf+0x120>
 8012a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	f043 0302 	orr.w	r3, r3, #2
 8012a88:	81a3      	strh	r3, [r4, #12]
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	60a3      	str	r3, [r4, #8]
 8012a8e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a92:	6023      	str	r3, [r4, #0]
 8012a94:	6123      	str	r3, [r4, #16]
 8012a96:	2301      	movs	r3, #1
 8012a98:	6163      	str	r3, [r4, #20]
 8012a9a:	b003      	add	sp, #12
 8012a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012aa0:	4b22      	ldr	r3, [pc, #136]	; (8012b2c <setvbuf+0x154>)
 8012aa2:	429c      	cmp	r4, r3
 8012aa4:	d101      	bne.n	8012aaa <setvbuf+0xd2>
 8012aa6:	68b4      	ldr	r4, [r6, #8]
 8012aa8:	e7a8      	b.n	80129fc <setvbuf+0x24>
 8012aaa:	4b21      	ldr	r3, [pc, #132]	; (8012b30 <setvbuf+0x158>)
 8012aac:	429c      	cmp	r4, r3
 8012aae:	bf08      	it	eq
 8012ab0:	68f4      	ldreq	r4, [r6, #12]
 8012ab2:	e7a3      	b.n	80129fc <setvbuf+0x24>
 8012ab4:	2f00      	cmp	r7, #0
 8012ab6:	d0d8      	beq.n	8012a6a <setvbuf+0x92>
 8012ab8:	69b3      	ldr	r3, [r6, #24]
 8012aba:	b913      	cbnz	r3, 8012ac2 <setvbuf+0xea>
 8012abc:	4630      	mov	r0, r6
 8012abe:	f001 f82f 	bl	8013b20 <__sinit>
 8012ac2:	f1b8 0f01 	cmp.w	r8, #1
 8012ac6:	bf08      	it	eq
 8012ac8:	89a3      	ldrheq	r3, [r4, #12]
 8012aca:	6027      	str	r7, [r4, #0]
 8012acc:	bf04      	itt	eq
 8012ace:	f043 0301 	orreq.w	r3, r3, #1
 8012ad2:	81a3      	strheq	r3, [r4, #12]
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	f013 0008 	ands.w	r0, r3, #8
 8012ada:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012ade:	d01b      	beq.n	8012b18 <setvbuf+0x140>
 8012ae0:	f013 0001 	ands.w	r0, r3, #1
 8012ae4:	bf18      	it	ne
 8012ae6:	426d      	negne	r5, r5
 8012ae8:	f04f 0300 	mov.w	r3, #0
 8012aec:	bf1d      	ittte	ne
 8012aee:	60a3      	strne	r3, [r4, #8]
 8012af0:	61a5      	strne	r5, [r4, #24]
 8012af2:	4618      	movne	r0, r3
 8012af4:	60a5      	streq	r5, [r4, #8]
 8012af6:	e7d0      	b.n	8012a9a <setvbuf+0xc2>
 8012af8:	4648      	mov	r0, r9
 8012afa:	f001 f90d 	bl	8013d18 <malloc>
 8012afe:	4607      	mov	r7, r0
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d0bc      	beq.n	8012a7e <setvbuf+0xa6>
 8012b04:	89a3      	ldrh	r3, [r4, #12]
 8012b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	464d      	mov	r5, r9
 8012b0e:	e7d3      	b.n	8012ab8 <setvbuf+0xe0>
 8012b10:	2000      	movs	r0, #0
 8012b12:	e7b6      	b.n	8012a82 <setvbuf+0xaa>
 8012b14:	46a9      	mov	r9, r5
 8012b16:	e7f5      	b.n	8012b04 <setvbuf+0x12c>
 8012b18:	60a0      	str	r0, [r4, #8]
 8012b1a:	e7be      	b.n	8012a9a <setvbuf+0xc2>
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b20:	e7bb      	b.n	8012a9a <setvbuf+0xc2>
 8012b22:	bf00      	nop
 8012b24:	20000010 	.word	0x20000010
 8012b28:	08014b0c 	.word	0x08014b0c
 8012b2c:	08014b2c 	.word	0x08014b2c
 8012b30:	08014aec 	.word	0x08014aec

08012b34 <__swbuf_r>:
 8012b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b36:	460e      	mov	r6, r1
 8012b38:	4614      	mov	r4, r2
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	b118      	cbz	r0, 8012b46 <__swbuf_r+0x12>
 8012b3e:	6983      	ldr	r3, [r0, #24]
 8012b40:	b90b      	cbnz	r3, 8012b46 <__swbuf_r+0x12>
 8012b42:	f000 ffed 	bl	8013b20 <__sinit>
 8012b46:	4b21      	ldr	r3, [pc, #132]	; (8012bcc <__swbuf_r+0x98>)
 8012b48:	429c      	cmp	r4, r3
 8012b4a:	d12a      	bne.n	8012ba2 <__swbuf_r+0x6e>
 8012b4c:	686c      	ldr	r4, [r5, #4]
 8012b4e:	69a3      	ldr	r3, [r4, #24]
 8012b50:	60a3      	str	r3, [r4, #8]
 8012b52:	89a3      	ldrh	r3, [r4, #12]
 8012b54:	071a      	lsls	r2, r3, #28
 8012b56:	d52e      	bpl.n	8012bb6 <__swbuf_r+0x82>
 8012b58:	6923      	ldr	r3, [r4, #16]
 8012b5a:	b363      	cbz	r3, 8012bb6 <__swbuf_r+0x82>
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	6820      	ldr	r0, [r4, #0]
 8012b60:	1ac0      	subs	r0, r0, r3
 8012b62:	6963      	ldr	r3, [r4, #20]
 8012b64:	b2f6      	uxtb	r6, r6
 8012b66:	4283      	cmp	r3, r0
 8012b68:	4637      	mov	r7, r6
 8012b6a:	dc04      	bgt.n	8012b76 <__swbuf_r+0x42>
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f000 ff6c 	bl	8013a4c <_fflush_r>
 8012b74:	bb28      	cbnz	r0, 8012bc2 <__swbuf_r+0x8e>
 8012b76:	68a3      	ldr	r3, [r4, #8]
 8012b78:	3b01      	subs	r3, #1
 8012b7a:	60a3      	str	r3, [r4, #8]
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	6022      	str	r2, [r4, #0]
 8012b82:	701e      	strb	r6, [r3, #0]
 8012b84:	6963      	ldr	r3, [r4, #20]
 8012b86:	3001      	adds	r0, #1
 8012b88:	4283      	cmp	r3, r0
 8012b8a:	d004      	beq.n	8012b96 <__swbuf_r+0x62>
 8012b8c:	89a3      	ldrh	r3, [r4, #12]
 8012b8e:	07db      	lsls	r3, r3, #31
 8012b90:	d519      	bpl.n	8012bc6 <__swbuf_r+0x92>
 8012b92:	2e0a      	cmp	r6, #10
 8012b94:	d117      	bne.n	8012bc6 <__swbuf_r+0x92>
 8012b96:	4621      	mov	r1, r4
 8012b98:	4628      	mov	r0, r5
 8012b9a:	f000 ff57 	bl	8013a4c <_fflush_r>
 8012b9e:	b190      	cbz	r0, 8012bc6 <__swbuf_r+0x92>
 8012ba0:	e00f      	b.n	8012bc2 <__swbuf_r+0x8e>
 8012ba2:	4b0b      	ldr	r3, [pc, #44]	; (8012bd0 <__swbuf_r+0x9c>)
 8012ba4:	429c      	cmp	r4, r3
 8012ba6:	d101      	bne.n	8012bac <__swbuf_r+0x78>
 8012ba8:	68ac      	ldr	r4, [r5, #8]
 8012baa:	e7d0      	b.n	8012b4e <__swbuf_r+0x1a>
 8012bac:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <__swbuf_r+0xa0>)
 8012bae:	429c      	cmp	r4, r3
 8012bb0:	bf08      	it	eq
 8012bb2:	68ec      	ldreq	r4, [r5, #12]
 8012bb4:	e7cb      	b.n	8012b4e <__swbuf_r+0x1a>
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f000 f80d 	bl	8012bd8 <__swsetup_r>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d0cc      	beq.n	8012b5c <__swbuf_r+0x28>
 8012bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	08014b0c 	.word	0x08014b0c
 8012bd0:	08014b2c 	.word	0x08014b2c
 8012bd4:	08014aec 	.word	0x08014aec

08012bd8 <__swsetup_r>:
 8012bd8:	4b32      	ldr	r3, [pc, #200]	; (8012ca4 <__swsetup_r+0xcc>)
 8012bda:	b570      	push	{r4, r5, r6, lr}
 8012bdc:	681d      	ldr	r5, [r3, #0]
 8012bde:	4606      	mov	r6, r0
 8012be0:	460c      	mov	r4, r1
 8012be2:	b125      	cbz	r5, 8012bee <__swsetup_r+0x16>
 8012be4:	69ab      	ldr	r3, [r5, #24]
 8012be6:	b913      	cbnz	r3, 8012bee <__swsetup_r+0x16>
 8012be8:	4628      	mov	r0, r5
 8012bea:	f000 ff99 	bl	8013b20 <__sinit>
 8012bee:	4b2e      	ldr	r3, [pc, #184]	; (8012ca8 <__swsetup_r+0xd0>)
 8012bf0:	429c      	cmp	r4, r3
 8012bf2:	d10f      	bne.n	8012c14 <__swsetup_r+0x3c>
 8012bf4:	686c      	ldr	r4, [r5, #4]
 8012bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	0715      	lsls	r5, r2, #28
 8012bfe:	d42c      	bmi.n	8012c5a <__swsetup_r+0x82>
 8012c00:	06d0      	lsls	r0, r2, #27
 8012c02:	d411      	bmi.n	8012c28 <__swsetup_r+0x50>
 8012c04:	2209      	movs	r2, #9
 8012c06:	6032      	str	r2, [r6, #0]
 8012c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c0c:	81a3      	strh	r3, [r4, #12]
 8012c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c12:	e03e      	b.n	8012c92 <__swsetup_r+0xba>
 8012c14:	4b25      	ldr	r3, [pc, #148]	; (8012cac <__swsetup_r+0xd4>)
 8012c16:	429c      	cmp	r4, r3
 8012c18:	d101      	bne.n	8012c1e <__swsetup_r+0x46>
 8012c1a:	68ac      	ldr	r4, [r5, #8]
 8012c1c:	e7eb      	b.n	8012bf6 <__swsetup_r+0x1e>
 8012c1e:	4b24      	ldr	r3, [pc, #144]	; (8012cb0 <__swsetup_r+0xd8>)
 8012c20:	429c      	cmp	r4, r3
 8012c22:	bf08      	it	eq
 8012c24:	68ec      	ldreq	r4, [r5, #12]
 8012c26:	e7e6      	b.n	8012bf6 <__swsetup_r+0x1e>
 8012c28:	0751      	lsls	r1, r2, #29
 8012c2a:	d512      	bpl.n	8012c52 <__swsetup_r+0x7a>
 8012c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c2e:	b141      	cbz	r1, 8012c42 <__swsetup_r+0x6a>
 8012c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c34:	4299      	cmp	r1, r3
 8012c36:	d002      	beq.n	8012c3e <__swsetup_r+0x66>
 8012c38:	4630      	mov	r0, r6
 8012c3a:	f001 fb5f 	bl	80142fc <_free_r>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	6363      	str	r3, [r4, #52]	; 0x34
 8012c42:	89a3      	ldrh	r3, [r4, #12]
 8012c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c48:	81a3      	strh	r3, [r4, #12]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	6063      	str	r3, [r4, #4]
 8012c4e:	6923      	ldr	r3, [r4, #16]
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	89a3      	ldrh	r3, [r4, #12]
 8012c54:	f043 0308 	orr.w	r3, r3, #8
 8012c58:	81a3      	strh	r3, [r4, #12]
 8012c5a:	6923      	ldr	r3, [r4, #16]
 8012c5c:	b94b      	cbnz	r3, 8012c72 <__swsetup_r+0x9a>
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c68:	d003      	beq.n	8012c72 <__swsetup_r+0x9a>
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f001 f813 	bl	8013c98 <__smakebuf_r>
 8012c72:	89a2      	ldrh	r2, [r4, #12]
 8012c74:	f012 0301 	ands.w	r3, r2, #1
 8012c78:	d00c      	beq.n	8012c94 <__swsetup_r+0xbc>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	60a3      	str	r3, [r4, #8]
 8012c7e:	6963      	ldr	r3, [r4, #20]
 8012c80:	425b      	negs	r3, r3
 8012c82:	61a3      	str	r3, [r4, #24]
 8012c84:	6923      	ldr	r3, [r4, #16]
 8012c86:	b953      	cbnz	r3, 8012c9e <__swsetup_r+0xc6>
 8012c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012c90:	d1ba      	bne.n	8012c08 <__swsetup_r+0x30>
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	0792      	lsls	r2, r2, #30
 8012c96:	bf58      	it	pl
 8012c98:	6963      	ldrpl	r3, [r4, #20]
 8012c9a:	60a3      	str	r3, [r4, #8]
 8012c9c:	e7f2      	b.n	8012c84 <__swsetup_r+0xac>
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	e7f7      	b.n	8012c92 <__swsetup_r+0xba>
 8012ca2:	bf00      	nop
 8012ca4:	20000010 	.word	0x20000010
 8012ca8:	08014b0c 	.word	0x08014b0c
 8012cac:	08014b2c 	.word	0x08014b2c
 8012cb0:	08014aec 	.word	0x08014aec

08012cb4 <quorem>:
 8012cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	6903      	ldr	r3, [r0, #16]
 8012cba:	690c      	ldr	r4, [r1, #16]
 8012cbc:	42a3      	cmp	r3, r4
 8012cbe:	4680      	mov	r8, r0
 8012cc0:	f2c0 8082 	blt.w	8012dc8 <quorem+0x114>
 8012cc4:	3c01      	subs	r4, #1
 8012cc6:	f101 0714 	add.w	r7, r1, #20
 8012cca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012cce:	f100 0614 	add.w	r6, r0, #20
 8012cd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012cd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012cda:	eb06 030c 	add.w	r3, r6, ip
 8012cde:	3501      	adds	r5, #1
 8012ce0:	eb07 090c 	add.w	r9, r7, ip
 8012ce4:	9301      	str	r3, [sp, #4]
 8012ce6:	fbb0 f5f5 	udiv	r5, r0, r5
 8012cea:	b395      	cbz	r5, 8012d52 <quorem+0x9e>
 8012cec:	f04f 0a00 	mov.w	sl, #0
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	46b6      	mov	lr, r6
 8012cf4:	46d3      	mov	fp, sl
 8012cf6:	f850 2b04 	ldr.w	r2, [r0], #4
 8012cfa:	b293      	uxth	r3, r2
 8012cfc:	fb05 a303 	mla	r3, r5, r3, sl
 8012d00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	ebab 0303 	sub.w	r3, fp, r3
 8012d0a:	0c12      	lsrs	r2, r2, #16
 8012d0c:	f8de b000 	ldr.w	fp, [lr]
 8012d10:	fb05 a202 	mla	r2, r5, r2, sl
 8012d14:	fa13 f38b 	uxtah	r3, r3, fp
 8012d18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012d1c:	fa1f fb82 	uxth.w	fp, r2
 8012d20:	f8de 2000 	ldr.w	r2, [lr]
 8012d24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d32:	4581      	cmp	r9, r0
 8012d34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012d38:	f84e 3b04 	str.w	r3, [lr], #4
 8012d3c:	d2db      	bcs.n	8012cf6 <quorem+0x42>
 8012d3e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012d42:	b933      	cbnz	r3, 8012d52 <quorem+0x9e>
 8012d44:	9b01      	ldr	r3, [sp, #4]
 8012d46:	3b04      	subs	r3, #4
 8012d48:	429e      	cmp	r6, r3
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	d330      	bcc.n	8012db0 <quorem+0xfc>
 8012d4e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012d52:	4640      	mov	r0, r8
 8012d54:	f001 f9fe 	bl	8014154 <__mcmp>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	db25      	blt.n	8012da8 <quorem+0xf4>
 8012d5c:	3501      	adds	r5, #1
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f04f 0c00 	mov.w	ip, #0
 8012d64:	f857 2b04 	ldr.w	r2, [r7], #4
 8012d68:	f8d0 e000 	ldr.w	lr, [r0]
 8012d6c:	b293      	uxth	r3, r2
 8012d6e:	ebac 0303 	sub.w	r3, ip, r3
 8012d72:	0c12      	lsrs	r2, r2, #16
 8012d74:	fa13 f38e 	uxtah	r3, r3, lr
 8012d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d86:	45b9      	cmp	r9, r7
 8012d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d8c:	f840 3b04 	str.w	r3, [r0], #4
 8012d90:	d2e8      	bcs.n	8012d64 <quorem+0xb0>
 8012d92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012d96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012d9a:	b92a      	cbnz	r2, 8012da8 <quorem+0xf4>
 8012d9c:	3b04      	subs	r3, #4
 8012d9e:	429e      	cmp	r6, r3
 8012da0:	461a      	mov	r2, r3
 8012da2:	d30b      	bcc.n	8012dbc <quorem+0x108>
 8012da4:	f8c8 4010 	str.w	r4, [r8, #16]
 8012da8:	4628      	mov	r0, r5
 8012daa:	b003      	add	sp, #12
 8012dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db0:	6812      	ldr	r2, [r2, #0]
 8012db2:	3b04      	subs	r3, #4
 8012db4:	2a00      	cmp	r2, #0
 8012db6:	d1ca      	bne.n	8012d4e <quorem+0x9a>
 8012db8:	3c01      	subs	r4, #1
 8012dba:	e7c5      	b.n	8012d48 <quorem+0x94>
 8012dbc:	6812      	ldr	r2, [r2, #0]
 8012dbe:	3b04      	subs	r3, #4
 8012dc0:	2a00      	cmp	r2, #0
 8012dc2:	d1ef      	bne.n	8012da4 <quorem+0xf0>
 8012dc4:	3c01      	subs	r4, #1
 8012dc6:	e7ea      	b.n	8012d9e <quorem+0xea>
 8012dc8:	2000      	movs	r0, #0
 8012dca:	e7ee      	b.n	8012daa <quorem+0xf6>
 8012dcc:	0000      	movs	r0, r0
	...

08012dd0 <_dtoa_r>:
 8012dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd4:	ec57 6b10 	vmov	r6, r7, d0
 8012dd8:	b097      	sub	sp, #92	; 0x5c
 8012dda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ddc:	9106      	str	r1, [sp, #24]
 8012dde:	4604      	mov	r4, r0
 8012de0:	920b      	str	r2, [sp, #44]	; 0x2c
 8012de2:	9312      	str	r3, [sp, #72]	; 0x48
 8012de4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012de8:	e9cd 6700 	strd	r6, r7, [sp]
 8012dec:	b93d      	cbnz	r5, 8012dfe <_dtoa_r+0x2e>
 8012dee:	2010      	movs	r0, #16
 8012df0:	f000 ff92 	bl	8013d18 <malloc>
 8012df4:	6260      	str	r0, [r4, #36]	; 0x24
 8012df6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012dfa:	6005      	str	r5, [r0, #0]
 8012dfc:	60c5      	str	r5, [r0, #12]
 8012dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e00:	6819      	ldr	r1, [r3, #0]
 8012e02:	b151      	cbz	r1, 8012e1a <_dtoa_r+0x4a>
 8012e04:	685a      	ldr	r2, [r3, #4]
 8012e06:	604a      	str	r2, [r1, #4]
 8012e08:	2301      	movs	r3, #1
 8012e0a:	4093      	lsls	r3, r2
 8012e0c:	608b      	str	r3, [r1, #8]
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f000 ffbe 	bl	8013d90 <_Bfree>
 8012e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e16:	2200      	movs	r2, #0
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	1e3b      	subs	r3, r7, #0
 8012e1c:	bfbb      	ittet	lt
 8012e1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e22:	9301      	strlt	r3, [sp, #4]
 8012e24:	2300      	movge	r3, #0
 8012e26:	2201      	movlt	r2, #1
 8012e28:	bfac      	ite	ge
 8012e2a:	f8c8 3000 	strge.w	r3, [r8]
 8012e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8012e32:	4baf      	ldr	r3, [pc, #700]	; (80130f0 <_dtoa_r+0x320>)
 8012e34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e38:	ea33 0308 	bics.w	r3, r3, r8
 8012e3c:	d114      	bne.n	8012e68 <_dtoa_r+0x98>
 8012e3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e44:	6013      	str	r3, [r2, #0]
 8012e46:	9b00      	ldr	r3, [sp, #0]
 8012e48:	b923      	cbnz	r3, 8012e54 <_dtoa_r+0x84>
 8012e4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	f000 8542 	beq.w	80138d8 <_dtoa_r+0xb08>
 8012e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013104 <_dtoa_r+0x334>
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	f000 8544 	beq.w	80138e8 <_dtoa_r+0xb18>
 8012e60:	f10b 0303 	add.w	r3, fp, #3
 8012e64:	f000 bd3e 	b.w	80138e4 <_dtoa_r+0xb14>
 8012e68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2300      	movs	r3, #0
 8012e70:	4630      	mov	r0, r6
 8012e72:	4639      	mov	r1, r7
 8012e74:	f7ed fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8012e78:	4681      	mov	r9, r0
 8012e7a:	b168      	cbz	r0, 8012e98 <_dtoa_r+0xc8>
 8012e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e7e:	2301      	movs	r3, #1
 8012e80:	6013      	str	r3, [r2, #0]
 8012e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	f000 8524 	beq.w	80138d2 <_dtoa_r+0xb02>
 8012e8a:	4b9a      	ldr	r3, [pc, #616]	; (80130f4 <_dtoa_r+0x324>)
 8012e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012e92:	6013      	str	r3, [r2, #0]
 8012e94:	f000 bd28 	b.w	80138e8 <_dtoa_r+0xb18>
 8012e98:	aa14      	add	r2, sp, #80	; 0x50
 8012e9a:	a915      	add	r1, sp, #84	; 0x54
 8012e9c:	ec47 6b10 	vmov	d0, r6, r7
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f001 f9ce 	bl	8014242 <__d2b>
 8012ea6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012eaa:	9004      	str	r0, [sp, #16]
 8012eac:	2d00      	cmp	r5, #0
 8012eae:	d07c      	beq.n	8012faa <_dtoa_r+0x1da>
 8012eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012eb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012eb8:	46b2      	mov	sl, r6
 8012eba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012ec2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	4b8b      	ldr	r3, [pc, #556]	; (80130f8 <_dtoa_r+0x328>)
 8012eca:	4650      	mov	r0, sl
 8012ecc:	4659      	mov	r1, fp
 8012ece:	f7ed f9e3 	bl	8000298 <__aeabi_dsub>
 8012ed2:	a381      	add	r3, pc, #516	; (adr r3, 80130d8 <_dtoa_r+0x308>)
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	f7ed fb96 	bl	8000608 <__aeabi_dmul>
 8012edc:	a380      	add	r3, pc, #512	; (adr r3, 80130e0 <_dtoa_r+0x310>)
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	f7ed f9db 	bl	800029c <__adddf3>
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	4628      	mov	r0, r5
 8012eea:	460f      	mov	r7, r1
 8012eec:	f7ed fb22 	bl	8000534 <__aeabi_i2d>
 8012ef0:	a37d      	add	r3, pc, #500	; (adr r3, 80130e8 <_dtoa_r+0x318>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed fb87 	bl	8000608 <__aeabi_dmul>
 8012efa:	4602      	mov	r2, r0
 8012efc:	460b      	mov	r3, r1
 8012efe:	4630      	mov	r0, r6
 8012f00:	4639      	mov	r1, r7
 8012f02:	f7ed f9cb 	bl	800029c <__adddf3>
 8012f06:	4606      	mov	r6, r0
 8012f08:	460f      	mov	r7, r1
 8012f0a:	f7ed fe2d 	bl	8000b68 <__aeabi_d2iz>
 8012f0e:	2200      	movs	r2, #0
 8012f10:	4682      	mov	sl, r0
 8012f12:	2300      	movs	r3, #0
 8012f14:	4630      	mov	r0, r6
 8012f16:	4639      	mov	r1, r7
 8012f18:	f7ed fde8 	bl	8000aec <__aeabi_dcmplt>
 8012f1c:	b148      	cbz	r0, 8012f32 <_dtoa_r+0x162>
 8012f1e:	4650      	mov	r0, sl
 8012f20:	f7ed fb08 	bl	8000534 <__aeabi_i2d>
 8012f24:	4632      	mov	r2, r6
 8012f26:	463b      	mov	r3, r7
 8012f28:	f7ed fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8012f2c:	b908      	cbnz	r0, 8012f32 <_dtoa_r+0x162>
 8012f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f32:	f1ba 0f16 	cmp.w	sl, #22
 8012f36:	d859      	bhi.n	8012fec <_dtoa_r+0x21c>
 8012f38:	4970      	ldr	r1, [pc, #448]	; (80130fc <_dtoa_r+0x32c>)
 8012f3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012f3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f46:	f7ed fdef 	bl	8000b28 <__aeabi_dcmpgt>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d050      	beq.n	8012ff0 <_dtoa_r+0x220>
 8012f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f52:	2300      	movs	r3, #0
 8012f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f58:	1b5d      	subs	r5, r3, r5
 8012f5a:	f1b5 0801 	subs.w	r8, r5, #1
 8012f5e:	bf49      	itett	mi
 8012f60:	f1c5 0301 	rsbmi	r3, r5, #1
 8012f64:	2300      	movpl	r3, #0
 8012f66:	9305      	strmi	r3, [sp, #20]
 8012f68:	f04f 0800 	movmi.w	r8, #0
 8012f6c:	bf58      	it	pl
 8012f6e:	9305      	strpl	r3, [sp, #20]
 8012f70:	f1ba 0f00 	cmp.w	sl, #0
 8012f74:	db3e      	blt.n	8012ff4 <_dtoa_r+0x224>
 8012f76:	2300      	movs	r3, #0
 8012f78:	44d0      	add	r8, sl
 8012f7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012f7e:	9307      	str	r3, [sp, #28]
 8012f80:	9b06      	ldr	r3, [sp, #24]
 8012f82:	2b09      	cmp	r3, #9
 8012f84:	f200 8090 	bhi.w	80130a8 <_dtoa_r+0x2d8>
 8012f88:	2b05      	cmp	r3, #5
 8012f8a:	bfc4      	itt	gt
 8012f8c:	3b04      	subgt	r3, #4
 8012f8e:	9306      	strgt	r3, [sp, #24]
 8012f90:	9b06      	ldr	r3, [sp, #24]
 8012f92:	f1a3 0302 	sub.w	r3, r3, #2
 8012f96:	bfcc      	ite	gt
 8012f98:	2500      	movgt	r5, #0
 8012f9a:	2501      	movle	r5, #1
 8012f9c:	2b03      	cmp	r3, #3
 8012f9e:	f200 808f 	bhi.w	80130c0 <_dtoa_r+0x2f0>
 8012fa2:	e8df f003 	tbb	[pc, r3]
 8012fa6:	7f7d      	.short	0x7f7d
 8012fa8:	7131      	.short	0x7131
 8012faa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012fae:	441d      	add	r5, r3
 8012fb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012fb4:	2820      	cmp	r0, #32
 8012fb6:	dd13      	ble.n	8012fe0 <_dtoa_r+0x210>
 8012fb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012fbc:	9b00      	ldr	r3, [sp, #0]
 8012fbe:	fa08 f800 	lsl.w	r8, r8, r0
 8012fc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012fc6:	fa23 f000 	lsr.w	r0, r3, r0
 8012fca:	ea48 0000 	orr.w	r0, r8, r0
 8012fce:	f7ed faa1 	bl	8000514 <__aeabi_ui2d>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	4682      	mov	sl, r0
 8012fd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012fda:	3d01      	subs	r5, #1
 8012fdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8012fde:	e772      	b.n	8012ec6 <_dtoa_r+0xf6>
 8012fe0:	9b00      	ldr	r3, [sp, #0]
 8012fe2:	f1c0 0020 	rsb	r0, r0, #32
 8012fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8012fea:	e7f0      	b.n	8012fce <_dtoa_r+0x1fe>
 8012fec:	2301      	movs	r3, #1
 8012fee:	e7b1      	b.n	8012f54 <_dtoa_r+0x184>
 8012ff0:	900f      	str	r0, [sp, #60]	; 0x3c
 8012ff2:	e7b0      	b.n	8012f56 <_dtoa_r+0x186>
 8012ff4:	9b05      	ldr	r3, [sp, #20]
 8012ff6:	eba3 030a 	sub.w	r3, r3, sl
 8012ffa:	9305      	str	r3, [sp, #20]
 8012ffc:	f1ca 0300 	rsb	r3, sl, #0
 8013000:	9307      	str	r3, [sp, #28]
 8013002:	2300      	movs	r3, #0
 8013004:	930e      	str	r3, [sp, #56]	; 0x38
 8013006:	e7bb      	b.n	8012f80 <_dtoa_r+0x1b0>
 8013008:	2301      	movs	r3, #1
 801300a:	930a      	str	r3, [sp, #40]	; 0x28
 801300c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801300e:	2b00      	cmp	r3, #0
 8013010:	dd59      	ble.n	80130c6 <_dtoa_r+0x2f6>
 8013012:	9302      	str	r3, [sp, #8]
 8013014:	4699      	mov	r9, r3
 8013016:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013018:	2200      	movs	r2, #0
 801301a:	6072      	str	r2, [r6, #4]
 801301c:	2204      	movs	r2, #4
 801301e:	f102 0014 	add.w	r0, r2, #20
 8013022:	4298      	cmp	r0, r3
 8013024:	6871      	ldr	r1, [r6, #4]
 8013026:	d953      	bls.n	80130d0 <_dtoa_r+0x300>
 8013028:	4620      	mov	r0, r4
 801302a:	f000 fe7d 	bl	8013d28 <_Balloc>
 801302e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013030:	6030      	str	r0, [r6, #0]
 8013032:	f1b9 0f0e 	cmp.w	r9, #14
 8013036:	f8d3 b000 	ldr.w	fp, [r3]
 801303a:	f200 80e6 	bhi.w	801320a <_dtoa_r+0x43a>
 801303e:	2d00      	cmp	r5, #0
 8013040:	f000 80e3 	beq.w	801320a <_dtoa_r+0x43a>
 8013044:	ed9d 7b00 	vldr	d7, [sp]
 8013048:	f1ba 0f00 	cmp.w	sl, #0
 801304c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013050:	dd74      	ble.n	801313c <_dtoa_r+0x36c>
 8013052:	4a2a      	ldr	r2, [pc, #168]	; (80130fc <_dtoa_r+0x32c>)
 8013054:	f00a 030f 	and.w	r3, sl, #15
 8013058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801305c:	ed93 7b00 	vldr	d7, [r3]
 8013060:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013064:	06f0      	lsls	r0, r6, #27
 8013066:	ed8d 7b08 	vstr	d7, [sp, #32]
 801306a:	d565      	bpl.n	8013138 <_dtoa_r+0x368>
 801306c:	4b24      	ldr	r3, [pc, #144]	; (8013100 <_dtoa_r+0x330>)
 801306e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013072:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013076:	f7ed fbf1 	bl	800085c <__aeabi_ddiv>
 801307a:	e9cd 0100 	strd	r0, r1, [sp]
 801307e:	f006 060f 	and.w	r6, r6, #15
 8013082:	2503      	movs	r5, #3
 8013084:	4f1e      	ldr	r7, [pc, #120]	; (8013100 <_dtoa_r+0x330>)
 8013086:	e04c      	b.n	8013122 <_dtoa_r+0x352>
 8013088:	2301      	movs	r3, #1
 801308a:	930a      	str	r3, [sp, #40]	; 0x28
 801308c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801308e:	4453      	add	r3, sl
 8013090:	f103 0901 	add.w	r9, r3, #1
 8013094:	9302      	str	r3, [sp, #8]
 8013096:	464b      	mov	r3, r9
 8013098:	2b01      	cmp	r3, #1
 801309a:	bfb8      	it	lt
 801309c:	2301      	movlt	r3, #1
 801309e:	e7ba      	b.n	8013016 <_dtoa_r+0x246>
 80130a0:	2300      	movs	r3, #0
 80130a2:	e7b2      	b.n	801300a <_dtoa_r+0x23a>
 80130a4:	2300      	movs	r3, #0
 80130a6:	e7f0      	b.n	801308a <_dtoa_r+0x2ba>
 80130a8:	2501      	movs	r5, #1
 80130aa:	2300      	movs	r3, #0
 80130ac:	9306      	str	r3, [sp, #24]
 80130ae:	950a      	str	r5, [sp, #40]	; 0x28
 80130b0:	f04f 33ff 	mov.w	r3, #4294967295
 80130b4:	9302      	str	r3, [sp, #8]
 80130b6:	4699      	mov	r9, r3
 80130b8:	2200      	movs	r2, #0
 80130ba:	2312      	movs	r3, #18
 80130bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80130be:	e7aa      	b.n	8013016 <_dtoa_r+0x246>
 80130c0:	2301      	movs	r3, #1
 80130c2:	930a      	str	r3, [sp, #40]	; 0x28
 80130c4:	e7f4      	b.n	80130b0 <_dtoa_r+0x2e0>
 80130c6:	2301      	movs	r3, #1
 80130c8:	9302      	str	r3, [sp, #8]
 80130ca:	4699      	mov	r9, r3
 80130cc:	461a      	mov	r2, r3
 80130ce:	e7f5      	b.n	80130bc <_dtoa_r+0x2ec>
 80130d0:	3101      	adds	r1, #1
 80130d2:	6071      	str	r1, [r6, #4]
 80130d4:	0052      	lsls	r2, r2, #1
 80130d6:	e7a2      	b.n	801301e <_dtoa_r+0x24e>
 80130d8:	636f4361 	.word	0x636f4361
 80130dc:	3fd287a7 	.word	0x3fd287a7
 80130e0:	8b60c8b3 	.word	0x8b60c8b3
 80130e4:	3fc68a28 	.word	0x3fc68a28
 80130e8:	509f79fb 	.word	0x509f79fb
 80130ec:	3fd34413 	.word	0x3fd34413
 80130f0:	7ff00000 	.word	0x7ff00000
 80130f4:	08014ab9 	.word	0x08014ab9
 80130f8:	3ff80000 	.word	0x3ff80000
 80130fc:	08014b78 	.word	0x08014b78
 8013100:	08014b50 	.word	0x08014b50
 8013104:	08014ae5 	.word	0x08014ae5
 8013108:	07f1      	lsls	r1, r6, #31
 801310a:	d508      	bpl.n	801311e <_dtoa_r+0x34e>
 801310c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013114:	f7ed fa78 	bl	8000608 <__aeabi_dmul>
 8013118:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801311c:	3501      	adds	r5, #1
 801311e:	1076      	asrs	r6, r6, #1
 8013120:	3708      	adds	r7, #8
 8013122:	2e00      	cmp	r6, #0
 8013124:	d1f0      	bne.n	8013108 <_dtoa_r+0x338>
 8013126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801312a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801312e:	f7ed fb95 	bl	800085c <__aeabi_ddiv>
 8013132:	e9cd 0100 	strd	r0, r1, [sp]
 8013136:	e01a      	b.n	801316e <_dtoa_r+0x39e>
 8013138:	2502      	movs	r5, #2
 801313a:	e7a3      	b.n	8013084 <_dtoa_r+0x2b4>
 801313c:	f000 80a0 	beq.w	8013280 <_dtoa_r+0x4b0>
 8013140:	f1ca 0600 	rsb	r6, sl, #0
 8013144:	4b9f      	ldr	r3, [pc, #636]	; (80133c4 <_dtoa_r+0x5f4>)
 8013146:	4fa0      	ldr	r7, [pc, #640]	; (80133c8 <_dtoa_r+0x5f8>)
 8013148:	f006 020f 	and.w	r2, r6, #15
 801314c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013154:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013158:	f7ed fa56 	bl	8000608 <__aeabi_dmul>
 801315c:	e9cd 0100 	strd	r0, r1, [sp]
 8013160:	1136      	asrs	r6, r6, #4
 8013162:	2300      	movs	r3, #0
 8013164:	2502      	movs	r5, #2
 8013166:	2e00      	cmp	r6, #0
 8013168:	d17f      	bne.n	801326a <_dtoa_r+0x49a>
 801316a:	2b00      	cmp	r3, #0
 801316c:	d1e1      	bne.n	8013132 <_dtoa_r+0x362>
 801316e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013170:	2b00      	cmp	r3, #0
 8013172:	f000 8087 	beq.w	8013284 <_dtoa_r+0x4b4>
 8013176:	e9dd 6700 	ldrd	r6, r7, [sp]
 801317a:	2200      	movs	r2, #0
 801317c:	4b93      	ldr	r3, [pc, #588]	; (80133cc <_dtoa_r+0x5fc>)
 801317e:	4630      	mov	r0, r6
 8013180:	4639      	mov	r1, r7
 8013182:	f7ed fcb3 	bl	8000aec <__aeabi_dcmplt>
 8013186:	2800      	cmp	r0, #0
 8013188:	d07c      	beq.n	8013284 <_dtoa_r+0x4b4>
 801318a:	f1b9 0f00 	cmp.w	r9, #0
 801318e:	d079      	beq.n	8013284 <_dtoa_r+0x4b4>
 8013190:	9b02      	ldr	r3, [sp, #8]
 8013192:	2b00      	cmp	r3, #0
 8013194:	dd35      	ble.n	8013202 <_dtoa_r+0x432>
 8013196:	f10a 33ff 	add.w	r3, sl, #4294967295
 801319a:	9308      	str	r3, [sp, #32]
 801319c:	4639      	mov	r1, r7
 801319e:	2200      	movs	r2, #0
 80131a0:	4b8b      	ldr	r3, [pc, #556]	; (80133d0 <_dtoa_r+0x600>)
 80131a2:	4630      	mov	r0, r6
 80131a4:	f7ed fa30 	bl	8000608 <__aeabi_dmul>
 80131a8:	e9cd 0100 	strd	r0, r1, [sp]
 80131ac:	9f02      	ldr	r7, [sp, #8]
 80131ae:	3501      	adds	r5, #1
 80131b0:	4628      	mov	r0, r5
 80131b2:	f7ed f9bf 	bl	8000534 <__aeabi_i2d>
 80131b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ba:	f7ed fa25 	bl	8000608 <__aeabi_dmul>
 80131be:	2200      	movs	r2, #0
 80131c0:	4b84      	ldr	r3, [pc, #528]	; (80133d4 <_dtoa_r+0x604>)
 80131c2:	f7ed f86b 	bl	800029c <__adddf3>
 80131c6:	4605      	mov	r5, r0
 80131c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80131cc:	2f00      	cmp	r7, #0
 80131ce:	d15d      	bne.n	801328c <_dtoa_r+0x4bc>
 80131d0:	2200      	movs	r2, #0
 80131d2:	4b81      	ldr	r3, [pc, #516]	; (80133d8 <_dtoa_r+0x608>)
 80131d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131d8:	f7ed f85e 	bl	8000298 <__aeabi_dsub>
 80131dc:	462a      	mov	r2, r5
 80131de:	4633      	mov	r3, r6
 80131e0:	e9cd 0100 	strd	r0, r1, [sp]
 80131e4:	f7ed fca0 	bl	8000b28 <__aeabi_dcmpgt>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	f040 8288 	bne.w	80136fe <_dtoa_r+0x92e>
 80131ee:	462a      	mov	r2, r5
 80131f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80131f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131f8:	f7ed fc78 	bl	8000aec <__aeabi_dcmplt>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	f040 827c 	bne.w	80136fa <_dtoa_r+0x92a>
 8013202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013206:	e9cd 2300 	strd	r2, r3, [sp]
 801320a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801320c:	2b00      	cmp	r3, #0
 801320e:	f2c0 8150 	blt.w	80134b2 <_dtoa_r+0x6e2>
 8013212:	f1ba 0f0e 	cmp.w	sl, #14
 8013216:	f300 814c 	bgt.w	80134b2 <_dtoa_r+0x6e2>
 801321a:	4b6a      	ldr	r3, [pc, #424]	; (80133c4 <_dtoa_r+0x5f4>)
 801321c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013220:	ed93 7b00 	vldr	d7, [r3]
 8013224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013226:	2b00      	cmp	r3, #0
 8013228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801322c:	f280 80d8 	bge.w	80133e0 <_dtoa_r+0x610>
 8013230:	f1b9 0f00 	cmp.w	r9, #0
 8013234:	f300 80d4 	bgt.w	80133e0 <_dtoa_r+0x610>
 8013238:	f040 825e 	bne.w	80136f8 <_dtoa_r+0x928>
 801323c:	2200      	movs	r2, #0
 801323e:	4b66      	ldr	r3, [pc, #408]	; (80133d8 <_dtoa_r+0x608>)
 8013240:	ec51 0b17 	vmov	r0, r1, d7
 8013244:	f7ed f9e0 	bl	8000608 <__aeabi_dmul>
 8013248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801324c:	f7ed fc62 	bl	8000b14 <__aeabi_dcmpge>
 8013250:	464f      	mov	r7, r9
 8013252:	464e      	mov	r6, r9
 8013254:	2800      	cmp	r0, #0
 8013256:	f040 8234 	bne.w	80136c2 <_dtoa_r+0x8f2>
 801325a:	2331      	movs	r3, #49	; 0x31
 801325c:	f10b 0501 	add.w	r5, fp, #1
 8013260:	f88b 3000 	strb.w	r3, [fp]
 8013264:	f10a 0a01 	add.w	sl, sl, #1
 8013268:	e22f      	b.n	80136ca <_dtoa_r+0x8fa>
 801326a:	07f2      	lsls	r2, r6, #31
 801326c:	d505      	bpl.n	801327a <_dtoa_r+0x4aa>
 801326e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013272:	f7ed f9c9 	bl	8000608 <__aeabi_dmul>
 8013276:	3501      	adds	r5, #1
 8013278:	2301      	movs	r3, #1
 801327a:	1076      	asrs	r6, r6, #1
 801327c:	3708      	adds	r7, #8
 801327e:	e772      	b.n	8013166 <_dtoa_r+0x396>
 8013280:	2502      	movs	r5, #2
 8013282:	e774      	b.n	801316e <_dtoa_r+0x39e>
 8013284:	f8cd a020 	str.w	sl, [sp, #32]
 8013288:	464f      	mov	r7, r9
 801328a:	e791      	b.n	80131b0 <_dtoa_r+0x3e0>
 801328c:	4b4d      	ldr	r3, [pc, #308]	; (80133c4 <_dtoa_r+0x5f4>)
 801328e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013292:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013298:	2b00      	cmp	r3, #0
 801329a:	d047      	beq.n	801332c <_dtoa_r+0x55c>
 801329c:	4602      	mov	r2, r0
 801329e:	460b      	mov	r3, r1
 80132a0:	2000      	movs	r0, #0
 80132a2:	494e      	ldr	r1, [pc, #312]	; (80133dc <_dtoa_r+0x60c>)
 80132a4:	f7ed fada 	bl	800085c <__aeabi_ddiv>
 80132a8:	462a      	mov	r2, r5
 80132aa:	4633      	mov	r3, r6
 80132ac:	f7ec fff4 	bl	8000298 <__aeabi_dsub>
 80132b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80132b4:	465d      	mov	r5, fp
 80132b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132ba:	f7ed fc55 	bl	8000b68 <__aeabi_d2iz>
 80132be:	4606      	mov	r6, r0
 80132c0:	f7ed f938 	bl	8000534 <__aeabi_i2d>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132cc:	f7ec ffe4 	bl	8000298 <__aeabi_dsub>
 80132d0:	3630      	adds	r6, #48	; 0x30
 80132d2:	f805 6b01 	strb.w	r6, [r5], #1
 80132d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80132da:	e9cd 0100 	strd	r0, r1, [sp]
 80132de:	f7ed fc05 	bl	8000aec <__aeabi_dcmplt>
 80132e2:	2800      	cmp	r0, #0
 80132e4:	d163      	bne.n	80133ae <_dtoa_r+0x5de>
 80132e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ea:	2000      	movs	r0, #0
 80132ec:	4937      	ldr	r1, [pc, #220]	; (80133cc <_dtoa_r+0x5fc>)
 80132ee:	f7ec ffd3 	bl	8000298 <__aeabi_dsub>
 80132f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80132f6:	f7ed fbf9 	bl	8000aec <__aeabi_dcmplt>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	f040 80b7 	bne.w	801346e <_dtoa_r+0x69e>
 8013300:	eba5 030b 	sub.w	r3, r5, fp
 8013304:	429f      	cmp	r7, r3
 8013306:	f77f af7c 	ble.w	8013202 <_dtoa_r+0x432>
 801330a:	2200      	movs	r2, #0
 801330c:	4b30      	ldr	r3, [pc, #192]	; (80133d0 <_dtoa_r+0x600>)
 801330e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013312:	f7ed f979 	bl	8000608 <__aeabi_dmul>
 8013316:	2200      	movs	r2, #0
 8013318:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801331c:	4b2c      	ldr	r3, [pc, #176]	; (80133d0 <_dtoa_r+0x600>)
 801331e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013322:	f7ed f971 	bl	8000608 <__aeabi_dmul>
 8013326:	e9cd 0100 	strd	r0, r1, [sp]
 801332a:	e7c4      	b.n	80132b6 <_dtoa_r+0x4e6>
 801332c:	462a      	mov	r2, r5
 801332e:	4633      	mov	r3, r6
 8013330:	f7ed f96a 	bl	8000608 <__aeabi_dmul>
 8013334:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013338:	eb0b 0507 	add.w	r5, fp, r7
 801333c:	465e      	mov	r6, fp
 801333e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013342:	f7ed fc11 	bl	8000b68 <__aeabi_d2iz>
 8013346:	4607      	mov	r7, r0
 8013348:	f7ed f8f4 	bl	8000534 <__aeabi_i2d>
 801334c:	3730      	adds	r7, #48	; 0x30
 801334e:	4602      	mov	r2, r0
 8013350:	460b      	mov	r3, r1
 8013352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013356:	f7ec ff9f 	bl	8000298 <__aeabi_dsub>
 801335a:	f806 7b01 	strb.w	r7, [r6], #1
 801335e:	42ae      	cmp	r6, r5
 8013360:	e9cd 0100 	strd	r0, r1, [sp]
 8013364:	f04f 0200 	mov.w	r2, #0
 8013368:	d126      	bne.n	80133b8 <_dtoa_r+0x5e8>
 801336a:	4b1c      	ldr	r3, [pc, #112]	; (80133dc <_dtoa_r+0x60c>)
 801336c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013370:	f7ec ff94 	bl	800029c <__adddf3>
 8013374:	4602      	mov	r2, r0
 8013376:	460b      	mov	r3, r1
 8013378:	e9dd 0100 	ldrd	r0, r1, [sp]
 801337c:	f7ed fbd4 	bl	8000b28 <__aeabi_dcmpgt>
 8013380:	2800      	cmp	r0, #0
 8013382:	d174      	bne.n	801346e <_dtoa_r+0x69e>
 8013384:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013388:	2000      	movs	r0, #0
 801338a:	4914      	ldr	r1, [pc, #80]	; (80133dc <_dtoa_r+0x60c>)
 801338c:	f7ec ff84 	bl	8000298 <__aeabi_dsub>
 8013390:	4602      	mov	r2, r0
 8013392:	460b      	mov	r3, r1
 8013394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013398:	f7ed fba8 	bl	8000aec <__aeabi_dcmplt>
 801339c:	2800      	cmp	r0, #0
 801339e:	f43f af30 	beq.w	8013202 <_dtoa_r+0x432>
 80133a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133a6:	2b30      	cmp	r3, #48	; 0x30
 80133a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80133ac:	d002      	beq.n	80133b4 <_dtoa_r+0x5e4>
 80133ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80133b2:	e04a      	b.n	801344a <_dtoa_r+0x67a>
 80133b4:	4615      	mov	r5, r2
 80133b6:	e7f4      	b.n	80133a2 <_dtoa_r+0x5d2>
 80133b8:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <_dtoa_r+0x600>)
 80133ba:	f7ed f925 	bl	8000608 <__aeabi_dmul>
 80133be:	e9cd 0100 	strd	r0, r1, [sp]
 80133c2:	e7bc      	b.n	801333e <_dtoa_r+0x56e>
 80133c4:	08014b78 	.word	0x08014b78
 80133c8:	08014b50 	.word	0x08014b50
 80133cc:	3ff00000 	.word	0x3ff00000
 80133d0:	40240000 	.word	0x40240000
 80133d4:	401c0000 	.word	0x401c0000
 80133d8:	40140000 	.word	0x40140000
 80133dc:	3fe00000 	.word	0x3fe00000
 80133e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80133e4:	465d      	mov	r5, fp
 80133e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133ea:	4630      	mov	r0, r6
 80133ec:	4639      	mov	r1, r7
 80133ee:	f7ed fa35 	bl	800085c <__aeabi_ddiv>
 80133f2:	f7ed fbb9 	bl	8000b68 <__aeabi_d2iz>
 80133f6:	4680      	mov	r8, r0
 80133f8:	f7ed f89c 	bl	8000534 <__aeabi_i2d>
 80133fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013400:	f7ed f902 	bl	8000608 <__aeabi_dmul>
 8013404:	4602      	mov	r2, r0
 8013406:	460b      	mov	r3, r1
 8013408:	4630      	mov	r0, r6
 801340a:	4639      	mov	r1, r7
 801340c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013410:	f7ec ff42 	bl	8000298 <__aeabi_dsub>
 8013414:	f805 6b01 	strb.w	r6, [r5], #1
 8013418:	eba5 060b 	sub.w	r6, r5, fp
 801341c:	45b1      	cmp	r9, r6
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	d139      	bne.n	8013498 <_dtoa_r+0x6c8>
 8013424:	f7ec ff3a 	bl	800029c <__adddf3>
 8013428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801342c:	4606      	mov	r6, r0
 801342e:	460f      	mov	r7, r1
 8013430:	f7ed fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8013434:	b9c8      	cbnz	r0, 801346a <_dtoa_r+0x69a>
 8013436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801343a:	4630      	mov	r0, r6
 801343c:	4639      	mov	r1, r7
 801343e:	f7ed fb4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8013442:	b110      	cbz	r0, 801344a <_dtoa_r+0x67a>
 8013444:	f018 0f01 	tst.w	r8, #1
 8013448:	d10f      	bne.n	801346a <_dtoa_r+0x69a>
 801344a:	9904      	ldr	r1, [sp, #16]
 801344c:	4620      	mov	r0, r4
 801344e:	f000 fc9f 	bl	8013d90 <_Bfree>
 8013452:	2300      	movs	r3, #0
 8013454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013456:	702b      	strb	r3, [r5, #0]
 8013458:	f10a 0301 	add.w	r3, sl, #1
 801345c:	6013      	str	r3, [r2, #0]
 801345e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013460:	2b00      	cmp	r3, #0
 8013462:	f000 8241 	beq.w	80138e8 <_dtoa_r+0xb18>
 8013466:	601d      	str	r5, [r3, #0]
 8013468:	e23e      	b.n	80138e8 <_dtoa_r+0xb18>
 801346a:	f8cd a020 	str.w	sl, [sp, #32]
 801346e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013472:	2a39      	cmp	r2, #57	; 0x39
 8013474:	f105 33ff 	add.w	r3, r5, #4294967295
 8013478:	d108      	bne.n	801348c <_dtoa_r+0x6bc>
 801347a:	459b      	cmp	fp, r3
 801347c:	d10a      	bne.n	8013494 <_dtoa_r+0x6c4>
 801347e:	9b08      	ldr	r3, [sp, #32]
 8013480:	3301      	adds	r3, #1
 8013482:	9308      	str	r3, [sp, #32]
 8013484:	2330      	movs	r3, #48	; 0x30
 8013486:	f88b 3000 	strb.w	r3, [fp]
 801348a:	465b      	mov	r3, fp
 801348c:	781a      	ldrb	r2, [r3, #0]
 801348e:	3201      	adds	r2, #1
 8013490:	701a      	strb	r2, [r3, #0]
 8013492:	e78c      	b.n	80133ae <_dtoa_r+0x5de>
 8013494:	461d      	mov	r5, r3
 8013496:	e7ea      	b.n	801346e <_dtoa_r+0x69e>
 8013498:	2200      	movs	r2, #0
 801349a:	4b9b      	ldr	r3, [pc, #620]	; (8013708 <_dtoa_r+0x938>)
 801349c:	f7ed f8b4 	bl	8000608 <__aeabi_dmul>
 80134a0:	2200      	movs	r2, #0
 80134a2:	2300      	movs	r3, #0
 80134a4:	4606      	mov	r6, r0
 80134a6:	460f      	mov	r7, r1
 80134a8:	f7ed fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d09a      	beq.n	80133e6 <_dtoa_r+0x616>
 80134b0:	e7cb      	b.n	801344a <_dtoa_r+0x67a>
 80134b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	f000 808b 	beq.w	80135d0 <_dtoa_r+0x800>
 80134ba:	9a06      	ldr	r2, [sp, #24]
 80134bc:	2a01      	cmp	r2, #1
 80134be:	dc6e      	bgt.n	801359e <_dtoa_r+0x7ce>
 80134c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80134c2:	2a00      	cmp	r2, #0
 80134c4:	d067      	beq.n	8013596 <_dtoa_r+0x7c6>
 80134c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80134ca:	9f07      	ldr	r7, [sp, #28]
 80134cc:	9d05      	ldr	r5, [sp, #20]
 80134ce:	9a05      	ldr	r2, [sp, #20]
 80134d0:	2101      	movs	r1, #1
 80134d2:	441a      	add	r2, r3
 80134d4:	4620      	mov	r0, r4
 80134d6:	9205      	str	r2, [sp, #20]
 80134d8:	4498      	add	r8, r3
 80134da:	f000 fcf9 	bl	8013ed0 <__i2b>
 80134de:	4606      	mov	r6, r0
 80134e0:	2d00      	cmp	r5, #0
 80134e2:	dd0c      	ble.n	80134fe <_dtoa_r+0x72e>
 80134e4:	f1b8 0f00 	cmp.w	r8, #0
 80134e8:	dd09      	ble.n	80134fe <_dtoa_r+0x72e>
 80134ea:	4545      	cmp	r5, r8
 80134ec:	9a05      	ldr	r2, [sp, #20]
 80134ee:	462b      	mov	r3, r5
 80134f0:	bfa8      	it	ge
 80134f2:	4643      	movge	r3, r8
 80134f4:	1ad2      	subs	r2, r2, r3
 80134f6:	9205      	str	r2, [sp, #20]
 80134f8:	1aed      	subs	r5, r5, r3
 80134fa:	eba8 0803 	sub.w	r8, r8, r3
 80134fe:	9b07      	ldr	r3, [sp, #28]
 8013500:	b1eb      	cbz	r3, 801353e <_dtoa_r+0x76e>
 8013502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013504:	2b00      	cmp	r3, #0
 8013506:	d067      	beq.n	80135d8 <_dtoa_r+0x808>
 8013508:	b18f      	cbz	r7, 801352e <_dtoa_r+0x75e>
 801350a:	4631      	mov	r1, r6
 801350c:	463a      	mov	r2, r7
 801350e:	4620      	mov	r0, r4
 8013510:	f000 fd7e 	bl	8014010 <__pow5mult>
 8013514:	9a04      	ldr	r2, [sp, #16]
 8013516:	4601      	mov	r1, r0
 8013518:	4606      	mov	r6, r0
 801351a:	4620      	mov	r0, r4
 801351c:	f000 fce1 	bl	8013ee2 <__multiply>
 8013520:	9904      	ldr	r1, [sp, #16]
 8013522:	9008      	str	r0, [sp, #32]
 8013524:	4620      	mov	r0, r4
 8013526:	f000 fc33 	bl	8013d90 <_Bfree>
 801352a:	9b08      	ldr	r3, [sp, #32]
 801352c:	9304      	str	r3, [sp, #16]
 801352e:	9b07      	ldr	r3, [sp, #28]
 8013530:	1bda      	subs	r2, r3, r7
 8013532:	d004      	beq.n	801353e <_dtoa_r+0x76e>
 8013534:	9904      	ldr	r1, [sp, #16]
 8013536:	4620      	mov	r0, r4
 8013538:	f000 fd6a 	bl	8014010 <__pow5mult>
 801353c:	9004      	str	r0, [sp, #16]
 801353e:	2101      	movs	r1, #1
 8013540:	4620      	mov	r0, r4
 8013542:	f000 fcc5 	bl	8013ed0 <__i2b>
 8013546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013548:	4607      	mov	r7, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	f000 81d0 	beq.w	80138f0 <_dtoa_r+0xb20>
 8013550:	461a      	mov	r2, r3
 8013552:	4601      	mov	r1, r0
 8013554:	4620      	mov	r0, r4
 8013556:	f000 fd5b 	bl	8014010 <__pow5mult>
 801355a:	9b06      	ldr	r3, [sp, #24]
 801355c:	2b01      	cmp	r3, #1
 801355e:	4607      	mov	r7, r0
 8013560:	dc40      	bgt.n	80135e4 <_dtoa_r+0x814>
 8013562:	9b00      	ldr	r3, [sp, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d139      	bne.n	80135dc <_dtoa_r+0x80c>
 8013568:	9b01      	ldr	r3, [sp, #4]
 801356a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801356e:	2b00      	cmp	r3, #0
 8013570:	d136      	bne.n	80135e0 <_dtoa_r+0x810>
 8013572:	9b01      	ldr	r3, [sp, #4]
 8013574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013578:	0d1b      	lsrs	r3, r3, #20
 801357a:	051b      	lsls	r3, r3, #20
 801357c:	b12b      	cbz	r3, 801358a <_dtoa_r+0x7ba>
 801357e:	9b05      	ldr	r3, [sp, #20]
 8013580:	3301      	adds	r3, #1
 8013582:	9305      	str	r3, [sp, #20]
 8013584:	f108 0801 	add.w	r8, r8, #1
 8013588:	2301      	movs	r3, #1
 801358a:	9307      	str	r3, [sp, #28]
 801358c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801358e:	2b00      	cmp	r3, #0
 8013590:	d12a      	bne.n	80135e8 <_dtoa_r+0x818>
 8013592:	2001      	movs	r0, #1
 8013594:	e030      	b.n	80135f8 <_dtoa_r+0x828>
 8013596:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013598:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801359c:	e795      	b.n	80134ca <_dtoa_r+0x6fa>
 801359e:	9b07      	ldr	r3, [sp, #28]
 80135a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80135a4:	42bb      	cmp	r3, r7
 80135a6:	bfbf      	itttt	lt
 80135a8:	9b07      	ldrlt	r3, [sp, #28]
 80135aa:	9707      	strlt	r7, [sp, #28]
 80135ac:	1afa      	sublt	r2, r7, r3
 80135ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80135b0:	bfbb      	ittet	lt
 80135b2:	189b      	addlt	r3, r3, r2
 80135b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80135b6:	1bdf      	subge	r7, r3, r7
 80135b8:	2700      	movlt	r7, #0
 80135ba:	f1b9 0f00 	cmp.w	r9, #0
 80135be:	bfb5      	itete	lt
 80135c0:	9b05      	ldrlt	r3, [sp, #20]
 80135c2:	9d05      	ldrge	r5, [sp, #20]
 80135c4:	eba3 0509 	sublt.w	r5, r3, r9
 80135c8:	464b      	movge	r3, r9
 80135ca:	bfb8      	it	lt
 80135cc:	2300      	movlt	r3, #0
 80135ce:	e77e      	b.n	80134ce <_dtoa_r+0x6fe>
 80135d0:	9f07      	ldr	r7, [sp, #28]
 80135d2:	9d05      	ldr	r5, [sp, #20]
 80135d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80135d6:	e783      	b.n	80134e0 <_dtoa_r+0x710>
 80135d8:	9a07      	ldr	r2, [sp, #28]
 80135da:	e7ab      	b.n	8013534 <_dtoa_r+0x764>
 80135dc:	2300      	movs	r3, #0
 80135de:	e7d4      	b.n	801358a <_dtoa_r+0x7ba>
 80135e0:	9b00      	ldr	r3, [sp, #0]
 80135e2:	e7d2      	b.n	801358a <_dtoa_r+0x7ba>
 80135e4:	2300      	movs	r3, #0
 80135e6:	9307      	str	r3, [sp, #28]
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80135ee:	6918      	ldr	r0, [r3, #16]
 80135f0:	f000 fc20 	bl	8013e34 <__hi0bits>
 80135f4:	f1c0 0020 	rsb	r0, r0, #32
 80135f8:	4440      	add	r0, r8
 80135fa:	f010 001f 	ands.w	r0, r0, #31
 80135fe:	d047      	beq.n	8013690 <_dtoa_r+0x8c0>
 8013600:	f1c0 0320 	rsb	r3, r0, #32
 8013604:	2b04      	cmp	r3, #4
 8013606:	dd3b      	ble.n	8013680 <_dtoa_r+0x8b0>
 8013608:	9b05      	ldr	r3, [sp, #20]
 801360a:	f1c0 001c 	rsb	r0, r0, #28
 801360e:	4403      	add	r3, r0
 8013610:	9305      	str	r3, [sp, #20]
 8013612:	4405      	add	r5, r0
 8013614:	4480      	add	r8, r0
 8013616:	9b05      	ldr	r3, [sp, #20]
 8013618:	2b00      	cmp	r3, #0
 801361a:	dd05      	ble.n	8013628 <_dtoa_r+0x858>
 801361c:	461a      	mov	r2, r3
 801361e:	9904      	ldr	r1, [sp, #16]
 8013620:	4620      	mov	r0, r4
 8013622:	f000 fd43 	bl	80140ac <__lshift>
 8013626:	9004      	str	r0, [sp, #16]
 8013628:	f1b8 0f00 	cmp.w	r8, #0
 801362c:	dd05      	ble.n	801363a <_dtoa_r+0x86a>
 801362e:	4639      	mov	r1, r7
 8013630:	4642      	mov	r2, r8
 8013632:	4620      	mov	r0, r4
 8013634:	f000 fd3a 	bl	80140ac <__lshift>
 8013638:	4607      	mov	r7, r0
 801363a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801363c:	b353      	cbz	r3, 8013694 <_dtoa_r+0x8c4>
 801363e:	4639      	mov	r1, r7
 8013640:	9804      	ldr	r0, [sp, #16]
 8013642:	f000 fd87 	bl	8014154 <__mcmp>
 8013646:	2800      	cmp	r0, #0
 8013648:	da24      	bge.n	8013694 <_dtoa_r+0x8c4>
 801364a:	2300      	movs	r3, #0
 801364c:	220a      	movs	r2, #10
 801364e:	9904      	ldr	r1, [sp, #16]
 8013650:	4620      	mov	r0, r4
 8013652:	f000 fbb4 	bl	8013dbe <__multadd>
 8013656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013658:	9004      	str	r0, [sp, #16]
 801365a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801365e:	2b00      	cmp	r3, #0
 8013660:	f000 814d 	beq.w	80138fe <_dtoa_r+0xb2e>
 8013664:	2300      	movs	r3, #0
 8013666:	4631      	mov	r1, r6
 8013668:	220a      	movs	r2, #10
 801366a:	4620      	mov	r0, r4
 801366c:	f000 fba7 	bl	8013dbe <__multadd>
 8013670:	9b02      	ldr	r3, [sp, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	4606      	mov	r6, r0
 8013676:	dc4f      	bgt.n	8013718 <_dtoa_r+0x948>
 8013678:	9b06      	ldr	r3, [sp, #24]
 801367a:	2b02      	cmp	r3, #2
 801367c:	dd4c      	ble.n	8013718 <_dtoa_r+0x948>
 801367e:	e011      	b.n	80136a4 <_dtoa_r+0x8d4>
 8013680:	d0c9      	beq.n	8013616 <_dtoa_r+0x846>
 8013682:	9a05      	ldr	r2, [sp, #20]
 8013684:	331c      	adds	r3, #28
 8013686:	441a      	add	r2, r3
 8013688:	9205      	str	r2, [sp, #20]
 801368a:	441d      	add	r5, r3
 801368c:	4498      	add	r8, r3
 801368e:	e7c2      	b.n	8013616 <_dtoa_r+0x846>
 8013690:	4603      	mov	r3, r0
 8013692:	e7f6      	b.n	8013682 <_dtoa_r+0x8b2>
 8013694:	f1b9 0f00 	cmp.w	r9, #0
 8013698:	dc38      	bgt.n	801370c <_dtoa_r+0x93c>
 801369a:	9b06      	ldr	r3, [sp, #24]
 801369c:	2b02      	cmp	r3, #2
 801369e:	dd35      	ble.n	801370c <_dtoa_r+0x93c>
 80136a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80136a4:	9b02      	ldr	r3, [sp, #8]
 80136a6:	b963      	cbnz	r3, 80136c2 <_dtoa_r+0x8f2>
 80136a8:	4639      	mov	r1, r7
 80136aa:	2205      	movs	r2, #5
 80136ac:	4620      	mov	r0, r4
 80136ae:	f000 fb86 	bl	8013dbe <__multadd>
 80136b2:	4601      	mov	r1, r0
 80136b4:	4607      	mov	r7, r0
 80136b6:	9804      	ldr	r0, [sp, #16]
 80136b8:	f000 fd4c 	bl	8014154 <__mcmp>
 80136bc:	2800      	cmp	r0, #0
 80136be:	f73f adcc 	bgt.w	801325a <_dtoa_r+0x48a>
 80136c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136c4:	465d      	mov	r5, fp
 80136c6:	ea6f 0a03 	mvn.w	sl, r3
 80136ca:	f04f 0900 	mov.w	r9, #0
 80136ce:	4639      	mov	r1, r7
 80136d0:	4620      	mov	r0, r4
 80136d2:	f000 fb5d 	bl	8013d90 <_Bfree>
 80136d6:	2e00      	cmp	r6, #0
 80136d8:	f43f aeb7 	beq.w	801344a <_dtoa_r+0x67a>
 80136dc:	f1b9 0f00 	cmp.w	r9, #0
 80136e0:	d005      	beq.n	80136ee <_dtoa_r+0x91e>
 80136e2:	45b1      	cmp	r9, r6
 80136e4:	d003      	beq.n	80136ee <_dtoa_r+0x91e>
 80136e6:	4649      	mov	r1, r9
 80136e8:	4620      	mov	r0, r4
 80136ea:	f000 fb51 	bl	8013d90 <_Bfree>
 80136ee:	4631      	mov	r1, r6
 80136f0:	4620      	mov	r0, r4
 80136f2:	f000 fb4d 	bl	8013d90 <_Bfree>
 80136f6:	e6a8      	b.n	801344a <_dtoa_r+0x67a>
 80136f8:	2700      	movs	r7, #0
 80136fa:	463e      	mov	r6, r7
 80136fc:	e7e1      	b.n	80136c2 <_dtoa_r+0x8f2>
 80136fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013702:	463e      	mov	r6, r7
 8013704:	e5a9      	b.n	801325a <_dtoa_r+0x48a>
 8013706:	bf00      	nop
 8013708:	40240000 	.word	0x40240000
 801370c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801370e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 80fa 	beq.w	801390c <_dtoa_r+0xb3c>
 8013718:	2d00      	cmp	r5, #0
 801371a:	dd05      	ble.n	8013728 <_dtoa_r+0x958>
 801371c:	4631      	mov	r1, r6
 801371e:	462a      	mov	r2, r5
 8013720:	4620      	mov	r0, r4
 8013722:	f000 fcc3 	bl	80140ac <__lshift>
 8013726:	4606      	mov	r6, r0
 8013728:	9b07      	ldr	r3, [sp, #28]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d04c      	beq.n	80137c8 <_dtoa_r+0x9f8>
 801372e:	6871      	ldr	r1, [r6, #4]
 8013730:	4620      	mov	r0, r4
 8013732:	f000 faf9 	bl	8013d28 <_Balloc>
 8013736:	6932      	ldr	r2, [r6, #16]
 8013738:	3202      	adds	r2, #2
 801373a:	4605      	mov	r5, r0
 801373c:	0092      	lsls	r2, r2, #2
 801373e:	f106 010c 	add.w	r1, r6, #12
 8013742:	300c      	adds	r0, #12
 8013744:	f7fe fc54 	bl	8011ff0 <memcpy>
 8013748:	2201      	movs	r2, #1
 801374a:	4629      	mov	r1, r5
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fcad 	bl	80140ac <__lshift>
 8013752:	9b00      	ldr	r3, [sp, #0]
 8013754:	f8cd b014 	str.w	fp, [sp, #20]
 8013758:	f003 0301 	and.w	r3, r3, #1
 801375c:	46b1      	mov	r9, r6
 801375e:	9307      	str	r3, [sp, #28]
 8013760:	4606      	mov	r6, r0
 8013762:	4639      	mov	r1, r7
 8013764:	9804      	ldr	r0, [sp, #16]
 8013766:	f7ff faa5 	bl	8012cb4 <quorem>
 801376a:	4649      	mov	r1, r9
 801376c:	4605      	mov	r5, r0
 801376e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013772:	9804      	ldr	r0, [sp, #16]
 8013774:	f000 fcee 	bl	8014154 <__mcmp>
 8013778:	4632      	mov	r2, r6
 801377a:	9000      	str	r0, [sp, #0]
 801377c:	4639      	mov	r1, r7
 801377e:	4620      	mov	r0, r4
 8013780:	f000 fd02 	bl	8014188 <__mdiff>
 8013784:	68c3      	ldr	r3, [r0, #12]
 8013786:	4602      	mov	r2, r0
 8013788:	bb03      	cbnz	r3, 80137cc <_dtoa_r+0x9fc>
 801378a:	4601      	mov	r1, r0
 801378c:	9008      	str	r0, [sp, #32]
 801378e:	9804      	ldr	r0, [sp, #16]
 8013790:	f000 fce0 	bl	8014154 <__mcmp>
 8013794:	9a08      	ldr	r2, [sp, #32]
 8013796:	4603      	mov	r3, r0
 8013798:	4611      	mov	r1, r2
 801379a:	4620      	mov	r0, r4
 801379c:	9308      	str	r3, [sp, #32]
 801379e:	f000 faf7 	bl	8013d90 <_Bfree>
 80137a2:	9b08      	ldr	r3, [sp, #32]
 80137a4:	b9a3      	cbnz	r3, 80137d0 <_dtoa_r+0xa00>
 80137a6:	9a06      	ldr	r2, [sp, #24]
 80137a8:	b992      	cbnz	r2, 80137d0 <_dtoa_r+0xa00>
 80137aa:	9a07      	ldr	r2, [sp, #28]
 80137ac:	b982      	cbnz	r2, 80137d0 <_dtoa_r+0xa00>
 80137ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80137b2:	d029      	beq.n	8013808 <_dtoa_r+0xa38>
 80137b4:	9b00      	ldr	r3, [sp, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	dd01      	ble.n	80137be <_dtoa_r+0x9ee>
 80137ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80137be:	9b05      	ldr	r3, [sp, #20]
 80137c0:	1c5d      	adds	r5, r3, #1
 80137c2:	f883 8000 	strb.w	r8, [r3]
 80137c6:	e782      	b.n	80136ce <_dtoa_r+0x8fe>
 80137c8:	4630      	mov	r0, r6
 80137ca:	e7c2      	b.n	8013752 <_dtoa_r+0x982>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e7e3      	b.n	8013798 <_dtoa_r+0x9c8>
 80137d0:	9a00      	ldr	r2, [sp, #0]
 80137d2:	2a00      	cmp	r2, #0
 80137d4:	db04      	blt.n	80137e0 <_dtoa_r+0xa10>
 80137d6:	d125      	bne.n	8013824 <_dtoa_r+0xa54>
 80137d8:	9a06      	ldr	r2, [sp, #24]
 80137da:	bb1a      	cbnz	r2, 8013824 <_dtoa_r+0xa54>
 80137dc:	9a07      	ldr	r2, [sp, #28]
 80137de:	bb0a      	cbnz	r2, 8013824 <_dtoa_r+0xa54>
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	ddec      	ble.n	80137be <_dtoa_r+0x9ee>
 80137e4:	2201      	movs	r2, #1
 80137e6:	9904      	ldr	r1, [sp, #16]
 80137e8:	4620      	mov	r0, r4
 80137ea:	f000 fc5f 	bl	80140ac <__lshift>
 80137ee:	4639      	mov	r1, r7
 80137f0:	9004      	str	r0, [sp, #16]
 80137f2:	f000 fcaf 	bl	8014154 <__mcmp>
 80137f6:	2800      	cmp	r0, #0
 80137f8:	dc03      	bgt.n	8013802 <_dtoa_r+0xa32>
 80137fa:	d1e0      	bne.n	80137be <_dtoa_r+0x9ee>
 80137fc:	f018 0f01 	tst.w	r8, #1
 8013800:	d0dd      	beq.n	80137be <_dtoa_r+0x9ee>
 8013802:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013806:	d1d8      	bne.n	80137ba <_dtoa_r+0x9ea>
 8013808:	9b05      	ldr	r3, [sp, #20]
 801380a:	9a05      	ldr	r2, [sp, #20]
 801380c:	1c5d      	adds	r5, r3, #1
 801380e:	2339      	movs	r3, #57	; 0x39
 8013810:	7013      	strb	r3, [r2, #0]
 8013812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013816:	2b39      	cmp	r3, #57	; 0x39
 8013818:	f105 32ff 	add.w	r2, r5, #4294967295
 801381c:	d04f      	beq.n	80138be <_dtoa_r+0xaee>
 801381e:	3301      	adds	r3, #1
 8013820:	7013      	strb	r3, [r2, #0]
 8013822:	e754      	b.n	80136ce <_dtoa_r+0x8fe>
 8013824:	9a05      	ldr	r2, [sp, #20]
 8013826:	2b00      	cmp	r3, #0
 8013828:	f102 0501 	add.w	r5, r2, #1
 801382c:	dd06      	ble.n	801383c <_dtoa_r+0xa6c>
 801382e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013832:	d0e9      	beq.n	8013808 <_dtoa_r+0xa38>
 8013834:	f108 0801 	add.w	r8, r8, #1
 8013838:	9b05      	ldr	r3, [sp, #20]
 801383a:	e7c2      	b.n	80137c2 <_dtoa_r+0x9f2>
 801383c:	9a02      	ldr	r2, [sp, #8]
 801383e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013842:	eba5 030b 	sub.w	r3, r5, fp
 8013846:	4293      	cmp	r3, r2
 8013848:	d021      	beq.n	801388e <_dtoa_r+0xabe>
 801384a:	2300      	movs	r3, #0
 801384c:	220a      	movs	r2, #10
 801384e:	9904      	ldr	r1, [sp, #16]
 8013850:	4620      	mov	r0, r4
 8013852:	f000 fab4 	bl	8013dbe <__multadd>
 8013856:	45b1      	cmp	r9, r6
 8013858:	9004      	str	r0, [sp, #16]
 801385a:	f04f 0300 	mov.w	r3, #0
 801385e:	f04f 020a 	mov.w	r2, #10
 8013862:	4649      	mov	r1, r9
 8013864:	4620      	mov	r0, r4
 8013866:	d105      	bne.n	8013874 <_dtoa_r+0xaa4>
 8013868:	f000 faa9 	bl	8013dbe <__multadd>
 801386c:	4681      	mov	r9, r0
 801386e:	4606      	mov	r6, r0
 8013870:	9505      	str	r5, [sp, #20]
 8013872:	e776      	b.n	8013762 <_dtoa_r+0x992>
 8013874:	f000 faa3 	bl	8013dbe <__multadd>
 8013878:	4631      	mov	r1, r6
 801387a:	4681      	mov	r9, r0
 801387c:	2300      	movs	r3, #0
 801387e:	220a      	movs	r2, #10
 8013880:	4620      	mov	r0, r4
 8013882:	f000 fa9c 	bl	8013dbe <__multadd>
 8013886:	4606      	mov	r6, r0
 8013888:	e7f2      	b.n	8013870 <_dtoa_r+0xaa0>
 801388a:	f04f 0900 	mov.w	r9, #0
 801388e:	2201      	movs	r2, #1
 8013890:	9904      	ldr	r1, [sp, #16]
 8013892:	4620      	mov	r0, r4
 8013894:	f000 fc0a 	bl	80140ac <__lshift>
 8013898:	4639      	mov	r1, r7
 801389a:	9004      	str	r0, [sp, #16]
 801389c:	f000 fc5a 	bl	8014154 <__mcmp>
 80138a0:	2800      	cmp	r0, #0
 80138a2:	dcb6      	bgt.n	8013812 <_dtoa_r+0xa42>
 80138a4:	d102      	bne.n	80138ac <_dtoa_r+0xadc>
 80138a6:	f018 0f01 	tst.w	r8, #1
 80138aa:	d1b2      	bne.n	8013812 <_dtoa_r+0xa42>
 80138ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80138b0:	2b30      	cmp	r3, #48	; 0x30
 80138b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80138b6:	f47f af0a 	bne.w	80136ce <_dtoa_r+0x8fe>
 80138ba:	4615      	mov	r5, r2
 80138bc:	e7f6      	b.n	80138ac <_dtoa_r+0xadc>
 80138be:	4593      	cmp	fp, r2
 80138c0:	d105      	bne.n	80138ce <_dtoa_r+0xafe>
 80138c2:	2331      	movs	r3, #49	; 0x31
 80138c4:	f10a 0a01 	add.w	sl, sl, #1
 80138c8:	f88b 3000 	strb.w	r3, [fp]
 80138cc:	e6ff      	b.n	80136ce <_dtoa_r+0x8fe>
 80138ce:	4615      	mov	r5, r2
 80138d0:	e79f      	b.n	8013812 <_dtoa_r+0xa42>
 80138d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013938 <_dtoa_r+0xb68>
 80138d6:	e007      	b.n	80138e8 <_dtoa_r+0xb18>
 80138d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801393c <_dtoa_r+0xb6c>
 80138de:	b11b      	cbz	r3, 80138e8 <_dtoa_r+0xb18>
 80138e0:	f10b 0308 	add.w	r3, fp, #8
 80138e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80138e6:	6013      	str	r3, [r2, #0]
 80138e8:	4658      	mov	r0, fp
 80138ea:	b017      	add	sp, #92	; 0x5c
 80138ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f0:	9b06      	ldr	r3, [sp, #24]
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	f77f ae35 	ble.w	8013562 <_dtoa_r+0x792>
 80138f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138fa:	9307      	str	r3, [sp, #28]
 80138fc:	e649      	b.n	8013592 <_dtoa_r+0x7c2>
 80138fe:	9b02      	ldr	r3, [sp, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	dc03      	bgt.n	801390c <_dtoa_r+0xb3c>
 8013904:	9b06      	ldr	r3, [sp, #24]
 8013906:	2b02      	cmp	r3, #2
 8013908:	f73f aecc 	bgt.w	80136a4 <_dtoa_r+0x8d4>
 801390c:	465d      	mov	r5, fp
 801390e:	4639      	mov	r1, r7
 8013910:	9804      	ldr	r0, [sp, #16]
 8013912:	f7ff f9cf 	bl	8012cb4 <quorem>
 8013916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801391a:	f805 8b01 	strb.w	r8, [r5], #1
 801391e:	9a02      	ldr	r2, [sp, #8]
 8013920:	eba5 030b 	sub.w	r3, r5, fp
 8013924:	429a      	cmp	r2, r3
 8013926:	ddb0      	ble.n	801388a <_dtoa_r+0xaba>
 8013928:	2300      	movs	r3, #0
 801392a:	220a      	movs	r2, #10
 801392c:	9904      	ldr	r1, [sp, #16]
 801392e:	4620      	mov	r0, r4
 8013930:	f000 fa45 	bl	8013dbe <__multadd>
 8013934:	9004      	str	r0, [sp, #16]
 8013936:	e7ea      	b.n	801390e <_dtoa_r+0xb3e>
 8013938:	08014ab8 	.word	0x08014ab8
 801393c:	08014adc 	.word	0x08014adc

08013940 <__sflush_r>:
 8013940:	898a      	ldrh	r2, [r1, #12]
 8013942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013946:	4605      	mov	r5, r0
 8013948:	0710      	lsls	r0, r2, #28
 801394a:	460c      	mov	r4, r1
 801394c:	d458      	bmi.n	8013a00 <__sflush_r+0xc0>
 801394e:	684b      	ldr	r3, [r1, #4]
 8013950:	2b00      	cmp	r3, #0
 8013952:	dc05      	bgt.n	8013960 <__sflush_r+0x20>
 8013954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013956:	2b00      	cmp	r3, #0
 8013958:	dc02      	bgt.n	8013960 <__sflush_r+0x20>
 801395a:	2000      	movs	r0, #0
 801395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013962:	2e00      	cmp	r6, #0
 8013964:	d0f9      	beq.n	801395a <__sflush_r+0x1a>
 8013966:	2300      	movs	r3, #0
 8013968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801396c:	682f      	ldr	r7, [r5, #0]
 801396e:	6a21      	ldr	r1, [r4, #32]
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	d032      	beq.n	80139da <__sflush_r+0x9a>
 8013974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013976:	89a3      	ldrh	r3, [r4, #12]
 8013978:	075a      	lsls	r2, r3, #29
 801397a:	d505      	bpl.n	8013988 <__sflush_r+0x48>
 801397c:	6863      	ldr	r3, [r4, #4]
 801397e:	1ac0      	subs	r0, r0, r3
 8013980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013982:	b10b      	cbz	r3, 8013988 <__sflush_r+0x48>
 8013984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013986:	1ac0      	subs	r0, r0, r3
 8013988:	2300      	movs	r3, #0
 801398a:	4602      	mov	r2, r0
 801398c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801398e:	6a21      	ldr	r1, [r4, #32]
 8013990:	4628      	mov	r0, r5
 8013992:	47b0      	blx	r6
 8013994:	1c43      	adds	r3, r0, #1
 8013996:	89a3      	ldrh	r3, [r4, #12]
 8013998:	d106      	bne.n	80139a8 <__sflush_r+0x68>
 801399a:	6829      	ldr	r1, [r5, #0]
 801399c:	291d      	cmp	r1, #29
 801399e:	d848      	bhi.n	8013a32 <__sflush_r+0xf2>
 80139a0:	4a29      	ldr	r2, [pc, #164]	; (8013a48 <__sflush_r+0x108>)
 80139a2:	40ca      	lsrs	r2, r1
 80139a4:	07d6      	lsls	r6, r2, #31
 80139a6:	d544      	bpl.n	8013a32 <__sflush_r+0xf2>
 80139a8:	2200      	movs	r2, #0
 80139aa:	6062      	str	r2, [r4, #4]
 80139ac:	04d9      	lsls	r1, r3, #19
 80139ae:	6922      	ldr	r2, [r4, #16]
 80139b0:	6022      	str	r2, [r4, #0]
 80139b2:	d504      	bpl.n	80139be <__sflush_r+0x7e>
 80139b4:	1c42      	adds	r2, r0, #1
 80139b6:	d101      	bne.n	80139bc <__sflush_r+0x7c>
 80139b8:	682b      	ldr	r3, [r5, #0]
 80139ba:	b903      	cbnz	r3, 80139be <__sflush_r+0x7e>
 80139bc:	6560      	str	r0, [r4, #84]	; 0x54
 80139be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139c0:	602f      	str	r7, [r5, #0]
 80139c2:	2900      	cmp	r1, #0
 80139c4:	d0c9      	beq.n	801395a <__sflush_r+0x1a>
 80139c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139ca:	4299      	cmp	r1, r3
 80139cc:	d002      	beq.n	80139d4 <__sflush_r+0x94>
 80139ce:	4628      	mov	r0, r5
 80139d0:	f000 fc94 	bl	80142fc <_free_r>
 80139d4:	2000      	movs	r0, #0
 80139d6:	6360      	str	r0, [r4, #52]	; 0x34
 80139d8:	e7c0      	b.n	801395c <__sflush_r+0x1c>
 80139da:	2301      	movs	r3, #1
 80139dc:	4628      	mov	r0, r5
 80139de:	47b0      	blx	r6
 80139e0:	1c41      	adds	r1, r0, #1
 80139e2:	d1c8      	bne.n	8013976 <__sflush_r+0x36>
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d0c5      	beq.n	8013976 <__sflush_r+0x36>
 80139ea:	2b1d      	cmp	r3, #29
 80139ec:	d001      	beq.n	80139f2 <__sflush_r+0xb2>
 80139ee:	2b16      	cmp	r3, #22
 80139f0:	d101      	bne.n	80139f6 <__sflush_r+0xb6>
 80139f2:	602f      	str	r7, [r5, #0]
 80139f4:	e7b1      	b.n	801395a <__sflush_r+0x1a>
 80139f6:	89a3      	ldrh	r3, [r4, #12]
 80139f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139fc:	81a3      	strh	r3, [r4, #12]
 80139fe:	e7ad      	b.n	801395c <__sflush_r+0x1c>
 8013a00:	690f      	ldr	r7, [r1, #16]
 8013a02:	2f00      	cmp	r7, #0
 8013a04:	d0a9      	beq.n	801395a <__sflush_r+0x1a>
 8013a06:	0793      	lsls	r3, r2, #30
 8013a08:	680e      	ldr	r6, [r1, #0]
 8013a0a:	bf08      	it	eq
 8013a0c:	694b      	ldreq	r3, [r1, #20]
 8013a0e:	600f      	str	r7, [r1, #0]
 8013a10:	bf18      	it	ne
 8013a12:	2300      	movne	r3, #0
 8013a14:	eba6 0807 	sub.w	r8, r6, r7
 8013a18:	608b      	str	r3, [r1, #8]
 8013a1a:	f1b8 0f00 	cmp.w	r8, #0
 8013a1e:	dd9c      	ble.n	801395a <__sflush_r+0x1a>
 8013a20:	4643      	mov	r3, r8
 8013a22:	463a      	mov	r2, r7
 8013a24:	6a21      	ldr	r1, [r4, #32]
 8013a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a28:	4628      	mov	r0, r5
 8013a2a:	47b0      	blx	r6
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	dc06      	bgt.n	8013a3e <__sflush_r+0xfe>
 8013a30:	89a3      	ldrh	r3, [r4, #12]
 8013a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a36:	81a3      	strh	r3, [r4, #12]
 8013a38:	f04f 30ff 	mov.w	r0, #4294967295
 8013a3c:	e78e      	b.n	801395c <__sflush_r+0x1c>
 8013a3e:	4407      	add	r7, r0
 8013a40:	eba8 0800 	sub.w	r8, r8, r0
 8013a44:	e7e9      	b.n	8013a1a <__sflush_r+0xda>
 8013a46:	bf00      	nop
 8013a48:	20400001 	.word	0x20400001

08013a4c <_fflush_r>:
 8013a4c:	b538      	push	{r3, r4, r5, lr}
 8013a4e:	690b      	ldr	r3, [r1, #16]
 8013a50:	4605      	mov	r5, r0
 8013a52:	460c      	mov	r4, r1
 8013a54:	b1db      	cbz	r3, 8013a8e <_fflush_r+0x42>
 8013a56:	b118      	cbz	r0, 8013a60 <_fflush_r+0x14>
 8013a58:	6983      	ldr	r3, [r0, #24]
 8013a5a:	b90b      	cbnz	r3, 8013a60 <_fflush_r+0x14>
 8013a5c:	f000 f860 	bl	8013b20 <__sinit>
 8013a60:	4b0c      	ldr	r3, [pc, #48]	; (8013a94 <_fflush_r+0x48>)
 8013a62:	429c      	cmp	r4, r3
 8013a64:	d109      	bne.n	8013a7a <_fflush_r+0x2e>
 8013a66:	686c      	ldr	r4, [r5, #4]
 8013a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a6c:	b17b      	cbz	r3, 8013a8e <_fflush_r+0x42>
 8013a6e:	4621      	mov	r1, r4
 8013a70:	4628      	mov	r0, r5
 8013a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a76:	f7ff bf63 	b.w	8013940 <__sflush_r>
 8013a7a:	4b07      	ldr	r3, [pc, #28]	; (8013a98 <_fflush_r+0x4c>)
 8013a7c:	429c      	cmp	r4, r3
 8013a7e:	d101      	bne.n	8013a84 <_fflush_r+0x38>
 8013a80:	68ac      	ldr	r4, [r5, #8]
 8013a82:	e7f1      	b.n	8013a68 <_fflush_r+0x1c>
 8013a84:	4b05      	ldr	r3, [pc, #20]	; (8013a9c <_fflush_r+0x50>)
 8013a86:	429c      	cmp	r4, r3
 8013a88:	bf08      	it	eq
 8013a8a:	68ec      	ldreq	r4, [r5, #12]
 8013a8c:	e7ec      	b.n	8013a68 <_fflush_r+0x1c>
 8013a8e:	2000      	movs	r0, #0
 8013a90:	bd38      	pop	{r3, r4, r5, pc}
 8013a92:	bf00      	nop
 8013a94:	08014b0c 	.word	0x08014b0c
 8013a98:	08014b2c 	.word	0x08014b2c
 8013a9c:	08014aec 	.word	0x08014aec

08013aa0 <std>:
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	b510      	push	{r4, lr}
 8013aa4:	4604      	mov	r4, r0
 8013aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8013aaa:	6083      	str	r3, [r0, #8]
 8013aac:	8181      	strh	r1, [r0, #12]
 8013aae:	6643      	str	r3, [r0, #100]	; 0x64
 8013ab0:	81c2      	strh	r2, [r0, #14]
 8013ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ab6:	6183      	str	r3, [r0, #24]
 8013ab8:	4619      	mov	r1, r3
 8013aba:	2208      	movs	r2, #8
 8013abc:	305c      	adds	r0, #92	; 0x5c
 8013abe:	f7fe faa2 	bl	8012006 <memset>
 8013ac2:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <std+0x38>)
 8013ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8013ac6:	4b05      	ldr	r3, [pc, #20]	; (8013adc <std+0x3c>)
 8013ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8013aca:	4b05      	ldr	r3, [pc, #20]	; (8013ae0 <std+0x40>)
 8013acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013ace:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <std+0x44>)
 8013ad0:	6224      	str	r4, [r4, #32]
 8013ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8013ad4:	bd10      	pop	{r4, pc}
 8013ad6:	bf00      	nop
 8013ad8:	080146ed 	.word	0x080146ed
 8013adc:	0801470f 	.word	0x0801470f
 8013ae0:	08014747 	.word	0x08014747
 8013ae4:	0801476b 	.word	0x0801476b

08013ae8 <_cleanup_r>:
 8013ae8:	4901      	ldr	r1, [pc, #4]	; (8013af0 <_cleanup_r+0x8>)
 8013aea:	f000 b885 	b.w	8013bf8 <_fwalk_reent>
 8013aee:	bf00      	nop
 8013af0:	08013a4d 	.word	0x08013a4d

08013af4 <__sfmoreglue>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	1e4a      	subs	r2, r1, #1
 8013af8:	2568      	movs	r5, #104	; 0x68
 8013afa:	4355      	muls	r5, r2
 8013afc:	460e      	mov	r6, r1
 8013afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b02:	f000 fc49 	bl	8014398 <_malloc_r>
 8013b06:	4604      	mov	r4, r0
 8013b08:	b140      	cbz	r0, 8013b1c <__sfmoreglue+0x28>
 8013b0a:	2100      	movs	r1, #0
 8013b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8013b10:	300c      	adds	r0, #12
 8013b12:	60a0      	str	r0, [r4, #8]
 8013b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b18:	f7fe fa75 	bl	8012006 <memset>
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}

08013b20 <__sinit>:
 8013b20:	6983      	ldr	r3, [r0, #24]
 8013b22:	b510      	push	{r4, lr}
 8013b24:	4604      	mov	r4, r0
 8013b26:	bb33      	cbnz	r3, 8013b76 <__sinit+0x56>
 8013b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8013b2e:	4b12      	ldr	r3, [pc, #72]	; (8013b78 <__sinit+0x58>)
 8013b30:	4a12      	ldr	r2, [pc, #72]	; (8013b7c <__sinit+0x5c>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	6282      	str	r2, [r0, #40]	; 0x28
 8013b36:	4298      	cmp	r0, r3
 8013b38:	bf04      	itt	eq
 8013b3a:	2301      	moveq	r3, #1
 8013b3c:	6183      	streq	r3, [r0, #24]
 8013b3e:	f000 f81f 	bl	8013b80 <__sfp>
 8013b42:	6060      	str	r0, [r4, #4]
 8013b44:	4620      	mov	r0, r4
 8013b46:	f000 f81b 	bl	8013b80 <__sfp>
 8013b4a:	60a0      	str	r0, [r4, #8]
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f000 f817 	bl	8013b80 <__sfp>
 8013b52:	2200      	movs	r2, #0
 8013b54:	60e0      	str	r0, [r4, #12]
 8013b56:	2104      	movs	r1, #4
 8013b58:	6860      	ldr	r0, [r4, #4]
 8013b5a:	f7ff ffa1 	bl	8013aa0 <std>
 8013b5e:	2201      	movs	r2, #1
 8013b60:	2109      	movs	r1, #9
 8013b62:	68a0      	ldr	r0, [r4, #8]
 8013b64:	f7ff ff9c 	bl	8013aa0 <std>
 8013b68:	2202      	movs	r2, #2
 8013b6a:	2112      	movs	r1, #18
 8013b6c:	68e0      	ldr	r0, [r4, #12]
 8013b6e:	f7ff ff97 	bl	8013aa0 <std>
 8013b72:	2301      	movs	r3, #1
 8013b74:	61a3      	str	r3, [r4, #24]
 8013b76:	bd10      	pop	{r4, pc}
 8013b78:	08014aa4 	.word	0x08014aa4
 8013b7c:	08013ae9 	.word	0x08013ae9

08013b80 <__sfp>:
 8013b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b82:	4b1b      	ldr	r3, [pc, #108]	; (8013bf0 <__sfp+0x70>)
 8013b84:	681e      	ldr	r6, [r3, #0]
 8013b86:	69b3      	ldr	r3, [r6, #24]
 8013b88:	4607      	mov	r7, r0
 8013b8a:	b913      	cbnz	r3, 8013b92 <__sfp+0x12>
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff ffc7 	bl	8013b20 <__sinit>
 8013b92:	3648      	adds	r6, #72	; 0x48
 8013b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	d503      	bpl.n	8013ba4 <__sfp+0x24>
 8013b9c:	6833      	ldr	r3, [r6, #0]
 8013b9e:	b133      	cbz	r3, 8013bae <__sfp+0x2e>
 8013ba0:	6836      	ldr	r6, [r6, #0]
 8013ba2:	e7f7      	b.n	8013b94 <__sfp+0x14>
 8013ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ba8:	b16d      	cbz	r5, 8013bc6 <__sfp+0x46>
 8013baa:	3468      	adds	r4, #104	; 0x68
 8013bac:	e7f4      	b.n	8013b98 <__sfp+0x18>
 8013bae:	2104      	movs	r1, #4
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	f7ff ff9f 	bl	8013af4 <__sfmoreglue>
 8013bb6:	6030      	str	r0, [r6, #0]
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d1f1      	bne.n	8013ba0 <__sfp+0x20>
 8013bbc:	230c      	movs	r3, #12
 8013bbe:	603b      	str	r3, [r7, #0]
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc6:	4b0b      	ldr	r3, [pc, #44]	; (8013bf4 <__sfp+0x74>)
 8013bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8013bca:	e9c4 5500 	strd	r5, r5, [r4]
 8013bce:	60a5      	str	r5, [r4, #8]
 8013bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013bd8:	2208      	movs	r2, #8
 8013bda:	4629      	mov	r1, r5
 8013bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013be0:	f7fe fa11 	bl	8012006 <memset>
 8013be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013bec:	e7e9      	b.n	8013bc2 <__sfp+0x42>
 8013bee:	bf00      	nop
 8013bf0:	08014aa4 	.word	0x08014aa4
 8013bf4:	ffff0001 	.word	0xffff0001

08013bf8 <_fwalk_reent>:
 8013bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	4689      	mov	r9, r1
 8013c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c04:	2600      	movs	r6, #0
 8013c06:	b914      	cbnz	r4, 8013c0e <_fwalk_reent+0x16>
 8013c08:	4630      	mov	r0, r6
 8013c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013c12:	3f01      	subs	r7, #1
 8013c14:	d501      	bpl.n	8013c1a <_fwalk_reent+0x22>
 8013c16:	6824      	ldr	r4, [r4, #0]
 8013c18:	e7f5      	b.n	8013c06 <_fwalk_reent+0xe>
 8013c1a:	89ab      	ldrh	r3, [r5, #12]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d907      	bls.n	8013c30 <_fwalk_reent+0x38>
 8013c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c24:	3301      	adds	r3, #1
 8013c26:	d003      	beq.n	8013c30 <_fwalk_reent+0x38>
 8013c28:	4629      	mov	r1, r5
 8013c2a:	4640      	mov	r0, r8
 8013c2c:	47c8      	blx	r9
 8013c2e:	4306      	orrs	r6, r0
 8013c30:	3568      	adds	r5, #104	; 0x68
 8013c32:	e7ee      	b.n	8013c12 <_fwalk_reent+0x1a>

08013c34 <_localeconv_r>:
 8013c34:	4b04      	ldr	r3, [pc, #16]	; (8013c48 <_localeconv_r+0x14>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	6a18      	ldr	r0, [r3, #32]
 8013c3a:	4b04      	ldr	r3, [pc, #16]	; (8013c4c <_localeconv_r+0x18>)
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	bf08      	it	eq
 8013c40:	4618      	moveq	r0, r3
 8013c42:	30f0      	adds	r0, #240	; 0xf0
 8013c44:	4770      	bx	lr
 8013c46:	bf00      	nop
 8013c48:	20000010 	.word	0x20000010
 8013c4c:	20000074 	.word	0x20000074

08013c50 <__swhatbuf_r>:
 8013c50:	b570      	push	{r4, r5, r6, lr}
 8013c52:	460e      	mov	r6, r1
 8013c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c58:	2900      	cmp	r1, #0
 8013c5a:	b096      	sub	sp, #88	; 0x58
 8013c5c:	4614      	mov	r4, r2
 8013c5e:	461d      	mov	r5, r3
 8013c60:	da07      	bge.n	8013c72 <__swhatbuf_r+0x22>
 8013c62:	2300      	movs	r3, #0
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	89b3      	ldrh	r3, [r6, #12]
 8013c68:	061a      	lsls	r2, r3, #24
 8013c6a:	d410      	bmi.n	8013c8e <__swhatbuf_r+0x3e>
 8013c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c70:	e00e      	b.n	8013c90 <__swhatbuf_r+0x40>
 8013c72:	466a      	mov	r2, sp
 8013c74:	f000 fda0 	bl	80147b8 <_fstat_r>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	dbf2      	blt.n	8013c62 <__swhatbuf_r+0x12>
 8013c7c:	9a01      	ldr	r2, [sp, #4]
 8013c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013c86:	425a      	negs	r2, r3
 8013c88:	415a      	adcs	r2, r3
 8013c8a:	602a      	str	r2, [r5, #0]
 8013c8c:	e7ee      	b.n	8013c6c <__swhatbuf_r+0x1c>
 8013c8e:	2340      	movs	r3, #64	; 0x40
 8013c90:	2000      	movs	r0, #0
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	b016      	add	sp, #88	; 0x58
 8013c96:	bd70      	pop	{r4, r5, r6, pc}

08013c98 <__smakebuf_r>:
 8013c98:	898b      	ldrh	r3, [r1, #12]
 8013c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c9c:	079d      	lsls	r5, r3, #30
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	460c      	mov	r4, r1
 8013ca2:	d507      	bpl.n	8013cb4 <__smakebuf_r+0x1c>
 8013ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ca8:	6023      	str	r3, [r4, #0]
 8013caa:	6123      	str	r3, [r4, #16]
 8013cac:	2301      	movs	r3, #1
 8013cae:	6163      	str	r3, [r4, #20]
 8013cb0:	b002      	add	sp, #8
 8013cb2:	bd70      	pop	{r4, r5, r6, pc}
 8013cb4:	ab01      	add	r3, sp, #4
 8013cb6:	466a      	mov	r2, sp
 8013cb8:	f7ff ffca 	bl	8013c50 <__swhatbuf_r>
 8013cbc:	9900      	ldr	r1, [sp, #0]
 8013cbe:	4605      	mov	r5, r0
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f000 fb69 	bl	8014398 <_malloc_r>
 8013cc6:	b948      	cbnz	r0, 8013cdc <__smakebuf_r+0x44>
 8013cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ccc:	059a      	lsls	r2, r3, #22
 8013cce:	d4ef      	bmi.n	8013cb0 <__smakebuf_r+0x18>
 8013cd0:	f023 0303 	bic.w	r3, r3, #3
 8013cd4:	f043 0302 	orr.w	r3, r3, #2
 8013cd8:	81a3      	strh	r3, [r4, #12]
 8013cda:	e7e3      	b.n	8013ca4 <__smakebuf_r+0xc>
 8013cdc:	4b0d      	ldr	r3, [pc, #52]	; (8013d14 <__smakebuf_r+0x7c>)
 8013cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	6020      	str	r0, [r4, #0]
 8013ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ce8:	81a3      	strh	r3, [r4, #12]
 8013cea:	9b00      	ldr	r3, [sp, #0]
 8013cec:	6163      	str	r3, [r4, #20]
 8013cee:	9b01      	ldr	r3, [sp, #4]
 8013cf0:	6120      	str	r0, [r4, #16]
 8013cf2:	b15b      	cbz	r3, 8013d0c <__smakebuf_r+0x74>
 8013cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	f000 fd6f 	bl	80147dc <_isatty_r>
 8013cfe:	b128      	cbz	r0, 8013d0c <__smakebuf_r+0x74>
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	f023 0303 	bic.w	r3, r3, #3
 8013d06:	f043 0301 	orr.w	r3, r3, #1
 8013d0a:	81a3      	strh	r3, [r4, #12]
 8013d0c:	89a3      	ldrh	r3, [r4, #12]
 8013d0e:	431d      	orrs	r5, r3
 8013d10:	81a5      	strh	r5, [r4, #12]
 8013d12:	e7cd      	b.n	8013cb0 <__smakebuf_r+0x18>
 8013d14:	08013ae9 	.word	0x08013ae9

08013d18 <malloc>:
 8013d18:	4b02      	ldr	r3, [pc, #8]	; (8013d24 <malloc+0xc>)
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	6818      	ldr	r0, [r3, #0]
 8013d1e:	f000 bb3b 	b.w	8014398 <_malloc_r>
 8013d22:	bf00      	nop
 8013d24:	20000010 	.word	0x20000010

08013d28 <_Balloc>:
 8013d28:	b570      	push	{r4, r5, r6, lr}
 8013d2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	460e      	mov	r6, r1
 8013d30:	b93d      	cbnz	r5, 8013d42 <_Balloc+0x1a>
 8013d32:	2010      	movs	r0, #16
 8013d34:	f7ff fff0 	bl	8013d18 <malloc>
 8013d38:	6260      	str	r0, [r4, #36]	; 0x24
 8013d3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d3e:	6005      	str	r5, [r0, #0]
 8013d40:	60c5      	str	r5, [r0, #12]
 8013d42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013d44:	68eb      	ldr	r3, [r5, #12]
 8013d46:	b183      	cbz	r3, 8013d6a <_Balloc+0x42>
 8013d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013d50:	b9b8      	cbnz	r0, 8013d82 <_Balloc+0x5a>
 8013d52:	2101      	movs	r1, #1
 8013d54:	fa01 f506 	lsl.w	r5, r1, r6
 8013d58:	1d6a      	adds	r2, r5, #5
 8013d5a:	0092      	lsls	r2, r2, #2
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f000 fabf 	bl	80142e0 <_calloc_r>
 8013d62:	b160      	cbz	r0, 8013d7e <_Balloc+0x56>
 8013d64:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013d68:	e00e      	b.n	8013d88 <_Balloc+0x60>
 8013d6a:	2221      	movs	r2, #33	; 0x21
 8013d6c:	2104      	movs	r1, #4
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f000 fab6 	bl	80142e0 <_calloc_r>
 8013d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d76:	60e8      	str	r0, [r5, #12]
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d1e4      	bne.n	8013d48 <_Balloc+0x20>
 8013d7e:	2000      	movs	r0, #0
 8013d80:	bd70      	pop	{r4, r5, r6, pc}
 8013d82:	6802      	ldr	r2, [r0, #0]
 8013d84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013d88:	2300      	movs	r3, #0
 8013d8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d8e:	e7f7      	b.n	8013d80 <_Balloc+0x58>

08013d90 <_Bfree>:
 8013d90:	b570      	push	{r4, r5, r6, lr}
 8013d92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013d94:	4606      	mov	r6, r0
 8013d96:	460d      	mov	r5, r1
 8013d98:	b93c      	cbnz	r4, 8013daa <_Bfree+0x1a>
 8013d9a:	2010      	movs	r0, #16
 8013d9c:	f7ff ffbc 	bl	8013d18 <malloc>
 8013da0:	6270      	str	r0, [r6, #36]	; 0x24
 8013da2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013da6:	6004      	str	r4, [r0, #0]
 8013da8:	60c4      	str	r4, [r0, #12]
 8013daa:	b13d      	cbz	r5, 8013dbc <_Bfree+0x2c>
 8013dac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013dae:	686a      	ldr	r2, [r5, #4]
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013db6:	6029      	str	r1, [r5, #0]
 8013db8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}

08013dbe <__multadd>:
 8013dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc2:	690d      	ldr	r5, [r1, #16]
 8013dc4:	461f      	mov	r7, r3
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	460c      	mov	r4, r1
 8013dca:	f101 0c14 	add.w	ip, r1, #20
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f8dc 0000 	ldr.w	r0, [ip]
 8013dd4:	b281      	uxth	r1, r0
 8013dd6:	fb02 7101 	mla	r1, r2, r1, r7
 8013dda:	0c0f      	lsrs	r7, r1, #16
 8013ddc:	0c00      	lsrs	r0, r0, #16
 8013dde:	fb02 7000 	mla	r0, r2, r0, r7
 8013de2:	b289      	uxth	r1, r1
 8013de4:	3301      	adds	r3, #1
 8013de6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013dea:	429d      	cmp	r5, r3
 8013dec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013df0:	f84c 1b04 	str.w	r1, [ip], #4
 8013df4:	dcec      	bgt.n	8013dd0 <__multadd+0x12>
 8013df6:	b1d7      	cbz	r7, 8013e2e <__multadd+0x70>
 8013df8:	68a3      	ldr	r3, [r4, #8]
 8013dfa:	42ab      	cmp	r3, r5
 8013dfc:	dc12      	bgt.n	8013e24 <__multadd+0x66>
 8013dfe:	6861      	ldr	r1, [r4, #4]
 8013e00:	4630      	mov	r0, r6
 8013e02:	3101      	adds	r1, #1
 8013e04:	f7ff ff90 	bl	8013d28 <_Balloc>
 8013e08:	6922      	ldr	r2, [r4, #16]
 8013e0a:	3202      	adds	r2, #2
 8013e0c:	f104 010c 	add.w	r1, r4, #12
 8013e10:	4680      	mov	r8, r0
 8013e12:	0092      	lsls	r2, r2, #2
 8013e14:	300c      	adds	r0, #12
 8013e16:	f7fe f8eb 	bl	8011ff0 <memcpy>
 8013e1a:	4621      	mov	r1, r4
 8013e1c:	4630      	mov	r0, r6
 8013e1e:	f7ff ffb7 	bl	8013d90 <_Bfree>
 8013e22:	4644      	mov	r4, r8
 8013e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e28:	3501      	adds	r5, #1
 8013e2a:	615f      	str	r7, [r3, #20]
 8013e2c:	6125      	str	r5, [r4, #16]
 8013e2e:	4620      	mov	r0, r4
 8013e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e34 <__hi0bits>:
 8013e34:	0c02      	lsrs	r2, r0, #16
 8013e36:	0412      	lsls	r2, r2, #16
 8013e38:	4603      	mov	r3, r0
 8013e3a:	b9b2      	cbnz	r2, 8013e6a <__hi0bits+0x36>
 8013e3c:	0403      	lsls	r3, r0, #16
 8013e3e:	2010      	movs	r0, #16
 8013e40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013e44:	bf04      	itt	eq
 8013e46:	021b      	lsleq	r3, r3, #8
 8013e48:	3008      	addeq	r0, #8
 8013e4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013e4e:	bf04      	itt	eq
 8013e50:	011b      	lsleq	r3, r3, #4
 8013e52:	3004      	addeq	r0, #4
 8013e54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013e58:	bf04      	itt	eq
 8013e5a:	009b      	lsleq	r3, r3, #2
 8013e5c:	3002      	addeq	r0, #2
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	db06      	blt.n	8013e70 <__hi0bits+0x3c>
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	d503      	bpl.n	8013e6e <__hi0bits+0x3a>
 8013e66:	3001      	adds	r0, #1
 8013e68:	4770      	bx	lr
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	e7e8      	b.n	8013e40 <__hi0bits+0xc>
 8013e6e:	2020      	movs	r0, #32
 8013e70:	4770      	bx	lr

08013e72 <__lo0bits>:
 8013e72:	6803      	ldr	r3, [r0, #0]
 8013e74:	f013 0207 	ands.w	r2, r3, #7
 8013e78:	4601      	mov	r1, r0
 8013e7a:	d00b      	beq.n	8013e94 <__lo0bits+0x22>
 8013e7c:	07da      	lsls	r2, r3, #31
 8013e7e:	d423      	bmi.n	8013ec8 <__lo0bits+0x56>
 8013e80:	0798      	lsls	r0, r3, #30
 8013e82:	bf49      	itett	mi
 8013e84:	085b      	lsrmi	r3, r3, #1
 8013e86:	089b      	lsrpl	r3, r3, #2
 8013e88:	2001      	movmi	r0, #1
 8013e8a:	600b      	strmi	r3, [r1, #0]
 8013e8c:	bf5c      	itt	pl
 8013e8e:	600b      	strpl	r3, [r1, #0]
 8013e90:	2002      	movpl	r0, #2
 8013e92:	4770      	bx	lr
 8013e94:	b298      	uxth	r0, r3
 8013e96:	b9a8      	cbnz	r0, 8013ec4 <__lo0bits+0x52>
 8013e98:	0c1b      	lsrs	r3, r3, #16
 8013e9a:	2010      	movs	r0, #16
 8013e9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013ea0:	bf04      	itt	eq
 8013ea2:	0a1b      	lsreq	r3, r3, #8
 8013ea4:	3008      	addeq	r0, #8
 8013ea6:	071a      	lsls	r2, r3, #28
 8013ea8:	bf04      	itt	eq
 8013eaa:	091b      	lsreq	r3, r3, #4
 8013eac:	3004      	addeq	r0, #4
 8013eae:	079a      	lsls	r2, r3, #30
 8013eb0:	bf04      	itt	eq
 8013eb2:	089b      	lsreq	r3, r3, #2
 8013eb4:	3002      	addeq	r0, #2
 8013eb6:	07da      	lsls	r2, r3, #31
 8013eb8:	d402      	bmi.n	8013ec0 <__lo0bits+0x4e>
 8013eba:	085b      	lsrs	r3, r3, #1
 8013ebc:	d006      	beq.n	8013ecc <__lo0bits+0x5a>
 8013ebe:	3001      	adds	r0, #1
 8013ec0:	600b      	str	r3, [r1, #0]
 8013ec2:	4770      	bx	lr
 8013ec4:	4610      	mov	r0, r2
 8013ec6:	e7e9      	b.n	8013e9c <__lo0bits+0x2a>
 8013ec8:	2000      	movs	r0, #0
 8013eca:	4770      	bx	lr
 8013ecc:	2020      	movs	r0, #32
 8013ece:	4770      	bx	lr

08013ed0 <__i2b>:
 8013ed0:	b510      	push	{r4, lr}
 8013ed2:	460c      	mov	r4, r1
 8013ed4:	2101      	movs	r1, #1
 8013ed6:	f7ff ff27 	bl	8013d28 <_Balloc>
 8013eda:	2201      	movs	r2, #1
 8013edc:	6144      	str	r4, [r0, #20]
 8013ede:	6102      	str	r2, [r0, #16]
 8013ee0:	bd10      	pop	{r4, pc}

08013ee2 <__multiply>:
 8013ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee6:	4614      	mov	r4, r2
 8013ee8:	690a      	ldr	r2, [r1, #16]
 8013eea:	6923      	ldr	r3, [r4, #16]
 8013eec:	429a      	cmp	r2, r3
 8013eee:	bfb8      	it	lt
 8013ef0:	460b      	movlt	r3, r1
 8013ef2:	4688      	mov	r8, r1
 8013ef4:	bfbc      	itt	lt
 8013ef6:	46a0      	movlt	r8, r4
 8013ef8:	461c      	movlt	r4, r3
 8013efa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013efe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013f0a:	eb07 0609 	add.w	r6, r7, r9
 8013f0e:	42b3      	cmp	r3, r6
 8013f10:	bfb8      	it	lt
 8013f12:	3101      	addlt	r1, #1
 8013f14:	f7ff ff08 	bl	8013d28 <_Balloc>
 8013f18:	f100 0514 	add.w	r5, r0, #20
 8013f1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013f20:	462b      	mov	r3, r5
 8013f22:	2200      	movs	r2, #0
 8013f24:	4573      	cmp	r3, lr
 8013f26:	d316      	bcc.n	8013f56 <__multiply+0x74>
 8013f28:	f104 0214 	add.w	r2, r4, #20
 8013f2c:	f108 0114 	add.w	r1, r8, #20
 8013f30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013f34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013f38:	9300      	str	r3, [sp, #0]
 8013f3a:	9b00      	ldr	r3, [sp, #0]
 8013f3c:	9201      	str	r2, [sp, #4]
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d80c      	bhi.n	8013f5c <__multiply+0x7a>
 8013f42:	2e00      	cmp	r6, #0
 8013f44:	dd03      	ble.n	8013f4e <__multiply+0x6c>
 8013f46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d05d      	beq.n	801400a <__multiply+0x128>
 8013f4e:	6106      	str	r6, [r0, #16]
 8013f50:	b003      	add	sp, #12
 8013f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f56:	f843 2b04 	str.w	r2, [r3], #4
 8013f5a:	e7e3      	b.n	8013f24 <__multiply+0x42>
 8013f5c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013f60:	f1bb 0f00 	cmp.w	fp, #0
 8013f64:	d023      	beq.n	8013fae <__multiply+0xcc>
 8013f66:	4689      	mov	r9, r1
 8013f68:	46ac      	mov	ip, r5
 8013f6a:	f04f 0800 	mov.w	r8, #0
 8013f6e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013f72:	f8dc a000 	ldr.w	sl, [ip]
 8013f76:	b2a3      	uxth	r3, r4
 8013f78:	fa1f fa8a 	uxth.w	sl, sl
 8013f7c:	fb0b a303 	mla	r3, fp, r3, sl
 8013f80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013f84:	f8dc 4000 	ldr.w	r4, [ip]
 8013f88:	4443      	add	r3, r8
 8013f8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013f8e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013f92:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013f96:	46e2      	mov	sl, ip
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013f9e:	454f      	cmp	r7, r9
 8013fa0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013fa4:	f84a 3b04 	str.w	r3, [sl], #4
 8013fa8:	d82b      	bhi.n	8014002 <__multiply+0x120>
 8013faa:	f8cc 8004 	str.w	r8, [ip, #4]
 8013fae:	9b01      	ldr	r3, [sp, #4]
 8013fb0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013fb4:	3204      	adds	r2, #4
 8013fb6:	f1ba 0f00 	cmp.w	sl, #0
 8013fba:	d020      	beq.n	8013ffe <__multiply+0x11c>
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	4689      	mov	r9, r1
 8013fc0:	46a8      	mov	r8, r5
 8013fc2:	f04f 0b00 	mov.w	fp, #0
 8013fc6:	f8b9 c000 	ldrh.w	ip, [r9]
 8013fca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013fce:	fb0a 440c 	mla	r4, sl, ip, r4
 8013fd2:	445c      	add	r4, fp
 8013fd4:	46c4      	mov	ip, r8
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013fdc:	f84c 3b04 	str.w	r3, [ip], #4
 8013fe0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013fe4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013fe8:	0c1b      	lsrs	r3, r3, #16
 8013fea:	fb0a b303 	mla	r3, sl, r3, fp
 8013fee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ff2:	454f      	cmp	r7, r9
 8013ff4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013ff8:	d805      	bhi.n	8014006 <__multiply+0x124>
 8013ffa:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ffe:	3504      	adds	r5, #4
 8014000:	e79b      	b.n	8013f3a <__multiply+0x58>
 8014002:	46d4      	mov	ip, sl
 8014004:	e7b3      	b.n	8013f6e <__multiply+0x8c>
 8014006:	46e0      	mov	r8, ip
 8014008:	e7dd      	b.n	8013fc6 <__multiply+0xe4>
 801400a:	3e01      	subs	r6, #1
 801400c:	e799      	b.n	8013f42 <__multiply+0x60>
	...

08014010 <__pow5mult>:
 8014010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014014:	4615      	mov	r5, r2
 8014016:	f012 0203 	ands.w	r2, r2, #3
 801401a:	4606      	mov	r6, r0
 801401c:	460f      	mov	r7, r1
 801401e:	d007      	beq.n	8014030 <__pow5mult+0x20>
 8014020:	3a01      	subs	r2, #1
 8014022:	4c21      	ldr	r4, [pc, #132]	; (80140a8 <__pow5mult+0x98>)
 8014024:	2300      	movs	r3, #0
 8014026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801402a:	f7ff fec8 	bl	8013dbe <__multadd>
 801402e:	4607      	mov	r7, r0
 8014030:	10ad      	asrs	r5, r5, #2
 8014032:	d035      	beq.n	80140a0 <__pow5mult+0x90>
 8014034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014036:	b93c      	cbnz	r4, 8014048 <__pow5mult+0x38>
 8014038:	2010      	movs	r0, #16
 801403a:	f7ff fe6d 	bl	8013d18 <malloc>
 801403e:	6270      	str	r0, [r6, #36]	; 0x24
 8014040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014044:	6004      	str	r4, [r0, #0]
 8014046:	60c4      	str	r4, [r0, #12]
 8014048:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801404c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014050:	b94c      	cbnz	r4, 8014066 <__pow5mult+0x56>
 8014052:	f240 2171 	movw	r1, #625	; 0x271
 8014056:	4630      	mov	r0, r6
 8014058:	f7ff ff3a 	bl	8013ed0 <__i2b>
 801405c:	2300      	movs	r3, #0
 801405e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014062:	4604      	mov	r4, r0
 8014064:	6003      	str	r3, [r0, #0]
 8014066:	f04f 0800 	mov.w	r8, #0
 801406a:	07eb      	lsls	r3, r5, #31
 801406c:	d50a      	bpl.n	8014084 <__pow5mult+0x74>
 801406e:	4639      	mov	r1, r7
 8014070:	4622      	mov	r2, r4
 8014072:	4630      	mov	r0, r6
 8014074:	f7ff ff35 	bl	8013ee2 <__multiply>
 8014078:	4639      	mov	r1, r7
 801407a:	4681      	mov	r9, r0
 801407c:	4630      	mov	r0, r6
 801407e:	f7ff fe87 	bl	8013d90 <_Bfree>
 8014082:	464f      	mov	r7, r9
 8014084:	106d      	asrs	r5, r5, #1
 8014086:	d00b      	beq.n	80140a0 <__pow5mult+0x90>
 8014088:	6820      	ldr	r0, [r4, #0]
 801408a:	b938      	cbnz	r0, 801409c <__pow5mult+0x8c>
 801408c:	4622      	mov	r2, r4
 801408e:	4621      	mov	r1, r4
 8014090:	4630      	mov	r0, r6
 8014092:	f7ff ff26 	bl	8013ee2 <__multiply>
 8014096:	6020      	str	r0, [r4, #0]
 8014098:	f8c0 8000 	str.w	r8, [r0]
 801409c:	4604      	mov	r4, r0
 801409e:	e7e4      	b.n	801406a <__pow5mult+0x5a>
 80140a0:	4638      	mov	r0, r7
 80140a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140a6:	bf00      	nop
 80140a8:	08014c40 	.word	0x08014c40

080140ac <__lshift>:
 80140ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b0:	460c      	mov	r4, r1
 80140b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140b6:	6923      	ldr	r3, [r4, #16]
 80140b8:	6849      	ldr	r1, [r1, #4]
 80140ba:	eb0a 0903 	add.w	r9, sl, r3
 80140be:	68a3      	ldr	r3, [r4, #8]
 80140c0:	4607      	mov	r7, r0
 80140c2:	4616      	mov	r6, r2
 80140c4:	f109 0501 	add.w	r5, r9, #1
 80140c8:	42ab      	cmp	r3, r5
 80140ca:	db32      	blt.n	8014132 <__lshift+0x86>
 80140cc:	4638      	mov	r0, r7
 80140ce:	f7ff fe2b 	bl	8013d28 <_Balloc>
 80140d2:	2300      	movs	r3, #0
 80140d4:	4680      	mov	r8, r0
 80140d6:	f100 0114 	add.w	r1, r0, #20
 80140da:	461a      	mov	r2, r3
 80140dc:	4553      	cmp	r3, sl
 80140de:	db2b      	blt.n	8014138 <__lshift+0x8c>
 80140e0:	6920      	ldr	r0, [r4, #16]
 80140e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140e6:	f104 0314 	add.w	r3, r4, #20
 80140ea:	f016 021f 	ands.w	r2, r6, #31
 80140ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140f6:	d025      	beq.n	8014144 <__lshift+0x98>
 80140f8:	f1c2 0e20 	rsb	lr, r2, #32
 80140fc:	2000      	movs	r0, #0
 80140fe:	681e      	ldr	r6, [r3, #0]
 8014100:	468a      	mov	sl, r1
 8014102:	4096      	lsls	r6, r2
 8014104:	4330      	orrs	r0, r6
 8014106:	f84a 0b04 	str.w	r0, [sl], #4
 801410a:	f853 0b04 	ldr.w	r0, [r3], #4
 801410e:	459c      	cmp	ip, r3
 8014110:	fa20 f00e 	lsr.w	r0, r0, lr
 8014114:	d814      	bhi.n	8014140 <__lshift+0x94>
 8014116:	6048      	str	r0, [r1, #4]
 8014118:	b108      	cbz	r0, 801411e <__lshift+0x72>
 801411a:	f109 0502 	add.w	r5, r9, #2
 801411e:	3d01      	subs	r5, #1
 8014120:	4638      	mov	r0, r7
 8014122:	f8c8 5010 	str.w	r5, [r8, #16]
 8014126:	4621      	mov	r1, r4
 8014128:	f7ff fe32 	bl	8013d90 <_Bfree>
 801412c:	4640      	mov	r0, r8
 801412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014132:	3101      	adds	r1, #1
 8014134:	005b      	lsls	r3, r3, #1
 8014136:	e7c7      	b.n	80140c8 <__lshift+0x1c>
 8014138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801413c:	3301      	adds	r3, #1
 801413e:	e7cd      	b.n	80140dc <__lshift+0x30>
 8014140:	4651      	mov	r1, sl
 8014142:	e7dc      	b.n	80140fe <__lshift+0x52>
 8014144:	3904      	subs	r1, #4
 8014146:	f853 2b04 	ldr.w	r2, [r3], #4
 801414a:	f841 2f04 	str.w	r2, [r1, #4]!
 801414e:	459c      	cmp	ip, r3
 8014150:	d8f9      	bhi.n	8014146 <__lshift+0x9a>
 8014152:	e7e4      	b.n	801411e <__lshift+0x72>

08014154 <__mcmp>:
 8014154:	6903      	ldr	r3, [r0, #16]
 8014156:	690a      	ldr	r2, [r1, #16]
 8014158:	1a9b      	subs	r3, r3, r2
 801415a:	b530      	push	{r4, r5, lr}
 801415c:	d10c      	bne.n	8014178 <__mcmp+0x24>
 801415e:	0092      	lsls	r2, r2, #2
 8014160:	3014      	adds	r0, #20
 8014162:	3114      	adds	r1, #20
 8014164:	1884      	adds	r4, r0, r2
 8014166:	4411      	add	r1, r2
 8014168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801416c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014170:	4295      	cmp	r5, r2
 8014172:	d003      	beq.n	801417c <__mcmp+0x28>
 8014174:	d305      	bcc.n	8014182 <__mcmp+0x2e>
 8014176:	2301      	movs	r3, #1
 8014178:	4618      	mov	r0, r3
 801417a:	bd30      	pop	{r4, r5, pc}
 801417c:	42a0      	cmp	r0, r4
 801417e:	d3f3      	bcc.n	8014168 <__mcmp+0x14>
 8014180:	e7fa      	b.n	8014178 <__mcmp+0x24>
 8014182:	f04f 33ff 	mov.w	r3, #4294967295
 8014186:	e7f7      	b.n	8014178 <__mcmp+0x24>

08014188 <__mdiff>:
 8014188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801418c:	460d      	mov	r5, r1
 801418e:	4607      	mov	r7, r0
 8014190:	4611      	mov	r1, r2
 8014192:	4628      	mov	r0, r5
 8014194:	4614      	mov	r4, r2
 8014196:	f7ff ffdd 	bl	8014154 <__mcmp>
 801419a:	1e06      	subs	r6, r0, #0
 801419c:	d108      	bne.n	80141b0 <__mdiff+0x28>
 801419e:	4631      	mov	r1, r6
 80141a0:	4638      	mov	r0, r7
 80141a2:	f7ff fdc1 	bl	8013d28 <_Balloc>
 80141a6:	2301      	movs	r3, #1
 80141a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80141ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141b0:	bfa4      	itt	ge
 80141b2:	4623      	movge	r3, r4
 80141b4:	462c      	movge	r4, r5
 80141b6:	4638      	mov	r0, r7
 80141b8:	6861      	ldr	r1, [r4, #4]
 80141ba:	bfa6      	itte	ge
 80141bc:	461d      	movge	r5, r3
 80141be:	2600      	movge	r6, #0
 80141c0:	2601      	movlt	r6, #1
 80141c2:	f7ff fdb1 	bl	8013d28 <_Balloc>
 80141c6:	692b      	ldr	r3, [r5, #16]
 80141c8:	60c6      	str	r6, [r0, #12]
 80141ca:	6926      	ldr	r6, [r4, #16]
 80141cc:	f105 0914 	add.w	r9, r5, #20
 80141d0:	f104 0214 	add.w	r2, r4, #20
 80141d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80141d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80141dc:	f100 0514 	add.w	r5, r0, #20
 80141e0:	f04f 0e00 	mov.w	lr, #0
 80141e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80141e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80141ec:	fa1e f18a 	uxtah	r1, lr, sl
 80141f0:	b2a3      	uxth	r3, r4
 80141f2:	1ac9      	subs	r1, r1, r3
 80141f4:	0c23      	lsrs	r3, r4, #16
 80141f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80141fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80141fe:	b289      	uxth	r1, r1
 8014200:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014204:	45c8      	cmp	r8, r9
 8014206:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801420a:	4694      	mov	ip, r2
 801420c:	f845 3b04 	str.w	r3, [r5], #4
 8014210:	d8e8      	bhi.n	80141e4 <__mdiff+0x5c>
 8014212:	45bc      	cmp	ip, r7
 8014214:	d304      	bcc.n	8014220 <__mdiff+0x98>
 8014216:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801421a:	b183      	cbz	r3, 801423e <__mdiff+0xb6>
 801421c:	6106      	str	r6, [r0, #16]
 801421e:	e7c5      	b.n	80141ac <__mdiff+0x24>
 8014220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014224:	fa1e f381 	uxtah	r3, lr, r1
 8014228:	141a      	asrs	r2, r3, #16
 801422a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801422e:	b29b      	uxth	r3, r3
 8014230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014234:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014238:	f845 3b04 	str.w	r3, [r5], #4
 801423c:	e7e9      	b.n	8014212 <__mdiff+0x8a>
 801423e:	3e01      	subs	r6, #1
 8014240:	e7e9      	b.n	8014216 <__mdiff+0x8e>

08014242 <__d2b>:
 8014242:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014246:	460e      	mov	r6, r1
 8014248:	2101      	movs	r1, #1
 801424a:	ec59 8b10 	vmov	r8, r9, d0
 801424e:	4615      	mov	r5, r2
 8014250:	f7ff fd6a 	bl	8013d28 <_Balloc>
 8014254:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014258:	4607      	mov	r7, r0
 801425a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801425e:	bb34      	cbnz	r4, 80142ae <__d2b+0x6c>
 8014260:	9301      	str	r3, [sp, #4]
 8014262:	f1b8 0300 	subs.w	r3, r8, #0
 8014266:	d027      	beq.n	80142b8 <__d2b+0x76>
 8014268:	a802      	add	r0, sp, #8
 801426a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801426e:	f7ff fe00 	bl	8013e72 <__lo0bits>
 8014272:	9900      	ldr	r1, [sp, #0]
 8014274:	b1f0      	cbz	r0, 80142b4 <__d2b+0x72>
 8014276:	9a01      	ldr	r2, [sp, #4]
 8014278:	f1c0 0320 	rsb	r3, r0, #32
 801427c:	fa02 f303 	lsl.w	r3, r2, r3
 8014280:	430b      	orrs	r3, r1
 8014282:	40c2      	lsrs	r2, r0
 8014284:	617b      	str	r3, [r7, #20]
 8014286:	9201      	str	r2, [sp, #4]
 8014288:	9b01      	ldr	r3, [sp, #4]
 801428a:	61bb      	str	r3, [r7, #24]
 801428c:	2b00      	cmp	r3, #0
 801428e:	bf14      	ite	ne
 8014290:	2102      	movne	r1, #2
 8014292:	2101      	moveq	r1, #1
 8014294:	6139      	str	r1, [r7, #16]
 8014296:	b1c4      	cbz	r4, 80142ca <__d2b+0x88>
 8014298:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801429c:	4404      	add	r4, r0
 801429e:	6034      	str	r4, [r6, #0]
 80142a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80142a4:	6028      	str	r0, [r5, #0]
 80142a6:	4638      	mov	r0, r7
 80142a8:	b003      	add	sp, #12
 80142aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142b2:	e7d5      	b.n	8014260 <__d2b+0x1e>
 80142b4:	6179      	str	r1, [r7, #20]
 80142b6:	e7e7      	b.n	8014288 <__d2b+0x46>
 80142b8:	a801      	add	r0, sp, #4
 80142ba:	f7ff fdda 	bl	8013e72 <__lo0bits>
 80142be:	9b01      	ldr	r3, [sp, #4]
 80142c0:	617b      	str	r3, [r7, #20]
 80142c2:	2101      	movs	r1, #1
 80142c4:	6139      	str	r1, [r7, #16]
 80142c6:	3020      	adds	r0, #32
 80142c8:	e7e5      	b.n	8014296 <__d2b+0x54>
 80142ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80142ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80142d2:	6030      	str	r0, [r6, #0]
 80142d4:	6918      	ldr	r0, [r3, #16]
 80142d6:	f7ff fdad 	bl	8013e34 <__hi0bits>
 80142da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80142de:	e7e1      	b.n	80142a4 <__d2b+0x62>

080142e0 <_calloc_r>:
 80142e0:	b538      	push	{r3, r4, r5, lr}
 80142e2:	fb02 f401 	mul.w	r4, r2, r1
 80142e6:	4621      	mov	r1, r4
 80142e8:	f000 f856 	bl	8014398 <_malloc_r>
 80142ec:	4605      	mov	r5, r0
 80142ee:	b118      	cbz	r0, 80142f8 <_calloc_r+0x18>
 80142f0:	4622      	mov	r2, r4
 80142f2:	2100      	movs	r1, #0
 80142f4:	f7fd fe87 	bl	8012006 <memset>
 80142f8:	4628      	mov	r0, r5
 80142fa:	bd38      	pop	{r3, r4, r5, pc}

080142fc <_free_r>:
 80142fc:	b538      	push	{r3, r4, r5, lr}
 80142fe:	4605      	mov	r5, r0
 8014300:	2900      	cmp	r1, #0
 8014302:	d045      	beq.n	8014390 <_free_r+0x94>
 8014304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014308:	1f0c      	subs	r4, r1, #4
 801430a:	2b00      	cmp	r3, #0
 801430c:	bfb8      	it	lt
 801430e:	18e4      	addlt	r4, r4, r3
 8014310:	f000 fa98 	bl	8014844 <__malloc_lock>
 8014314:	4a1f      	ldr	r2, [pc, #124]	; (8014394 <_free_r+0x98>)
 8014316:	6813      	ldr	r3, [r2, #0]
 8014318:	4610      	mov	r0, r2
 801431a:	b933      	cbnz	r3, 801432a <_free_r+0x2e>
 801431c:	6063      	str	r3, [r4, #4]
 801431e:	6014      	str	r4, [r2, #0]
 8014320:	4628      	mov	r0, r5
 8014322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014326:	f000 ba8e 	b.w	8014846 <__malloc_unlock>
 801432a:	42a3      	cmp	r3, r4
 801432c:	d90c      	bls.n	8014348 <_free_r+0x4c>
 801432e:	6821      	ldr	r1, [r4, #0]
 8014330:	1862      	adds	r2, r4, r1
 8014332:	4293      	cmp	r3, r2
 8014334:	bf04      	itt	eq
 8014336:	681a      	ldreq	r2, [r3, #0]
 8014338:	685b      	ldreq	r3, [r3, #4]
 801433a:	6063      	str	r3, [r4, #4]
 801433c:	bf04      	itt	eq
 801433e:	1852      	addeq	r2, r2, r1
 8014340:	6022      	streq	r2, [r4, #0]
 8014342:	6004      	str	r4, [r0, #0]
 8014344:	e7ec      	b.n	8014320 <_free_r+0x24>
 8014346:	4613      	mov	r3, r2
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	b10a      	cbz	r2, 8014350 <_free_r+0x54>
 801434c:	42a2      	cmp	r2, r4
 801434e:	d9fa      	bls.n	8014346 <_free_r+0x4a>
 8014350:	6819      	ldr	r1, [r3, #0]
 8014352:	1858      	adds	r0, r3, r1
 8014354:	42a0      	cmp	r0, r4
 8014356:	d10b      	bne.n	8014370 <_free_r+0x74>
 8014358:	6820      	ldr	r0, [r4, #0]
 801435a:	4401      	add	r1, r0
 801435c:	1858      	adds	r0, r3, r1
 801435e:	4282      	cmp	r2, r0
 8014360:	6019      	str	r1, [r3, #0]
 8014362:	d1dd      	bne.n	8014320 <_free_r+0x24>
 8014364:	6810      	ldr	r0, [r2, #0]
 8014366:	6852      	ldr	r2, [r2, #4]
 8014368:	605a      	str	r2, [r3, #4]
 801436a:	4401      	add	r1, r0
 801436c:	6019      	str	r1, [r3, #0]
 801436e:	e7d7      	b.n	8014320 <_free_r+0x24>
 8014370:	d902      	bls.n	8014378 <_free_r+0x7c>
 8014372:	230c      	movs	r3, #12
 8014374:	602b      	str	r3, [r5, #0]
 8014376:	e7d3      	b.n	8014320 <_free_r+0x24>
 8014378:	6820      	ldr	r0, [r4, #0]
 801437a:	1821      	adds	r1, r4, r0
 801437c:	428a      	cmp	r2, r1
 801437e:	bf04      	itt	eq
 8014380:	6811      	ldreq	r1, [r2, #0]
 8014382:	6852      	ldreq	r2, [r2, #4]
 8014384:	6062      	str	r2, [r4, #4]
 8014386:	bf04      	itt	eq
 8014388:	1809      	addeq	r1, r1, r0
 801438a:	6021      	streq	r1, [r4, #0]
 801438c:	605c      	str	r4, [r3, #4]
 801438e:	e7c7      	b.n	8014320 <_free_r+0x24>
 8014390:	bd38      	pop	{r3, r4, r5, pc}
 8014392:	bf00      	nop
 8014394:	2000022c 	.word	0x2000022c

08014398 <_malloc_r>:
 8014398:	b570      	push	{r4, r5, r6, lr}
 801439a:	1ccd      	adds	r5, r1, #3
 801439c:	f025 0503 	bic.w	r5, r5, #3
 80143a0:	3508      	adds	r5, #8
 80143a2:	2d0c      	cmp	r5, #12
 80143a4:	bf38      	it	cc
 80143a6:	250c      	movcc	r5, #12
 80143a8:	2d00      	cmp	r5, #0
 80143aa:	4606      	mov	r6, r0
 80143ac:	db01      	blt.n	80143b2 <_malloc_r+0x1a>
 80143ae:	42a9      	cmp	r1, r5
 80143b0:	d903      	bls.n	80143ba <_malloc_r+0x22>
 80143b2:	230c      	movs	r3, #12
 80143b4:	6033      	str	r3, [r6, #0]
 80143b6:	2000      	movs	r0, #0
 80143b8:	bd70      	pop	{r4, r5, r6, pc}
 80143ba:	f000 fa43 	bl	8014844 <__malloc_lock>
 80143be:	4a21      	ldr	r2, [pc, #132]	; (8014444 <_malloc_r+0xac>)
 80143c0:	6814      	ldr	r4, [r2, #0]
 80143c2:	4621      	mov	r1, r4
 80143c4:	b991      	cbnz	r1, 80143ec <_malloc_r+0x54>
 80143c6:	4c20      	ldr	r4, [pc, #128]	; (8014448 <_malloc_r+0xb0>)
 80143c8:	6823      	ldr	r3, [r4, #0]
 80143ca:	b91b      	cbnz	r3, 80143d4 <_malloc_r+0x3c>
 80143cc:	4630      	mov	r0, r6
 80143ce:	f000 f97d 	bl	80146cc <_sbrk_r>
 80143d2:	6020      	str	r0, [r4, #0]
 80143d4:	4629      	mov	r1, r5
 80143d6:	4630      	mov	r0, r6
 80143d8:	f000 f978 	bl	80146cc <_sbrk_r>
 80143dc:	1c43      	adds	r3, r0, #1
 80143de:	d124      	bne.n	801442a <_malloc_r+0x92>
 80143e0:	230c      	movs	r3, #12
 80143e2:	6033      	str	r3, [r6, #0]
 80143e4:	4630      	mov	r0, r6
 80143e6:	f000 fa2e 	bl	8014846 <__malloc_unlock>
 80143ea:	e7e4      	b.n	80143b6 <_malloc_r+0x1e>
 80143ec:	680b      	ldr	r3, [r1, #0]
 80143ee:	1b5b      	subs	r3, r3, r5
 80143f0:	d418      	bmi.n	8014424 <_malloc_r+0x8c>
 80143f2:	2b0b      	cmp	r3, #11
 80143f4:	d90f      	bls.n	8014416 <_malloc_r+0x7e>
 80143f6:	600b      	str	r3, [r1, #0]
 80143f8:	50cd      	str	r5, [r1, r3]
 80143fa:	18cc      	adds	r4, r1, r3
 80143fc:	4630      	mov	r0, r6
 80143fe:	f000 fa22 	bl	8014846 <__malloc_unlock>
 8014402:	f104 000b 	add.w	r0, r4, #11
 8014406:	1d23      	adds	r3, r4, #4
 8014408:	f020 0007 	bic.w	r0, r0, #7
 801440c:	1ac3      	subs	r3, r0, r3
 801440e:	d0d3      	beq.n	80143b8 <_malloc_r+0x20>
 8014410:	425a      	negs	r2, r3
 8014412:	50e2      	str	r2, [r4, r3]
 8014414:	e7d0      	b.n	80143b8 <_malloc_r+0x20>
 8014416:	428c      	cmp	r4, r1
 8014418:	684b      	ldr	r3, [r1, #4]
 801441a:	bf16      	itet	ne
 801441c:	6063      	strne	r3, [r4, #4]
 801441e:	6013      	streq	r3, [r2, #0]
 8014420:	460c      	movne	r4, r1
 8014422:	e7eb      	b.n	80143fc <_malloc_r+0x64>
 8014424:	460c      	mov	r4, r1
 8014426:	6849      	ldr	r1, [r1, #4]
 8014428:	e7cc      	b.n	80143c4 <_malloc_r+0x2c>
 801442a:	1cc4      	adds	r4, r0, #3
 801442c:	f024 0403 	bic.w	r4, r4, #3
 8014430:	42a0      	cmp	r0, r4
 8014432:	d005      	beq.n	8014440 <_malloc_r+0xa8>
 8014434:	1a21      	subs	r1, r4, r0
 8014436:	4630      	mov	r0, r6
 8014438:	f000 f948 	bl	80146cc <_sbrk_r>
 801443c:	3001      	adds	r0, #1
 801443e:	d0cf      	beq.n	80143e0 <_malloc_r+0x48>
 8014440:	6025      	str	r5, [r4, #0]
 8014442:	e7db      	b.n	80143fc <_malloc_r+0x64>
 8014444:	2000022c 	.word	0x2000022c
 8014448:	20000230 	.word	0x20000230

0801444c <__sfputc_r>:
 801444c:	6893      	ldr	r3, [r2, #8]
 801444e:	3b01      	subs	r3, #1
 8014450:	2b00      	cmp	r3, #0
 8014452:	b410      	push	{r4}
 8014454:	6093      	str	r3, [r2, #8]
 8014456:	da08      	bge.n	801446a <__sfputc_r+0x1e>
 8014458:	6994      	ldr	r4, [r2, #24]
 801445a:	42a3      	cmp	r3, r4
 801445c:	db01      	blt.n	8014462 <__sfputc_r+0x16>
 801445e:	290a      	cmp	r1, #10
 8014460:	d103      	bne.n	801446a <__sfputc_r+0x1e>
 8014462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014466:	f7fe bb65 	b.w	8012b34 <__swbuf_r>
 801446a:	6813      	ldr	r3, [r2, #0]
 801446c:	1c58      	adds	r0, r3, #1
 801446e:	6010      	str	r0, [r2, #0]
 8014470:	7019      	strb	r1, [r3, #0]
 8014472:	4608      	mov	r0, r1
 8014474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014478:	4770      	bx	lr

0801447a <__sfputs_r>:
 801447a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447c:	4606      	mov	r6, r0
 801447e:	460f      	mov	r7, r1
 8014480:	4614      	mov	r4, r2
 8014482:	18d5      	adds	r5, r2, r3
 8014484:	42ac      	cmp	r4, r5
 8014486:	d101      	bne.n	801448c <__sfputs_r+0x12>
 8014488:	2000      	movs	r0, #0
 801448a:	e007      	b.n	801449c <__sfputs_r+0x22>
 801448c:	463a      	mov	r2, r7
 801448e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014492:	4630      	mov	r0, r6
 8014494:	f7ff ffda 	bl	801444c <__sfputc_r>
 8014498:	1c43      	adds	r3, r0, #1
 801449a:	d1f3      	bne.n	8014484 <__sfputs_r+0xa>
 801449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144a0 <_vfiprintf_r>:
 80144a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a4:	460c      	mov	r4, r1
 80144a6:	b09d      	sub	sp, #116	; 0x74
 80144a8:	4617      	mov	r7, r2
 80144aa:	461d      	mov	r5, r3
 80144ac:	4606      	mov	r6, r0
 80144ae:	b118      	cbz	r0, 80144b8 <_vfiprintf_r+0x18>
 80144b0:	6983      	ldr	r3, [r0, #24]
 80144b2:	b90b      	cbnz	r3, 80144b8 <_vfiprintf_r+0x18>
 80144b4:	f7ff fb34 	bl	8013b20 <__sinit>
 80144b8:	4b7c      	ldr	r3, [pc, #496]	; (80146ac <_vfiprintf_r+0x20c>)
 80144ba:	429c      	cmp	r4, r3
 80144bc:	d158      	bne.n	8014570 <_vfiprintf_r+0xd0>
 80144be:	6874      	ldr	r4, [r6, #4]
 80144c0:	89a3      	ldrh	r3, [r4, #12]
 80144c2:	0718      	lsls	r0, r3, #28
 80144c4:	d55e      	bpl.n	8014584 <_vfiprintf_r+0xe4>
 80144c6:	6923      	ldr	r3, [r4, #16]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d05b      	beq.n	8014584 <_vfiprintf_r+0xe4>
 80144cc:	2300      	movs	r3, #0
 80144ce:	9309      	str	r3, [sp, #36]	; 0x24
 80144d0:	2320      	movs	r3, #32
 80144d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144d6:	2330      	movs	r3, #48	; 0x30
 80144d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144dc:	9503      	str	r5, [sp, #12]
 80144de:	f04f 0b01 	mov.w	fp, #1
 80144e2:	46b8      	mov	r8, r7
 80144e4:	4645      	mov	r5, r8
 80144e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144ea:	b10b      	cbz	r3, 80144f0 <_vfiprintf_r+0x50>
 80144ec:	2b25      	cmp	r3, #37	; 0x25
 80144ee:	d154      	bne.n	801459a <_vfiprintf_r+0xfa>
 80144f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80144f4:	d00b      	beq.n	801450e <_vfiprintf_r+0x6e>
 80144f6:	4653      	mov	r3, sl
 80144f8:	463a      	mov	r2, r7
 80144fa:	4621      	mov	r1, r4
 80144fc:	4630      	mov	r0, r6
 80144fe:	f7ff ffbc 	bl	801447a <__sfputs_r>
 8014502:	3001      	adds	r0, #1
 8014504:	f000 80c2 	beq.w	801468c <_vfiprintf_r+0x1ec>
 8014508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801450a:	4453      	add	r3, sl
 801450c:	9309      	str	r3, [sp, #36]	; 0x24
 801450e:	f898 3000 	ldrb.w	r3, [r8]
 8014512:	2b00      	cmp	r3, #0
 8014514:	f000 80ba 	beq.w	801468c <_vfiprintf_r+0x1ec>
 8014518:	2300      	movs	r3, #0
 801451a:	f04f 32ff 	mov.w	r2, #4294967295
 801451e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014522:	9304      	str	r3, [sp, #16]
 8014524:	9307      	str	r3, [sp, #28]
 8014526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801452a:	931a      	str	r3, [sp, #104]	; 0x68
 801452c:	46a8      	mov	r8, r5
 801452e:	2205      	movs	r2, #5
 8014530:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014534:	485e      	ldr	r0, [pc, #376]	; (80146b0 <_vfiprintf_r+0x210>)
 8014536:	f7eb fe5b 	bl	80001f0 <memchr>
 801453a:	9b04      	ldr	r3, [sp, #16]
 801453c:	bb78      	cbnz	r0, 801459e <_vfiprintf_r+0xfe>
 801453e:	06d9      	lsls	r1, r3, #27
 8014540:	bf44      	itt	mi
 8014542:	2220      	movmi	r2, #32
 8014544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014548:	071a      	lsls	r2, r3, #28
 801454a:	bf44      	itt	mi
 801454c:	222b      	movmi	r2, #43	; 0x2b
 801454e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014552:	782a      	ldrb	r2, [r5, #0]
 8014554:	2a2a      	cmp	r2, #42	; 0x2a
 8014556:	d02a      	beq.n	80145ae <_vfiprintf_r+0x10e>
 8014558:	9a07      	ldr	r2, [sp, #28]
 801455a:	46a8      	mov	r8, r5
 801455c:	2000      	movs	r0, #0
 801455e:	250a      	movs	r5, #10
 8014560:	4641      	mov	r1, r8
 8014562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014566:	3b30      	subs	r3, #48	; 0x30
 8014568:	2b09      	cmp	r3, #9
 801456a:	d969      	bls.n	8014640 <_vfiprintf_r+0x1a0>
 801456c:	b360      	cbz	r0, 80145c8 <_vfiprintf_r+0x128>
 801456e:	e024      	b.n	80145ba <_vfiprintf_r+0x11a>
 8014570:	4b50      	ldr	r3, [pc, #320]	; (80146b4 <_vfiprintf_r+0x214>)
 8014572:	429c      	cmp	r4, r3
 8014574:	d101      	bne.n	801457a <_vfiprintf_r+0xda>
 8014576:	68b4      	ldr	r4, [r6, #8]
 8014578:	e7a2      	b.n	80144c0 <_vfiprintf_r+0x20>
 801457a:	4b4f      	ldr	r3, [pc, #316]	; (80146b8 <_vfiprintf_r+0x218>)
 801457c:	429c      	cmp	r4, r3
 801457e:	bf08      	it	eq
 8014580:	68f4      	ldreq	r4, [r6, #12]
 8014582:	e79d      	b.n	80144c0 <_vfiprintf_r+0x20>
 8014584:	4621      	mov	r1, r4
 8014586:	4630      	mov	r0, r6
 8014588:	f7fe fb26 	bl	8012bd8 <__swsetup_r>
 801458c:	2800      	cmp	r0, #0
 801458e:	d09d      	beq.n	80144cc <_vfiprintf_r+0x2c>
 8014590:	f04f 30ff 	mov.w	r0, #4294967295
 8014594:	b01d      	add	sp, #116	; 0x74
 8014596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459a:	46a8      	mov	r8, r5
 801459c:	e7a2      	b.n	80144e4 <_vfiprintf_r+0x44>
 801459e:	4a44      	ldr	r2, [pc, #272]	; (80146b0 <_vfiprintf_r+0x210>)
 80145a0:	1a80      	subs	r0, r0, r2
 80145a2:	fa0b f000 	lsl.w	r0, fp, r0
 80145a6:	4318      	orrs	r0, r3
 80145a8:	9004      	str	r0, [sp, #16]
 80145aa:	4645      	mov	r5, r8
 80145ac:	e7be      	b.n	801452c <_vfiprintf_r+0x8c>
 80145ae:	9a03      	ldr	r2, [sp, #12]
 80145b0:	1d11      	adds	r1, r2, #4
 80145b2:	6812      	ldr	r2, [r2, #0]
 80145b4:	9103      	str	r1, [sp, #12]
 80145b6:	2a00      	cmp	r2, #0
 80145b8:	db01      	blt.n	80145be <_vfiprintf_r+0x11e>
 80145ba:	9207      	str	r2, [sp, #28]
 80145bc:	e004      	b.n	80145c8 <_vfiprintf_r+0x128>
 80145be:	4252      	negs	r2, r2
 80145c0:	f043 0302 	orr.w	r3, r3, #2
 80145c4:	9207      	str	r2, [sp, #28]
 80145c6:	9304      	str	r3, [sp, #16]
 80145c8:	f898 3000 	ldrb.w	r3, [r8]
 80145cc:	2b2e      	cmp	r3, #46	; 0x2e
 80145ce:	d10e      	bne.n	80145ee <_vfiprintf_r+0x14e>
 80145d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80145d4:	2b2a      	cmp	r3, #42	; 0x2a
 80145d6:	d138      	bne.n	801464a <_vfiprintf_r+0x1aa>
 80145d8:	9b03      	ldr	r3, [sp, #12]
 80145da:	1d1a      	adds	r2, r3, #4
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	9203      	str	r2, [sp, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	bfb8      	it	lt
 80145e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80145e8:	f108 0802 	add.w	r8, r8, #2
 80145ec:	9305      	str	r3, [sp, #20]
 80145ee:	4d33      	ldr	r5, [pc, #204]	; (80146bc <_vfiprintf_r+0x21c>)
 80145f0:	f898 1000 	ldrb.w	r1, [r8]
 80145f4:	2203      	movs	r2, #3
 80145f6:	4628      	mov	r0, r5
 80145f8:	f7eb fdfa 	bl	80001f0 <memchr>
 80145fc:	b140      	cbz	r0, 8014610 <_vfiprintf_r+0x170>
 80145fe:	2340      	movs	r3, #64	; 0x40
 8014600:	1b40      	subs	r0, r0, r5
 8014602:	fa03 f000 	lsl.w	r0, r3, r0
 8014606:	9b04      	ldr	r3, [sp, #16]
 8014608:	4303      	orrs	r3, r0
 801460a:	f108 0801 	add.w	r8, r8, #1
 801460e:	9304      	str	r3, [sp, #16]
 8014610:	f898 1000 	ldrb.w	r1, [r8]
 8014614:	482a      	ldr	r0, [pc, #168]	; (80146c0 <_vfiprintf_r+0x220>)
 8014616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801461a:	2206      	movs	r2, #6
 801461c:	f108 0701 	add.w	r7, r8, #1
 8014620:	f7eb fde6 	bl	80001f0 <memchr>
 8014624:	2800      	cmp	r0, #0
 8014626:	d037      	beq.n	8014698 <_vfiprintf_r+0x1f8>
 8014628:	4b26      	ldr	r3, [pc, #152]	; (80146c4 <_vfiprintf_r+0x224>)
 801462a:	bb1b      	cbnz	r3, 8014674 <_vfiprintf_r+0x1d4>
 801462c:	9b03      	ldr	r3, [sp, #12]
 801462e:	3307      	adds	r3, #7
 8014630:	f023 0307 	bic.w	r3, r3, #7
 8014634:	3308      	adds	r3, #8
 8014636:	9303      	str	r3, [sp, #12]
 8014638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801463a:	444b      	add	r3, r9
 801463c:	9309      	str	r3, [sp, #36]	; 0x24
 801463e:	e750      	b.n	80144e2 <_vfiprintf_r+0x42>
 8014640:	fb05 3202 	mla	r2, r5, r2, r3
 8014644:	2001      	movs	r0, #1
 8014646:	4688      	mov	r8, r1
 8014648:	e78a      	b.n	8014560 <_vfiprintf_r+0xc0>
 801464a:	2300      	movs	r3, #0
 801464c:	f108 0801 	add.w	r8, r8, #1
 8014650:	9305      	str	r3, [sp, #20]
 8014652:	4619      	mov	r1, r3
 8014654:	250a      	movs	r5, #10
 8014656:	4640      	mov	r0, r8
 8014658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801465c:	3a30      	subs	r2, #48	; 0x30
 801465e:	2a09      	cmp	r2, #9
 8014660:	d903      	bls.n	801466a <_vfiprintf_r+0x1ca>
 8014662:	2b00      	cmp	r3, #0
 8014664:	d0c3      	beq.n	80145ee <_vfiprintf_r+0x14e>
 8014666:	9105      	str	r1, [sp, #20]
 8014668:	e7c1      	b.n	80145ee <_vfiprintf_r+0x14e>
 801466a:	fb05 2101 	mla	r1, r5, r1, r2
 801466e:	2301      	movs	r3, #1
 8014670:	4680      	mov	r8, r0
 8014672:	e7f0      	b.n	8014656 <_vfiprintf_r+0x1b6>
 8014674:	ab03      	add	r3, sp, #12
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	4622      	mov	r2, r4
 801467a:	4b13      	ldr	r3, [pc, #76]	; (80146c8 <_vfiprintf_r+0x228>)
 801467c:	a904      	add	r1, sp, #16
 801467e:	4630      	mov	r0, r6
 8014680:	f7fd fd5e 	bl	8012140 <_printf_float>
 8014684:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014688:	4681      	mov	r9, r0
 801468a:	d1d5      	bne.n	8014638 <_vfiprintf_r+0x198>
 801468c:	89a3      	ldrh	r3, [r4, #12]
 801468e:	065b      	lsls	r3, r3, #25
 8014690:	f53f af7e 	bmi.w	8014590 <_vfiprintf_r+0xf0>
 8014694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014696:	e77d      	b.n	8014594 <_vfiprintf_r+0xf4>
 8014698:	ab03      	add	r3, sp, #12
 801469a:	9300      	str	r3, [sp, #0]
 801469c:	4622      	mov	r2, r4
 801469e:	4b0a      	ldr	r3, [pc, #40]	; (80146c8 <_vfiprintf_r+0x228>)
 80146a0:	a904      	add	r1, sp, #16
 80146a2:	4630      	mov	r0, r6
 80146a4:	f7fe f802 	bl	80126ac <_printf_i>
 80146a8:	e7ec      	b.n	8014684 <_vfiprintf_r+0x1e4>
 80146aa:	bf00      	nop
 80146ac:	08014b0c 	.word	0x08014b0c
 80146b0:	08014c4c 	.word	0x08014c4c
 80146b4:	08014b2c 	.word	0x08014b2c
 80146b8:	08014aec 	.word	0x08014aec
 80146bc:	08014c52 	.word	0x08014c52
 80146c0:	08014c56 	.word	0x08014c56
 80146c4:	08012141 	.word	0x08012141
 80146c8:	0801447b 	.word	0x0801447b

080146cc <_sbrk_r>:
 80146cc:	b538      	push	{r3, r4, r5, lr}
 80146ce:	4c06      	ldr	r4, [pc, #24]	; (80146e8 <_sbrk_r+0x1c>)
 80146d0:	2300      	movs	r3, #0
 80146d2:	4605      	mov	r5, r0
 80146d4:	4608      	mov	r0, r1
 80146d6:	6023      	str	r3, [r4, #0]
 80146d8:	f7f8 fdc2 	bl	800d260 <_sbrk>
 80146dc:	1c43      	adds	r3, r0, #1
 80146de:	d102      	bne.n	80146e6 <_sbrk_r+0x1a>
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	b103      	cbz	r3, 80146e6 <_sbrk_r+0x1a>
 80146e4:	602b      	str	r3, [r5, #0]
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	20012678 	.word	0x20012678

080146ec <__sread>:
 80146ec:	b510      	push	{r4, lr}
 80146ee:	460c      	mov	r4, r1
 80146f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f4:	f000 f8a8 	bl	8014848 <_read_r>
 80146f8:	2800      	cmp	r0, #0
 80146fa:	bfab      	itete	ge
 80146fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014700:	181b      	addge	r3, r3, r0
 8014702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014706:	bfac      	ite	ge
 8014708:	6563      	strge	r3, [r4, #84]	; 0x54
 801470a:	81a3      	strhlt	r3, [r4, #12]
 801470c:	bd10      	pop	{r4, pc}

0801470e <__swrite>:
 801470e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014712:	461f      	mov	r7, r3
 8014714:	898b      	ldrh	r3, [r1, #12]
 8014716:	05db      	lsls	r3, r3, #23
 8014718:	4605      	mov	r5, r0
 801471a:	460c      	mov	r4, r1
 801471c:	4616      	mov	r6, r2
 801471e:	d505      	bpl.n	801472c <__swrite+0x1e>
 8014720:	2302      	movs	r3, #2
 8014722:	2200      	movs	r2, #0
 8014724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014728:	f000 f868 	bl	80147fc <_lseek_r>
 801472c:	89a3      	ldrh	r3, [r4, #12]
 801472e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014736:	81a3      	strh	r3, [r4, #12]
 8014738:	4632      	mov	r2, r6
 801473a:	463b      	mov	r3, r7
 801473c:	4628      	mov	r0, r5
 801473e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014742:	f000 b817 	b.w	8014774 <_write_r>

08014746 <__sseek>:
 8014746:	b510      	push	{r4, lr}
 8014748:	460c      	mov	r4, r1
 801474a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801474e:	f000 f855 	bl	80147fc <_lseek_r>
 8014752:	1c43      	adds	r3, r0, #1
 8014754:	89a3      	ldrh	r3, [r4, #12]
 8014756:	bf15      	itete	ne
 8014758:	6560      	strne	r0, [r4, #84]	; 0x54
 801475a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801475e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014762:	81a3      	strheq	r3, [r4, #12]
 8014764:	bf18      	it	ne
 8014766:	81a3      	strhne	r3, [r4, #12]
 8014768:	bd10      	pop	{r4, pc}

0801476a <__sclose>:
 801476a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801476e:	f000 b813 	b.w	8014798 <_close_r>
	...

08014774 <_write_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4c07      	ldr	r4, [pc, #28]	; (8014794 <_write_r+0x20>)
 8014778:	4605      	mov	r5, r0
 801477a:	4608      	mov	r0, r1
 801477c:	4611      	mov	r1, r2
 801477e:	2200      	movs	r2, #0
 8014780:	6022      	str	r2, [r4, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	f7ee f8f8 	bl	8002978 <_write>
 8014788:	1c43      	adds	r3, r0, #1
 801478a:	d102      	bne.n	8014792 <_write_r+0x1e>
 801478c:	6823      	ldr	r3, [r4, #0]
 801478e:	b103      	cbz	r3, 8014792 <_write_r+0x1e>
 8014790:	602b      	str	r3, [r5, #0]
 8014792:	bd38      	pop	{r3, r4, r5, pc}
 8014794:	20012678 	.word	0x20012678

08014798 <_close_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4c06      	ldr	r4, [pc, #24]	; (80147b4 <_close_r+0x1c>)
 801479c:	2300      	movs	r3, #0
 801479e:	4605      	mov	r5, r0
 80147a0:	4608      	mov	r0, r1
 80147a2:	6023      	str	r3, [r4, #0]
 80147a4:	f7f8 fd27 	bl	800d1f6 <_close>
 80147a8:	1c43      	adds	r3, r0, #1
 80147aa:	d102      	bne.n	80147b2 <_close_r+0x1a>
 80147ac:	6823      	ldr	r3, [r4, #0]
 80147ae:	b103      	cbz	r3, 80147b2 <_close_r+0x1a>
 80147b0:	602b      	str	r3, [r5, #0]
 80147b2:	bd38      	pop	{r3, r4, r5, pc}
 80147b4:	20012678 	.word	0x20012678

080147b8 <_fstat_r>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4c07      	ldr	r4, [pc, #28]	; (80147d8 <_fstat_r+0x20>)
 80147bc:	2300      	movs	r3, #0
 80147be:	4605      	mov	r5, r0
 80147c0:	4608      	mov	r0, r1
 80147c2:	4611      	mov	r1, r2
 80147c4:	6023      	str	r3, [r4, #0]
 80147c6:	f7f8 fd22 	bl	800d20e <_fstat>
 80147ca:	1c43      	adds	r3, r0, #1
 80147cc:	d102      	bne.n	80147d4 <_fstat_r+0x1c>
 80147ce:	6823      	ldr	r3, [r4, #0]
 80147d0:	b103      	cbz	r3, 80147d4 <_fstat_r+0x1c>
 80147d2:	602b      	str	r3, [r5, #0]
 80147d4:	bd38      	pop	{r3, r4, r5, pc}
 80147d6:	bf00      	nop
 80147d8:	20012678 	.word	0x20012678

080147dc <_isatty_r>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	4c06      	ldr	r4, [pc, #24]	; (80147f8 <_isatty_r+0x1c>)
 80147e0:	2300      	movs	r3, #0
 80147e2:	4605      	mov	r5, r0
 80147e4:	4608      	mov	r0, r1
 80147e6:	6023      	str	r3, [r4, #0]
 80147e8:	f7f8 fd21 	bl	800d22e <_isatty>
 80147ec:	1c43      	adds	r3, r0, #1
 80147ee:	d102      	bne.n	80147f6 <_isatty_r+0x1a>
 80147f0:	6823      	ldr	r3, [r4, #0]
 80147f2:	b103      	cbz	r3, 80147f6 <_isatty_r+0x1a>
 80147f4:	602b      	str	r3, [r5, #0]
 80147f6:	bd38      	pop	{r3, r4, r5, pc}
 80147f8:	20012678 	.word	0x20012678

080147fc <_lseek_r>:
 80147fc:	b538      	push	{r3, r4, r5, lr}
 80147fe:	4c07      	ldr	r4, [pc, #28]	; (801481c <_lseek_r+0x20>)
 8014800:	4605      	mov	r5, r0
 8014802:	4608      	mov	r0, r1
 8014804:	4611      	mov	r1, r2
 8014806:	2200      	movs	r2, #0
 8014808:	6022      	str	r2, [r4, #0]
 801480a:	461a      	mov	r2, r3
 801480c:	f7f8 fd1a 	bl	800d244 <_lseek>
 8014810:	1c43      	adds	r3, r0, #1
 8014812:	d102      	bne.n	801481a <_lseek_r+0x1e>
 8014814:	6823      	ldr	r3, [r4, #0]
 8014816:	b103      	cbz	r3, 801481a <_lseek_r+0x1e>
 8014818:	602b      	str	r3, [r5, #0]
 801481a:	bd38      	pop	{r3, r4, r5, pc}
 801481c:	20012678 	.word	0x20012678

08014820 <__ascii_mbtowc>:
 8014820:	b082      	sub	sp, #8
 8014822:	b901      	cbnz	r1, 8014826 <__ascii_mbtowc+0x6>
 8014824:	a901      	add	r1, sp, #4
 8014826:	b142      	cbz	r2, 801483a <__ascii_mbtowc+0x1a>
 8014828:	b14b      	cbz	r3, 801483e <__ascii_mbtowc+0x1e>
 801482a:	7813      	ldrb	r3, [r2, #0]
 801482c:	600b      	str	r3, [r1, #0]
 801482e:	7812      	ldrb	r2, [r2, #0]
 8014830:	1c10      	adds	r0, r2, #0
 8014832:	bf18      	it	ne
 8014834:	2001      	movne	r0, #1
 8014836:	b002      	add	sp, #8
 8014838:	4770      	bx	lr
 801483a:	4610      	mov	r0, r2
 801483c:	e7fb      	b.n	8014836 <__ascii_mbtowc+0x16>
 801483e:	f06f 0001 	mvn.w	r0, #1
 8014842:	e7f8      	b.n	8014836 <__ascii_mbtowc+0x16>

08014844 <__malloc_lock>:
 8014844:	4770      	bx	lr

08014846 <__malloc_unlock>:
 8014846:	4770      	bx	lr

08014848 <_read_r>:
 8014848:	b538      	push	{r3, r4, r5, lr}
 801484a:	4c07      	ldr	r4, [pc, #28]	; (8014868 <_read_r+0x20>)
 801484c:	4605      	mov	r5, r0
 801484e:	4608      	mov	r0, r1
 8014850:	4611      	mov	r1, r2
 8014852:	2200      	movs	r2, #0
 8014854:	6022      	str	r2, [r4, #0]
 8014856:	461a      	mov	r2, r3
 8014858:	f7f8 fcb0 	bl	800d1bc <_read>
 801485c:	1c43      	adds	r3, r0, #1
 801485e:	d102      	bne.n	8014866 <_read_r+0x1e>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	b103      	cbz	r3, 8014866 <_read_r+0x1e>
 8014864:	602b      	str	r3, [r5, #0]
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	20012678 	.word	0x20012678

0801486c <__ascii_wctomb>:
 801486c:	b149      	cbz	r1, 8014882 <__ascii_wctomb+0x16>
 801486e:	2aff      	cmp	r2, #255	; 0xff
 8014870:	bf85      	ittet	hi
 8014872:	238a      	movhi	r3, #138	; 0x8a
 8014874:	6003      	strhi	r3, [r0, #0]
 8014876:	700a      	strbls	r2, [r1, #0]
 8014878:	f04f 30ff 	movhi.w	r0, #4294967295
 801487c:	bf98      	it	ls
 801487e:	2001      	movls	r0, #1
 8014880:	4770      	bx	lr
 8014882:	4608      	mov	r0, r1
 8014884:	4770      	bx	lr
	...

08014888 <_init>:
 8014888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488a:	bf00      	nop
 801488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801488e:	bc08      	pop	{r3}
 8014890:	469e      	mov	lr, r3
 8014892:	4770      	bx	lr

08014894 <_fini>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	bf00      	nop
 8014898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489a:	bc08      	pop	{r3}
 801489c:	469e      	mov	lr, r3
 801489e:	4770      	bx	lr
